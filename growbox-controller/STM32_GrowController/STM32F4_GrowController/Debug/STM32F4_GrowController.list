
STM32F4_GrowController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013994  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000303c  08013b24  08013b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b60  08016b60  0001808c  2**0
                  CONTENTS
  4 .ARM          00000008  08016b60  08016b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b68  08016b68  0001808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b68  08016b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016b6c  08016b6c  00017b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08016b70  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001808c  2**0
                  CONTENTS
 10 .bss          00008b0c  2000008c  2000008c  0001808c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008b98  20008b98  0001808c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001808c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027dac  00000000  00000000  000180bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000711d  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  00046f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018c8  00000000  00000000  00048ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031b90  00000000  00000000  0004a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000366cb  00000000  00000000  0007c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb780  00000000  00000000  000b29c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019e143  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008750  00000000  00000000  0019e188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  001a68d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013b0c 	.word	0x08013b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08013b0c 	.word	0x08013b0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000574:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000576:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <MX_CAN1_Init+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800057a:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <MX_CAN1_Init+0x64>)
 800057c:	2206      	movs	r2, #6
 800057e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000580:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000586:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <MX_CAN1_Init+0x64>)
 800058e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000592:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000596:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800059a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059c:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <MX_CAN1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005c2:	f001 f8d5 	bl	8001770 <HAL_CAN_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005cc:	f000 fb2e 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000a8 	.word	0x200000a8
 80005d8:	40006400 	.word	0x40006400

080005dc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_CAN2_Init+0x64>)
 80005e2:	4a18      	ldr	r2, [pc, #96]	@ (8000644 <MX_CAN2_Init+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80005e6:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <MX_CAN2_Init+0x64>)
 80005e8:	2206      	movs	r2, #6
 80005ea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_CAN2_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_CAN2_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_CAN2_Init+0x64>)
 80005fa:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80005fe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_CAN2_Init+0x64>)
 8000602:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000606:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <MX_CAN2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_CAN2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_CAN2_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_CAN2_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_CAN2_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_CAN2_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	@ (8000640 <MX_CAN2_Init+0x64>)
 800062e:	f001 f89f 	bl	8001770 <HAL_CAN_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 faf8 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000d0 	.word	0x200000d0
 8000644:	40006800 	.word	0x40006800

08000648 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	@ 0x30
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a62      	ldr	r2, [pc, #392]	@ (80007f0 <HAL_CAN_MspInit+0x1a8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d155      	bne.n	8000716 <HAL_CAN_MspInit+0xce>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800066a:	4b62      	ldr	r3, [pc, #392]	@ (80007f4 <HAL_CAN_MspInit+0x1ac>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a60      	ldr	r2, [pc, #384]	@ (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000672:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000674:	4b5f      	ldr	r3, [pc, #380]	@ (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10d      	bne.n	8000698 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	4b5d      	ldr	r3, [pc, #372]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a5c      	ldr	r2, [pc, #368]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b5a      	ldr	r3, [pc, #360]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	4b56      	ldr	r3, [pc, #344]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	4a55      	ldr	r2, [pc, #340]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a8:	4b53      	ldr	r3, [pc, #332]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006b4:	2303      	movs	r3, #3
 80006b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006c4:	2309      	movs	r3, #9
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	484b      	ldr	r0, [pc, #300]	@ (80007fc <HAL_CAN_MspInit+0x1b4>)
 80006d0:	f002 ff38 	bl	8003544 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	2013      	movs	r0, #19
 80006da:	f001 fc58 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006de:	2013      	movs	r0, #19
 80006e0:	f001 fc71 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2014      	movs	r0, #20
 80006ea:	f001 fc50 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006ee:	2014      	movs	r0, #20
 80006f0:	f001 fc69 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2015      	movs	r0, #21
 80006fa:	f001 fc48 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006fe:	2015      	movs	r0, #21
 8000700:	f001 fc61 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2016      	movs	r0, #22
 800070a:	f001 fc40 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800070e:	2016      	movs	r0, #22
 8000710:	f001 fc59 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000714:	e067      	b.n	80007e6 <HAL_CAN_MspInit+0x19e>
  else if(canHandle->Instance==CAN2)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a39      	ldr	r2, [pc, #228]	@ (8000800 <HAL_CAN_MspInit+0x1b8>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d162      	bne.n	80007e6 <HAL_CAN_MspInit+0x19e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	4b34      	ldr	r3, [pc, #208]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a33      	ldr	r2, [pc, #204]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800072a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b31      	ldr	r3, [pc, #196]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800073c:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <HAL_CAN_MspInit+0x1ac>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a2c      	ldr	r2, [pc, #176]	@ (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000744:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000746:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d10d      	bne.n	800076a <HAL_CAN_MspInit+0x122>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	4a28      	ldr	r2, [pc, #160]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000758:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800075c:	6413      	str	r3, [r2, #64]	@ 0x40
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000786:	2360      	movs	r3, #96	@ 0x60
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000796:	2309      	movs	r3, #9
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4818      	ldr	r0, [pc, #96]	@ (8000804 <HAL_CAN_MspInit+0x1bc>)
 80007a2:	f002 fecf 	bl	8003544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	203f      	movs	r0, #63	@ 0x3f
 80007ac:	f001 fbef 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80007b0:	203f      	movs	r0, #63	@ 0x3f
 80007b2:	f001 fc08 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2040      	movs	r0, #64	@ 0x40
 80007bc:	f001 fbe7 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007c0:	2040      	movs	r0, #64	@ 0x40
 80007c2:	f001 fc00 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2041      	movs	r0, #65	@ 0x41
 80007cc:	f001 fbdf 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007d0:	2041      	movs	r0, #65	@ 0x41
 80007d2:	f001 fbf8 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2042      	movs	r0, #66	@ 0x42
 80007dc:	f001 fbd7 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80007e0:	2042      	movs	r0, #66	@ 0x42
 80007e2:	f001 fbf0 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	@ 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40006400 	.word	0x40006400
 80007f4:	200000f8 	.word	0x200000f8
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	40006800 	.word	0x40006800
 8000804:	40020400 	.word	0x40020400

08000808 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_CRC_Init+0x20>)
 800080e:	4a07      	ldr	r2, [pc, #28]	@ (800082c <MX_CRC_Init+0x24>)
 8000810:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_CRC_Init+0x20>)
 8000814:	f001 fbf1 	bl	8001ffa <HAL_CRC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800081e:	f000 fa05 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000fc 	.word	0x200000fc
 800082c:	40023000 	.word	0x40023000

08000830 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <HAL_CRC_MspInit+0x3c>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d10d      	bne.n	800085e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <HAL_CRC_MspInit+0x40>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <HAL_CRC_MspInit+0x40>)
 800084c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <HAL_CRC_MspInit+0x40>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023000 	.word	0x40023000
 8000870:	40023800 	.word	0x40023800

08000874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	@ 0x30
 8000878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	4b61      	ldr	r3, [pc, #388]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a60      	ldr	r2, [pc, #384]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a59      	ldr	r2, [pc, #356]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b57      	ldr	r3, [pc, #348]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a52      	ldr	r2, [pc, #328]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b50      	ldr	r3, [pc, #320]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a4b      	ldr	r2, [pc, #300]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b45      	ldr	r3, [pc, #276]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a44      	ldr	r2, [pc, #272]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b42      	ldr	r3, [pc, #264]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b3b      	ldr	r3, [pc, #236]	@ (8000a14 <MX_GPIO_Init+0x1a0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 8000932:	2201      	movs	r2, #1
 8000934:	f24e 1108 	movw	r1, #57608	@ 0xe108
 8000938:	4837      	ldr	r0, [pc, #220]	@ (8000a18 <MX_GPIO_Init+0x1a4>)
 800093a:	f002 ff9f 	bl	800387c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	4835      	ldr	r0, [pc, #212]	@ (8000a18 <MX_GPIO_Init+0x1a4>)
 8000944:	f002 ff9a 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_RX__GPIO_Port, RS485_TX_RX__Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2180      	movs	r1, #128	@ 0x80
 800094c:	4833      	ldr	r0, [pc, #204]	@ (8000a1c <MX_GPIO_Init+0x1a8>)
 800094e:	f002 ff95 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DS18B20_Pin|P4_GPIO_Pin|P4_GPIOE5_Pin|P4_GPIOE6_Pin
 8000952:	f641 6377 	movw	r3, #7799	@ 0x1e77
 8000956:	61fb      	str	r3, [r7, #28]
                          |NRF_IRQ_Pin|SW1_Pin|SW2_Pin|SW3_Pin
                          |P4_GPIOE0_Pin|P4_GPIOE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	482c      	ldr	r0, [pc, #176]	@ (8000a18 <MX_GPIO_Init+0x1a4>)
 8000968:	f002 fdec 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|NRF_CE_Pin|SPI2_NRF_CS_Pin|LED1_Pin
 800096c:	f24e 1388 	movw	r3, #57736	@ 0xe188
 8000970:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x1a4>)
 8000986:	f002 fddd 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = P4_GPIOC13_Pin|P4_GPIOC0_Pin|P5_GPIOC6_Pin|P5_GPIOC7_Pin;
 800098a:	f242 03c1 	movw	r3, #8385	@ 0x20c1
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4820      	ldr	r0, [pc, #128]	@ (8000a20 <MX_GPIO_Init+0x1ac>)
 80009a0:	f002 fdd0 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = P4_GPIOA0_Pin|P4_GPIOA3_Pin|P4_GPIOA4_Pin|P4_GPIOA5_Pin
 80009a4:	f240 1379 	movw	r3, #377	@ 0x179
 80009a8:	61fb      	str	r3, [r7, #28]
                          |P4_GPIOA6_Pin|P5_GPIOA8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481a      	ldr	r0, [pc, #104]	@ (8000a24 <MX_GPIO_Init+0x1b0>)
 80009ba:	f002 fdc3 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = P5_GPIO_Pin|P5_GPIOB1_Pin|BOOT1_Pin|P4_GPIOB7_Pin;
 80009be:	2387      	movs	r3, #135	@ 0x87
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4815      	ldr	r0, [pc, #84]	@ (8000a28 <MX_GPIO_Init+0x1b4>)
 80009d2:	f002 fdb7 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = P5_GPIOD8_Pin|P5_GPIOD9_Pin|P5_GPIOD10_Pin|P5_GPIOD11_Pin
 80009d6:	f64f 7318 	movw	r3, #65304	@ 0xff18
 80009da:	61fb      	str	r3, [r7, #28]
                          |P5_GPIOD12_Pin|P5_GPIOD13_Pin|P5_GPIOD14_Pin|P5_GPIOD15_Pin
                          |SDIO_CD_Pin|P4_GPIOD4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <MX_GPIO_Init+0x1a8>)
 80009ec:	f002 fdaa 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_TX_RX__Pin;
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RS485_TX_RX__GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_GPIO_Init+0x1a8>)
 8000a08:	f002 fd9c 	bl	8003544 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	@ 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400

08000a2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a32:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <MX_I2C1_Init+0x54>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_I2C1_Init+0x58>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a6a:	f002 ff21 	bl	80038b0 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 f8da 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000104 	.word	0x20000104
 8000a80:	40005400 	.word	0x40005400
 8000a84:	000186a0 	.word	0x000186a0

08000a88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_I2C_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ac6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <HAL_I2C_MspInit+0x8c>)
 8000ae4:	f002 fd2e 	bl	8003544 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	@ 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 fd92 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f818 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f7ff fea6 	bl	8000874 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b28:	f7ff fd22 	bl	8000570 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000b2c:	f7ff fd56 	bl	80005dc <MX_CAN2_Init>
  MX_RTC_Init();
 8000b30:	f000 f882 	bl	8000c38 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000b34:	f000 fb1a 	bl	800116c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 fb42 	bl	80011c0 <MX_USART2_UART_Init>
  MX_LWIP_Init();
 8000b3c:	f004 fde4 	bl	8005708 <MX_LWIP_Init>
  MX_CRC_Init();
 8000b40:	f7ff fe62 	bl	8000808 <MX_CRC_Init>
  MX_SPI2_Init();
 8000b44:	f000 f8c8 	bl	8000cd8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000b48:	f7ff ff70 	bl	8000a2c <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LWIP_Process();
 8000b4c:	f004 fe2e 	bl	80057ac <MX_LWIP_Process>
 8000b50:	e7fc      	b.n	8000b4c <main+0x34>
	...

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f012 f92d 	bl	8012dc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a22      	ldr	r2, [pc, #136]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2309      	movs	r3, #9
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bc8:	2319      	movs	r3, #25
 8000bca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bcc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 ffaa 	bl	8003b38 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bea:	f000 f81f 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fa0b 	bl	8004028 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c18:	f000 f808 	bl	8000c2c <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	@ 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <MX_RTC_Init+0x48>)
 8000c40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c4a:	227f      	movs	r2, #127	@ 0x7f
 8000c4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c50:	22ff      	movs	r2, #255	@ 0xff
 8000c52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_RTC_Init+0x44>)
 8000c68:	f003 fca0 	bl	80045ac <HAL_RTC_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c72:	f7ff ffdb 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000158 	.word	0x20000158
 8000c80:	40002800 	.word	0x40002800

08000c84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <HAL_RTC_MspInit+0x4c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d111      	bne.n	8000cc8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cac:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fb98 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000cbe:	f7ff ffb5 	bl	8000c2c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <HAL_RTC_MspInit+0x50>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40002800 	.word	0x40002800
 8000cd4:	42470e3c 	.word	0x42470e3c

08000cd8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cde:	4a18      	ldr	r2, [pc, #96]	@ (8000d40 <MX_SPI2_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000ce4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d24:	220a      	movs	r2, #10
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d2a:	f003 fd45 	bl	80047b8 <HAL_SPI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d34:	f7ff ff7a 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	40003800 	.word	0x40003800

08000d44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a28      	ldr	r2, [pc, #160]	@ (8000e04 <HAL_SPI_MspInit+0xc0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d14a      	bne.n	8000dfc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	4a26      	ldr	r2, [pc, #152]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d76:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000dd6:	f002 fbb5 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dec:	2305      	movs	r3, #5
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <HAL_SPI_MspInit+0xcc>)
 8000df8:	f002 fba4 	bl	8003544 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	@ 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40003800 	.word	0x40003800
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020400 	.word	0x40020400

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <NMI_Handler+0x4>

08000e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eba:	f000 fc15 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <CAN1_TX_IRQHandler+0x10>)
 8000eca:	f000 fd4c 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000a8 	.word	0x200000a8

08000ed8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <CAN1_RX0_IRQHandler+0x10>)
 8000ede:	f000 fd42 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000a8 	.word	0x200000a8

08000eec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <CAN1_RX1_IRQHandler+0x10>)
 8000ef2:	f000 fd38 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000a8 	.word	0x200000a8

08000f00 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <CAN1_SCE_IRQHandler+0x10>)
 8000f06:	f000 fd2e 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000a8 	.word	0x200000a8

08000f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <USART1_IRQHandler+0x10>)
 8000f1a:	f003 fd27 	bl	800496c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001d4 	.word	0x200001d4

08000f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <USART2_IRQHandler+0x10>)
 8000f2e:	f003 fd1d 	bl	800496c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000021c 	.word	0x2000021c

08000f3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <ETH_IRQHandler+0x10>)
 8000f42:	f001 fc17 	bl	8002774 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20004d80 	.word	0x20004d80

08000f50 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <ETH_WKUP_IRQHandler+0x10>)
 8000f56:	f001 fc0d 	bl	8002774 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20004d80 	.word	0x20004d80

08000f64 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <CAN2_TX_IRQHandler+0x10>)
 8000f6a:	f000 fcfc 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000d0 	.word	0x200000d0

08000f78 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <CAN2_RX0_IRQHandler+0x10>)
 8000f7e:	f000 fcf2 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000d0 	.word	0x200000d0

08000f8c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <CAN2_RX1_IRQHandler+0x10>)
 8000f92:	f000 fce8 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000d0 	.word	0x200000d0

08000fa0 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <CAN2_SCE_IRQHandler+0x10>)
 8000fa6:	f000 fcde 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000d0 	.word	0x200000d0

08000fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return 1;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_kill>:

int _kill(int pid, int sig)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fce:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <_kill+0x20>)
 8000fd0:	2216      	movs	r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20008b88 	.word	0x20008b88

08000fe8 <_exit>:

void _exit (int status)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ffe5 	bl	8000fc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ffa:	bf00      	nop
 8000ffc:	e7fd      	b.n	8000ffa <_exit+0x12>

08000ffe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e00a      	b.n	8001026 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001010:	f3af 8000 	nop.w
 8001014:	4601      	mov	r1, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	60ba      	str	r2, [r7, #8]
 800101c:	b2ca      	uxtb	r2, r1
 800101e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbf0      	blt.n	8001010 <_read+0x12>
  }

  return len;
 800102e:	687b      	ldr	r3, [r7, #4]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e009      	b.n	800105e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60ba      	str	r2, [r7, #8]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbf1      	blt.n	800104a <_write+0x12>
  }
  return len;
 8001066:	687b      	ldr	r3, [r7, #4]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_close>:

int _close(int file)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001098:	605a      	str	r2, [r3, #4]
  return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_isatty>:

int _isatty(int file)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d205      	bcs.n	8001114 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <_sbrk+0x6c>)
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	20020000 	.word	0x20020000
 8001138:	00000400 	.word	0x00000400
 800113c:	200001d0 	.word	0x200001d0
 8001140:	20008b98 	.word	0x20008b98
 8001144:	20008b88 	.word	0x20008b88

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_USART1_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART1_UART_Init+0x4c>)
 80011a4:	f003 fb91 	bl	80048ca <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f7ff fd3d 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001d4 	.word	0x200001d4
 80011bc:	40011000 	.word	0x40011000

080011c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_USART2_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011e0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80011e4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011e8:	220c      	movs	r2, #12
 80011ea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011fa:	f003 fb66 	bl	80048ca <HAL_UART_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001204:	f7ff fd12 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000021c 	.word	0x2000021c
 8001210:	40004400 	.word	0x40004400

08001214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a3a      	ldr	r2, [pc, #232]	@ (800131c <HAL_UART_MspInit+0x108>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d135      	bne.n	80012a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6453      	str	r3, [r2, #68]	@ 0x44
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800126e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001280:	2307      	movs	r3, #7
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4826      	ldr	r0, [pc, #152]	@ (8001324 <HAL_UART_MspInit+0x110>)
 800128c:	f002 f95a 	bl	8003544 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2025      	movs	r0, #37	@ 0x25
 8001296:	f000 fe7a 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129a:	2025      	movs	r0, #37	@ 0x25
 800129c:	f000 fe93 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a0:	e038      	b.n	8001314 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <HAL_UART_MspInit+0x114>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d133      	bne.n	8001314 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	4a13      	ldr	r2, [pc, #76]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <HAL_UART_MspInit+0x10c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012e4:	2360      	movs	r3, #96	@ 0x60
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	480b      	ldr	r0, [pc, #44]	@ (800132c <HAL_UART_MspInit+0x118>)
 8001300:	f002 f920 	bl	8003544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2026      	movs	r0, #38	@ 0x26
 800130a:	f000 fe40 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800130e:	2026      	movs	r0, #38	@ 0x26
 8001310:	f000 fe59 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
}
 8001314:	bf00      	nop
 8001316:	3730      	adds	r7, #48	@ 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40011000 	.word	0x40011000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40004400 	.word	0x40004400
 800132c:	40020c00 	.word	0x40020c00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001334:	f7ff ff08 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f011 fd7f 	bl	8012e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fbd9 	bl	8000b18 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001374:	08016b70 	.word	0x08016b70
  ldr r2, =_sbss
 8001378:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800137c:	20008b98 	.word	0x20008b98

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>

08001382 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <DP83848_RegisterBusIO+0x28>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <DP83848_RegisterBusIO+0x28>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <DP83848_RegisterBusIO+0x28>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e014      	b.n	80013da <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d17c      	bne.n	8001500 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2220      	movs	r2, #32
 8001418:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e01c      	b.n	800145a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f107 0208 	add.w	r2, r7, #8
 8001428:	2119      	movs	r1, #25
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	4798      	blx	r3
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	da03      	bge.n	800143c <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001434:	f06f 0304 	mvn.w	r3, #4
 8001438:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800143a:	e00b      	b.n	8001454 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	d105      	bne.n	8001454 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
         break;
 8001452:	e005      	b.n	8001460 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b1f      	cmp	r3, #31
 800145e:	d9df      	bls.n	8001420 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b1f      	cmp	r3, #31
 8001466:	d902      	bls.n	800146e <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001468:	f06f 0302 	mvn.w	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d145      	bne.n	8001500 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6810      	ldr	r0, [r2, #0]
 800147c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001480:	2100      	movs	r1, #0
 8001482:	4798      	blx	r3
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	db37      	blt.n	80014fa <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6810      	ldr	r0, [r2, #0]
 8001492:	f107 0208 	add.w	r2, r7, #8
 8001496:	2100      	movs	r1, #0
 8001498:	4798      	blx	r3
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	db28      	blt.n	80014f2 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4798      	blx	r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80014aa:	e01c      	b.n	80014e6 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4798      	blx	r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014be:	d80e      	bhi.n	80014de <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	f107 0208 	add.w	r2, r7, #8
 80014cc:	2100      	movs	r1, #0
 80014ce:	4798      	blx	r3
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da07      	bge.n	80014e6 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80014d6:	f06f 0304 	mvn.w	r3, #4
 80014da:	613b      	str	r3, [r7, #16]
                 break;
 80014dc:	e010      	b.n	8001500 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80014de:	f06f 0301 	mvn.w	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
               break;
 80014e4:	e00c      	b.n	8001500 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1dd      	bne.n	80014ac <DP83848_Init+0xc6>
 80014f0:	e006      	b.n	8001500 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80014f2:	f06f 0304 	mvn.w	r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	e002      	b.n	8001500 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80014fa:	f06f 0303 	mvn.w	r3, #3
 80014fe:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d112      	bne.n	800152c <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4798      	blx	r3
 800150c:	4603      	mov	r3, r0
 800150e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001510:	bf00      	nop
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	4798      	blx	r3
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001524:	d9f5      	bls.n	8001512 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	605a      	str	r2, [r3, #4]
   }

   return status;
 800152c:	693b      	ldr	r3, [r7, #16]
 }
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6810      	ldr	r0, [r2, #0]
 800154a:	f107 020c 	add.w	r2, r7, #12
 800154e:	2101      	movs	r1, #1
 8001550:	4798      	blx	r3
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	da02      	bge.n	800155e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001558:	f06f 0304 	mvn.w	r3, #4
 800155c:	e06e      	b.n	800163c <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6810      	ldr	r0, [r2, #0]
 8001566:	f107 020c 	add.w	r2, r7, #12
 800156a:	2101      	movs	r1, #1
 800156c:	4798      	blx	r3
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	da02      	bge.n	800157a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001574:	f06f 0304 	mvn.w	r3, #4
 8001578:	e060      	b.n	800163c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001584:	2301      	movs	r3, #1
 8001586:	e059      	b.n	800163c <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6810      	ldr	r0, [r2, #0]
 8001590:	f107 020c 	add.w	r2, r7, #12
 8001594:	2100      	movs	r1, #0
 8001596:	4798      	blx	r3
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	da02      	bge.n	80015a4 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800159e:	f06f 0304 	mvn.w	r3, #4
 80015a2:	e04b      	b.n	800163c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11b      	bne.n	80015e6 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <DP83848_GetLinkState+0x90>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80015c2:	2302      	movs	r3, #2
 80015c4:	e03a      	b.n	800163c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e033      	b.n	800163c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80015de:	2304      	movs	r3, #4
 80015e0:	e02c      	b.n	800163c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80015e2:	2305      	movs	r3, #5
 80015e4:	e02a      	b.n	800163c <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6810      	ldr	r0, [r2, #0]
 80015ee:	f107 020c 	add.w	r2, r7, #12
 80015f2:	2110      	movs	r1, #16
 80015f4:	4798      	blx	r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da02      	bge.n	8001602 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80015fc:	f06f 0304 	mvn.w	r3, #4
 8001600:	e01c      	b.n	800163c <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 800160c:	2306      	movs	r3, #6
 800160e:	e015      	b.n	800163c <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0306 	and.w	r3, r3, #6
 8001616:	2b04      	cmp	r3, #4
 8001618:	d101      	bne.n	800161e <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800161a:	2302      	movs	r3, #2
 800161c:	e00e      	b.n	800163c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f003 0306 	and.w	r3, r3, #6
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001628:	2303      	movs	r3, #3
 800162a:	e007      	b.n	800163c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0306 	and.w	r3, r3, #6
 8001632:	2b06      	cmp	r3, #6
 8001634:	d101      	bne.n	800163a <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001636:	2304      	movs	r3, #4
 8001638:	e000      	b.n	800163c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800163a:	2305      	movs	r3, #5
    }
  }
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 fc83 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fbcc 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fc9b 	bl	8001fe2 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 fc63 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	20000264 	.word	0x20000264

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000264 	.word	0x20000264

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0ed      	b.n	800195e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe ff5a 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a4:	f7ff ffb4 	bl	8001710 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017aa:	e012      	b.n	80017d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ac:	f7ff ffb0 	bl	8001710 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d90b      	bls.n	80017d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0c5      	b.n	800195e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0e5      	beq.n	80017ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0202 	bic.w	r2, r2, #2
 80017ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f0:	f7ff ff8e 	bl	8001710 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f6:	e012      	b.n	800181e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f8:	f7ff ff8a 	bl	8001710 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b0a      	cmp	r3, #10
 8001804:	d90b      	bls.n	800181e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2205      	movs	r2, #5
 8001816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e09f      	b.n	800195e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e5      	bne.n	80017f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7e1b      	ldrb	r3, [r3, #24]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d108      	bne.n	8001846 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e007      	b.n	8001856 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7e5b      	ldrb	r3, [r3, #25]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e007      	b.n	8001880 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800187e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e9b      	ldrb	r3, [r3, #26]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e007      	b.n	80018aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0220 	bic.w	r2, r2, #32
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7edb      	ldrb	r3, [r3, #27]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0210 	bic.w	r2, r2, #16
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e007      	b.n	80018d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0210 	orr.w	r2, r2, #16
 80018d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7f1b      	ldrb	r3, [r3, #28]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0208 	orr.w	r2, r2, #8
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e007      	b.n	80018fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0208 	bic.w	r2, r2, #8
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7f5b      	ldrb	r3, [r3, #29]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0204 	orr.w	r2, r2, #4
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e007      	b.n	8001928 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	ea42 0103 	orr.w	r1, r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b08a      	sub	sp, #40	@ 0x28
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d07c      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f983 	bl	8001cd4 <HAL_CAN_TxMailbox0CompleteCallback>
 80019ce:	e016      	b.n	80019fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e2:	e00c      	b.n	80019fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f6:	e002      	b.n	80019fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f989 	bl	8001d10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d024      	beq.n	8001a52 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f963 	bl	8001ce8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a22:	e016      	b.n	8001a52 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a36:	e00c      	b.n	8001a52 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4a:	e002      	b.n	8001a52 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f969 	bl	8001d24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d024      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f943 	bl	8001cfc <HAL_CAN_TxMailbox2CompleteCallback>
 8001a76:	e016      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	e00c      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	e002      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f949 	bl	8001d38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00c      	beq.n	8001aca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00b      	beq.n	8001aec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f93a 	bl	8001d60 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f921 	bl	8001d4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00c      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2208      	movs	r2, #8
 8001b48:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f91c 	bl	8001d88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f903 	bl	8001d74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2210      	movs	r2, #16
 8001b88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f906 	bl	8001d9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f8ff 	bl	8001db0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d07b      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d072      	beq.n	8001cac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d043      	beq.n	8001cac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03e      	beq.n	8001cac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c34:	2b60      	cmp	r3, #96	@ 0x60
 8001c36:	d02b      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x32a>
 8001c38:	2b60      	cmp	r3, #96	@ 0x60
 8001c3a:	d82e      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c3c:	2b50      	cmp	r3, #80	@ 0x50
 8001c3e:	d022      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x320>
 8001c40:	2b50      	cmp	r3, #80	@ 0x50
 8001c42:	d82a      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c44:	2b40      	cmp	r3, #64	@ 0x40
 8001c46:	d019      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x316>
 8001c48:	2b40      	cmp	r3, #64	@ 0x40
 8001c4a:	d826      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c4c:	2b30      	cmp	r3, #48	@ 0x30
 8001c4e:	d010      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x30c>
 8001c50:	2b30      	cmp	r3, #48	@ 0x30
 8001c52:	d822      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d002      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x2f8>
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d005      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c5c:	e01d      	b.n	8001c9a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c66:	e019      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c70:	e014      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c7a:	e00f      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c84:	e00a      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c8e:	e005      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c98:	e000      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            break;
 8001c9a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001caa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f87c 	bl	8001dc4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	@ 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	@ (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff3e 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff8e 	bl	8001ecc <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5d 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff31 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa2 	bl	8001f34 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e00e      	b.n	800202a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	795b      	ldrb	r3, [r3, #5]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fc07 	bl	8000830 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff fb66 	bl	8001710 <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d008      	beq.n	8002064 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2280      	movs	r2, #128	@ 0x80
 8002056:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e052      	b.n	800210a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0216 	bic.w	r2, r2, #22
 8002072:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002082:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d103      	bne.n	8002094 <HAL_DMA_Abort+0x62>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0208 	bic.w	r2, r2, #8
 80020a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b4:	e013      	b.n	80020de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b6:	f7ff fb2b 	bl	8001710 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d90c      	bls.n	80020de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e015      	b.n	800210a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1e4      	bne.n	80020b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	223f      	movs	r2, #63	@ 0x3f
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d004      	beq.n	8002130 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e00c      	b.n	800214a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2205      	movs	r2, #5
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06c      	b.n	8002244 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2223      	movs	r2, #35	@ 0x23
 8002178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f003 fcd1 	bl	8005b24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b31      	ldr	r3, [pc, #196]	@ (800224c <HAL_ETH_Init+0xf4>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	4a30      	ldr	r2, [pc, #192]	@ (800224c <HAL_ETH_Init+0xf4>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002190:	6453      	str	r3, [r2, #68]	@ 0x44
 8002192:	4b2e      	ldr	r3, [pc, #184]	@ (800224c <HAL_ETH_Init+0xf4>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800219e:	4b2c      	ldr	r3, [pc, #176]	@ (8002250 <HAL_ETH_Init+0xf8>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002250 <HAL_ETH_Init+0xf8>)
 80021a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80021a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021aa:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <HAL_ETH_Init+0xf8>)
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4927      	ldr	r1, [pc, #156]	@ (8002250 <HAL_ETH_Init+0xf8>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021b8:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <HAL_ETH_Init+0xf8>)
 80021ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d4:	f7ff fa9c 	bl	8001710 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021da:	e011      	b.n	8002200 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021dc:	f7ff fa98 	bl	8001710 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80021ea:	d909      	bls.n	8002200 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2204      	movs	r2, #4
 80021f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	22e0      	movs	r2, #224	@ 0xe0
 80021f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e021      	b.n	8002244 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e4      	bne.n	80021dc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fef0 	bl	8002ff8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 ff97 	bl	800314c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 ffed 	bl	80031fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	461a      	mov	r2, r3
 800222a:	2100      	movs	r1, #0
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 ff55 	bl	80030dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2210      	movs	r2, #16
 800223e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800

08002254 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002262:	2b10      	cmp	r3, #16
 8002264:	d150      	bne.n	8002308 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2223      	movs	r2, #35	@ 0x23
 800226a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2204      	movs	r2, #4
 8002272:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f9fd 	bl	8002674 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0208 	orr.w	r2, r2, #8
 8002288:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002292:	2001      	movs	r0, #1
 8002294:	f7ff fa48 	bl	8001728 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0204 	orr.w	r2, r2, #4
 80022ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7ff fa35 	bl	8001728 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fd36 	bl	8002d38 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022e2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022fa:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2223      	movs	r2, #35	@ 0x23
 8002300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002320:	2b23      	cmp	r3, #35	@ 0x23
 8002322:	d14a      	bne.n	80023ba <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2223      	movs	r2, #35	@ 0x23
 8002328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800233e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002342:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	f023 0302 	bic.w	r3, r3, #2
 8002356:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800235a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0204 	bic.w	r2, r2, #4
 800236a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002374:	2001      	movs	r0, #1
 8002376:	f7ff f9d7 	bl	8001728 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fcd8 	bl	8002d38 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0208 	bic.w	r2, r2, #8
 8002396:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7ff f9c1 	bl	8001728 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2210      	movs	r2, #16
 80023b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07c      	b.n	80024e4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f0:	2b23      	cmp	r3, #35	@ 0x23
 80023f2:	d176      	bne.n	80024e2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80023f4:	2200      	movs	r2, #0
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 ff6d 	bl	80032d8 <ETH_Prepare_Tx_Descriptors>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f043 0202 	orr.w	r2, r3, #2
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e065      	b.n	80024e4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002418:	f3bf 8f4f 	dsb	sy
}
 800241c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3206      	adds	r2, #6
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	2b03      	cmp	r3, #3
 800243c:	d904      	bls.n	8002448 <HAL_ETH_Transmit+0x84>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	1f1a      	subs	r2, r3, #4
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3106      	adds	r1, #6
 8002454:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002458:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800245c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800245e:	f7ff f957 	bl	8001710 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002464:	e037      	b.n	80024d6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d011      	beq.n	800249c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f043 0208 	orr.w	r2, r3, #8
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e023      	b.n	80024e4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a2:	d018      	beq.n	80024d6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024a4:	f7ff f934 	bl	8001710 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d302      	bcc.n	80024ba <HAL_ETH_Transmit+0xf6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c0:	f043 0204 	orr.w	r2, r3, #4
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80024d0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e006      	b.n	80024e4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	dbc3      	blt.n	8002466 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0a8      	b.n	800266a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251e:	2b23      	cmp	r3, #35	@ 0x23
 8002520:	d001      	beq.n	8002526 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0a1      	b.n	800266a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	3212      	adds	r2, #18
 8002532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800253c:	f1c3 0304 	rsb	r3, r3, #4
 8002540:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002542:	e06a      	b.n	800261a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <HAL_ETH_ReadData+0x88>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d040      	beq.n	80025f6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025a8:	3b04      	subs	r3, #4
 80025aa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025d0:	461a      	mov	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f003 fc65 	bl	8005ea4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d902      	bls.n	8002608 <HAL_ETH_ReadData+0x11c>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b04      	subs	r3, #4
 8002606:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	3212      	adds	r2, #18
 800260e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800261e:	2b00      	cmp	r3, #0
 8002620:	db06      	blt.n	8002630 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	d202      	bcs.n	8002630 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d089      	beq.n	8002544 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	441a      	add	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f815 	bl	8002674 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002680:	2301      	movs	r3, #1
 8002682:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002688:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	3212      	adds	r2, #18
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800269a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800269c:	e03d      	b.n	800271a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d112      	bne.n	80026cc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fbca 	bl	8005e44 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	74fb      	strb	r3, [r7, #19]
 80026ba:	e007      	b.n	80026cc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	461a      	mov	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	461a      	mov	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d023      	beq.n	800271a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	4a24      	ldr	r2, [pc, #144]	@ (8002770 <ETH_UpdateDescriptor+0xfc>)
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	e003      	b.n	80026ea <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80026e8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d902      	bls.n	8002708 <ETH_UpdateDescriptor+0x94>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b04      	subs	r3, #4
 8002706:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	3212      	adds	r2, #18
 800270e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002712:	617b      	str	r3, [r7, #20]
      desccount--;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	3b01      	subs	r3, #1
 8002718:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <ETH_UpdateDescriptor+0xb2>
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1bb      	bne.n	800269e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	429a      	cmp	r2, r3
 800272e:	d01a      	beq.n	8002766 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3301      	adds	r3, #1
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800273a:	f3bf 8f5f 	dmb	sy
}
 800273e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	18ca      	adds	r2, r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002758:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	80004600 	.word	0x80004600

08002774 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278a:	2b40      	cmp	r3, #64	@ 0x40
 800278c:	d112      	bne.n	80027b4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279c:	2b40      	cmp	r3, #64	@ 0x40
 800279e:	d109      	bne.n	80027b4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b50      	ldr	r3, [pc, #320]	@ (80028ec <HAL_ETH_IRQHandler+0x178>)
 80027ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8ac 	bl	800290c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d113      	bne.n	80027ee <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10a      	bne.n	80027ee <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027e0:	461a      	mov	r2, r3
 80027e2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80027e6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f885 	bl	80028f8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002800:	d14c      	bne.n	800289c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002814:	d142      	bne.n	800289c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281c:	f043 0208 	orr.w	r2, r3, #8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002838:	d11a      	bne.n	8002870 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_ETH_IRQHandler+0x17c>)
 8002846:	4013      	ands	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002860:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002864:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	22e0      	movs	r2, #224	@ 0xe0
 800286a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800286e:	e012      	b.n	8002896 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288e:	461a      	mov	r2, r3
 8002890:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002894:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f842 	bl	8002920 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d10e      	bne.n	80028c8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f83a 	bl	8002934 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80028c8:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <HAL_ETH_IRQHandler+0x180>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <HAL_ETH_IRQHandler+0x180>)
 80028d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80028da:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f833 	bl	8002948 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	00010040 	.word	0x00010040
 80028f0:	007e2000 	.word	0x007e2000
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 031c 	and.w	r3, r3, #28
 8002978:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	02db      	lsls	r3, r3, #11
 800297e:	b29b      	uxth	r3, r3
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0302 	bic.w	r3, r3, #2
 800299a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80029ac:	f7fe feb0 	bl	8001710 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029b2:	e00d      	b.n	80029d0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80029b4:	f7fe feac 	bl	8001710 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c2:	d301      	bcc.n	80029c8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e010      	b.n	80029ea <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ec      	bne.n	80029b4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 031c 	and.w	r3, r3, #28
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	02db      	lsls	r3, r3, #11
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4c:	f7fe fe60 	bl	8001710 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a52:	e00d      	b.n	8002a70 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002a54:	f7fe fe5c 	bl	8001710 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a62:	d301      	bcc.n	8002a68 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e009      	b.n	8002a7c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ec      	bne.n	8002a54 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d9      	b.n	8002c4c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf14      	ite	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	2300      	moveq	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bf0c      	ite	eq
 8002b56:	2301      	moveq	r3, #1
 8002b58:	2300      	movne	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e00b      	b.n	8002c84 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d105      	bne.n	8002c82 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f883 	bl	8002d84 <ETH_SetMACConfig>

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 031c 	bic.w	r3, r3, #28
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ca4:	f001 fb6c 	bl	8004380 <HAL_RCC_GetHCLKFreq>
 8002ca8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d908      	bls.n	8002cc4 <HAL_ETH_SetMDIOClockRange+0x38>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d804      	bhi.n	8002cc4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e027      	b.n	8002d14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d908      	bls.n	8002cde <HAL_ETH_SetMDIOClockRange+0x52>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d204      	bcs.n	8002cde <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f043 030c 	orr.w	r3, r3, #12
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e01a      	b.n	8002d14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d303      	bcc.n	8002cee <HAL_ETH_SetMDIOClockRange+0x62>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	@ (8002d30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d911      	bls.n	8002d12 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d908      	bls.n	8002d08 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d34 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d804      	bhi.n	8002d08 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e005      	b.n	8002d14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f043 0310 	orr.w	r3, r3, #16
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e000      	b.n	8002d14 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002d12:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	01312cff 	.word	0x01312cff
 8002d28:	02160ebf 	.word	0x02160ebf
 8002d2c:	03938700 	.word	0x03938700
 8002d30:	05f5e0ff 	.word	0x05f5e0ff
 8002d34:	08f0d17f 	.word	0x08f0d17f

08002d38 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d5a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7fe fcdd 	bl	8001728 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d78:	6193      	str	r3, [r2, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4b51      	ldr	r3, [pc, #324]	@ (8002ee0 <ETH_SetMACConfig+0x15c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7c1b      	ldrb	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <ETH_SetMACConfig+0x28>
 8002da6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002daa:	e000      	b.n	8002dae <ETH_SetMACConfig+0x2a>
 8002dac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	7c5b      	ldrb	r3, [r3, #17]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <ETH_SetMACConfig+0x38>
 8002db6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dba:	e000      	b.n	8002dbe <ETH_SetMACConfig+0x3a>
 8002dbc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	7fdb      	ldrb	r3, [r3, #31]
 8002dca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002dcc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	7f92      	ldrb	r2, [r2, #30]
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d102      	bne.n	8002de2 <ETH_SetMACConfig+0x5e>
 8002ddc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002de0:	e000      	b.n	8002de4 <ETH_SetMACConfig+0x60>
 8002de2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002de4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	7f1b      	ldrb	r3, [r3, #28]
 8002dea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002df2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002dfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e02:	2a00      	cmp	r2, #0
 8002e04:	d102      	bne.n	8002e0c <ETH_SetMACConfig+0x88>
 8002e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e0a:	e000      	b.n	8002e0e <ETH_SetMACConfig+0x8a>
 8002e0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	7bdb      	ldrb	r3, [r3, #15]
 8002e14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e26:	4313      	orrs	r3, r2
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f7fe fc72 	bl	8001728 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	d101      	bne.n	8002e72 <ETH_SetMACConfig+0xee>
 8002e6e:	2280      	movs	r2, #128	@ 0x80
 8002e70:	e000      	b.n	8002e74 <ETH_SetMACConfig+0xf0>
 8002e72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002e82:	2a01      	cmp	r2, #1
 8002e84:	d101      	bne.n	8002e8a <ETH_SetMACConfig+0x106>
 8002e86:	2208      	movs	r2, #8
 8002e88:	e000      	b.n	8002e8c <ETH_SetMACConfig+0x108>
 8002e8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002e94:	2a01      	cmp	r2, #1
 8002e96:	d101      	bne.n	8002e9c <ETH_SetMACConfig+0x118>
 8002e98:	2204      	movs	r2, #4
 8002e9a:	e000      	b.n	8002e9e <ETH_SetMACConfig+0x11a>
 8002e9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002ea6:	2a01      	cmp	r2, #1
 8002ea8:	d101      	bne.n	8002eae <ETH_SetMACConfig+0x12a>
 8002eaa:	2202      	movs	r2, #2
 8002eac:	e000      	b.n	8002eb0 <ETH_SetMACConfig+0x12c>
 8002eae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7fe fc2d 	bl	8001728 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	ff20810f 	.word	0xff20810f

08002ee4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <ETH_SetDMAConfig+0x110>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7b1b      	ldrb	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <ETH_SetDMAConfig+0x2c>
 8002f0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f0e:	e000      	b.n	8002f12 <ETH_SetDMAConfig+0x2e>
 8002f10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	7b5b      	ldrb	r3, [r3, #13]
 8002f16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	7f52      	ldrb	r2, [r2, #29]
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d102      	bne.n	8002f28 <ETH_SetDMAConfig+0x44>
 8002f22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f26:	e000      	b.n	8002f2a <ETH_SetDMAConfig+0x46>
 8002f28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	7b9b      	ldrb	r3, [r3, #14]
 8002f30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	7f1b      	ldrb	r3, [r3, #28]
 8002f3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7f9b      	ldrb	r3, [r3, #30]
 8002f46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f7fe fbd4 	bl	8001728 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	791b      	ldrb	r3, [r3, #4]
 8002f92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fa4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002fae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fb6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fbc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f7fe fba5 	bl	8001728 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	f8de3f23 	.word	0xf8de3f23

08002ff8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b0a6      	sub	sp, #152	@ 0x98
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800300c:	2300      	movs	r3, #0
 800300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003034:	2300      	movs	r3, #0
 8003036:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800303e:	2300      	movs	r3, #0
 8003040:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800305a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800305e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003060:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003064:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800306c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fe86 	bl	8002d84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003078:	2301      	movs	r3, #1
 800307a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800307c:	2301      	movs	r3, #1
 800307e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003086:	2301      	movs	r3, #1
 8003088:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800309a:	2300      	movs	r3, #0
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80030b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030c8:	f107 0308 	add.w	r3, r7, #8
 80030cc:	4619      	mov	r1, r3
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff08 	bl	8002ee4 <ETH_SetDMAConfig>
}
 80030d4:	bf00      	nop
 80030d6:	3798      	adds	r7, #152	@ 0x98
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3305      	adds	r3, #5
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	3204      	adds	r2, #4
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <ETH_MACAddressConfig+0x68>)
 80030fe:	4413      	add	r3, r2
 8003100:	461a      	mov	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3303      	adds	r3, #3
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	061a      	lsls	r2, r3, #24
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3302      	adds	r3, #2
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3301      	adds	r3, #1
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	4313      	orrs	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <ETH_MACAddressConfig+0x6c>)
 800312e:	4413      	add	r3, r2
 8003130:	461a      	mov	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6013      	str	r3, [r2, #0]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40028040 	.word	0x40028040
 8003148:	40028044 	.word	0x40028044

0800314c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e03e      	b.n	80031d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68d9      	ldr	r1, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	440b      	add	r3, r1
 800316a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	3206      	adds	r2, #6
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d80c      	bhi.n	80031bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68d9      	ldr	r1, [r3, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	e004      	b.n	80031c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3301      	adds	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d9bd      	bls.n	800315a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031f0:	611a      	str	r2, [r3, #16]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e046      	b.n	800329a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6919      	ldr	r1, [r3, #16]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2200      	movs	r2, #0
 8003228:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003248:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003250:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	3212      	adds	r2, #18
 8003266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d80c      	bhi.n	800328a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6919      	ldr	r1, [r3, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	e004      	b.n	8003294 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	461a      	mov	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d9b5      	bls.n	800320c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ca:	60da      	str	r2, [r3, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80032d8:	b480      	push	{r7}
 80032da:	b08d      	sub	sp, #52	@ 0x34
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3318      	adds	r3, #24
 80032e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003302:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800331a:	d007      	beq.n	800332c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	3304      	adds	r3, #4
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	e103      	b.n	8003538 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	3301      	adds	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003348:	f023 031f 	bic.w	r3, r3, #31
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	6852      	ldr	r2, [r2, #4]
 8003350:	431a      	orrs	r2, r3
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	431a      	orrs	r2, r3
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80033b6:	f3bf 8f5f 	dmb	sy
}
 80033ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80033c8:	e084      	b.n	80034d4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e005      	b.n	80033f6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80033f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f8:	3301      	adds	r3, #1
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d902      	bls.n	8003408 <ETH_Prepare_Tx_Descriptors+0x130>
 8003402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003404:	3b04      	subs	r3, #4
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003426:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800342a:	d007      	beq.n	800343c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	3304      	adds	r3, #4
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d029      	beq.n	8003490 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003448:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800344a:	2300      	movs	r3, #0
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344e:	e019      	b.n	8003484 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003450:	f3bf 8f5f 	dmb	sy
}
 8003454:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	3301      	adds	r3, #1
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	2b03      	cmp	r3, #3
 800346c:	d902      	bls.n	8003474 <ETH_Prepare_Tx_Descriptors+0x19c>
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	3b04      	subs	r3, #4
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800347e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003480:	3301      	adds	r3, #1
 8003482:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	429a      	cmp	r2, r3
 800348a:	d3e1      	bcc.n	8003450 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800348c:	2302      	movs	r3, #2
 800348e:	e053      	b.n	8003538 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	3301      	adds	r3, #1
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80034ae:	f023 031f 	bic.w	r3, r3, #31
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	6852      	ldr	r2, [r2, #4]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	3301      	adds	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80034c2:	f3bf 8f5f 	dmb	sy
}
 80034c6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f47f af76 	bne.w	80033ca <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e005      	b.n	80034fe <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800350e:	6979      	ldr	r1, [r7, #20]
 8003510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003512:	3304      	adds	r3, #4
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003520:	b672      	cpsid	i
}
 8003522:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4413      	add	r3, r2
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003532:	b662      	cpsie	i
}
 8003534:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3734      	adds	r7, #52	@ 0x34
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	@ 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e16b      	b.n	8003838 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003560:	2201      	movs	r2, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	429a      	cmp	r2, r3
 800357a:	f040 815a 	bne.w	8003832 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d005      	beq.n	8003596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003592:	2b02      	cmp	r3, #2
 8003594:	d130      	bne.n	80035f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 0201 	and.w	r2, r3, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d017      	beq.n	8003634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d123      	bne.n	8003688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	08da      	lsrs	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3208      	adds	r2, #8
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	08da      	lsrs	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3208      	adds	r2, #8
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0203 	and.w	r2, r3, #3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80b4 	beq.w	8003832 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b60      	ldr	r3, [pc, #384]	@ (8003850 <HAL_GPIO_Init+0x30c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003850 <HAL_GPIO_Init+0x30c>)
 80036d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036da:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <HAL_GPIO_Init+0x30c>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003854 <HAL_GPIO_Init+0x310>)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a52      	ldr	r2, [pc, #328]	@ (8003858 <HAL_GPIO_Init+0x314>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02b      	beq.n	800376a <HAL_GPIO_Init+0x226>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a51      	ldr	r2, [pc, #324]	@ (800385c <HAL_GPIO_Init+0x318>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d025      	beq.n	8003766 <HAL_GPIO_Init+0x222>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a50      	ldr	r2, [pc, #320]	@ (8003860 <HAL_GPIO_Init+0x31c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01f      	beq.n	8003762 <HAL_GPIO_Init+0x21e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4f      	ldr	r2, [pc, #316]	@ (8003864 <HAL_GPIO_Init+0x320>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d019      	beq.n	800375e <HAL_GPIO_Init+0x21a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4e      	ldr	r2, [pc, #312]	@ (8003868 <HAL_GPIO_Init+0x324>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <HAL_GPIO_Init+0x216>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a4d      	ldr	r2, [pc, #308]	@ (800386c <HAL_GPIO_Init+0x328>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00d      	beq.n	8003756 <HAL_GPIO_Init+0x212>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a4c      	ldr	r2, [pc, #304]	@ (8003870 <HAL_GPIO_Init+0x32c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <HAL_GPIO_Init+0x20e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a4b      	ldr	r2, [pc, #300]	@ (8003874 <HAL_GPIO_Init+0x330>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_GPIO_Init+0x20a>
 800374a:	2307      	movs	r3, #7
 800374c:	e00e      	b.n	800376c <HAL_GPIO_Init+0x228>
 800374e:	2308      	movs	r3, #8
 8003750:	e00c      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003752:	2306      	movs	r3, #6
 8003754:	e00a      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003756:	2305      	movs	r3, #5
 8003758:	e008      	b.n	800376c <HAL_GPIO_Init+0x228>
 800375a:	2304      	movs	r3, #4
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x228>
 800375e:	2303      	movs	r3, #3
 8003760:	e004      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003762:	2302      	movs	r3, #2
 8003764:	e002      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_GPIO_Init+0x228>
 800376a:	2300      	movs	r3, #0
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	f002 0203 	and.w	r2, r2, #3
 8003772:	0092      	lsls	r2, r2, #2
 8003774:	4093      	lsls	r3, r2
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800377c:	4935      	ldr	r1, [pc, #212]	@ (8003854 <HAL_GPIO_Init+0x310>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378a:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <HAL_GPIO_Init+0x334>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ae:	4a32      	ldr	r2, [pc, #200]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b4:	4b30      	ldr	r3, [pc, #192]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037d8:	4a27      	ldr	r2, [pc, #156]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037de:	4b26      	ldr	r3, [pc, #152]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003802:	4a1d      	ldr	r2, [pc, #116]	@ (8003878 <HAL_GPIO_Init+0x334>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_GPIO_Init+0x334>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800382c:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <HAL_GPIO_Init+0x334>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3301      	adds	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	f67f ae90 	bls.w	8003560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40013800 	.word	0x40013800
 8003858:	40020000 	.word	0x40020000
 800385c:	40020400 	.word	0x40020400
 8003860:	40020800 	.word	0x40020800
 8003864:	40020c00 	.word	0x40020c00
 8003868:	40021000 	.word	0x40021000
 800386c:	40021400 	.word	0x40021400
 8003870:	40021800 	.word	0x40021800
 8003874:	40021c00 	.word	0x40021c00
 8003878:	40013c00 	.word	0x40013c00

0800387c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
 8003888:	4613      	mov	r3, r2
 800388a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800388c:	787b      	ldrb	r3, [r7, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003898:	e003      	b.n	80038a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	619a      	str	r2, [r3, #24]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e12b      	b.n	8003b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd f8d6 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	@ 0x24
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003914:	f000 fd40 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 8003918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a81      	ldr	r2, [pc, #516]	@ (8003b24 <HAL_I2C_Init+0x274>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d807      	bhi.n	8003934 <HAL_I2C_Init+0x84>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a80      	ldr	r2, [pc, #512]	@ (8003b28 <HAL_I2C_Init+0x278>)
 8003928:	4293      	cmp	r3, r2
 800392a:	bf94      	ite	ls
 800392c:	2301      	movls	r3, #1
 800392e:	2300      	movhi	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e006      	b.n	8003942 <HAL_I2C_Init+0x92>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a7d      	ldr	r2, [pc, #500]	@ (8003b2c <HAL_I2C_Init+0x27c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e0e7      	b.n	8003b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a78      	ldr	r2, [pc, #480]	@ (8003b30 <HAL_I2C_Init+0x280>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0c9b      	lsrs	r3, r3, #18
 8003954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a6a      	ldr	r2, [pc, #424]	@ (8003b24 <HAL_I2C_Init+0x274>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d802      	bhi.n	8003984 <HAL_I2C_Init+0xd4>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	e009      	b.n	8003998 <HAL_I2C_Init+0xe8>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	4a69      	ldr	r2, [pc, #420]	@ (8003b34 <HAL_I2C_Init+0x284>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	3301      	adds	r3, #1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	430b      	orrs	r3, r1
 800399e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	495c      	ldr	r1, [pc, #368]	@ (8003b24 <HAL_I2C_Init+0x274>)
 80039b4:	428b      	cmp	r3, r1
 80039b6:	d819      	bhi.n	80039ec <HAL_I2C_Init+0x13c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e59      	subs	r1, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c6:	1c59      	adds	r1, r3, #1
 80039c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039cc:	400b      	ands	r3, r1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_I2C_Init+0x138>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e59      	subs	r1, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e6:	e051      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 80039e8:	2304      	movs	r3, #4
 80039ea:	e04f      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d111      	bne.n	8003a18 <HAL_I2C_Init+0x168>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1e58      	subs	r0, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	440b      	add	r3, r1
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e012      	b.n	8003a3e <HAL_I2C_Init+0x18e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Init+0x196>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e022      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <HAL_I2C_Init+0x1bc>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e58      	subs	r0, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	440b      	add	r3, r1
 8003a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a6a:	e00f      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e58      	subs	r0, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	0099      	lsls	r1, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	6809      	ldr	r1, [r1, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6911      	ldr	r1, [r2, #16]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	000186a0 	.word	0x000186a0
 8003b28:	001e847f 	.word	0x001e847f
 8003b2c:	003d08ff 	.word	0x003d08ff
 8003b30:	431bde83 	.word	0x431bde83
 8003b34:	10624dd3 	.word	0x10624dd3

08003b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e267      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d075      	beq.n	8003c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b56:	4b88      	ldr	r3, [pc, #544]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d00c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b85      	ldr	r3, [pc, #532]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d112      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6e:	4b82      	ldr	r3, [pc, #520]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05b      	beq.n	8003c40 <HAL_RCC_OscConfig+0x108>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d157      	bne.n	8003c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e242      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCC_OscConfig+0x74>
 8003b9e:	4b76      	ldr	r3, [pc, #472]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a75      	ldr	r2, [pc, #468]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e01d      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x98>
 8003bb6:	4b70      	ldr	r3, [pc, #448]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6f      	ldr	r2, [pc, #444]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bd0:	4b69      	ldr	r3, [pc, #420]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a68      	ldr	r2, [pc, #416]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b66      	ldr	r3, [pc, #408]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fd8e 	bl	8001710 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fd8a 	bl	8001710 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	@ 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e207      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xc0>
 8003c16:	e014      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fd fd7a 	bl	8001710 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fd fd76 	bl	8001710 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1f3      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	4b51      	ldr	r3, [pc, #324]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0xe8>
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d063      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b47      	ldr	r3, [pc, #284]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d11c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b44      	ldr	r3, [pc, #272]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d116      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	4b41      	ldr	r3, [pc, #260]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1c7      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4937      	ldr	r1, [pc, #220]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	e03a      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca8:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fd fd2f 	bl	8001710 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb6:	f7fd fd2b 	bl	8001710 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1a8      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b28      	ldr	r3, [pc, #160]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4925      	ldr	r1, [pc, #148]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cea:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fd0e 	bl	8001710 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fd0a 	bl	8001710 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e187      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d036      	beq.n	8003d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2a:	4b15      	ldr	r3, [pc, #84]	@ (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd fcee 	bl	8001710 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fd fcea 	bl	8001710 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e167      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x200>
 8003d56:	e01b      	b.n	8003d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d58:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fcd7 	bl	8001710 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	e00e      	b.n	8003d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d66:	f7fd fcd3 	bl	8001710 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d907      	bls.n	8003d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e150      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	42470000 	.word	0x42470000
 8003d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b88      	ldr	r3, [pc, #544]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ea      	bne.n	8003d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8097 	beq.w	8003ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b81      	ldr	r3, [pc, #516]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dce:	4b77      	ldr	r3, [pc, #476]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dda:	4b74      	ldr	r3, [pc, #464]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a73      	ldr	r2, [pc, #460]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de6:	f7fd fc93 	bl	8001710 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dee:	f7fd fc8f 	bl	8001710 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e10c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2ea>
 8003e14:	4b64      	ldr	r3, [pc, #400]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a63      	ldr	r2, [pc, #396]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	e01c      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x30c>
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e36:	4b5c      	ldr	r3, [pc, #368]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e44:	4b58      	ldr	r3, [pc, #352]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	4a57      	ldr	r2, [pc, #348]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e50:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	4a54      	ldr	r2, [pc, #336]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d015      	beq.n	8003e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fd fc54 	bl	8001710 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fc50 	bl	8001710 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0cb      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	4b49      	ldr	r3, [pc, #292]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ee      	beq.n	8003e6c <HAL_RCC_OscConfig+0x334>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fd fc3e 	bl	8001710 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fd fc3a 	bl	8001710 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0b5      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eae:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec0:	4b39      	ldr	r3, [pc, #228]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a1 	beq.w	8004018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed6:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d05c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d141      	bne.n	8003f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fc0e 	bl	8001710 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd fc0a 	bl	8001710 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e087      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	491b      	ldr	r1, [pc, #108]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd fbe3 	bl	8001710 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fbdf 	bl	8001710 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e05c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f60:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x416>
 8003f6c:	e054      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fd fbcc 	bl	8001710 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd fbc8 	bl	8001710 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e045      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x444>
 8003f9a:	e03d      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e038      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004024 <HAL_RCC_OscConfig+0x4ec>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d028      	beq.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d121      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d11a      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d111      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0cc      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b68      	ldr	r3, [pc, #416]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d90c      	bls.n	8004064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b65      	ldr	r3, [pc, #404]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b63      	ldr	r3, [pc, #396]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0b8      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800407c:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a58      	ldr	r2, [pc, #352]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004094:	4b53      	ldr	r3, [pc, #332]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a52      	ldr	r2, [pc, #328]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800409e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b50      	ldr	r3, [pc, #320]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	494d      	ldr	r1, [pc, #308]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d044      	beq.n	8004148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d119      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b3f      	ldr	r3, [pc, #252]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e06f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3b      	ldr	r3, [pc, #236]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e067      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b37      	ldr	r3, [pc, #220]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4934      	ldr	r1, [pc, #208]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fd fafa 	bl	8001710 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fd faf6 	bl	8001710 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e04f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2b      	ldr	r3, [pc, #172]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d20c      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b22      	ldr	r3, [pc, #136]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e032      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4916      	ldr	r1, [pc, #88]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419a:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	490e      	ldr	r1, [pc, #56]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ae:	f000 f821 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	490a      	ldr	r1, [pc, #40]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	5ccb      	ldrb	r3, [r1, r3]
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	4a09      	ldr	r2, [pc, #36]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ca:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fa5a 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023c00 	.word	0x40023c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	08016960 	.word	0x08016960
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000004 	.word	0x20000004

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f8:	b090      	sub	sp, #64	@ 0x40
 80041fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004200:	2300      	movs	r3, #0
 8004202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004204:	2300      	movs	r3, #0
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420c:	4b59      	ldr	r3, [pc, #356]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x180>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d00d      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x40>
 8004218:	2b08      	cmp	r3, #8
 800421a:	f200 80a1 	bhi.w	8004360 <HAL_RCC_GetSysClockFreq+0x16c>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x34>
 8004222:	2b04      	cmp	r3, #4
 8004224:	d003      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0x3a>
 8004226:	e09b      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b53      	ldr	r3, [pc, #332]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x184>)
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800422c:	e09b      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800422e:	4b53      	ldr	r3, [pc, #332]	@ (800437c <HAL_RCC_GetSysClockFreq+0x188>)
 8004230:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004232:	e098      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004234:	4b4f      	ldr	r3, [pc, #316]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x180>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800423c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800423e:	4b4d      	ldr	r3, [pc, #308]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x180>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d028      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424a:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x180>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	2200      	movs	r2, #0
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	627a      	str	r2, [r7, #36]	@ 0x24
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800425c:	2100      	movs	r1, #0
 800425e:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCC_GetSysClockFreq+0x188>)
 8004260:	fb03 f201 	mul.w	r2, r3, r1
 8004264:	2300      	movs	r3, #0
 8004266:	fb00 f303 	mul.w	r3, r0, r3
 800426a:	4413      	add	r3, r2
 800426c:	4a43      	ldr	r2, [pc, #268]	@ (800437c <HAL_RCC_GetSysClockFreq+0x188>)
 800426e:	fba0 1202 	umull	r1, r2, r0, r2
 8004272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004274:	460a      	mov	r2, r1
 8004276:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800427a:	4413      	add	r3, r2
 800427c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800427e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004280:	2200      	movs	r2, #0
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	61fa      	str	r2, [r7, #28]
 8004286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800428a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800428e:	f7fb fff7 	bl	8000280 <__aeabi_uldivmod>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4613      	mov	r3, r2
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429a:	e053      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429c:	4b35      	ldr	r3, [pc, #212]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x180>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	099b      	lsrs	r3, r3, #6
 80042a2:	2200      	movs	r2, #0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	617a      	str	r2, [r7, #20]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042ae:	f04f 0b00 	mov.w	fp, #0
 80042b2:	4652      	mov	r2, sl
 80042b4:	465b      	mov	r3, fp
 80042b6:	f04f 0000 	mov.w	r0, #0
 80042ba:	f04f 0100 	mov.w	r1, #0
 80042be:	0159      	lsls	r1, r3, #5
 80042c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c4:	0150      	lsls	r0, r2, #5
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	ebb2 080a 	subs.w	r8, r2, sl
 80042ce:	eb63 090b 	sbc.w	r9, r3, fp
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042e6:	ebb2 0408 	subs.w	r4, r2, r8
 80042ea:	eb63 0509 	sbc.w	r5, r3, r9
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	00eb      	lsls	r3, r5, #3
 80042f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042fc:	00e2      	lsls	r2, r4, #3
 80042fe:	4614      	mov	r4, r2
 8004300:	461d      	mov	r5, r3
 8004302:	eb14 030a 	adds.w	r3, r4, sl
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	eb45 030b 	adc.w	r3, r5, fp
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800431a:	4629      	mov	r1, r5
 800431c:	028b      	lsls	r3, r1, #10
 800431e:	4621      	mov	r1, r4
 8004320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004324:	4621      	mov	r1, r4
 8004326:	028a      	lsls	r2, r1, #10
 8004328:	4610      	mov	r0, r2
 800432a:	4619      	mov	r1, r3
 800432c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432e:	2200      	movs	r2, #0
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	60fa      	str	r2, [r7, #12]
 8004334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004338:	f7fb ffa2 	bl	8000280 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4613      	mov	r3, r2
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x180>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	3301      	adds	r3, #1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004354:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800435e:	e002      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004360:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x184>)
 8004362:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004368:	4618      	mov	r0, r3
 800436a:	3740      	adds	r7, #64	@ 0x40
 800436c:	46bd      	mov	sp, r7
 800436e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800
 8004378:	00f42400 	.word	0x00f42400
 800437c:	017d7840 	.word	0x017d7840

08004380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004384:	4b03      	ldr	r3, [pc, #12]	@ (8004394 <HAL_RCC_GetHCLKFreq+0x14>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000000 	.word	0x20000000

08004398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800439c:	f7ff fff0 	bl	8004380 <HAL_RCC_GetHCLKFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0a9b      	lsrs	r3, r3, #10
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	4903      	ldr	r1, [pc, #12]	@ (80043bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40023800 	.word	0x40023800
 80043bc:	08016970 	.word	0x08016970

080043c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c4:	f7ff ffdc 	bl	8004380 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0b5b      	lsrs	r3, r3, #13
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4903      	ldr	r1, [pc, #12]	@ (80043e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40023800 	.word	0x40023800
 80043e4:	08016970 	.word	0x08016970

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800440c:	2b00      	cmp	r3, #0
 800440e:	d035      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004410:	4b62      	ldr	r3, [pc, #392]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004416:	f7fd f97b 	bl	8001710 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800441e:	f7fd f977 	bl	8001710 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0b0      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004430:	4b5b      	ldr	r3, [pc, #364]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	019a      	lsls	r2, r3, #6
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	071b      	lsls	r3, r3, #28
 8004448:	4955      	ldr	r1, [pc, #340]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004450:	4b52      	ldr	r3, [pc, #328]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004456:	f7fd f95b 	bl	8001710 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800445e:	f7fd f957 	bl	8001710 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e090      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004470:	4b4b      	ldr	r3, [pc, #300]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8083 	beq.w	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b44      	ldr	r3, [pc, #272]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	4a43      	ldr	r2, [pc, #268]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004498:	6413      	str	r3, [r2, #64]	@ 0x40
 800449a:	4b41      	ldr	r3, [pc, #260]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044a6:	4b3f      	ldr	r3, [pc, #252]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3e      	ldr	r2, [pc, #248]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044b2:	f7fd f92d 	bl	8001710 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ba:	f7fd f929 	bl	8001710 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e062      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044cc:	4b35      	ldr	r3, [pc, #212]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d8:	4b31      	ldr	r3, [pc, #196]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02f      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d028      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f6:	4b2a      	ldr	r3, [pc, #168]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004500:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004506:	4b28      	ldr	r3, [pc, #160]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800450c:	4a24      	ldr	r2, [pc, #144]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004512:	4b23      	ldr	r3, [pc, #140]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d114      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800451e:	f7fd f8f7 	bl	8001710 <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd f8f3 	bl	8001710 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e02a      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	4b18      	ldr	r3, [pc, #96]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ee      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004554:	d10d      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004556:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456a:	490d      	ldr	r1, [pc, #52]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]
 8004570:	e005      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004578:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800457c:	6093      	str	r3, [r2, #8]
 800457e:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	4905      	ldr	r1, [pc, #20]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	42470068 	.word	0x42470068
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40007000 	.word	0x40007000
 80045a8:	42470e40 	.word	0x42470e40

080045ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e073      	b.n	80046aa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7f5b      	ldrb	r3, [r3, #29]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fb56 	bl	8000c84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d055      	beq.n	8004698 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	22ca      	movs	r2, #202	@ 0xca
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2253      	movs	r2, #83	@ 0x53
 80045fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f87f 	bl	8004700 <RTC_EnterInitMode>
 8004602:	4603      	mov	r3, r0
 8004604:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d12c      	bne.n	8004666 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800461a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800461e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6899      	ldr	r1, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68d2      	ldr	r2, [r2, #12]
 8004646:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6919      	ldr	r1, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	041a      	lsls	r2, r3, #16
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f886 	bl	800476e <RTC_ExitInitMode>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d110      	bne.n	800468e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	22ff      	movs	r2, #255	@ 0xff
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24
 8004696:	e001      	b.n	800469c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0d      	ldr	r2, [pc, #52]	@ (80046fc <HAL_RTC_WaitForSynchro+0x48>)
 80046c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c8:	f7fd f822 	bl	8001710 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046ce:	e009      	b.n	80046e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046d0:	f7fd f81e 	bl	8001710 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046de:	d901      	bls.n	80046e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e007      	b.n	80046f4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0ee      	beq.n	80046d0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00017f5f 	.word	0x00017f5f

08004700 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d122      	bne.n	8004764 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800472c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800472e:	f7fc ffef 	bl	8001710 <HAL_GetTick>
 8004732:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004734:	e00c      	b.n	8004750 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004736:	f7fc ffeb 	bl	8001710 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004744:	d904      	bls.n	8004750 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2204      	movs	r2, #4
 800474a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <RTC_EnterInitMode+0x64>
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d1e8      	bne.n	8004736 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004788:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff8b 	bl	80046b4 <HAL_RTC_WaitForSynchro>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2204      	movs	r2, #4
 80047a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e07b      	b.n	80048c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047da:	d009      	beq.n	80047f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	61da      	str	r2, [r3, #28]
 80047e2:	e005      	b.n	80047f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fa9a 	bl	8000d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004826:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004874:	ea42 0103 	orr.w	r1, r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	f003 0104 	and.w	r1, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	f003 0210 	and.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e042      	b.n	8004962 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fc fc8f 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2224      	movs	r2, #36	@ 0x24
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800490c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fc86 	bl	8005220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004932:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004942:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b0ba      	sub	sp, #232	@ 0xe8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_UART_IRQHandler+0x66>
 80049be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fb69 	bl	80050a2 <UART_Receive_IT>
      return;
 80049d0:	e25b      	b.n	8004e8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80de 	beq.w	8004b98 <HAL_UART_IRQHandler+0x22c>
 80049dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d106      	bne.n	80049f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80d1 	beq.w	8004b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_UART_IRQHandler+0xae>
 8004a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	f043 0201 	orr.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00b      	beq.n	8004a3e <HAL_UART_IRQHandler+0xd2>
 8004a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f043 0202 	orr.w	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_UART_IRQHandler+0xf6>
 8004a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5a:	f043 0204 	orr.w	r2, r3, #4
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d011      	beq.n	8004a92 <HAL_UART_IRQHandler+0x126>
 8004a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d105      	bne.n	8004a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f043 0208 	orr.w	r2, r3, #8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 81f2 	beq.w	8004e80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_UART_IRQHandler+0x14e>
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 faf4 	bl	80050a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b40      	cmp	r3, #64	@ 0x40
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x17a>
 8004ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d04f      	beq.n	8004b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9fc 	bl	8004ee4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af6:	2b40      	cmp	r3, #64	@ 0x40
 8004af8:	d141      	bne.n	8004b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3314      	adds	r3, #20
 8004b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1d9      	bne.n	8004afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d013      	beq.n	8004b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b52:	4a7e      	ldr	r2, [pc, #504]	@ (8004d4c <HAL_UART_IRQHandler+0x3e0>)
 8004b54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fd fad9 	bl	8002112 <HAL_DMA_Abort_IT>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b70:	4610      	mov	r0, r2
 8004b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e00e      	b.n	8004b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f99e 	bl	8004eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e00a      	b.n	8004b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f99a 	bl	8004eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	e006      	b.n	8004b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f996 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b92:	e175      	b.n	8004e80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	bf00      	nop
    return;
 8004b96:	e173      	b.n	8004e80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	f040 814f 	bne.w	8004e40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8148 	beq.w	8004e40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8141 	beq.w	8004e40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b40      	cmp	r3, #64	@ 0x40
 8004be0:	f040 80b6 	bne.w	8004d50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8145 	beq.w	8004e84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c02:	429a      	cmp	r2, r3
 8004c04:	f080 813e 	bcs.w	8004e84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c1a:	f000 8088 	beq.w	8004d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1d9      	bne.n	8004c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ca0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e1      	bne.n	8004c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3314      	adds	r3, #20
 8004cac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3314      	adds	r3, #20
 8004cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e3      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e3      	bne.n	8004cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fd f982 	bl	8002032 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8c1 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d4a:	e09b      	b.n	8004e84 <HAL_UART_IRQHandler+0x518>
 8004d4c:	08004fab 	.word	0x08004fab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 808e 	beq.w	8004e88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8089 	beq.w	8004e88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e3      	bne.n	8004d76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3314      	adds	r3, #20
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3314      	adds	r3, #20
 8004dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e3      	bne.n	8004dae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0310 	bic.w	r3, r3, #16
 8004e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e18:	61fa      	str	r2, [r7, #28]
 8004e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	69b9      	ldr	r1, [r7, #24]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	617b      	str	r3, [r7, #20]
   return(result);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e3      	bne.n	8004df4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f847 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e3e:	e023      	b.n	8004e88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <HAL_UART_IRQHandler+0x4f4>
 8004e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f8ba 	bl	8004fd2 <UART_Transmit_IT>
    return;
 8004e5e:	e014      	b.n	8004e8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <HAL_UART_IRQHandler+0x51e>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f8fa 	bl	8005072 <UART_EndTransmit_IT>
    return;
 8004e7e:	e004      	b.n	8004e8a <HAL_UART_IRQHandler+0x51e>
    return;
 8004e80:	bf00      	nop
 8004e82:	e002      	b.n	8004e8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e84:	bf00      	nop
 8004e86:	e000      	b.n	8004e8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e88:	bf00      	nop
  }
}
 8004e8a:	37e8      	adds	r7, #232	@ 0xe8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b095      	sub	sp, #84	@ 0x54
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e5      	bne.n	8004f20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d119      	bne.n	8004f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f7c:	61ba      	str	r2, [r7, #24]
 8004f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6979      	ldr	r1, [r7, #20]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f9e:	bf00      	nop
 8004fa0:	3754      	adds	r7, #84	@ 0x54
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff ff77 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b21      	cmp	r3, #33	@ 0x21
 8004fe4:	d13e      	bne.n	8005064 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	d114      	bne.n	800501a <UART_Transmit_IT+0x48>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	1c9a      	adds	r2, r3, #2
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]
 8005018:	e008      	b.n	800502c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	1c59      	adds	r1, r3, #1
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6211      	str	r1, [r2, #32]
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29b      	uxth	r3, r3
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4619      	mov	r1, r3
 800503a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10f      	bne.n	8005060 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800504e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800505e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005088:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fefc 	bl	8004e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b08c      	sub	sp, #48	@ 0x30
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b22      	cmp	r3, #34	@ 0x22
 80050b4:	f040 80ae 	bne.w	8005214 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c0:	d117      	bne.n	80050f2 <UART_Receive_IT+0x50>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d113      	bne.n	80050f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80050f0:	e026      	b.n	8005140 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005104:	d007      	beq.n	8005116 <UART_Receive_IT+0x74>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <UART_Receive_IT+0x82>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e008      	b.n	8005136 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005130:	b2da      	uxtb	r2, r3
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4619      	mov	r1, r3
 800514e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005150:	2b00      	cmp	r3, #0
 8005152:	d15d      	bne.n	8005210 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0220 	bic.w	r2, r2, #32
 8005162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	2b01      	cmp	r3, #1
 8005198:	d135      	bne.n	8005206 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	613b      	str	r3, [r7, #16]
   return(result);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f023 0310 	bic.w	r3, r3, #16
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	330c      	adds	r3, #12
 80051be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c0:	623a      	str	r2, [r7, #32]
 80051c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	69f9      	ldr	r1, [r7, #28]
 80051c6:	6a3a      	ldr	r2, [r7, #32]
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e5      	bne.n	80051a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d10a      	bne.n	80051f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fe64 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
 8005204:	e002      	b.n	800520c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fe4c 	bl	8004ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	e002      	b.n	8005216 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3730      	adds	r7, #48	@ 0x30
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b0c0      	sub	sp, #256	@ 0x100
 8005226:	af00      	add	r7, sp, #0
 8005228:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	68d9      	ldr	r1, [r3, #12]
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	ea40 0301 	orr.w	r3, r0, r1
 8005248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	431a      	orrs	r2, r3
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005278:	f021 010c 	bic.w	r1, r1, #12
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005286:	430b      	orrs	r3, r1
 8005288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	6999      	ldr	r1, [r3, #24]
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	ea40 0301 	orr.w	r3, r0, r1
 80052a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b8f      	ldr	r3, [pc, #572]	@ (80054ec <UART_SetConfig+0x2cc>)
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d005      	beq.n	80052c0 <UART_SetConfig+0xa0>
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b8d      	ldr	r3, [pc, #564]	@ (80054f0 <UART_SetConfig+0x2d0>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	d104      	bne.n	80052ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7ff f87e 	bl	80043c0 <HAL_RCC_GetPCLK2Freq>
 80052c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052c8:	e003      	b.n	80052d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ca:	f7ff f865 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 80052ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052dc:	f040 810c 	bne.w	80054f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052f2:	4622      	mov	r2, r4
 80052f4:	462b      	mov	r3, r5
 80052f6:	1891      	adds	r1, r2, r2
 80052f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052fa:	415b      	adcs	r3, r3
 80052fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005302:	4621      	mov	r1, r4
 8005304:	eb12 0801 	adds.w	r8, r2, r1
 8005308:	4629      	mov	r1, r5
 800530a:	eb43 0901 	adc.w	r9, r3, r1
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800531a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005322:	4690      	mov	r8, r2
 8005324:	4699      	mov	r9, r3
 8005326:	4623      	mov	r3, r4
 8005328:	eb18 0303 	adds.w	r3, r8, r3
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005330:	462b      	mov	r3, r5
 8005332:	eb49 0303 	adc.w	r3, r9, r3
 8005336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005346:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800534a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800534e:	460b      	mov	r3, r1
 8005350:	18db      	adds	r3, r3, r3
 8005352:	653b      	str	r3, [r7, #80]	@ 0x50
 8005354:	4613      	mov	r3, r2
 8005356:	eb42 0303 	adc.w	r3, r2, r3
 800535a:	657b      	str	r3, [r7, #84]	@ 0x54
 800535c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005364:	f7fa ff8c 	bl	8000280 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4b61      	ldr	r3, [pc, #388]	@ (80054f4 <UART_SetConfig+0x2d4>)
 800536e:	fba3 2302 	umull	r2, r3, r3, r2
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	011c      	lsls	r4, r3, #4
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005380:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005390:	415b      	adcs	r3, r3
 8005392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005398:	4641      	mov	r1, r8
 800539a:	eb12 0a01 	adds.w	sl, r2, r1
 800539e:	4649      	mov	r1, r9
 80053a0:	eb43 0b01 	adc.w	fp, r3, r1
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b8:	4692      	mov	sl, r2
 80053ba:	469b      	mov	fp, r3
 80053bc:	4643      	mov	r3, r8
 80053be:	eb1a 0303 	adds.w	r3, sl, r3
 80053c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053c6:	464b      	mov	r3, r9
 80053c8:	eb4b 0303 	adc.w	r3, fp, r3
 80053cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053e4:	460b      	mov	r3, r1
 80053e6:	18db      	adds	r3, r3, r3
 80053e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ea:	4613      	mov	r3, r2
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053fa:	f7fa ff41 	bl	8000280 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4611      	mov	r1, r2
 8005404:	4b3b      	ldr	r3, [pc, #236]	@ (80054f4 <UART_SetConfig+0x2d4>)
 8005406:	fba3 2301 	umull	r2, r3, r3, r1
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2264      	movs	r2, #100	@ 0x64
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	1acb      	subs	r3, r1, r3
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800541a:	4b36      	ldr	r3, [pc, #216]	@ (80054f4 <UART_SetConfig+0x2d4>)
 800541c:	fba3 2302 	umull	r2, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005428:	441c      	add	r4, r3
 800542a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800542e:	2200      	movs	r2, #0
 8005430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005434:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	1891      	adds	r1, r2, r2
 8005442:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005444:	415b      	adcs	r3, r3
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800544c:	4641      	mov	r1, r8
 800544e:	1851      	adds	r1, r2, r1
 8005450:	6339      	str	r1, [r7, #48]	@ 0x30
 8005452:	4649      	mov	r1, r9
 8005454:	414b      	adcs	r3, r1
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005464:	4659      	mov	r1, fp
 8005466:	00cb      	lsls	r3, r1, #3
 8005468:	4651      	mov	r1, sl
 800546a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546e:	4651      	mov	r1, sl
 8005470:	00ca      	lsls	r2, r1, #3
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	4603      	mov	r3, r0
 8005478:	4642      	mov	r2, r8
 800547a:	189b      	adds	r3, r3, r2
 800547c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005480:	464b      	mov	r3, r9
 8005482:	460a      	mov	r2, r1
 8005484:	eb42 0303 	adc.w	r3, r2, r3
 8005488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005498:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800549c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054a0:	460b      	mov	r3, r1
 80054a2:	18db      	adds	r3, r3, r3
 80054a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054a6:	4613      	mov	r3, r2
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054b6:	f7fa fee3 	bl	8000280 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <UART_SetConfig+0x2d4>)
 80054c0:	fba3 1302 	umull	r1, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	2164      	movs	r1, #100	@ 0x64
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	3332      	adds	r3, #50	@ 0x32
 80054d2:	4a08      	ldr	r2, [pc, #32]	@ (80054f4 <UART_SetConfig+0x2d4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	f003 0207 	and.w	r2, r3, #7
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4422      	add	r2, r4
 80054e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054e8:	e106      	b.n	80056f8 <UART_SetConfig+0x4d8>
 80054ea:	bf00      	nop
 80054ec:	40011000 	.word	0x40011000
 80054f0:	40011400 	.word	0x40011400
 80054f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005502:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800550a:	4642      	mov	r2, r8
 800550c:	464b      	mov	r3, r9
 800550e:	1891      	adds	r1, r2, r2
 8005510:	6239      	str	r1, [r7, #32]
 8005512:	415b      	adcs	r3, r3
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
 8005516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800551a:	4641      	mov	r1, r8
 800551c:	1854      	adds	r4, r2, r1
 800551e:	4649      	mov	r1, r9
 8005520:	eb43 0501 	adc.w	r5, r3, r1
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	00eb      	lsls	r3, r5, #3
 800552e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005532:	00e2      	lsls	r2, r4, #3
 8005534:	4614      	mov	r4, r2
 8005536:	461d      	mov	r5, r3
 8005538:	4643      	mov	r3, r8
 800553a:	18e3      	adds	r3, r4, r3
 800553c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005540:	464b      	mov	r3, r9
 8005542:	eb45 0303 	adc.w	r3, r5, r3
 8005546:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005556:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005566:	4629      	mov	r1, r5
 8005568:	008b      	lsls	r3, r1, #2
 800556a:	4621      	mov	r1, r4
 800556c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005570:	4621      	mov	r1, r4
 8005572:	008a      	lsls	r2, r1, #2
 8005574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005578:	f7fa fe82 	bl	8000280 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4b60      	ldr	r3, [pc, #384]	@ (8005704 <UART_SetConfig+0x4e4>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	011c      	lsls	r4, r3, #4
 800558a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005594:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	61b9      	str	r1, [r7, #24]
 80055a4:	415b      	adcs	r3, r3
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ac:	4641      	mov	r1, r8
 80055ae:	1851      	adds	r1, r2, r1
 80055b0:	6139      	str	r1, [r7, #16]
 80055b2:	4649      	mov	r1, r9
 80055b4:	414b      	adcs	r3, r1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c4:	4659      	mov	r1, fp
 80055c6:	00cb      	lsls	r3, r1, #3
 80055c8:	4651      	mov	r1, sl
 80055ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ce:	4651      	mov	r1, sl
 80055d0:	00ca      	lsls	r2, r1, #3
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	4642      	mov	r2, r8
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055e0:	464b      	mov	r3, r9
 80055e2:	460a      	mov	r2, r1
 80055e4:	eb42 0303 	adc.w	r3, r2, r3
 80055e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005604:	4649      	mov	r1, r9
 8005606:	008b      	lsls	r3, r1, #2
 8005608:	4641      	mov	r1, r8
 800560a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800560e:	4641      	mov	r1, r8
 8005610:	008a      	lsls	r2, r1, #2
 8005612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005616:	f7fa fe33 	bl	8000280 <__aeabi_uldivmod>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4611      	mov	r1, r2
 8005620:	4b38      	ldr	r3, [pc, #224]	@ (8005704 <UART_SetConfig+0x4e4>)
 8005622:	fba3 2301 	umull	r2, r3, r3, r1
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	2264      	movs	r2, #100	@ 0x64
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	1acb      	subs	r3, r1, r3
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	3332      	adds	r3, #50	@ 0x32
 8005634:	4a33      	ldr	r2, [pc, #204]	@ (8005704 <UART_SetConfig+0x4e4>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005640:	441c      	add	r4, r3
 8005642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005646:	2200      	movs	r2, #0
 8005648:	673b      	str	r3, [r7, #112]	@ 0x70
 800564a:	677a      	str	r2, [r7, #116]	@ 0x74
 800564c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005650:	4642      	mov	r2, r8
 8005652:	464b      	mov	r3, r9
 8005654:	1891      	adds	r1, r2, r2
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	415b      	adcs	r3, r3
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005660:	4641      	mov	r1, r8
 8005662:	1851      	adds	r1, r2, r1
 8005664:	6039      	str	r1, [r7, #0]
 8005666:	4649      	mov	r1, r9
 8005668:	414b      	adcs	r3, r1
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005678:	4659      	mov	r1, fp
 800567a:	00cb      	lsls	r3, r1, #3
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005682:	4651      	mov	r1, sl
 8005684:	00ca      	lsls	r2, r1, #3
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	4603      	mov	r3, r0
 800568c:	4642      	mov	r2, r8
 800568e:	189b      	adds	r3, r3, r2
 8005690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005692:	464b      	mov	r3, r9
 8005694:	460a      	mov	r2, r1
 8005696:	eb42 0303 	adc.w	r3, r2, r3
 800569a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80056a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056b4:	4649      	mov	r1, r9
 80056b6:	008b      	lsls	r3, r1, #2
 80056b8:	4641      	mov	r1, r8
 80056ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056be:	4641      	mov	r1, r8
 80056c0:	008a      	lsls	r2, r1, #2
 80056c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056c6:	f7fa fddb 	bl	8000280 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005704 <UART_SetConfig+0x4e4>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	@ 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	3332      	adds	r3, #50	@ 0x32
 80056e2:	4a08      	ldr	r2, [pc, #32]	@ (8005704 <UART_SetConfig+0x4e4>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4422      	add	r2, r4
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056fe:	46bd      	mov	sp, r7
 8005700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005704:	51eb851f 	.word	0x51eb851f

08005708 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800570e:	f001 f850 	bl	80067b2 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005712:	4b12      	ldr	r3, [pc, #72]	@ (800575c <MX_LWIP_Init+0x54>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005718:	4b11      	ldr	r3, [pc, #68]	@ (8005760 <MX_LWIP_Init+0x58>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800571e:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <MX_LWIP_Init+0x5c>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005724:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <MX_LWIP_Init+0x60>)
 8005726:	9302      	str	r3, [sp, #8]
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <MX_LWIP_Init+0x64>)
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	2300      	movs	r3, #0
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <MX_LWIP_Init+0x5c>)
 8005732:	4a0b      	ldr	r2, [pc, #44]	@ (8005760 <MX_LWIP_Init+0x58>)
 8005734:	4909      	ldr	r1, [pc, #36]	@ (800575c <MX_LWIP_Init+0x54>)
 8005736:	480e      	ldr	r0, [pc, #56]	@ (8005770 <MX_LWIP_Init+0x68>)
 8005738:	f001 fd28 	bl	800718c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800573c:	480c      	ldr	r0, [pc, #48]	@ (8005770 <MX_LWIP_Init+0x68>)
 800573e:	f001 fee9 	bl	8007514 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005742:	480b      	ldr	r0, [pc, #44]	@ (8005770 <MX_LWIP_Init+0x68>)
 8005744:	f001 fef6 	bl	8007534 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005748:	490a      	ldr	r1, [pc, #40]	@ (8005774 <MX_LWIP_Init+0x6c>)
 800574a:	4809      	ldr	r0, [pc, #36]	@ (8005770 <MX_LWIP_Init+0x68>)
 800574c:	f002 f808 	bl	8007760 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005750:	4807      	ldr	r0, [pc, #28]	@ (8005770 <MX_LWIP_Init+0x68>)
 8005752:	f009 fb0f 	bl	800ed74 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005756:	bf00      	nop
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	200002a8 	.word	0x200002a8
 8005760:	200002ac 	.word	0x200002ac
 8005764:	200002b0 	.word	0x200002b0
 8005768:	0801294d 	.word	0x0801294d
 800576c:	08005a85 	.word	0x08005a85
 8005770:	2000026c 	.word	0x2000026c
 8005774:	080057c9 	.word	0x080057c9

08005778 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005780:	f7fb ffc6 	bl	8001710 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	4b08      	ldr	r3, [pc, #32]	@ (80057a8 <Ethernet_Link_Periodic_Handle+0x30>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b63      	cmp	r3, #99	@ 0x63
 800578e:	d907      	bls.n	80057a0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005790:	f7fb ffbe 	bl	8001710 <HAL_GetTick>
 8005794:	4603      	mov	r3, r0
 8005796:	4a04      	ldr	r2, [pc, #16]	@ (80057a8 <Ethernet_Link_Periodic_Handle+0x30>)
 8005798:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fac6 	bl	8005d2c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000268 	.word	0x20000268

080057ac <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80057b0:	4804      	ldr	r0, [pc, #16]	@ (80057c4 <MX_LWIP_Process+0x18>)
 80057b2:	f000 f947 	bl	8005a44 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80057b6:	f008 f9cd 	bl	800db54 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80057ba:	4802      	ldr	r0, [pc, #8]	@ (80057c4 <MX_LWIP_Process+0x18>)
 80057bc:	f7ff ffdc 	bl	8005778 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80057c0:	bf00      	nop
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	2000026c 	.word	0x2000026c

080057c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80057e8:	4b40      	ldr	r3, [pc, #256]	@ (80058ec <low_level_init+0x110>)
 80057ea:	4a41      	ldr	r2, [pc, #260]	@ (80058f0 <low_level_init+0x114>)
 80057ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80057ee:	2300      	movs	r3, #0
 80057f0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80057f6:	23e1      	movs	r3, #225	@ 0xe1
 80057f8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80057fa:	2300      	movs	r3, #0
 80057fc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80057fe:	2300      	movs	r3, #0
 8005800:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x01;
 8005802:	2301      	movs	r3, #1
 8005804:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005806:	4a39      	ldr	r2, [pc, #228]	@ (80058ec <low_level_init+0x110>)
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800580e:	4b37      	ldr	r3, [pc, #220]	@ (80058ec <low_level_init+0x110>)
 8005810:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005814:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005816:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <low_level_init+0x110>)
 8005818:	4a36      	ldr	r2, [pc, #216]	@ (80058f4 <low_level_init+0x118>)
 800581a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800581c:	4b33      	ldr	r3, [pc, #204]	@ (80058ec <low_level_init+0x110>)
 800581e:	4a36      	ldr	r2, [pc, #216]	@ (80058f8 <low_level_init+0x11c>)
 8005820:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005822:	4b32      	ldr	r3, [pc, #200]	@ (80058ec <low_level_init+0x110>)
 8005824:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005828:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800582a:	4830      	ldr	r0, [pc, #192]	@ (80058ec <low_level_init+0x110>)
 800582c:	f7fc fc94 	bl	8002158 <HAL_ETH_Init>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005834:	2238      	movs	r2, #56	@ 0x38
 8005836:	2100      	movs	r1, #0
 8005838:	4830      	ldr	r0, [pc, #192]	@ (80058fc <low_level_init+0x120>)
 800583a:	f00d fac2 	bl	8012dc2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800583e:	4b2f      	ldr	r3, [pc, #188]	@ (80058fc <low_level_init+0x120>)
 8005840:	2221      	movs	r2, #33	@ 0x21
 8005842:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005844:	4b2d      	ldr	r3, [pc, #180]	@ (80058fc <low_level_init+0x120>)
 8005846:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800584a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800584c:	4b2b      	ldr	r3, [pc, #172]	@ (80058fc <low_level_init+0x120>)
 800584e:	2200      	movs	r2, #0
 8005850:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005852:	482b      	ldr	r0, [pc, #172]	@ (8005900 <low_level_init+0x124>)
 8005854:	f001 fb62 	bl	8006f1c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2206      	movs	r2, #6
 800585c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005860:	4b22      	ldr	r3, [pc, #136]	@ (80058ec <low_level_init+0x110>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	781a      	ldrb	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800586c:	4b1f      	ldr	r3, [pc, #124]	@ (80058ec <low_level_init+0x110>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	785a      	ldrb	r2, [r3, #1]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005878:	4b1c      	ldr	r3, [pc, #112]	@ (80058ec <low_level_init+0x110>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	789a      	ldrb	r2, [r3, #2]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005884:	4b19      	ldr	r3, [pc, #100]	@ (80058ec <low_level_init+0x110>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	78da      	ldrb	r2, [r3, #3]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005890:	4b16      	ldr	r3, [pc, #88]	@ (80058ec <low_level_init+0x110>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	791a      	ldrb	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800589c:	4b13      	ldr	r3, [pc, #76]	@ (80058ec <low_level_init+0x110>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	795a      	ldrb	r2, [r3, #5]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80058ae:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058b6:	f043 030a 	orr.w	r3, r3, #10
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80058c2:	4910      	ldr	r1, [pc, #64]	@ (8005904 <low_level_init+0x128>)
 80058c4:	4810      	ldr	r0, [pc, #64]	@ (8005908 <low_level_init+0x12c>)
 80058c6:	f7fb fd5c 	bl	8001382 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80058ca:	480f      	ldr	r0, [pc, #60]	@ (8005908 <low_level_init+0x12c>)
 80058cc:	f7fb fd8b 	bl	80013e6 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa28 	bl	8005d2c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80058dc:	e001      	b.n	80058e2 <low_level_init+0x106>
    Error_Handler();
 80058de:	f7fb f9a5 	bl	8000c2c <Error_Handler>
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20004d80 	.word	0x20004d80
 80058f0:	40028000 	.word	0x40028000
 80058f4:	20004ce0 	.word	0x20004ce0
 80058f8:	20004c40 	.word	0x20004c40
 80058fc:	20004e30 	.word	0x20004e30
 8005900:	08016978 	.word	0x08016978
 8005904:	2000000c 	.word	0x2000000c
 8005908:	20004e68 	.word	0x20004e68

0800590c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b092      	sub	sp, #72	@ 0x48
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	2230      	movs	r2, #48	@ 0x30
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f00d fa48 	bl	8012dc2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005932:	f107 030c 	add.w	r3, r7, #12
 8005936:	2230      	movs	r2, #48	@ 0x30
 8005938:	2100      	movs	r1, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f00d fa41 	bl	8012dc2 <memset>

  for(q = p; q != NULL; q = q->next)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	643b      	str	r3, [r7, #64]	@ 0x40
 8005944:	e045      	b.n	80059d2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005948:	2b03      	cmp	r3, #3
 800594a:	d902      	bls.n	8005952 <low_level_output+0x46>
      return ERR_IF;
 800594c:	f06f 030b 	mvn.w	r3, #11
 8005950:	e055      	b.n	80059fe <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005958:	4613      	mov	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3348      	adds	r3, #72	@ 0x48
 8005962:	443b      	add	r3, r7
 8005964:	3b3c      	subs	r3, #60	@ 0x3c
 8005966:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800596a:	895b      	ldrh	r3, [r3, #10]
 800596c:	4619      	mov	r1, r3
 800596e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005970:	4613      	mov	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	3348      	adds	r3, #72	@ 0x48
 800597a:	443b      	add	r3, r7
 800597c:	3b38      	subs	r3, #56	@ 0x38
 800597e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005982:	2b00      	cmp	r3, #0
 8005984:	d011      	beq.n	80059aa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	f107 000c 	add.w	r0, r7, #12
 800598e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005990:	460b      	mov	r3, r1
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	440b      	add	r3, r1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	18c1      	adds	r1, r0, r3
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	3348      	adds	r3, #72	@ 0x48
 80059a4:	443b      	add	r3, r7
 80059a6:	3b34      	subs	r3, #52	@ 0x34
 80059a8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80059aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80059b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059b4:	4613      	mov	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	3348      	adds	r3, #72	@ 0x48
 80059be:	443b      	add	r3, r7
 80059c0:	3b34      	subs	r3, #52	@ 0x34
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80059c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c8:	3301      	adds	r3, #1
 80059ca:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80059cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1b6      	bne.n	8005946 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	891b      	ldrh	r3, [r3, #8]
 80059dc:	461a      	mov	r2, r3
 80059de:	4b0a      	ldr	r3, [pc, #40]	@ (8005a08 <low_level_output+0xfc>)
 80059e0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80059e2:	4a09      	ldr	r2, [pc, #36]	@ (8005a08 <low_level_output+0xfc>)
 80059e4:	f107 030c 	add.w	r3, r7, #12
 80059e8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80059ea:	4a07      	ldr	r2, [pc, #28]	@ (8005a08 <low_level_output+0xfc>)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80059f0:	2214      	movs	r2, #20
 80059f2:	4905      	ldr	r1, [pc, #20]	@ (8005a08 <low_level_output+0xfc>)
 80059f4:	4805      	ldr	r0, [pc, #20]	@ (8005a0c <low_level_output+0x100>)
 80059f6:	f7fc fce5 	bl	80023c4 <HAL_ETH_Transmit>

  return errval;
 80059fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3748      	adds	r7, #72	@ 0x48
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20004e30 	.word	0x20004e30
 8005a0c:	20004d80 	.word	0x20004d80

08005a10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005a1c:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <low_level_input+0x2c>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005a24:	f107 030c 	add.w	r3, r7, #12
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4805      	ldr	r0, [pc, #20]	@ (8005a40 <low_level_input+0x30>)
 8005a2c:	f7fc fd5e 	bl	80024ec <HAL_ETH_ReadData>
  }

  return p;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20004c3c 	.word	0x20004c3c
 8005a40:	20004d80 	.word	0x20004d80

08005a44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff ffdd 	bl	8005a10 <low_level_input>
 8005a56:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	4798      	blx	r3
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f002 f9f6 	bl	8007e60 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1ea      	bne.n	8005a50 <ethernetif_input+0xc>
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <ethernetif_init+0x1c>
 8005a92:	4b0e      	ldr	r3, [pc, #56]	@ (8005acc <ethernetif_init+0x48>)
 8005a94:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8005a98:	490d      	ldr	r1, [pc, #52]	@ (8005ad0 <ethernetif_init+0x4c>)
 8005a9a:	480e      	ldr	r0, [pc, #56]	@ (8005ad4 <ethernetif_init+0x50>)
 8005a9c:	f00d f92c 	bl	8012cf8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2273      	movs	r2, #115	@ 0x73
 8005aa4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2274      	movs	r2, #116	@ 0x74
 8005aac:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <ethernetif_init+0x54>)
 8005ab4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a08      	ldr	r2, [pc, #32]	@ (8005adc <ethernetif_init+0x58>)
 8005aba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fe8d 	bl	80057dc <low_level_init>

  return ERR_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	08013b24 	.word	0x08013b24
 8005ad0:	08013b40 	.word	0x08013b40
 8005ad4:	08013b50 	.word	0x08013b50
 8005ad8:	08010c95 	.word	0x08010c95
 8005adc:	0800590d 	.word	0x0800590d

08005ae0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005aec:	68f9      	ldr	r1, [r7, #12]
 8005aee:	4807      	ldr	r0, [pc, #28]	@ (8005b0c <pbuf_free_custom+0x2c>)
 8005af0:	f001 faf6 	bl	80070e0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005af4:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <pbuf_free_custom+0x30>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d102      	bne.n	8005b02 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005afc:	4b04      	ldr	r3, [pc, #16]	@ (8005b10 <pbuf_free_custom+0x30>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	701a      	strb	r2, [r3, #0]
  }
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08016978 	.word	0x08016978
 8005b10:	20004c3c 	.word	0x20004c3c

08005b14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005b18:	f7fb fdfa 	bl	8001710 <HAL_GetTick>
 8005b1c:	4603      	mov	r3, r0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08e      	sub	sp, #56	@ 0x38
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a4e      	ldr	r2, [pc, #312]	@ (8005c7c <HAL_ETH_MspInit+0x158>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	f040 8095 	bne.w	8005c72 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005b48:	2300      	movs	r3, #0
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b50:	4a4b      	ldr	r2, [pc, #300]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b58:	4b49      	ldr	r3, [pc, #292]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b60:	623b      	str	r3, [r7, #32]
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	4b45      	ldr	r3, [pc, #276]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	4a44      	ldr	r2, [pc, #272]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b74:	4b42      	ldr	r3, [pc, #264]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	2300      	movs	r3, #0
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	4b3e      	ldr	r3, [pc, #248]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	4a3d      	ldr	r2, [pc, #244]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b90:	4b3b      	ldr	r3, [pc, #236]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	4b37      	ldr	r3, [pc, #220]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba4:	4a36      	ldr	r2, [pc, #216]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bac:	4b34      	ldr	r3, [pc, #208]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb8:	2300      	movs	r3, #0
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	4b30      	ldr	r3, [pc, #192]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	4b29      	ldr	r3, [pc, #164]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	4a28      	ldr	r2, [pc, #160]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005bde:	f043 0302 	orr.w	r3, r3, #2
 8005be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005be4:	4b26      	ldr	r3, [pc, #152]	@ (8005c80 <HAL_ETH_MspInit+0x15c>)
 8005be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005bf0:	2332      	movs	r3, #50	@ 0x32
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c00:	230b      	movs	r3, #11
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c08:	4619      	mov	r1, r3
 8005c0a:	481e      	ldr	r0, [pc, #120]	@ (8005c84 <HAL_ETH_MspInit+0x160>)
 8005c0c:	f7fd fc9a 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005c10:	2386      	movs	r3, #134	@ 0x86
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c14:	2302      	movs	r3, #2
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c20:	230b      	movs	r3, #11
 8005c22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4817      	ldr	r0, [pc, #92]	@ (8005c88 <HAL_ETH_MspInit+0x164>)
 8005c2c:	f7fd fc8a 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005c30:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c36:	2302      	movs	r3, #2
 8005c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c42:	230b      	movs	r3, #11
 8005c44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	480f      	ldr	r0, [pc, #60]	@ (8005c8c <HAL_ETH_MspInit+0x168>)
 8005c4e:	f7fd fc79 	bl	8003544 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005c52:	2200      	movs	r2, #0
 8005c54:	2100      	movs	r1, #0
 8005c56:	203d      	movs	r0, #61	@ 0x3d
 8005c58:	f7fc f999 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005c5c:	203d      	movs	r0, #61	@ 0x3d
 8005c5e:	f7fc f9b2 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	203e      	movs	r0, #62	@ 0x3e
 8005c68:	f7fc f991 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8005c6c:	203e      	movs	r0, #62	@ 0x3e
 8005c6e:	f7fc f9aa 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005c72:	bf00      	nop
 8005c74:	3738      	adds	r7, #56	@ 0x38
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40028000 	.word	0x40028000
 8005c80:	40023800 	.word	0x40023800
 8005c84:	40020800 	.word	0x40020800
 8005c88:	40020000 	.word	0x40020000
 8005c8c:	40020400 	.word	0x40020400

08005c90 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005c94:	4802      	ldr	r0, [pc, #8]	@ (8005ca0 <ETH_PHY_IO_Init+0x10>)
 8005c96:	f7fc fff9 	bl	8002c8c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20004d80 	.word	0x20004d80

08005ca4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  return 0;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	4807      	ldr	r0, [pc, #28]	@ (8005ce4 <ETH_PHY_IO_ReadReg+0x30>)
 8005cc8:	f7fc fe48 	bl	800295c <HAL_ETH_ReadPHYRegister>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd6:	e000      	b.n	8005cda <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20004d80 	.word	0x20004d80

08005ce8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	4807      	ldr	r0, [pc, #28]	@ (8005d18 <ETH_PHY_IO_WriteReg+0x30>)
 8005cfc:	f7fc fe79 	bl	80029f2 <HAL_ETH_WritePHYRegister>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	e000      	b.n	8005d0e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20004d80 	.word	0x20004d80

08005d1c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d20:	f7fb fcf6 	bl	8001710 <HAL_GetTick>
 8005d24:	4603      	mov	r3, r0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b0a0      	sub	sp, #128	@ 0x80
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005d34:	f107 030c 	add.w	r3, r7, #12
 8005d38:	2264      	movs	r2, #100	@ 0x64
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f00d f840 	bl	8012dc2 <memset>
  int32_t PHYLinkState = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d4e:	2300      	movs	r3, #0
 8005d50:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005d52:	483a      	ldr	r0, [pc, #232]	@ (8005e3c <ethernet_link_check_state+0x110>)
 8005d54:	f7fb fbef 	bl	8001536 <DP83848_GetLinkState>
 8005d58:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d60:	089b      	lsrs	r3, r3, #2
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <ethernet_link_check_state+0x5a>
 8005d6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	dc09      	bgt.n	8005d86 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005d72:	4833      	ldr	r0, [pc, #204]	@ (8005e40 <ethernet_link_check_state+0x114>)
 8005d74:	f7fc facd 	bl	8002312 <HAL_ETH_Stop>
    netif_set_down(netif);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 fc4f 	bl	800761c <netif_set_down>
    netif_set_link_down(netif);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 fcbe 	bl	8007700 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005d84:	e055      	b.n	8005e32 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d14e      	bne.n	8005e32 <ethernet_link_check_state+0x106>
 8005d94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	dd4b      	ble.n	8005e32 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005d9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d9c:	3b02      	subs	r3, #2
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d82a      	bhi.n	8005df8 <ethernet_link_check_state+0xcc>
 8005da2:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <ethernet_link_check_state+0x7c>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005db9 	.word	0x08005db9
 8005dac:	08005dcb 	.word	0x08005dcb
 8005db0:	08005ddb 	.word	0x08005ddb
 8005db4:	08005deb 	.word	0x08005deb
      duplex = ETH_FULLDUPLEX_MODE;
 8005db8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005dbc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005dbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005dc2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005dc8:	e017      	b.n	8005dfa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005dce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005dd8:	e00f      	b.n	8005dfa <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005dda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005dde:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005de0:	2300      	movs	r3, #0
 8005de2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005de4:	2301      	movs	r3, #1
 8005de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005de8:	e007      	b.n	8005dfa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005dee:	2300      	movs	r3, #0
 8005df0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005df2:	2301      	movs	r3, #1
 8005df4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005df6:	e000      	b.n	8005dfa <ethernet_link_check_state+0xce>
      break;
 8005df8:	bf00      	nop
    if(linkchanged)
 8005dfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d018      	beq.n	8005e32 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005e00:	f107 030c 	add.w	r3, r7, #12
 8005e04:	4619      	mov	r1, r3
 8005e06:	480e      	ldr	r0, [pc, #56]	@ (8005e40 <ethernet_link_check_state+0x114>)
 8005e08:	f7fc fe3c 	bl	8002a84 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e12:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4809      	ldr	r0, [pc, #36]	@ (8005e40 <ethernet_link_check_state+0x114>)
 8005e1c:	f7fc ff1c 	bl	8002c58 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005e20:	4807      	ldr	r0, [pc, #28]	@ (8005e40 <ethernet_link_check_state+0x114>)
 8005e22:	f7fc fa17 	bl	8002254 <HAL_ETH_Start>
      netif_set_up(netif);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 fb84 	bl	8007534 <netif_set_up>
      netif_set_link_up(netif);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 fc2f 	bl	8007690 <netif_set_link_up>
}
 8005e32:	bf00      	nop
 8005e34:	3780      	adds	r7, #128	@ 0x80
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20004e68 	.word	0x20004e68
 8005e40:	20004d80 	.word	0x20004d80

08005e44 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005e4c:	4812      	ldr	r0, [pc, #72]	@ (8005e98 <HAL_ETH_RxAllocateCallback+0x54>)
 8005e4e:	f001 f8d9 	bl	8007004 <memp_malloc_pool>
 8005e52:	60f8      	str	r0, [r7, #12]
  if (p)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d014      	beq.n	8005e84 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f103 0220 	add.w	r2, r3, #32
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a0d      	ldr	r2, [pc, #52]	@ (8005e9c <HAL_ETH_RxAllocateCallback+0x58>)
 8005e68:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2241      	movs	r2, #65	@ 0x41
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	f001 fe35 	bl	8007aec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005e82:	e005      	b.n	8005e90 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005e84:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	08016978 	.word	0x08016978
 8005e9c:	08005ae1 	.word	0x08005ae1
 8005ea0:	20004c3c 	.word	0x20004c3c

08005ea4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	@ 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3b20      	subs	r3, #32
 8005ec2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	887a      	ldrh	r2, [r7, #2]
 8005ed4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e003      	b.n	8005eee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	e009      	b.n	8005f10 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	891a      	ldrh	r2, [r3, #8]
 8005f00:	887b      	ldrh	r3, [r7, #2]
 8005f02:	4413      	add	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f2      	bne.n	8005efc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	3724      	adds	r7, #36	@ 0x24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	b21b      	sxth	r3, r3
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	b29b      	uxth	r3, r3
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	061a      	lsls	r2, r3, #24
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	0a1b      	lsrs	r3, r3, #8
 8005f68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0e1b      	lsrs	r3, r3, #24
 8005f72:	4313      	orrs	r3, r2
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	6039      	str	r1, [r7, #0]
 8005f9a:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d80f      	bhi.n	8005fc2 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d006      	beq.n	8005fb6 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	4909      	ldr	r1, [pc, #36]	@ (8005fd0 <dns_setserver+0x40>)
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8005fb4:	e005      	b.n	8005fc2 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	4905      	ldr	r1, [pc, #20]	@ (8005fd0 <dns_setserver+0x40>)
 8005fba:	4a06      	ldr	r2, [pc, #24]	@ (8005fd4 <dns_setserver+0x44>)
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20005308 	.word	0x20005308
 8005fd4:	08016a6c 	.word	0x08016a6c

08005fd8 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8005fdc:	f000 faa8 	bl	8006530 <dns_check_entries>
}
 8005fe0:	bf00      	nop
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b090      	sub	sp, #64	@ 0x40
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8005fee:	79fa      	ldrb	r2, [r7, #7]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	4413      	add	r3, r2
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	4a6c      	ldr	r2, [pc, #432]	@ (80061ac <dns_send+0x1c8>)
 8005ffa:	4413      	add	r3, r2
 8005ffc:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	7adb      	ldrb	r3, [r3, #11]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d906      	bls.n	8006014 <dns_send+0x30>
 8006006:	4b6a      	ldr	r3, [pc, #424]	@ (80061b0 <dns_send+0x1cc>)
 8006008:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800600c:	4969      	ldr	r1, [pc, #420]	@ (80061b4 <dns_send+0x1d0>)
 800600e:	486a      	ldr	r0, [pc, #424]	@ (80061b8 <dns_send+0x1d4>)
 8006010:	f00c fe72 	bl	8012cf8 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	7adb      	ldrb	r3, [r3, #11]
 8006018:	461a      	mov	r2, r3
 800601a:	4b68      	ldr	r3, [pc, #416]	@ (80061bc <dns_send+0x1d8>)
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f000 f8cb 	bl	80061c4 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	2200      	movs	r2, #0
 8006032:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e0b4      	b.n	80061a2 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	3310      	adds	r3, #16
 800603c:	4618      	mov	r0, r3
 800603e:	f7fa f8c7 	bl	80001d0 <strlen>
 8006042:	4603      	mov	r3, r0
 8006044:	b29b      	uxth	r3, r3
 8006046:	3312      	adds	r3, #18
 8006048:	b29b      	uxth	r3, r3
 800604a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800604e:	4619      	mov	r1, r3
 8006050:	2036      	movs	r0, #54	@ 0x36
 8006052:	f001 fc21 	bl	8007898 <pbuf_alloc>
 8006056:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 8095 	beq.w	800618a <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8006060:	f107 0310 	add.w	r3, r7, #16
 8006064:	220c      	movs	r2, #12
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f00c feaa 	bl	8012dc2 <memset>
    hdr.id = lwip_htons(entry->txid);
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	891b      	ldrh	r3, [r3, #8]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff ff56 	bl	8005f24 <lwip_htons>
 8006078:	4603      	mov	r3, r0
 800607a:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800607c:	2301      	movs	r3, #1
 800607e:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8006080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006084:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006086:	f107 0310 	add.w	r3, r7, #16
 800608a:	220c      	movs	r2, #12
 800608c:	4619      	mov	r1, r3
 800608e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006090:	f002 f98e 	bl	80083b0 <pbuf_take>
    hostname = entry->name;
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	3310      	adds	r3, #16
 8006098:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	3b01      	subs	r3, #1
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 80060a0:	230c      	movs	r3, #12
 80060a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 80060a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a6:	3301      	adds	r3, #1
 80060a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 80060aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80060b4:	e007      	b.n	80060c6 <dns_send+0xe2>
        ++n;
 80060b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060ba:	3301      	adds	r3, #1
 80060bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	3301      	adds	r3, #1
 80060c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80060cc:	d003      	beq.n	80060d6 <dns_send+0xf2>
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1ef      	bne.n	80060b6 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80060d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80060de:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80060e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060e4:	4413      	add	r3, r2
 80060e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80060ea:	4293      	cmp	r3, r2
 80060ec:	dc53      	bgt.n	8006196 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80060ee:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80060f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80060f4:	4619      	mov	r1, r3
 80060f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060f8:	f002 fa88 	bl	800860c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80060fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80060fe:	3301      	adds	r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006108:	f002 f9e4 	bl	80084d4 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800610c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006110:	b29a      	uxth	r2, r3
 8006112:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006114:	4413      	add	r3, r2
 8006116:	b29b      	uxth	r3, r3
 8006118:	3301      	adds	r3, #1
 800611a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800611c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1bf      	bne.n	80060a4 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8006124:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006126:	2200      	movs	r2, #0
 8006128:	4619      	mov	r1, r3
 800612a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800612c:	f002 fa6e 	bl	800860c <pbuf_put_at>
    query_idx++;
 8006130:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006132:	3301      	adds	r3, #1
 8006134:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8006136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800613a:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800613c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006140:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8006142:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006144:	f107 010c 	add.w	r1, r7, #12
 8006148:	2204      	movs	r2, #4
 800614a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800614c:	f002 f9c2 	bl	80084d4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	7bdb      	ldrb	r3, [r3, #15]
 8006154:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8006158:	2335      	movs	r3, #53	@ 0x35
 800615a:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615e:	7adb      	ldrb	r3, [r3, #11]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <dns_send+0x1d8>)
 8006164:	4413      	add	r3, r2
 8006166:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006168:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800616c:	4a14      	ldr	r2, [pc, #80]	@ (80061c0 <dns_send+0x1dc>)
 800616e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006172:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006178:	f007 fef0 	bl	800df5c <udp_sendto>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 8006182:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006184:	f001 fe6c 	bl	8007e60 <pbuf_free>
 8006188:	e002      	b.n	8006190 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800618a:	23ff      	movs	r3, #255	@ 0xff
 800618c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 8006190:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006194:	e005      	b.n	80061a2 <dns_send+0x1be>
        goto overflow_return;
 8006196:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8006198:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800619a:	f001 fe61 	bl	8007e60 <pbuf_free>
  return ERR_VAL;
 800619e:	f06f 0305 	mvn.w	r3, #5
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3740      	adds	r7, #64	@ 0x40
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20004e98 	.word	0x20004e98
 80061b0:	08013b78 	.word	0x08013b78
 80061b4:	08013ba8 	.word	0x08013ba8
 80061b8:	08013bc0 	.word	0x08013bc0
 80061bc:	20005308 	.word	0x20005308
 80061c0:	20004e88 	.word	0x20004e88

080061c4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	e03d      	b.n	8006252 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80061d6:	7bfa      	ldrb	r2, [r7, #15]
 80061d8:	4957      	ldr	r1, [pc, #348]	@ (8006338 <dns_call_found+0x174>)
 80061da:	4613      	mov	r3, r2
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d030      	beq.n	800624c <dns_call_found+0x88>
 80061ea:	7bfa      	ldrb	r2, [r7, #15]
 80061ec:	4952      	ldr	r1, [pc, #328]	@ (8006338 <dns_call_found+0x174>)
 80061ee:	4613      	mov	r3, r2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	3308      	adds	r3, #8
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	79fa      	ldrb	r2, [r7, #7]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d124      	bne.n	800624c <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8006202:	7bfa      	ldrb	r2, [r7, #15]
 8006204:	494c      	ldr	r1, [pc, #304]	@ (8006338 <dns_call_found+0x174>)
 8006206:	4613      	mov	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	681c      	ldr	r4, [r3, #0]
 8006212:	79fa      	ldrb	r2, [r7, #7]
 8006214:	4613      	mov	r3, r2
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	3310      	adds	r3, #16
 800621e:	4a47      	ldr	r2, [pc, #284]	@ (800633c <dns_call_found+0x178>)
 8006220:	1898      	adds	r0, r3, r2
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	4944      	ldr	r1, [pc, #272]	@ (8006338 <dns_call_found+0x174>)
 8006226:	4613      	mov	r3, r2
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	3304      	adds	r3, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800623a:	7bfa      	ldrb	r2, [r7, #15]
 800623c:	493e      	ldr	r1, [pc, #248]	@ (8006338 <dns_call_found+0x174>)
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	3301      	adds	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d9be      	bls.n	80061d6 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
 800625c:	e031      	b.n	80062c2 <dns_call_found+0xfe>
    if (i == idx) {
 800625e:	7bfa      	ldrb	r2, [r7, #15]
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	429a      	cmp	r2, r3
 8006264:	d029      	beq.n	80062ba <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8006266:	7bfa      	ldrb	r2, [r7, #15]
 8006268:	4934      	ldr	r1, [pc, #208]	@ (800633c <dns_call_found+0x178>)
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	4413      	add	r3, r2
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	440b      	add	r3, r1
 8006274:	330a      	adds	r3, #10
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d11f      	bne.n	80062bc <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	492f      	ldr	r1, [pc, #188]	@ (800633c <dns_call_found+0x178>)
 8006280:	4613      	mov	r3, r2
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	4413      	add	r3, r2
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	440b      	add	r3, r1
 800628a:	330f      	adds	r3, #15
 800628c:	7819      	ldrb	r1, [r3, #0]
 800628e:	79fa      	ldrb	r2, [r7, #7]
 8006290:	482a      	ldr	r0, [pc, #168]	@ (800633c <dns_call_found+0x178>)
 8006292:	4613      	mov	r3, r2
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	4413      	add	r3, r2
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	4403      	add	r3, r0
 800629c:	330f      	adds	r3, #15
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	4299      	cmp	r1, r3
 80062a2:	d10b      	bne.n	80062bc <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80062a4:	79fa      	ldrb	r2, [r7, #7]
 80062a6:	4925      	ldr	r1, [pc, #148]	@ (800633c <dns_call_found+0x178>)
 80062a8:	4613      	mov	r3, r2
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	4413      	add	r3, r2
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	440b      	add	r3, r1
 80062b2:	330f      	adds	r3, #15
 80062b4:	2204      	movs	r2, #4
 80062b6:	701a      	strb	r2, [r3, #0]
        break;
 80062b8:	e006      	b.n	80062c8 <dns_call_found+0x104>
      continue; /* only check other requests */
 80062ba:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	3301      	adds	r3, #1
 80062c0:	73fb      	strb	r3, [r7, #15]
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d9ca      	bls.n	800625e <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80062c8:	79fa      	ldrb	r2, [r7, #7]
 80062ca:	491c      	ldr	r1, [pc, #112]	@ (800633c <dns_call_found+0x178>)
 80062cc:	4613      	mov	r3, r2
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	4413      	add	r3, r2
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	440b      	add	r3, r1
 80062d6:	330f      	adds	r3, #15
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d827      	bhi.n	800632e <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80062de:	79fa      	ldrb	r2, [r7, #7]
 80062e0:	4916      	ldr	r1, [pc, #88]	@ (800633c <dns_call_found+0x178>)
 80062e2:	4613      	mov	r3, r2
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	4413      	add	r3, r2
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	440b      	add	r3, r1
 80062ec:	330f      	adds	r3, #15
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	4b13      	ldr	r3, [pc, #76]	@ (8006340 <dns_call_found+0x17c>)
 80062f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f008 f915 	bl	800e528 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80062fe:	79fa      	ldrb	r2, [r7, #7]
 8006300:	490e      	ldr	r1, [pc, #56]	@ (800633c <dns_call_found+0x178>)
 8006302:	4613      	mov	r3, r2
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	4413      	add	r3, r2
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	440b      	add	r3, r1
 800630c:	330f      	adds	r3, #15
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <dns_call_found+0x17c>)
 8006314:	2200      	movs	r2, #0
 8006316:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800631a:	79fa      	ldrb	r2, [r7, #7]
 800631c:	4907      	ldr	r1, [pc, #28]	@ (800633c <dns_call_found+0x178>)
 800631e:	4613      	mov	r3, r2
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	4413      	add	r3, r2
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	440b      	add	r3, r1
 8006328:	330f      	adds	r3, #15
 800632a:	2204      	movs	r2, #4
 800632c:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bd90      	pop	{r4, r7, pc}
 8006336:	bf00      	nop
 8006338:	200052d8 	.word	0x200052d8
 800633c:	20004e98 	.word	0x20004e98
 8006340:	20004e88 	.word	0x20004e88

08006344 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800634a:	f00c fbd5 	bl	8012af8 <rand>
 800634e:	4603      	mov	r3, r0
 8006350:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006352:	2300      	movs	r3, #0
 8006354:	71fb      	strb	r3, [r7, #7]
 8006356:	e01a      	b.n	800638e <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006358:	79fa      	ldrb	r2, [r7, #7]
 800635a:	4911      	ldr	r1, [pc, #68]	@ (80063a0 <dns_create_txid+0x5c>)
 800635c:	4613      	mov	r3, r2
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	4413      	add	r3, r2
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	440b      	add	r3, r1
 8006366:	330a      	adds	r3, #10
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d10c      	bne.n	8006388 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800636e:	79fa      	ldrb	r2, [r7, #7]
 8006370:	490b      	ldr	r1, [pc, #44]	@ (80063a0 <dns_create_txid+0x5c>)
 8006372:	4613      	mov	r3, r2
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	4413      	add	r3, r2
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	440b      	add	r3, r1
 800637c:	3308      	adds	r3, #8
 800637e:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006380:	88ba      	ldrh	r2, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d100      	bne.n	8006388 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8006386:	e7e0      	b.n	800634a <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	3301      	adds	r3, #1
 800638c:	71fb      	strb	r3, [r7, #7]
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d9e1      	bls.n	8006358 <dns_create_txid+0x14>
    }
  }

  return txid;
 8006394:	88bb      	ldrh	r3, [r7, #4]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20004e98 	.word	0x20004e98

080063a4 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7adb      	ldrb	r3, [r3, #11]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <dns_backupserver_available+0x2e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7adb      	ldrb	r3, [r3, #11]
 80063c2:	3301      	adds	r3, #1
 80063c4:	4a06      	ldr	r2, [pc, #24]	@ (80063e0 <dns_backupserver_available+0x3c>)
 80063c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <dns_backupserver_available+0x2e>
      ret = 1;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20005308 	.word	0x20005308

080063e4 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80063ee:	79fa      	ldrb	r2, [r7, #7]
 80063f0:	4613      	mov	r3, r2
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	4413      	add	r3, r2
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	4a48      	ldr	r2, [pc, #288]	@ (800651c <dns_check_entry+0x138>)
 80063fa:	4413      	add	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	2b03      	cmp	r3, #3
 8006402:	d906      	bls.n	8006412 <dns_check_entry+0x2e>
 8006404:	4b46      	ldr	r3, [pc, #280]	@ (8006520 <dns_check_entry+0x13c>)
 8006406:	f240 421c 	movw	r2, #1052	@ 0x41c
 800640a:	4946      	ldr	r1, [pc, #280]	@ (8006524 <dns_check_entry+0x140>)
 800640c:	4846      	ldr	r0, [pc, #280]	@ (8006528 <dns_check_entry+0x144>)
 800640e:	f00c fc73 	bl	8012cf8 <iprintf>

  switch (entry->state) {
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	7a9b      	ldrb	r3, [r3, #10]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d86f      	bhi.n	80064fa <dns_check_entry+0x116>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <dns_check_entry+0x3c>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	0800650b 	.word	0x0800650b
 8006424:	08006431 	.word	0x08006431
 8006428:	08006463 	.word	0x08006463
 800642c:	080064d9 	.word	0x080064d9
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8006430:	f7ff ff88 	bl	8006344 <dns_create_txid>
 8006434:	4603      	mov	r3, r0
 8006436:	461a      	mov	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2202      	movs	r2, #2
 8006440:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fdc4 	bl	8005fe4 <dns_send>
 800645c:	4603      	mov	r3, r0
 800645e:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8006460:	e058      	b.n	8006514 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	7b1b      	ldrb	r3, [r3, #12]
 8006466:	3b01      	subs	r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	731a      	strb	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	7b1b      	ldrb	r3, [r3, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d14b      	bne.n	800650e <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	7b5b      	ldrb	r3, [r3, #13]
 800647a:	3301      	adds	r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	735a      	strb	r2, [r3, #13]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	7b5b      	ldrb	r3, [r3, #13]
 8006486:	2b04      	cmp	r3, #4
 8006488:	d11b      	bne.n	80064c2 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff ff8a 	bl	80063a4 <dns_backupserver_available>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00c      	beq.n	80064b0 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	7adb      	ldrb	r3, [r3, #11]
 800649a:	3301      	adds	r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	735a      	strb	r2, [r3, #13]
 80064ae:	e00c      	b.n	80064ca <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fe85 	bl	80061c4 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	729a      	strb	r2, [r3, #10]
            break;
 80064c0:	e028      	b.n	8006514 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	7b5a      	ldrb	r2, [r3, #13]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fd89 	bl	8005fe4 <dns_send>
 80064d2:	4603      	mov	r3, r0
 80064d4:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 80064d6:	e01a      	b.n	800650e <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <dns_check_entry+0x10e>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10f      	bne.n	8006512 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	729a      	strb	r2, [r3, #10]
      }
      break;
 80064f8:	e00b      	b.n	8006512 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80064fa:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <dns_check_entry+0x13c>)
 80064fc:	f240 425b 	movw	r2, #1115	@ 0x45b
 8006500:	490a      	ldr	r1, [pc, #40]	@ (800652c <dns_check_entry+0x148>)
 8006502:	4809      	ldr	r0, [pc, #36]	@ (8006528 <dns_check_entry+0x144>)
 8006504:	f00c fbf8 	bl	8012cf8 <iprintf>
      break;
 8006508:	e004      	b.n	8006514 <dns_check_entry+0x130>
      break;
 800650a:	bf00      	nop
 800650c:	e002      	b.n	8006514 <dns_check_entry+0x130>
      break;
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <dns_check_entry+0x130>
      break;
 8006512:	bf00      	nop
  }
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20004e98 	.word	0x20004e98
 8006520:	08013b78 	.word	0x08013b78
 8006524:	08013be8 	.word	0x08013be8
 8006528:	08013bc0 	.word	0x08013bc0
 800652c:	08013c04 	.word	0x08013c04

08006530 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006536:	2300      	movs	r3, #0
 8006538:	71fb      	strb	r3, [r7, #7]
 800653a:	e006      	b.n	800654a <dns_check_entries+0x1a>
    dns_check_entry(i);
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff ff50 	bl	80063e4 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	3301      	adds	r3, #1
 8006548:	71fb      	strb	r3, [r7, #7]
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d9f5      	bls.n	800653c <dns_check_entries+0xc>
  }
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800655a:	b480      	push	{r7}
 800655c:	b089      	sub	sp, #36	@ 0x24
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00d      	beq.n	800659a <lwip_standard_chksum+0x40>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	dd0a      	ble.n	800659a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	1c53      	adds	r3, r2, #1
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	f107 030e 	add.w	r3, r7, #14
 800658e:	3301      	adds	r3, #1
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
    len--;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	3b01      	subs	r3, #1
 8006598:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800659e:	e00a      	b.n	80065b6 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	1c9a      	adds	r2, r3, #2
 80065a4:	61ba      	str	r2, [r7, #24]
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
    len -= 2;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	3b02      	subs	r3, #2
 80065b4:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	dcf1      	bgt.n	80065a0 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd04      	ble.n	80065cc <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80065c2:	f107 030e 	add.w	r3, r7, #14
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	7812      	ldrb	r2, [r2, #0]
 80065ca:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80065cc:	89fb      	ldrh	r3, [r7, #14]
 80065ce:	461a      	mov	r2, r3
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	4413      	add	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	0c1a      	lsrs	r2, r3, #16
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	4413      	add	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	0c1a      	lsrs	r2, r3, #16
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	b29b      	uxth	r3, r3
}
 8006608:	4618      	mov	r0, r3
 800660a:	3724      	adds	r7, #36	@ 0x24
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	607b      	str	r3, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	72fb      	strb	r3, [r7, #11]
 8006622:	4613      	mov	r3, r2
 8006624:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	e02b      	b.n	8006688 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	895b      	ldrh	r3, [r3, #10]
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7ff ff8d 	bl	800655a <lwip_standard_chksum>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4413      	add	r3, r2
 8006648:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0c1a      	lsrs	r2, r3, #16
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	b29b      	uxth	r3, r3
 8006652:	4413      	add	r3, r2
 8006654:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	895b      	ldrh	r3, [r3, #10]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00e      	beq.n	8006682 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	b29a      	uxth	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	0a1b      	lsrs	r3, r3, #8
 800667c:	b2db      	uxtb	r3, r3
 800667e:	4313      	orrs	r3, r2
 8006680:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1d0      	bne.n	8006630 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	b29a      	uxth	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	4313      	orrs	r3, r2
 80066a2:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fc3b 	bl	8005f24 <lwip_htons>
 80066ae:	4603      	mov	r3, r0
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 80066b8:	893b      	ldrh	r3, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fc32 	bl	8005f24 <lwip_htons>
 80066c0:	4603      	mov	r3, r0
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	0c1a      	lsrs	r2, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0c1a      	lsrs	r2, r3, #16
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4413      	add	r3, r2
 80066e0:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	43db      	mvns	r3, r3
 80066e8:	b29b      	uxth	r3, r3
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	72fb      	strb	r3, [r7, #11]
 8006700:	4613      	mov	r3, r2
 8006702:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	b29b      	uxth	r3, r3
 800670e:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4413      	add	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	b29b      	uxth	r3, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4413      	add	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4413      	add	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	0c1a      	lsrs	r2, r3, #16
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	b29b      	uxth	r3, r3
 800673c:	4413      	add	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	0c1a      	lsrs	r2, r3, #16
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	b29b      	uxth	r3, r3
 8006748:	4413      	add	r3, r2
 800674a:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800674c:	893a      	ldrh	r2, [r7, #8]
 800674e:	7af9      	ldrb	r1, [r7, #11]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff5e 	bl	8006614 <inet_cksum_pseudo_base>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b086      	sub	sp, #24
 8006766:	af02      	add	r7, sp, #8
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	607b      	str	r3, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	72fb      	strb	r3, [r7, #11]
 8006770:	4613      	mov	r3, r2
 8006772:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8006774:	893a      	ldrh	r2, [r7, #8]
 8006776:	7af9      	ldrb	r1, [r7, #11]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ffb7 	bl	80066f2 <inet_chksum_pseudo>
 8006784:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fedb 	bl	800655a <lwip_standard_chksum>
 80067a4:	4603      	mov	r3, r0
 80067a6:	43db      	mvns	r3, r3
 80067a8:	b29b      	uxth	r3, r3
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80067bc:	f000 f8d6 	bl	800696c <mem_init>
  memp_init();
 80067c0:	f000 fbdc 	bl	8006f7c <memp_init>
  pbuf_init();
  netif_init();
 80067c4:	f000 fcda 	bl	800717c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80067c8:	f007 fa06 	bl	800dbd8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80067cc:	f001 ff40 	bl	8008650 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80067d0:	f7ff fbd6 	bl	8005f80 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80067d4:	f007 f976 	bl	800dac4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80067ea:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <ptr_to_mem+0x20>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	4413      	add	r3, r2
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	2000597c 	.word	0x2000597c

08006804 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800680c:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <mem_to_ptr+0x20>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	b29b      	uxth	r3, r3
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000597c 	.word	0x2000597c

08006828 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006828:	b590      	push	{r4, r7, lr}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006830:	4b45      	ldr	r3, [pc, #276]	@ (8006948 <plug_holes+0x120>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d206      	bcs.n	8006848 <plug_holes+0x20>
 800683a:	4b44      	ldr	r3, [pc, #272]	@ (800694c <plug_holes+0x124>)
 800683c:	f240 12df 	movw	r2, #479	@ 0x1df
 8006840:	4943      	ldr	r1, [pc, #268]	@ (8006950 <plug_holes+0x128>)
 8006842:	4844      	ldr	r0, [pc, #272]	@ (8006954 <plug_holes+0x12c>)
 8006844:	f00c fa58 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006848:	4b43      	ldr	r3, [pc, #268]	@ (8006958 <plug_holes+0x130>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	429a      	cmp	r2, r3
 8006850:	d306      	bcc.n	8006860 <plug_holes+0x38>
 8006852:	4b3e      	ldr	r3, [pc, #248]	@ (800694c <plug_holes+0x124>)
 8006854:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006858:	4940      	ldr	r1, [pc, #256]	@ (800695c <plug_holes+0x134>)
 800685a:	483e      	ldr	r0, [pc, #248]	@ (8006954 <plug_holes+0x12c>)
 800685c:	f00c fa4c 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	791b      	ldrb	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <plug_holes+0x4e>
 8006868:	4b38      	ldr	r3, [pc, #224]	@ (800694c <plug_holes+0x124>)
 800686a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800686e:	493c      	ldr	r1, [pc, #240]	@ (8006960 <plug_holes+0x138>)
 8006870:	4838      	ldr	r0, [pc, #224]	@ (8006954 <plug_holes+0x12c>)
 8006872:	f00c fa41 	bl	8012cf8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800687e:	d906      	bls.n	800688e <plug_holes+0x66>
 8006880:	4b32      	ldr	r3, [pc, #200]	@ (800694c <plug_holes+0x124>)
 8006882:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006886:	4937      	ldr	r1, [pc, #220]	@ (8006964 <plug_holes+0x13c>)
 8006888:	4832      	ldr	r0, [pc, #200]	@ (8006954 <plug_holes+0x12c>)
 800688a:	f00c fa35 	bl	8012cf8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff ffa4 	bl	80067e0 <ptr_to_mem>
 8006898:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d024      	beq.n	80068ec <plug_holes+0xc4>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	791b      	ldrb	r3, [r3, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d120      	bne.n	80068ec <plug_holes+0xc4>
 80068aa:	4b2b      	ldr	r3, [pc, #172]	@ (8006958 <plug_holes+0x130>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d01b      	beq.n	80068ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80068b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006968 <plug_holes+0x140>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d102      	bne.n	80068c4 <plug_holes+0x9c>
      lfree = mem;
 80068be:	4a2a      	ldr	r2, [pc, #168]	@ (8006968 <plug_holes+0x140>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80068d4:	d00a      	beq.n	80068ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff ff80 	bl	80067e0 <ptr_to_mem>
 80068e0:	4604      	mov	r4, r0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff ff8e 	bl	8006804 <mem_to_ptr>
 80068e8:	4603      	mov	r3, r0
 80068ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	885b      	ldrh	r3, [r3, #2]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff ff75 	bl	80067e0 <ptr_to_mem>
 80068f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d01f      	beq.n	8006940 <plug_holes+0x118>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	791b      	ldrb	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11b      	bne.n	8006940 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006908:	4b17      	ldr	r3, [pc, #92]	@ (8006968 <plug_holes+0x140>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	429a      	cmp	r2, r3
 8006910:	d102      	bne.n	8006918 <plug_holes+0xf0>
      lfree = pmem;
 8006912:	4a15      	ldr	r2, [pc, #84]	@ (8006968 <plug_holes+0x140>)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	881a      	ldrh	r2, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006928:	d00a      	beq.n	8006940 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff ff56 	bl	80067e0 <ptr_to_mem>
 8006934:	4604      	mov	r4, r0
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f7ff ff64 	bl	8006804 <mem_to_ptr>
 800693c:	4603      	mov	r3, r0
 800693e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	bd90      	pop	{r4, r7, pc}
 8006948:	2000597c 	.word	0x2000597c
 800694c:	08013c24 	.word	0x08013c24
 8006950:	08013c54 	.word	0x08013c54
 8006954:	08013c6c 	.word	0x08013c6c
 8006958:	20005980 	.word	0x20005980
 800695c:	08013c94 	.word	0x08013c94
 8006960:	08013cb0 	.word	0x08013cb0
 8006964:	08013ccc 	.word	0x08013ccc
 8006968:	20005984 	.word	0x20005984

0800696c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006972:	4b18      	ldr	r3, [pc, #96]	@ (80069d4 <mem_init+0x68>)
 8006974:	3303      	adds	r3, #3
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	461a      	mov	r2, r3
 800697c:	4b16      	ldr	r3, [pc, #88]	@ (80069d8 <mem_init+0x6c>)
 800697e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006980:	4b15      	ldr	r3, [pc, #84]	@ (80069d8 <mem_init+0x6c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800698c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800699a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800699e:	f7ff ff1f 	bl	80067e0 <ptr_to_mem>
 80069a2:	4603      	mov	r3, r0
 80069a4:	4a0d      	ldr	r2, [pc, #52]	@ (80069dc <mem_init+0x70>)
 80069a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80069a8:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <mem_init+0x70>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2201      	movs	r2, #1
 80069ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <mem_init+0x70>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80069b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80069ba:	4b08      	ldr	r3, [pc, #32]	@ (80069dc <mem_init+0x70>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80069c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80069c4:	4b04      	ldr	r3, [pc, #16]	@ (80069d8 <mem_init+0x6c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a05      	ldr	r2, [pc, #20]	@ (80069e0 <mem_init+0x74>)
 80069ca:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20005328 	.word	0x20005328
 80069d8:	2000597c 	.word	0x2000597c
 80069dc:	20005980 	.word	0x20005980
 80069e0:	20005984 	.word	0x20005984

080069e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ff09 	bl	8006804 <mem_to_ptr>
 80069f2:	4603      	mov	r3, r0
 80069f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fef0 	bl	80067e0 <ptr_to_mem>
 8006a00:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff feea 	bl	80067e0 <ptr_to_mem>
 8006a0c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a16:	d818      	bhi.n	8006a4a <mem_link_valid+0x66>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	885b      	ldrh	r3, [r3, #2]
 8006a1c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a20:	d813      	bhi.n	8006a4a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006a26:	8afa      	ldrh	r2, [r7, #22]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d004      	beq.n	8006a36 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	8afa      	ldrh	r2, [r7, #22]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d109      	bne.n	8006a4a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006a36:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <mem_link_valid+0x74>)
 8006a38:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d006      	beq.n	8006a4e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	8afa      	ldrh	r2, [r7, #22]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d001      	beq.n	8006a4e <mem_link_valid+0x6a>
    return 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e000      	b.n	8006a50 <mem_link_valid+0x6c>
  }
  return 1;
 8006a4e:	2301      	movs	r3, #1
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20005980 	.word	0x20005980

08006a5c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d04c      	beq.n	8006b04 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006a74:	4b25      	ldr	r3, [pc, #148]	@ (8006b0c <mem_free+0xb0>)
 8006a76:	f240 2273 	movw	r2, #627	@ 0x273
 8006a7a:	4925      	ldr	r1, [pc, #148]	@ (8006b10 <mem_free+0xb4>)
 8006a7c:	4825      	ldr	r0, [pc, #148]	@ (8006b14 <mem_free+0xb8>)
 8006a7e:	f00c f93b 	bl	8012cf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006a82:	e040      	b.n	8006b06 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3b08      	subs	r3, #8
 8006a88:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006a8a:	4b23      	ldr	r3, [pc, #140]	@ (8006b18 <mem_free+0xbc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d306      	bcc.n	8006aa2 <mem_free+0x46>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f103 020c 	add.w	r2, r3, #12
 8006a9a:	4b20      	ldr	r3, [pc, #128]	@ (8006b1c <mem_free+0xc0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d907      	bls.n	8006ab2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b0c <mem_free+0xb0>)
 8006aa4:	f240 227f 	movw	r2, #639	@ 0x27f
 8006aa8:	491d      	ldr	r1, [pc, #116]	@ (8006b20 <mem_free+0xc4>)
 8006aaa:	481a      	ldr	r0, [pc, #104]	@ (8006b14 <mem_free+0xb8>)
 8006aac:	f00c f924 	bl	8012cf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ab0:	e029      	b.n	8006b06 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	791b      	ldrb	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d107      	bne.n	8006aca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006aba:	4b14      	ldr	r3, [pc, #80]	@ (8006b0c <mem_free+0xb0>)
 8006abc:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006ac0:	4918      	ldr	r1, [pc, #96]	@ (8006b24 <mem_free+0xc8>)
 8006ac2:	4814      	ldr	r0, [pc, #80]	@ (8006b14 <mem_free+0xb8>)
 8006ac4:	f00c f918 	bl	8012cf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ac8:	e01d      	b.n	8006b06 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff ff8a 	bl	80069e4 <mem_link_valid>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d107      	bne.n	8006ae6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <mem_free+0xb0>)
 8006ad8:	f240 2295 	movw	r2, #661	@ 0x295
 8006adc:	4912      	ldr	r1, [pc, #72]	@ (8006b28 <mem_free+0xcc>)
 8006ade:	480d      	ldr	r0, [pc, #52]	@ (8006b14 <mem_free+0xb8>)
 8006ae0:	f00c f90a 	bl	8012cf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ae4:	e00f      	b.n	8006b06 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006aec:	4b0f      	ldr	r3, [pc, #60]	@ (8006b2c <mem_free+0xd0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d202      	bcs.n	8006afc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006af6:	4a0d      	ldr	r2, [pc, #52]	@ (8006b2c <mem_free+0xd0>)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7ff fe93 	bl	8006828 <plug_holes>
 8006b02:	e000      	b.n	8006b06 <mem_free+0xaa>
    return;
 8006b04:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	08013c24 	.word	0x08013c24
 8006b10:	08013cf8 	.word	0x08013cf8
 8006b14:	08013c6c 	.word	0x08013c6c
 8006b18:	2000597c 	.word	0x2000597c
 8006b1c:	20005980 	.word	0x20005980
 8006b20:	08013d1c 	.word	0x08013d1c
 8006b24:	08013d38 	.word	0x08013d38
 8006b28:	08013d60 	.word	0x08013d60
 8006b2c:	20005984 	.word	0x20005984

08006b30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	3303      	adds	r3, #3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006b48:	8bfb      	ldrh	r3, [r7, #30]
 8006b4a:	2b0b      	cmp	r3, #11
 8006b4c:	d801      	bhi.n	8006b52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006b4e:	230c      	movs	r3, #12
 8006b50:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006b52:	8bfb      	ldrh	r3, [r7, #30]
 8006b54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b58:	d803      	bhi.n	8006b62 <mem_trim+0x32>
 8006b5a:	8bfa      	ldrh	r2, [r7, #30]
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d201      	bcs.n	8006b66 <mem_trim+0x36>
    return NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e0cc      	b.n	8006d00 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006b66:	4b68      	ldr	r3, [pc, #416]	@ (8006d08 <mem_trim+0x1d8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d304      	bcc.n	8006b7a <mem_trim+0x4a>
 8006b70:	4b66      	ldr	r3, [pc, #408]	@ (8006d0c <mem_trim+0x1dc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d306      	bcc.n	8006b88 <mem_trim+0x58>
 8006b7a:	4b65      	ldr	r3, [pc, #404]	@ (8006d10 <mem_trim+0x1e0>)
 8006b7c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006b80:	4964      	ldr	r1, [pc, #400]	@ (8006d14 <mem_trim+0x1e4>)
 8006b82:	4865      	ldr	r0, [pc, #404]	@ (8006d18 <mem_trim+0x1e8>)
 8006b84:	f00c f8b8 	bl	8012cf8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006b88:	4b5f      	ldr	r3, [pc, #380]	@ (8006d08 <mem_trim+0x1d8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d304      	bcc.n	8006b9c <mem_trim+0x6c>
 8006b92:	4b5e      	ldr	r3, [pc, #376]	@ (8006d0c <mem_trim+0x1dc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d301      	bcc.n	8006ba0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	e0af      	b.n	8006d00 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3b08      	subs	r3, #8
 8006ba4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006ba6:	69b8      	ldr	r0, [r7, #24]
 8006ba8:	f7ff fe2c 	bl	8006804 <mem_to_ptr>
 8006bac:	4603      	mov	r3, r0
 8006bae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	8afb      	ldrh	r3, [r7, #22]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b08      	subs	r3, #8
 8006bbc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006bbe:	8bfa      	ldrh	r2, [r7, #30]
 8006bc0:	8abb      	ldrh	r3, [r7, #20]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d906      	bls.n	8006bd4 <mem_trim+0xa4>
 8006bc6:	4b52      	ldr	r3, [pc, #328]	@ (8006d10 <mem_trim+0x1e0>)
 8006bc8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006bcc:	4953      	ldr	r1, [pc, #332]	@ (8006d1c <mem_trim+0x1ec>)
 8006bce:	4852      	ldr	r0, [pc, #328]	@ (8006d18 <mem_trim+0x1e8>)
 8006bd0:	f00c f892 	bl	8012cf8 <iprintf>
  if (newsize > size) {
 8006bd4:	8bfa      	ldrh	r2, [r7, #30]
 8006bd6:	8abb      	ldrh	r3, [r7, #20]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d901      	bls.n	8006be0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e08f      	b.n	8006d00 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006be0:	8bfa      	ldrh	r2, [r7, #30]
 8006be2:	8abb      	ldrh	r3, [r7, #20]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d101      	bne.n	8006bec <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	e089      	b.n	8006d00 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fdf5 	bl	80067e0 <ptr_to_mem>
 8006bf6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	791b      	ldrb	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d13f      	bne.n	8006c80 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006c08:	d106      	bne.n	8006c18 <mem_trim+0xe8>
 8006c0a:	4b41      	ldr	r3, [pc, #260]	@ (8006d10 <mem_trim+0x1e0>)
 8006c0c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8006c10:	4943      	ldr	r1, [pc, #268]	@ (8006d20 <mem_trim+0x1f0>)
 8006c12:	4841      	ldr	r0, [pc, #260]	@ (8006d18 <mem_trim+0x1e8>)
 8006c14:	f00c f870 	bl	8012cf8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006c1e:	8afa      	ldrh	r2, [r7, #22]
 8006c20:	8bfb      	ldrh	r3, [r7, #30]
 8006c22:	4413      	add	r3, r2
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3308      	adds	r3, #8
 8006c28:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d24 <mem_trim+0x1f4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d106      	bne.n	8006c42 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006c34:	89fb      	ldrh	r3, [r7, #14]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fdd2 	bl	80067e0 <ptr_to_mem>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	4a39      	ldr	r2, [pc, #228]	@ (8006d24 <mem_trim+0x1f4>)
 8006c40:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006c42:	89fb      	ldrh	r3, [r7, #14]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fdcb 	bl	80067e0 <ptr_to_mem>
 8006c4a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	89ba      	ldrh	r2, [r7, #12]
 8006c56:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	8afa      	ldrh	r2, [r7, #22]
 8006c5c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	89fa      	ldrh	r2, [r7, #14]
 8006c62:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006c6c:	d047      	beq.n	8006cfe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff fdb4 	bl	80067e0 <ptr_to_mem>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	89fb      	ldrh	r3, [r7, #14]
 8006c7c:	8053      	strh	r3, [r2, #2]
 8006c7e:	e03e      	b.n	8006cfe <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006c80:	8bfb      	ldrh	r3, [r7, #30]
 8006c82:	f103 0214 	add.w	r2, r3, #20
 8006c86:	8abb      	ldrh	r3, [r7, #20]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d838      	bhi.n	8006cfe <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006c8c:	8afa      	ldrh	r2, [r7, #22]
 8006c8e:	8bfb      	ldrh	r3, [r7, #30]
 8006c90:	4413      	add	r3, r2
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3308      	adds	r3, #8
 8006c96:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006ca0:	d106      	bne.n	8006cb0 <mem_trim+0x180>
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d10 <mem_trim+0x1e0>)
 8006ca4:	f240 3216 	movw	r2, #790	@ 0x316
 8006ca8:	491d      	ldr	r1, [pc, #116]	@ (8006d20 <mem_trim+0x1f0>)
 8006caa:	481b      	ldr	r0, [pc, #108]	@ (8006d18 <mem_trim+0x1e8>)
 8006cac:	f00c f824 	bl	8012cf8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006cb0:	89fb      	ldrh	r3, [r7, #14]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fd94 	bl	80067e0 <ptr_to_mem>
 8006cb8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006cba:	4b1a      	ldr	r3, [pc, #104]	@ (8006d24 <mem_trim+0x1f4>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d202      	bcs.n	8006cca <mem_trim+0x19a>
      lfree = mem2;
 8006cc4:	4a17      	ldr	r2, [pc, #92]	@ (8006d24 <mem_trim+0x1f4>)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	881a      	ldrh	r2, [r3, #0]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	8afa      	ldrh	r2, [r7, #22]
 8006cdc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	89fa      	ldrh	r2, [r7, #14]
 8006ce2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006cec:	d007      	beq.n	8006cfe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fd74 	bl	80067e0 <ptr_to_mem>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	89fb      	ldrh	r3, [r7, #14]
 8006cfc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006cfe:	687b      	ldr	r3, [r7, #4]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	2000597c 	.word	0x2000597c
 8006d0c:	20005980 	.word	0x20005980
 8006d10:	08013c24 	.word	0x08013c24
 8006d14:	08013d94 	.word	0x08013d94
 8006d18:	08013c6c 	.word	0x08013c6c
 8006d1c:	08013dac 	.word	0x08013dac
 8006d20:	08013dcc 	.word	0x08013dcc
 8006d24:	20005984 	.word	0x20005984

08006d28 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <mem_malloc+0x14>
    return NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e0d9      	b.n	8006ef0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	3303      	adds	r3, #3
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006d48:	8bbb      	ldrh	r3, [r7, #28]
 8006d4a:	2b0b      	cmp	r3, #11
 8006d4c:	d801      	bhi.n	8006d52 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006d4e:	230c      	movs	r3, #12
 8006d50:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006d52:	8bbb      	ldrh	r3, [r7, #28]
 8006d54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006d58:	d803      	bhi.n	8006d62 <mem_malloc+0x3a>
 8006d5a:	8bba      	ldrh	r2, [r7, #28]
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d201      	bcs.n	8006d66 <mem_malloc+0x3e>
    return NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e0c4      	b.n	8006ef0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006d66:	4b64      	ldr	r3, [pc, #400]	@ (8006ef8 <mem_malloc+0x1d0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fd4a 	bl	8006804 <mem_to_ptr>
 8006d70:	4603      	mov	r3, r0
 8006d72:	83fb      	strh	r3, [r7, #30]
 8006d74:	e0b4      	b.n	8006ee0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006d76:	8bfb      	ldrh	r3, [r7, #30]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fd31 	bl	80067e0 <ptr_to_mem>
 8006d7e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	791b      	ldrb	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f040 80a4 	bne.w	8006ed2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	8bfb      	ldrh	r3, [r7, #30]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f1a3 0208 	sub.w	r2, r3, #8
 8006d98:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	f0c0 8099 	bcc.w	8006ed2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	8bfb      	ldrh	r3, [r7, #30]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	f1a3 0208 	sub.w	r2, r3, #8
 8006dae:	8bbb      	ldrh	r3, [r7, #28]
 8006db0:	3314      	adds	r3, #20
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d333      	bcc.n	8006e1e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006db6:	8bfa      	ldrh	r2, [r7, #30]
 8006db8:	8bbb      	ldrh	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006dc2:	8a7b      	ldrh	r3, [r7, #18]
 8006dc4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006dc8:	d106      	bne.n	8006dd8 <mem_malloc+0xb0>
 8006dca:	4b4c      	ldr	r3, [pc, #304]	@ (8006efc <mem_malloc+0x1d4>)
 8006dcc:	f240 3287 	movw	r2, #903	@ 0x387
 8006dd0:	494b      	ldr	r1, [pc, #300]	@ (8006f00 <mem_malloc+0x1d8>)
 8006dd2:	484c      	ldr	r0, [pc, #304]	@ (8006f04 <mem_malloc+0x1dc>)
 8006dd4:	f00b ff90 	bl	8012cf8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006dd8:	8a7b      	ldrh	r3, [r7, #18]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fd00 	bl	80067e0 <ptr_to_mem>
 8006de0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	881a      	ldrh	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8bfa      	ldrh	r2, [r7, #30]
 8006df4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	8a7a      	ldrh	r2, [r7, #18]
 8006dfa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006e0a:	d00b      	beq.n	8006e24 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fce5 	bl	80067e0 <ptr_to_mem>
 8006e16:	4602      	mov	r2, r0
 8006e18:	8a7b      	ldrh	r3, [r7, #18]
 8006e1a:	8053      	strh	r3, [r2, #2]
 8006e1c:	e002      	b.n	8006e24 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2201      	movs	r2, #1
 8006e22:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006e24:	4b34      	ldr	r3, [pc, #208]	@ (8006ef8 <mem_malloc+0x1d0>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d127      	bne.n	8006e7e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006e2e:	4b32      	ldr	r3, [pc, #200]	@ (8006ef8 <mem_malloc+0x1d0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006e34:	e005      	b.n	8006e42 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fcd0 	bl	80067e0 <ptr_to_mem>
 8006e40:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	791b      	ldrb	r3, [r3, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <mem_malloc+0x12c>
 8006e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f08 <mem_malloc+0x1e0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d1f0      	bne.n	8006e36 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006e54:	4a28      	ldr	r2, [pc, #160]	@ (8006ef8 <mem_malloc+0x1d0>)
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006e5a:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <mem_malloc+0x1d0>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006f08 <mem_malloc+0x1e0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d00b      	beq.n	8006e7e <mem_malloc+0x156>
 8006e66:	4b24      	ldr	r3, [pc, #144]	@ (8006ef8 <mem_malloc+0x1d0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	791b      	ldrb	r3, [r3, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d006      	beq.n	8006e7e <mem_malloc+0x156>
 8006e70:	4b22      	ldr	r3, [pc, #136]	@ (8006efc <mem_malloc+0x1d4>)
 8006e72:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006e76:	4925      	ldr	r1, [pc, #148]	@ (8006f0c <mem_malloc+0x1e4>)
 8006e78:	4822      	ldr	r0, [pc, #136]	@ (8006f04 <mem_malloc+0x1dc>)
 8006e7a:	f00b ff3d 	bl	8012cf8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006e7e:	8bba      	ldrh	r2, [r7, #28]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	3308      	adds	r3, #8
 8006e86:	4a20      	ldr	r2, [pc, #128]	@ (8006f08 <mem_malloc+0x1e0>)
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d906      	bls.n	8006e9c <mem_malloc+0x174>
 8006e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <mem_malloc+0x1d4>)
 8006e90:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006e94:	491e      	ldr	r1, [pc, #120]	@ (8006f10 <mem_malloc+0x1e8>)
 8006e96:	481b      	ldr	r0, [pc, #108]	@ (8006f04 <mem_malloc+0x1dc>)
 8006e98:	f00b ff2e 	bl	8012cf8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d006      	beq.n	8006eb4 <mem_malloc+0x18c>
 8006ea6:	4b15      	ldr	r3, [pc, #84]	@ (8006efc <mem_malloc+0x1d4>)
 8006ea8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006eac:	4919      	ldr	r1, [pc, #100]	@ (8006f14 <mem_malloc+0x1ec>)
 8006eae:	4815      	ldr	r0, [pc, #84]	@ (8006f04 <mem_malloc+0x1dc>)
 8006eb0:	f00b ff22 	bl	8012cf8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d006      	beq.n	8006ecc <mem_malloc+0x1a4>
 8006ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8006efc <mem_malloc+0x1d4>)
 8006ec0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006ec4:	4914      	ldr	r1, [pc, #80]	@ (8006f18 <mem_malloc+0x1f0>)
 8006ec6:	480f      	ldr	r0, [pc, #60]	@ (8006f04 <mem_malloc+0x1dc>)
 8006ec8:	f00b ff16 	bl	8012cf8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	e00e      	b.n	8006ef0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006ed2:	8bfb      	ldrh	r3, [r7, #30]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff fc83 	bl	80067e0 <ptr_to_mem>
 8006eda:	4603      	mov	r3, r0
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006ee0:	8bfa      	ldrh	r2, [r7, #30]
 8006ee2:	8bbb      	ldrh	r3, [r7, #28]
 8006ee4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	f4ff af44 	bcc.w	8006d76 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20005984 	.word	0x20005984
 8006efc:	08013c24 	.word	0x08013c24
 8006f00:	08013dcc 	.word	0x08013dcc
 8006f04:	08013c6c 	.word	0x08013c6c
 8006f08:	20005980 	.word	0x20005980
 8006f0c:	08013de0 	.word	0x08013de0
 8006f10:	08013dfc 	.word	0x08013dfc
 8006f14:	08013e2c 	.word	0x08013e2c
 8006f18:	08013e5c 	.word	0x08013e5c

08006f1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	3303      	adds	r3, #3
 8006f32:	f023 0303 	bic.w	r3, r3, #3
 8006f36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e011      	b.n	8006f62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4413      	add	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	461a      	mov	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	dbe7      	blt.n	8006f3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006f82:	2300      	movs	r3, #0
 8006f84:	80fb      	strh	r3, [r7, #6]
 8006f86:	e009      	b.n	8006f9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	4a08      	ldr	r2, [pc, #32]	@ (8006fac <memp_init+0x30>)
 8006f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ffc3 	bl	8006f1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	80fb      	strh	r3, [r7, #6]
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d9f2      	bls.n	8006f88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	080169f0 	.word	0x080169f0

08006fb0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d012      	beq.n	8006fec <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d006      	beq.n	8006fe8 <do_memp_malloc_pool+0x38>
 8006fda:	4b07      	ldr	r3, [pc, #28]	@ (8006ff8 <do_memp_malloc_pool+0x48>)
 8006fdc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006fe0:	4906      	ldr	r1, [pc, #24]	@ (8006ffc <do_memp_malloc_pool+0x4c>)
 8006fe2:	4807      	ldr	r0, [pc, #28]	@ (8007000 <do_memp_malloc_pool+0x50>)
 8006fe4:	f00b fe88 	bl	8012cf8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	e000      	b.n	8006fee <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08013e80 	.word	0x08013e80
 8006ffc:	08013eb0 	.word	0x08013eb0
 8007000:	08013ed4 	.word	0x08013ed4

08007004 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <memp_malloc_pool+0x1c>
 8007012:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <memp_malloc_pool+0x38>)
 8007014:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007018:	4909      	ldr	r1, [pc, #36]	@ (8007040 <memp_malloc_pool+0x3c>)
 800701a:	480a      	ldr	r0, [pc, #40]	@ (8007044 <memp_malloc_pool+0x40>)
 800701c:	f00b fe6c 	bl	8012cf8 <iprintf>
  if (desc == NULL) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <memp_malloc_pool+0x26>
    return NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	e003      	b.n	8007032 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff ffc0 	bl	8006fb0 <do_memp_malloc_pool>
 8007030:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	08013e80 	.word	0x08013e80
 8007040:	08013efc 	.word	0x08013efc
 8007044:	08013ed4 	.word	0x08013ed4

08007048 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	2b08      	cmp	r3, #8
 8007056:	d908      	bls.n	800706a <memp_malloc+0x22>
 8007058:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <memp_malloc+0x3c>)
 800705a:	f240 1257 	movw	r2, #343	@ 0x157
 800705e:	490a      	ldr	r1, [pc, #40]	@ (8007088 <memp_malloc+0x40>)
 8007060:	480a      	ldr	r0, [pc, #40]	@ (800708c <memp_malloc+0x44>)
 8007062:	f00b fe49 	bl	8012cf8 <iprintf>
 8007066:	2300      	movs	r3, #0
 8007068:	e008      	b.n	800707c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	4a08      	ldr	r2, [pc, #32]	@ (8007090 <memp_malloc+0x48>)
 800706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff ff9c 	bl	8006fb0 <do_memp_malloc_pool>
 8007078:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800707a:	68fb      	ldr	r3, [r7, #12]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	08013e80 	.word	0x08013e80
 8007088:	08013f10 	.word	0x08013f10
 800708c:	08013ed4 	.word	0x08013ed4
 8007090:	080169f0 	.word	0x080169f0

08007094 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d006      	beq.n	80070b6 <do_memp_free_pool+0x22>
 80070a8:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <do_memp_free_pool+0x40>)
 80070aa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80070ae:	490a      	ldr	r1, [pc, #40]	@ (80070d8 <do_memp_free_pool+0x44>)
 80070b0:	480a      	ldr	r0, [pc, #40]	@ (80070dc <do_memp_free_pool+0x48>)
 80070b2:	f00b fe21 	bl	8012cf8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	08013e80 	.word	0x08013e80
 80070d8:	08013f30 	.word	0x08013f30
 80070dc:	08013ed4 	.word	0x08013ed4

080070e0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <memp_free_pool+0x1e>
 80070f0:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <memp_free_pool+0x3c>)
 80070f2:	f240 1295 	movw	r2, #405	@ 0x195
 80070f6:	490a      	ldr	r1, [pc, #40]	@ (8007120 <memp_free_pool+0x40>)
 80070f8:	480a      	ldr	r0, [pc, #40]	@ (8007124 <memp_free_pool+0x44>)
 80070fa:	f00b fdfd 	bl	8012cf8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <memp_free_pool+0x34>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff ffc1 	bl	8007094 <do_memp_free_pool>
 8007112:	e000      	b.n	8007116 <memp_free_pool+0x36>
    return;
 8007114:	bf00      	nop
}
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	08013e80 	.word	0x08013e80
 8007120:	08013efc 	.word	0x08013efc
 8007124:	08013ed4 	.word	0x08013ed4

08007128 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	2b08      	cmp	r3, #8
 8007138:	d907      	bls.n	800714a <memp_free+0x22>
 800713a:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <memp_free+0x44>)
 800713c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007140:	490b      	ldr	r1, [pc, #44]	@ (8007170 <memp_free+0x48>)
 8007142:	480c      	ldr	r0, [pc, #48]	@ (8007174 <memp_free+0x4c>)
 8007144:	f00b fdd8 	bl	8012cf8 <iprintf>
 8007148:	e00c      	b.n	8007164 <memp_free+0x3c>

  if (mem == NULL) {
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <memp_free+0x50>)
 8007154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff ff9a 	bl	8007094 <do_memp_free_pool>
 8007160:	e000      	b.n	8007164 <memp_free+0x3c>
    return;
 8007162:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	08013e80 	.word	0x08013e80
 8007170:	08013f50 	.word	0x08013f50
 8007174:	08013ed4 	.word	0x08013ed4
 8007178:	080169f0 	.word	0x080169f0

0800717c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007180:	bf00      	nop
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <netif_add+0x26>
 80071a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007314 <netif_add+0x188>)
 80071a2:	f240 1227 	movw	r2, #295	@ 0x127
 80071a6:	495c      	ldr	r1, [pc, #368]	@ (8007318 <netif_add+0x18c>)
 80071a8:	485c      	ldr	r0, [pc, #368]	@ (800731c <netif_add+0x190>)
 80071aa:	f00b fda5 	bl	8012cf8 <iprintf>
 80071ae:	2300      	movs	r3, #0
 80071b0:	e0ac      	b.n	800730c <netif_add+0x180>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d108      	bne.n	80071ca <netif_add+0x3e>
 80071b8:	4b56      	ldr	r3, [pc, #344]	@ (8007314 <netif_add+0x188>)
 80071ba:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80071be:	4958      	ldr	r1, [pc, #352]	@ (8007320 <netif_add+0x194>)
 80071c0:	4856      	ldr	r0, [pc, #344]	@ (800731c <netif_add+0x190>)
 80071c2:	f00b fd99 	bl	8012cf8 <iprintf>
 80071c6:	2300      	movs	r3, #0
 80071c8:	e0a0      	b.n	800730c <netif_add+0x180>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80071d0:	4b54      	ldr	r3, [pc, #336]	@ (8007324 <netif_add+0x198>)
 80071d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80071da:	4b52      	ldr	r3, [pc, #328]	@ (8007324 <netif_add+0x198>)
 80071dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80071e4:	4b4f      	ldr	r3, [pc, #316]	@ (8007324 <netif_add+0x198>)
 80071e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a4a      	ldr	r2, [pc, #296]	@ (8007328 <netif_add+0x19c>)
 80071fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3328      	adds	r3, #40	@ 0x28
 8007212:	2204      	movs	r2, #4
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f00b fdd3 	bl	8012dc2 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a3a      	ldr	r2, [r7, #32]
 800722c:	625a      	str	r2, [r3, #36]	@ 0x24
  netif->num = netif_num;
 800722e:	4b3f      	ldr	r3, [pc, #252]	@ (800732c <netif_add+0x1a0>)
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800723c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f91b 	bl	8007480 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	4798      	blx	r3
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <netif_add+0xce>
    return NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	e058      	b.n	800730c <netif_add+0x180>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007260:	2bff      	cmp	r3, #255	@ 0xff
 8007262:	d103      	bne.n	800726c <netif_add+0xe0>
        netif->num = 0;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007270:	4b2f      	ldr	r3, [pc, #188]	@ (8007330 <netif_add+0x1a4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e02b      	b.n	80072d0 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	429a      	cmp	r2, r3
 800727e:	d106      	bne.n	800728e <netif_add+0x102>
 8007280:	4b24      	ldr	r3, [pc, #144]	@ (8007314 <netif_add+0x188>)
 8007282:	f240 128b 	movw	r2, #395	@ 0x18b
 8007286:	492b      	ldr	r1, [pc, #172]	@ (8007334 <netif_add+0x1a8>)
 8007288:	4824      	ldr	r0, [pc, #144]	@ (800731c <netif_add+0x190>)
 800728a:	f00b fd35 	bl	8012cf8 <iprintf>
        num_netifs++;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	3301      	adds	r3, #1
 8007292:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2bff      	cmp	r3, #255	@ 0xff
 8007298:	dd06      	ble.n	80072a8 <netif_add+0x11c>
 800729a:	4b1e      	ldr	r3, [pc, #120]	@ (8007314 <netif_add+0x188>)
 800729c:	f240 128d 	movw	r2, #397	@ 0x18d
 80072a0:	4925      	ldr	r1, [pc, #148]	@ (8007338 <netif_add+0x1ac>)
 80072a2:	481e      	ldr	r0, [pc, #120]	@ (800731c <netif_add+0x190>)
 80072a4:	f00b fd28 	bl	8012cf8 <iprintf>
        if (netif2->num == netif->num) {
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d108      	bne.n	80072ca <netif_add+0x13e>
          netif->num++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072be:	3301      	adds	r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 80072c8:	e005      	b.n	80072d6 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1d0      	bne.n	8007278 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1be      	bne.n	800725a <netif_add+0xce>
  }
  if (netif->num == 254) {
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80072e4:	d103      	bne.n	80072ee <netif_add+0x162>
    netif_num = 0;
 80072e6:	4b11      	ldr	r3, [pc, #68]	@ (800732c <netif_add+0x1a0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e006      	b.n	80072fc <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072f4:	3301      	adds	r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <netif_add+0x1a0>)
 80072fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80072fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007330 <netif_add+0x1a4>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007304:	4a0a      	ldr	r2, [pc, #40]	@ (8007330 <netif_add+0x1a4>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	08013f6c 	.word	0x08013f6c
 8007318:	08014000 	.word	0x08014000
 800731c:	08013fbc 	.word	0x08013fbc
 8007320:	0801401c 	.word	0x0801401c
 8007324:	08016a6c 	.word	0x08016a6c
 8007328:	08007783 	.word	0x08007783
 800732c:	200088ac 	.word	0x200088ac
 8007330:	200088a4 	.word	0x200088a4
 8007334:	08014040 	.word	0x08014040
 8007338:	08014054 	.word	0x08014054

0800733c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f002 fccb 	bl	8009ce4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f007 f943 	bl	800e5dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <netif_do_set_ipaddr+0x20>
 8007372:	4b21      	ldr	r3, [pc, #132]	@ (80073f8 <netif_do_set_ipaddr+0x98>)
 8007374:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007378:	4920      	ldr	r1, [pc, #128]	@ (80073fc <netif_do_set_ipaddr+0x9c>)
 800737a:	4821      	ldr	r0, [pc, #132]	@ (8007400 <netif_do_set_ipaddr+0xa0>)
 800737c:	f00b fcbc 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <netif_do_set_ipaddr+0x34>
 8007386:	4b1c      	ldr	r3, [pc, #112]	@ (80073f8 <netif_do_set_ipaddr+0x98>)
 8007388:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800738c:	491b      	ldr	r1, [pc, #108]	@ (80073fc <netif_do_set_ipaddr+0x9c>)
 800738e:	481c      	ldr	r0, [pc, #112]	@ (8007400 <netif_do_set_ipaddr+0xa0>)
 8007390:	f00b fcb2 	bl	8012cf8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3304      	adds	r3, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d024      	beq.n	80073ec <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3304      	adds	r3, #4
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80073b2:	f107 0314 	add.w	r3, r7, #20
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ffbf 	bl	800733c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <netif_do_set_ipaddr+0x6a>
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	e000      	b.n	80073cc <netif_do_set_ipaddr+0x6c>
 80073ca:	2300      	movs	r3, #0
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80073d0:	2101      	movs	r1, #1
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f8e2 	bl	800759c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <netif_do_set_ipaddr+0x88>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	4798      	blx	r3
    return 1; /* address changed */
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	08013f6c 	.word	0x08013f6c
 80073fc:	08014084 	.word	0x08014084
 8007400:	08013fbc 	.word	0x08013fbc

08007404 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3308      	adds	r3, #8
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d00a      	beq.n	8007434 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <netif_do_set_netmask+0x26>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	e000      	b.n	800742c <netif_do_set_netmask+0x28>
 800742a:	2300      	movs	r3, #0
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	330c      	adds	r3, #12
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d00a      	beq.n	8007472 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <netif_do_set_gw+0x26>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	e000      	b.n	800746a <netif_do_set_gw+0x28>
 8007468:	2300      	movs	r3, #0
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800749c:	4b1c      	ldr	r3, [pc, #112]	@ (8007510 <netif_set_addr+0x90>)
 800749e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80074a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007510 <netif_set_addr+0x90>)
 80074a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80074b0:	4b17      	ldr	r3, [pc, #92]	@ (8007510 <netif_set_addr+0x90>)
 80074b2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <netif_set_addr+0x42>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <netif_set_addr+0x46>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <netif_set_addr+0x48>
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80074d0:	f107 0310 	add.w	r3, r7, #16
 80074d4:	461a      	mov	r2, r3
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff ff41 	bl	8007360 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff ff8e 	bl	8007404 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff ffa8 	bl	8007442 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80074f8:	f107 0310 	add.w	r3, r7, #16
 80074fc:	461a      	mov	r2, r3
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff ff2d 	bl	8007360 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007506:	bf00      	nop
 8007508:	3720      	adds	r7, #32
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	08016a6c 	.word	0x08016a6c

08007514 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800751c:	4a04      	ldr	r2, [pc, #16]	@ (8007530 <netif_set_default+0x1c>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	200088a8 	.word	0x200088a8

08007534 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d107      	bne.n	8007552 <netif_set_up+0x1e>
 8007542:	4b13      	ldr	r3, [pc, #76]	@ (8007590 <netif_set_up+0x5c>)
 8007544:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007548:	4912      	ldr	r1, [pc, #72]	@ (8007594 <netif_set_up+0x60>)
 800754a:	4813      	ldr	r0, [pc, #76]	@ (8007598 <netif_set_up+0x64>)
 800754c:	f00b fbd4 	bl	8012cf8 <iprintf>
 8007550:	e01b      	b.n	800758a <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d114      	bne.n	800758a <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	b2da      	uxtb	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <netif_set_up+0x4e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007582:	2103      	movs	r1, #3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f809 	bl	800759c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	08013f6c 	.word	0x08013f6c
 8007594:	080140f4 	.word	0x080140f4
 8007598:	08013fbc 	.word	0x08013fbc

0800759c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <netif_issue_reports+0x20>
 80075ae:	4b18      	ldr	r3, [pc, #96]	@ (8007610 <netif_issue_reports+0x74>)
 80075b0:	f240 326d 	movw	r2, #877	@ 0x36d
 80075b4:	4917      	ldr	r1, [pc, #92]	@ (8007614 <netif_issue_reports+0x78>)
 80075b6:	4818      	ldr	r0, [pc, #96]	@ (8007618 <netif_issue_reports+0x7c>)
 80075b8:	f00b fb9e 	bl	8012cf8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075c2:	f003 0304 	and.w	r3, r3, #4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01e      	beq.n	8007608 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00e      	beq.n	800760a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f009 fe35 	bl	8011270 <etharp_request>
 8007606:	e000      	b.n	800760a <netif_issue_reports+0x6e>
    return;
 8007608:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	08013f6c 	.word	0x08013f6c
 8007614:	08014110 	.word	0x08014110
 8007618:	08013fbc 	.word	0x08013fbc

0800761c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d107      	bne.n	800763a <netif_set_down+0x1e>
 800762a:	4b16      	ldr	r3, [pc, #88]	@ (8007684 <netif_set_down+0x68>)
 800762c:	f240 329b 	movw	r2, #923	@ 0x39b
 8007630:	4915      	ldr	r1, [pc, #84]	@ (8007688 <netif_set_down+0x6c>)
 8007632:	4816      	ldr	r0, [pc, #88]	@ (800768c <netif_set_down+0x70>)
 8007634:	f00b fb60 	bl	8012cf8 <iprintf>
 8007638:	e021      	b.n	800767e <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01a      	beq.n	800767e <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800764e:	f023 0301 	bic.w	r3, r3, #1
 8007652:	b2da      	uxtb	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f009 f9bb 	bl	80109e4 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <netif_set_down+0x62>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
  }
}
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	08013f6c 	.word	0x08013f6c
 8007688:	08014134 	.word	0x08014134
 800768c:	08013fbc 	.word	0x08013fbc

08007690 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d107      	bne.n	80076ae <netif_set_link_up+0x1e>
 800769e:	4b15      	ldr	r3, [pc, #84]	@ (80076f4 <netif_set_link_up+0x64>)
 80076a0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80076a4:	4914      	ldr	r1, [pc, #80]	@ (80076f8 <netif_set_link_up+0x68>)
 80076a6:	4815      	ldr	r0, [pc, #84]	@ (80076fc <netif_set_link_up+0x6c>)
 80076a8:	f00b fb26 	bl	8012cf8 <iprintf>
 80076ac:	e01e      	b.n	80076ec <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d117      	bne.n	80076ec <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076c2:	f043 0304 	orr.w	r3, r3, #4
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f007 fbce 	bl	800ee70 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80076d4:	2103      	movs	r1, #3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff ff60 	bl	800759c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <netif_set_link_up+0x5c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	08013f6c 	.word	0x08013f6c
 80076f8:	08014154 	.word	0x08014154
 80076fc:	08013fbc 	.word	0x08013fbc

08007700 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d107      	bne.n	800771e <netif_set_link_down+0x1e>
 800770e:	4b11      	ldr	r3, [pc, #68]	@ (8007754 <netif_set_link_down+0x54>)
 8007710:	f240 4206 	movw	r2, #1030	@ 0x406
 8007714:	4910      	ldr	r1, [pc, #64]	@ (8007758 <netif_set_link_down+0x58>)
 8007716:	4811      	ldr	r0, [pc, #68]	@ (800775c <netif_set_link_down+0x5c>)
 8007718:	f00b faee 	bl	8012cf8 <iprintf>
 800771c:	e017      	b.n	800774e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d010      	beq.n	800774e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007732:	f023 0304 	bic.w	r3, r3, #4
 8007736:	b2da      	uxtb	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    NETIF_LINK_CALLBACK(netif);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <netif_set_link_down+0x4e>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	08013f6c 	.word	0x08013f6c
 8007758:	08014178 	.word	0x08014178
 800775c:	08013fbc 	.word	0x08013fbc

08007760 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	621a      	str	r2, [r3, #32]
  }
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800778e:	f06f 030b 	mvn.w	r3, #11
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d013      	beq.n	80077d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80077b0:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <netif_get_by_index+0x48>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e00c      	b.n	80077d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80077be:	3301      	adds	r3, #1
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	79fa      	ldrb	r2, [r7, #7]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d101      	bne.n	80077cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	e006      	b.n	80077da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ef      	bne.n	80077b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	200088a4 	.word	0x200088a4

080077ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80077f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <pbuf_free_ooseq+0x38>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80077f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <pbuf_free_ooseq+0x3c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	607b      	str	r3, [r7, #4]
 80077fe:	e00a      	b.n	8007816 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f002 faa9 	bl	8009d60 <tcp_free_ooseq>
      return;
 800780e:	e005      	b.n	800781c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f1      	bne.n	8007800 <pbuf_free_ooseq+0x14>
    }
  }
}
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200088ad 	.word	0x200088ad
 8007828:	200088bc 	.word	0x200088bc

0800782c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007830:	4b03      	ldr	r3, [pc, #12]	@ (8007840 <pbuf_pool_is_empty+0x14>)
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007836:	bf00      	nop
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	200088ad 	.word	0x200088ad

08007844 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4611      	mov	r1, r2
 8007850:	461a      	mov	r2, r3
 8007852:	460b      	mov	r3, r1
 8007854:	80fb      	strh	r3, [r7, #6]
 8007856:	4613      	mov	r3, r2
 8007858:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	88ba      	ldrh	r2, [r7, #4]
 8007870:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007872:	8b3b      	ldrh	r3, [r7, #24]
 8007874:	b2da      	uxtb	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	7f3a      	ldrb	r2, [r7, #28]
 800787e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	73da      	strb	r2, [r3, #15]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08c      	sub	sp, #48	@ 0x30
 800789c:	af02      	add	r7, sp, #8
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]
 80078a2:	460b      	mov	r3, r1
 80078a4:	80bb      	strh	r3, [r7, #4]
 80078a6:	4613      	mov	r3, r2
 80078a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80078ae:	887b      	ldrh	r3, [r7, #2]
 80078b0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80078b4:	d07f      	beq.n	80079b6 <pbuf_alloc+0x11e>
 80078b6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80078ba:	f300 80c8 	bgt.w	8007a4e <pbuf_alloc+0x1b6>
 80078be:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80078c2:	d010      	beq.n	80078e6 <pbuf_alloc+0x4e>
 80078c4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80078c8:	f300 80c1 	bgt.w	8007a4e <pbuf_alloc+0x1b6>
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d002      	beq.n	80078d6 <pbuf_alloc+0x3e>
 80078d0:	2b41      	cmp	r3, #65	@ 0x41
 80078d2:	f040 80bc 	bne.w	8007a4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	88bb      	ldrh	r3, [r7, #4]
 80078da:	4619      	mov	r1, r3
 80078dc:	2000      	movs	r0, #0
 80078de:	f000 f8d1 	bl	8007a84 <pbuf_alloc_reference>
 80078e2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80078e4:	e0bd      	b.n	8007a62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80078ee:	88bb      	ldrh	r3, [r7, #4]
 80078f0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80078f2:	2008      	movs	r0, #8
 80078f4:	f7ff fba8 	bl	8007048 <memp_malloc>
 80078f8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d109      	bne.n	8007914 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007900:	f7ff ff94 	bl	800782c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <pbuf_alloc+0x78>
            pbuf_free(p);
 800790a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800790c:	f000 faa8 	bl	8007e60 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	e0a7      	b.n	8007a64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007914:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007916:	3303      	adds	r3, #3
 8007918:	b29b      	uxth	r3, r3
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	b29b      	uxth	r3, r3
 8007920:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007924:	b29b      	uxth	r3, r3
 8007926:	8b7a      	ldrh	r2, [r7, #26]
 8007928:	4293      	cmp	r3, r2
 800792a:	bf28      	it	cs
 800792c:	4613      	movcs	r3, r2
 800792e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007930:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007932:	3310      	adds	r3, #16
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4413      	add	r3, r2
 8007938:	3303      	adds	r3, #3
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	4618      	mov	r0, r3
 8007940:	89f9      	ldrh	r1, [r7, #14]
 8007942:	8b7a      	ldrh	r2, [r7, #26]
 8007944:	2300      	movs	r3, #0
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	887b      	ldrh	r3, [r7, #2]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	460b      	mov	r3, r1
 800794e:	4601      	mov	r1, r0
 8007950:	6938      	ldr	r0, [r7, #16]
 8007952:	f7ff ff77 	bl	8007844 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d006      	beq.n	8007970 <pbuf_alloc+0xd8>
 8007962:	4b42      	ldr	r3, [pc, #264]	@ (8007a6c <pbuf_alloc+0x1d4>)
 8007964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007968:	4941      	ldr	r1, [pc, #260]	@ (8007a70 <pbuf_alloc+0x1d8>)
 800796a:	4842      	ldr	r0, [pc, #264]	@ (8007a74 <pbuf_alloc+0x1dc>)
 800796c:	f00b f9c4 	bl	8012cf8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007972:	3303      	adds	r3, #3
 8007974:	f023 0303 	bic.w	r3, r3, #3
 8007978:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800797c:	d106      	bne.n	800798c <pbuf_alloc+0xf4>
 800797e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a6c <pbuf_alloc+0x1d4>)
 8007980:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007984:	493c      	ldr	r1, [pc, #240]	@ (8007a78 <pbuf_alloc+0x1e0>)
 8007986:	483b      	ldr	r0, [pc, #236]	@ (8007a74 <pbuf_alloc+0x1dc>)
 8007988:	f00b f9b6 	bl	8012cf8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	627b      	str	r3, [r7, #36]	@ 0x24
 8007996:	e002      	b.n	800799e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80079a2:	8b7a      	ldrh	r2, [r7, #26]
 80079a4:	89fb      	ldrh	r3, [r7, #14]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80079ae:	8b7b      	ldrh	r3, [r7, #26]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d19e      	bne.n	80078f2 <pbuf_alloc+0x5a>
      break;
 80079b4:	e055      	b.n	8007a62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80079b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80079b8:	3303      	adds	r3, #3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f023 0303 	bic.w	r3, r3, #3
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	88bb      	ldrh	r3, [r7, #4]
 80079c4:	3303      	adds	r3, #3
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f023 0303 	bic.w	r3, r3, #3
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80079d2:	8b3b      	ldrh	r3, [r7, #24]
 80079d4:	3310      	adds	r3, #16
 80079d6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80079d8:	8b3a      	ldrh	r2, [r7, #24]
 80079da:	88bb      	ldrh	r3, [r7, #4]
 80079dc:	3303      	adds	r3, #3
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d306      	bcc.n	80079f4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80079e6:	8afa      	ldrh	r2, [r7, #22]
 80079e8:	88bb      	ldrh	r3, [r7, #4]
 80079ea:	3303      	adds	r3, #3
 80079ec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d201      	bcs.n	80079f8 <pbuf_alloc+0x160>
        return NULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	e035      	b.n	8007a64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80079f8:	8afb      	ldrh	r3, [r7, #22]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff f994 	bl	8006d28 <mem_malloc>
 8007a00:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <pbuf_alloc+0x174>
        return NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e02b      	b.n	8007a64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007a0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007a0e:	3310      	adds	r3, #16
 8007a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a12:	4413      	add	r3, r2
 8007a14:	3303      	adds	r3, #3
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	88b9      	ldrh	r1, [r7, #4]
 8007a1e:	88ba      	ldrh	r2, [r7, #4]
 8007a20:	2300      	movs	r3, #0
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	887b      	ldrh	r3, [r7, #2]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a2e:	f7ff ff09 	bl	8007844 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f003 0303 	and.w	r3, r3, #3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d010      	beq.n	8007a60 <pbuf_alloc+0x1c8>
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <pbuf_alloc+0x1d4>)
 8007a40:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007a44:	490d      	ldr	r1, [pc, #52]	@ (8007a7c <pbuf_alloc+0x1e4>)
 8007a46:	480b      	ldr	r0, [pc, #44]	@ (8007a74 <pbuf_alloc+0x1dc>)
 8007a48:	f00b f956 	bl	8012cf8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007a4c:	e008      	b.n	8007a60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007a4e:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <pbuf_alloc+0x1d4>)
 8007a50:	f240 1227 	movw	r2, #295	@ 0x127
 8007a54:	490a      	ldr	r1, [pc, #40]	@ (8007a80 <pbuf_alloc+0x1e8>)
 8007a56:	4807      	ldr	r0, [pc, #28]	@ (8007a74 <pbuf_alloc+0x1dc>)
 8007a58:	f00b f94e 	bl	8012cf8 <iprintf>
      return NULL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e001      	b.n	8007a64 <pbuf_alloc+0x1cc>
      break;
 8007a60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3728      	adds	r7, #40	@ 0x28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	0801419c 	.word	0x0801419c
 8007a70:	080141cc 	.word	0x080141cc
 8007a74:	080141fc 	.word	0x080141fc
 8007a78:	08014224 	.word	0x08014224
 8007a7c:	08014258 	.word	0x08014258
 8007a80:	08014284 	.word	0x08014284

08007a84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	807b      	strh	r3, [r7, #2]
 8007a90:	4613      	mov	r3, r2
 8007a92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007a94:	883b      	ldrh	r3, [r7, #0]
 8007a96:	2b41      	cmp	r3, #65	@ 0x41
 8007a98:	d009      	beq.n	8007aae <pbuf_alloc_reference+0x2a>
 8007a9a:	883b      	ldrh	r3, [r7, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d006      	beq.n	8007aae <pbuf_alloc_reference+0x2a>
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae0 <pbuf_alloc_reference+0x5c>)
 8007aa2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007aa6:	490f      	ldr	r1, [pc, #60]	@ (8007ae4 <pbuf_alloc_reference+0x60>)
 8007aa8:	480f      	ldr	r0, [pc, #60]	@ (8007ae8 <pbuf_alloc_reference+0x64>)
 8007aaa:	f00b f925 	bl	8012cf8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007aae:	2007      	movs	r0, #7
 8007ab0:	f7ff faca 	bl	8007048 <memp_malloc>
 8007ab4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e00b      	b.n	8007ad8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007ac0:	8879      	ldrh	r1, [r7, #2]
 8007ac2:	887a      	ldrh	r2, [r7, #2]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	883b      	ldrh	r3, [r7, #0]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	460b      	mov	r3, r1
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7ff feb7 	bl	8007844 <pbuf_init_alloced_pbuf>
  return p;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	0801419c 	.word	0x0801419c
 8007ae4:	080142a0 	.word	0x080142a0
 8007ae8:	080141fc 	.word	0x080141fc

08007aec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
 8007af8:	460b      	mov	r3, r1
 8007afa:	81bb      	strh	r3, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007b04:	8a7b      	ldrh	r3, [r7, #18]
 8007b06:	3303      	adds	r3, #3
 8007b08:	f023 0203 	bic.w	r2, r3, #3
 8007b0c:	89bb      	ldrh	r3, [r7, #12]
 8007b0e:	441a      	add	r2, r3
 8007b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d901      	bls.n	8007b1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	e018      	b.n	8007b4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007b20:	8a7b      	ldrh	r3, [r7, #18]
 8007b22:	3303      	adds	r3, #3
 8007b24:	f023 0303 	bic.w	r3, r3, #3
 8007b28:	6a3a      	ldr	r2, [r7, #32]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e001      	b.n	8007b34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	89b9      	ldrh	r1, [r7, #12]
 8007b38:	89ba      	ldrh	r2, [r7, #12]
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	897b      	ldrh	r3, [r7, #10]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	460b      	mov	r3, r1
 8007b44:	6979      	ldr	r1, [r7, #20]
 8007b46:	f7ff fe7d 	bl	8007844 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007b4a:	687b      	ldr	r3, [r7, #4]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d106      	bne.n	8007b74 <pbuf_realloc+0x20>
 8007b66:	4b3a      	ldr	r3, [pc, #232]	@ (8007c50 <pbuf_realloc+0xfc>)
 8007b68:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007b6c:	4939      	ldr	r1, [pc, #228]	@ (8007c54 <pbuf_realloc+0x100>)
 8007b6e:	483a      	ldr	r0, [pc, #232]	@ (8007c58 <pbuf_realloc+0x104>)
 8007b70:	f00b f8c2 	bl	8012cf8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	891b      	ldrh	r3, [r3, #8]
 8007b78:	887a      	ldrh	r2, [r7, #2]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d263      	bcs.n	8007c46 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	891a      	ldrh	r2, [r3, #8]
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007b88:	887b      	ldrh	r3, [r7, #2]
 8007b8a:	817b      	strh	r3, [r7, #10]
  q = p;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007b90:	e018      	b.n	8007bc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	895b      	ldrh	r3, [r3, #10]
 8007b96:	897a      	ldrh	r2, [r7, #10]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	891a      	ldrh	r2, [r3, #8]
 8007ba0:	893b      	ldrh	r3, [r7, #8]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <pbuf_realloc+0x70>
 8007bb6:	4b26      	ldr	r3, [pc, #152]	@ (8007c50 <pbuf_realloc+0xfc>)
 8007bb8:	f240 12af 	movw	r2, #431	@ 0x1af
 8007bbc:	4927      	ldr	r1, [pc, #156]	@ (8007c5c <pbuf_realloc+0x108>)
 8007bbe:	4826      	ldr	r0, [pc, #152]	@ (8007c58 <pbuf_realloc+0x104>)
 8007bc0:	f00b f89a 	bl	8012cf8 <iprintf>
  while (rem_len > q->len) {
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	895b      	ldrh	r3, [r3, #10]
 8007bc8:	897a      	ldrh	r2, [r7, #10]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d8e1      	bhi.n	8007b92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	7b1b      	ldrb	r3, [r3, #12]
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d121      	bne.n	8007c1e <pbuf_realloc+0xca>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	895b      	ldrh	r3, [r3, #10]
 8007bde:	897a      	ldrh	r2, [r7, #10]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d01c      	beq.n	8007c1e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	7b5b      	ldrb	r3, [r3, #13]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d116      	bne.n	8007c1e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	897b      	ldrh	r3, [r7, #10]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	4619      	mov	r1, r3
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f7fe ff94 	bl	8006b30 <mem_trim>
 8007c08:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <pbuf_realloc+0xca>
 8007c10:	4b0f      	ldr	r3, [pc, #60]	@ (8007c50 <pbuf_realloc+0xfc>)
 8007c12:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007c16:	4912      	ldr	r1, [pc, #72]	@ (8007c60 <pbuf_realloc+0x10c>)
 8007c18:	480f      	ldr	r0, [pc, #60]	@ (8007c58 <pbuf_realloc+0x104>)
 8007c1a:	f00b f86d 	bl	8012cf8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	897a      	ldrh	r2, [r7, #10]
 8007c22:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	895a      	ldrh	r2, [r3, #10]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f911 	bl	8007e60 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e000      	b.n	8007c48 <pbuf_realloc+0xf4>
    return;
 8007c46:	bf00      	nop

}
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	0801419c 	.word	0x0801419c
 8007c54:	080142b4 	.word	0x080142b4
 8007c58:	080141fc 	.word	0x080141fc
 8007c5c:	080142cc 	.word	0x080142cc
 8007c60:	080142e4 	.word	0x080142e4

08007c64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <pbuf_add_header_impl+0x22>
 8007c78:	4b2b      	ldr	r3, [pc, #172]	@ (8007d28 <pbuf_add_header_impl+0xc4>)
 8007c7a:	f240 12df 	movw	r2, #479	@ 0x1df
 8007c7e:	492b      	ldr	r1, [pc, #172]	@ (8007d2c <pbuf_add_header_impl+0xc8>)
 8007c80:	482b      	ldr	r0, [pc, #172]	@ (8007d30 <pbuf_add_header_impl+0xcc>)
 8007c82:	f00b f839 	bl	8012cf8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <pbuf_add_header_impl+0x30>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c92:	d301      	bcc.n	8007c98 <pbuf_add_header_impl+0x34>
    return 1;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e043      	b.n	8007d20 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <pbuf_add_header_impl+0x3e>
    return 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e03e      	b.n	8007d20 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	891a      	ldrh	r2, [r3, #8]
 8007caa:	8a7b      	ldrh	r3, [r7, #18]
 8007cac:	4413      	add	r3, r2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	8a7a      	ldrh	r2, [r7, #18]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d901      	bls.n	8007cba <pbuf_add_header_impl+0x56>
    return 1;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e032      	b.n	8007d20 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	7b1b      	ldrb	r3, [r3, #12]
 8007cbe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007cc0:	8a3b      	ldrh	r3, [r7, #16]
 8007cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00c      	beq.n	8007ce4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3310      	adds	r3, #16
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d20d      	bcs.n	8007cfc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e01d      	b.n	8007d20 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d006      	beq.n	8007cf8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	425b      	negs	r3, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	e001      	b.n	8007cfc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e011      	b.n	8007d20 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	895a      	ldrh	r2, [r3, #10]
 8007d06:	8a7b      	ldrh	r3, [r7, #18]
 8007d08:	4413      	add	r3, r2
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	891a      	ldrh	r2, [r3, #8]
 8007d14:	8a7b      	ldrh	r3, [r7, #18]
 8007d16:	4413      	add	r3, r2
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	811a      	strh	r2, [r3, #8]


  return 0;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	0801419c 	.word	0x0801419c
 8007d2c:	08014300 	.word	0x08014300
 8007d30:	080141fc 	.word	0x080141fc

08007d34 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff ff8e 	bl	8007c64 <pbuf_add_header_impl>
 8007d48:	4603      	mov	r3, r0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <pbuf_remove_header+0x1e>
 8007d64:	4b20      	ldr	r3, [pc, #128]	@ (8007de8 <pbuf_remove_header+0x94>)
 8007d66:	f240 224b 	movw	r2, #587	@ 0x24b
 8007d6a:	4920      	ldr	r1, [pc, #128]	@ (8007dec <pbuf_remove_header+0x98>)
 8007d6c:	4820      	ldr	r0, [pc, #128]	@ (8007df0 <pbuf_remove_header+0x9c>)
 8007d6e:	f00a ffc3 	bl	8012cf8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <pbuf_remove_header+0x2c>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d7e:	d301      	bcc.n	8007d84 <pbuf_remove_header+0x30>
    return 1;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e02c      	b.n	8007dde <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <pbuf_remove_header+0x3a>
    return 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e027      	b.n	8007dde <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	895b      	ldrh	r3, [r3, #10]
 8007d96:	89fa      	ldrh	r2, [r7, #14]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d908      	bls.n	8007dae <pbuf_remove_header+0x5a>
 8007d9c:	4b12      	ldr	r3, [pc, #72]	@ (8007de8 <pbuf_remove_header+0x94>)
 8007d9e:	f240 2255 	movw	r2, #597	@ 0x255
 8007da2:	4914      	ldr	r1, [pc, #80]	@ (8007df4 <pbuf_remove_header+0xa0>)
 8007da4:	4812      	ldr	r0, [pc, #72]	@ (8007df0 <pbuf_remove_header+0x9c>)
 8007da6:	f00a ffa7 	bl	8012cf8 <iprintf>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e017      	b.n	8007dde <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	441a      	add	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	895a      	ldrh	r2, [r3, #10]
 8007dc4:	89fb      	ldrh	r3, [r7, #14]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	891a      	ldrh	r2, [r3, #8]
 8007dd2:	89fb      	ldrh	r3, [r7, #14]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	0801419c 	.word	0x0801419c
 8007dec:	08014300 	.word	0x08014300
 8007df0:	080141fc 	.word	0x080141fc
 8007df4:	0801430c 	.word	0x0801430c

08007df8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
 8007e04:	4613      	mov	r3, r2
 8007e06:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007e08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da08      	bge.n	8007e22 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e14:	425b      	negs	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff ff9b 	bl	8007d54 <pbuf_remove_header>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	e007      	b.n	8007e32 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007e22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e26:	787a      	ldrb	r2, [r7, #1]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff ff1a 	bl	8007c64 <pbuf_add_header_impl>
 8007e30:	4603      	mov	r3, r0
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007e46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff ffd2 	bl	8007df8 <pbuf_header_impl>
 8007e54:	4603      	mov	r3, r0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <pbuf_free+0x22>
 8007e74:	4b38      	ldr	r3, [pc, #224]	@ (8007f58 <pbuf_free+0xf8>)
 8007e76:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007e7a:	4938      	ldr	r1, [pc, #224]	@ (8007f5c <pbuf_free+0xfc>)
 8007e7c:	4838      	ldr	r0, [pc, #224]	@ (8007f60 <pbuf_free+0x100>)
 8007e7e:	f00a ff3b 	bl	8012cf8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e063      	b.n	8007f4e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007e8a:	e05c      	b.n	8007f46 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	7b9b      	ldrb	r3, [r3, #14]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <pbuf_free+0x42>
 8007e94:	4b30      	ldr	r3, [pc, #192]	@ (8007f58 <pbuf_free+0xf8>)
 8007e96:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007e9a:	4932      	ldr	r1, [pc, #200]	@ (8007f64 <pbuf_free+0x104>)
 8007e9c:	4830      	ldr	r0, [pc, #192]	@ (8007f60 <pbuf_free+0x100>)
 8007e9e:	f00a ff2b 	bl	8012cf8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7b9b      	ldrb	r3, [r3, #14]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	739a      	strb	r2, [r3, #14]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7b9b      	ldrb	r3, [r3, #14]
 8007eb2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007eb4:	7dbb      	ldrb	r3, [r7, #22]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d143      	bne.n	8007f42 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7b1b      	ldrb	r3, [r3, #12]
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	7b5b      	ldrb	r3, [r3, #13]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d011      	beq.n	8007efa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <pbuf_free+0x90>
 8007ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f58 <pbuf_free+0xf8>)
 8007ee4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007ee8:	491f      	ldr	r1, [pc, #124]	@ (8007f68 <pbuf_free+0x108>)
 8007eea:	481d      	ldr	r0, [pc, #116]	@ (8007f60 <pbuf_free+0x100>)
 8007eec:	f00a ff04 	bl	8012cf8 <iprintf>
        pc->custom_free_function(p);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
 8007ef8:	e01d      	b.n	8007f36 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d104      	bne.n	8007f0a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	2008      	movs	r0, #8
 8007f04:	f7ff f910 	bl	8007128 <memp_free>
 8007f08:	e015      	b.n	8007f36 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d104      	bne.n	8007f1a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	2007      	movs	r0, #7
 8007f14:	f7ff f908 	bl	8007128 <memp_free>
 8007f18:	e00d      	b.n	8007f36 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d103      	bne.n	8007f28 <pbuf_free+0xc8>
          mem_free(p);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fe fd9b 	bl	8006a5c <mem_free>
 8007f26:	e006      	b.n	8007f36 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007f28:	4b0b      	ldr	r3, [pc, #44]	@ (8007f58 <pbuf_free+0xf8>)
 8007f2a:	f240 320f 	movw	r2, #783	@ 0x30f
 8007f2e:	490f      	ldr	r1, [pc, #60]	@ (8007f6c <pbuf_free+0x10c>)
 8007f30:	480b      	ldr	r0, [pc, #44]	@ (8007f60 <pbuf_free+0x100>)
 8007f32:	f00a fee1 	bl	8012cf8 <iprintf>
        }
      }
      count++;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	e001      	b.n	8007f46 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d19f      	bne.n	8007e8c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	0801419c 	.word	0x0801419c
 8007f5c:	08014300 	.word	0x08014300
 8007f60:	080141fc 	.word	0x080141fc
 8007f64:	0801432c 	.word	0x0801432c
 8007f68:	08014344 	.word	0x08014344
 8007f6c:	08014368 	.word	0x08014368

08007f70 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007f7c:	e005      	b.n	8007f8a <pbuf_clen+0x1a>
    ++len;
 8007f7e:	89fb      	ldrh	r3, [r7, #14]
 8007f80:	3301      	adds	r3, #1
 8007f82:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f6      	bne.n	8007f7e <pbuf_clen+0xe>
  }
  return len;
 8007f90:	89fb      	ldrh	r3, [r7, #14]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d010      	beq.n	8007fd0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	7b9b      	ldrb	r3, [r3, #14]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7b9b      	ldrb	r3, [r3, #14]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <pbuf_ref+0x30>
 8007fc2:	4b05      	ldr	r3, [pc, #20]	@ (8007fd8 <pbuf_ref+0x38>)
 8007fc4:	f240 3242 	movw	r2, #834	@ 0x342
 8007fc8:	4904      	ldr	r1, [pc, #16]	@ (8007fdc <pbuf_ref+0x3c>)
 8007fca:	4805      	ldr	r0, [pc, #20]	@ (8007fe0 <pbuf_ref+0x40>)
 8007fcc:	f00a fe94 	bl	8012cf8 <iprintf>
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	0801419c 	.word	0x0801419c
 8007fdc:	0801437c 	.word	0x0801437c
 8007fe0:	080141fc 	.word	0x080141fc

08007fe4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <pbuf_cat+0x16>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d107      	bne.n	800800a <pbuf_cat+0x26>
 8007ffa:	4b20      	ldr	r3, [pc, #128]	@ (800807c <pbuf_cat+0x98>)
 8007ffc:	f240 3259 	movw	r2, #857	@ 0x359
 8008000:	491f      	ldr	r1, [pc, #124]	@ (8008080 <pbuf_cat+0x9c>)
 8008002:	4820      	ldr	r0, [pc, #128]	@ (8008084 <pbuf_cat+0xa0>)
 8008004:	f00a fe78 	bl	8012cf8 <iprintf>
 8008008:	e034      	b.n	8008074 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	e00a      	b.n	8008026 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	891a      	ldrh	r2, [r3, #8]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	891b      	ldrh	r3, [r3, #8]
 8008018:	4413      	add	r3, r2
 800801a:	b29a      	uxth	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1f0      	bne.n	8008010 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	891a      	ldrh	r2, [r3, #8]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	895b      	ldrh	r3, [r3, #10]
 8008036:	429a      	cmp	r2, r3
 8008038:	d006      	beq.n	8008048 <pbuf_cat+0x64>
 800803a:	4b10      	ldr	r3, [pc, #64]	@ (800807c <pbuf_cat+0x98>)
 800803c:	f240 3262 	movw	r2, #866	@ 0x362
 8008040:	4911      	ldr	r1, [pc, #68]	@ (8008088 <pbuf_cat+0xa4>)
 8008042:	4810      	ldr	r0, [pc, #64]	@ (8008084 <pbuf_cat+0xa0>)
 8008044:	f00a fe58 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d006      	beq.n	800805e <pbuf_cat+0x7a>
 8008050:	4b0a      	ldr	r3, [pc, #40]	@ (800807c <pbuf_cat+0x98>)
 8008052:	f240 3263 	movw	r2, #867	@ 0x363
 8008056:	490d      	ldr	r1, [pc, #52]	@ (800808c <pbuf_cat+0xa8>)
 8008058:	480a      	ldr	r0, [pc, #40]	@ (8008084 <pbuf_cat+0xa0>)
 800805a:	f00a fe4d 	bl	8012cf8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	891a      	ldrh	r2, [r3, #8]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	891b      	ldrh	r3, [r3, #8]
 8008066:	4413      	add	r3, r2
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	0801419c 	.word	0x0801419c
 8008080:	08014390 	.word	0x08014390
 8008084:	080141fc 	.word	0x080141fc
 8008088:	080143c8 	.word	0x080143c8
 800808c:	080143f8 	.word	0x080143f8

08008090 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff ffa1 	bl	8007fe4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80080a2:	6838      	ldr	r0, [r7, #0]
 80080a4:	f7ff ff7c 	bl	8007fa0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <pbuf_copy+0x2a>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <pbuf_copy+0x2a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	891a      	ldrh	r2, [r3, #8]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	891b      	ldrh	r3, [r3, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d209      	bcs.n	80080ee <pbuf_copy+0x3e>
 80080da:	4b57      	ldr	r3, [pc, #348]	@ (8008238 <pbuf_copy+0x188>)
 80080dc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80080e0:	4956      	ldr	r1, [pc, #344]	@ (800823c <pbuf_copy+0x18c>)
 80080e2:	4857      	ldr	r0, [pc, #348]	@ (8008240 <pbuf_copy+0x190>)
 80080e4:	f00a fe08 	bl	8012cf8 <iprintf>
 80080e8:	f06f 030f 	mvn.w	r3, #15
 80080ec:	e09f      	b.n	800822e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	895b      	ldrh	r3, [r3, #10]
 80080f2:	461a      	mov	r2, r3
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	895b      	ldrh	r3, [r3, #10]
 80080fc:	4619      	mov	r1, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1acb      	subs	r3, r1, r3
 8008102:	429a      	cmp	r2, r3
 8008104:	d306      	bcc.n	8008114 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	895b      	ldrh	r3, [r3, #10]
 800810a:	461a      	mov	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e005      	b.n	8008120 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	895b      	ldrh	r3, [r3, #10]
 8008118:	461a      	mov	r2, r3
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	18d0      	adds	r0, r2, r3
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	4413      	add	r3, r2
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4619      	mov	r1, r3
 8008134:	f00a febb 	bl	8012eae <memcpy>
    offset_to += len;
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	895b      	ldrh	r3, [r3, #10]
 800814c:	461a      	mov	r2, r3
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4293      	cmp	r3, r2
 8008152:	d906      	bls.n	8008162 <pbuf_copy+0xb2>
 8008154:	4b38      	ldr	r3, [pc, #224]	@ (8008238 <pbuf_copy+0x188>)
 8008156:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800815a:	493a      	ldr	r1, [pc, #232]	@ (8008244 <pbuf_copy+0x194>)
 800815c:	4838      	ldr	r0, [pc, #224]	@ (8008240 <pbuf_copy+0x190>)
 800815e:	f00a fdcb 	bl	8012cf8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	895b      	ldrh	r3, [r3, #10]
 8008166:	461a      	mov	r2, r3
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4293      	cmp	r3, r2
 800816c:	d906      	bls.n	800817c <pbuf_copy+0xcc>
 800816e:	4b32      	ldr	r3, [pc, #200]	@ (8008238 <pbuf_copy+0x188>)
 8008170:	f240 32da 	movw	r2, #986	@ 0x3da
 8008174:	4934      	ldr	r1, [pc, #208]	@ (8008248 <pbuf_copy+0x198>)
 8008176:	4832      	ldr	r0, [pc, #200]	@ (8008240 <pbuf_copy+0x190>)
 8008178:	f00a fdbe 	bl	8012cf8 <iprintf>
    if (offset_from >= p_from->len) {
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	895b      	ldrh	r3, [r3, #10]
 8008180:	461a      	mov	r2, r3
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4293      	cmp	r3, r2
 8008186:	d304      	bcc.n	8008192 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	895b      	ldrh	r3, [r3, #10]
 8008196:	461a      	mov	r2, r3
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	4293      	cmp	r3, r2
 800819c:	d114      	bne.n	80081c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10c      	bne.n	80081c8 <pbuf_copy+0x118>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <pbuf_copy+0x118>
 80081b4:	4b20      	ldr	r3, [pc, #128]	@ (8008238 <pbuf_copy+0x188>)
 80081b6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80081ba:	4924      	ldr	r1, [pc, #144]	@ (800824c <pbuf_copy+0x19c>)
 80081bc:	4820      	ldr	r0, [pc, #128]	@ (8008240 <pbuf_copy+0x190>)
 80081be:	f00a fd9b 	bl	8012cf8 <iprintf>
 80081c2:	f06f 030f 	mvn.w	r3, #15
 80081c6:	e032      	b.n	800822e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d013      	beq.n	80081f6 <pbuf_copy+0x146>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	895a      	ldrh	r2, [r3, #10]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	891b      	ldrh	r3, [r3, #8]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d10d      	bne.n	80081f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d009      	beq.n	80081f6 <pbuf_copy+0x146>
 80081e2:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <pbuf_copy+0x188>)
 80081e4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80081e8:	4919      	ldr	r1, [pc, #100]	@ (8008250 <pbuf_copy+0x1a0>)
 80081ea:	4815      	ldr	r0, [pc, #84]	@ (8008240 <pbuf_copy+0x190>)
 80081ec:	f00a fd84 	bl	8012cf8 <iprintf>
 80081f0:	f06f 0305 	mvn.w	r3, #5
 80081f4:	e01b      	b.n	800822e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d013      	beq.n	8008224 <pbuf_copy+0x174>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	895a      	ldrh	r2, [r3, #10]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	891b      	ldrh	r3, [r3, #8]
 8008204:	429a      	cmp	r2, r3
 8008206:	d10d      	bne.n	8008224 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d009      	beq.n	8008224 <pbuf_copy+0x174>
 8008210:	4b09      	ldr	r3, [pc, #36]	@ (8008238 <pbuf_copy+0x188>)
 8008212:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008216:	490e      	ldr	r1, [pc, #56]	@ (8008250 <pbuf_copy+0x1a0>)
 8008218:	4809      	ldr	r0, [pc, #36]	@ (8008240 <pbuf_copy+0x190>)
 800821a:	f00a fd6d 	bl	8012cf8 <iprintf>
 800821e:	f06f 0305 	mvn.w	r3, #5
 8008222:	e004      	b.n	800822e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f47f af61 	bne.w	80080ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	0801419c 	.word	0x0801419c
 800823c:	08014444 	.word	0x08014444
 8008240:	080141fc 	.word	0x080141fc
 8008244:	08014474 	.word	0x08014474
 8008248:	0801448c 	.word	0x0801448c
 800824c:	080144a8 	.word	0x080144a8
 8008250:	080144b8 	.word	0x080144b8

08008254 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4611      	mov	r1, r2
 8008260:	461a      	mov	r2, r3
 8008262:	460b      	mov	r3, r1
 8008264:	80fb      	strh	r3, [r7, #6]
 8008266:	4613      	mov	r3, r2
 8008268:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d108      	bne.n	800828a <pbuf_copy_partial+0x36>
 8008278:	4b2b      	ldr	r3, [pc, #172]	@ (8008328 <pbuf_copy_partial+0xd4>)
 800827a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800827e:	492b      	ldr	r1, [pc, #172]	@ (800832c <pbuf_copy_partial+0xd8>)
 8008280:	482b      	ldr	r0, [pc, #172]	@ (8008330 <pbuf_copy_partial+0xdc>)
 8008282:	f00a fd39 	bl	8012cf8 <iprintf>
 8008286:	2300      	movs	r3, #0
 8008288:	e04a      	b.n	8008320 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <pbuf_copy_partial+0x4e>
 8008290:	4b25      	ldr	r3, [pc, #148]	@ (8008328 <pbuf_copy_partial+0xd4>)
 8008292:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008296:	4927      	ldr	r1, [pc, #156]	@ (8008334 <pbuf_copy_partial+0xe0>)
 8008298:	4825      	ldr	r0, [pc, #148]	@ (8008330 <pbuf_copy_partial+0xdc>)
 800829a:	f00a fd2d 	bl	8012cf8 <iprintf>
 800829e:	2300      	movs	r3, #0
 80082a0:	e03e      	b.n	8008320 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e034      	b.n	8008312 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80082a8:	88bb      	ldrh	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <pbuf_copy_partial+0x70>
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	895b      	ldrh	r3, [r3, #10]
 80082b2:	88ba      	ldrh	r2, [r7, #4]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d305      	bcc.n	80082c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	895b      	ldrh	r3, [r3, #10]
 80082bc:	88ba      	ldrh	r2, [r7, #4]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	80bb      	strh	r3, [r7, #4]
 80082c2:	e023      	b.n	800830c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	895a      	ldrh	r2, [r3, #10]
 80082c8:	88bb      	ldrh	r3, [r7, #4]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80082ce:	8b3a      	ldrh	r2, [r7, #24]
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d901      	bls.n	80082da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80082d6:	88fb      	ldrh	r3, [r7, #6]
 80082d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80082da:	8b7b      	ldrh	r3, [r7, #26]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	18d0      	adds	r0, r2, r3
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	88bb      	ldrh	r3, [r7, #4]
 80082e6:	4413      	add	r3, r2
 80082e8:	8b3a      	ldrh	r2, [r7, #24]
 80082ea:	4619      	mov	r1, r3
 80082ec:	f00a fddf 	bl	8012eae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80082f0:	8afa      	ldrh	r2, [r7, #22]
 80082f2:	8b3b      	ldrh	r3, [r7, #24]
 80082f4:	4413      	add	r3, r2
 80082f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80082f8:	8b7a      	ldrh	r2, [r7, #26]
 80082fa:	8b3b      	ldrh	r3, [r7, #24]
 80082fc:	4413      	add	r3, r2
 80082fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	8b3b      	ldrh	r3, [r7, #24]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	88fb      	ldrh	r3, [r7, #6]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <pbuf_copy_partial+0xca>
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1c4      	bne.n	80082a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800831e:	8afb      	ldrh	r3, [r7, #22]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	0801419c 	.word	0x0801419c
 800832c:	080144e4 	.word	0x080144e4
 8008330:	080141fc 	.word	0x080141fc
 8008334:	08014504 	.word	0x08014504

08008338 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	460b      	mov	r3, r1
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8008346:	897b      	ldrh	r3, [r7, #10]
 8008348:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800834e:	e007      	b.n	8008360 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	895b      	ldrh	r3, [r3, #10]
 8008354:	8afa      	ldrh	r2, [r7, #22]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <pbuf_skip_const+0x38>
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	895b      	ldrh	r3, [r3, #10]
 800836a:	8afa      	ldrh	r2, [r7, #22]
 800836c:	429a      	cmp	r2, r3
 800836e:	d2ef      	bcs.n	8008350 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	8afa      	ldrh	r2, [r7, #22]
 800837a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800837c:	693b      	ldr	r3, [r7, #16]
}
 800837e:	4618      	mov	r0, r3
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b086      	sub	sp, #24
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	460b      	mov	r3, r1
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8008398:	897b      	ldrh	r3, [r7, #10]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	4619      	mov	r1, r3
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff ffca 	bl	8008338 <pbuf_skip_const>
 80083a4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80083a6:	697b      	ldr	r3, [r7, #20]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80083be:	88fb      	ldrh	r3, [r7, #6]
 80083c0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d109      	bne.n	80083e0 <pbuf_take+0x30>
 80083cc:	4b3a      	ldr	r3, [pc, #232]	@ (80084b8 <pbuf_take+0x108>)
 80083ce:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 80083d2:	493a      	ldr	r1, [pc, #232]	@ (80084bc <pbuf_take+0x10c>)
 80083d4:	483a      	ldr	r0, [pc, #232]	@ (80084c0 <pbuf_take+0x110>)
 80083d6:	f00a fc8f 	bl	8012cf8 <iprintf>
 80083da:	f06f 030f 	mvn.w	r3, #15
 80083de:	e067      	b.n	80084b0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d109      	bne.n	80083fa <pbuf_take+0x4a>
 80083e6:	4b34      	ldr	r3, [pc, #208]	@ (80084b8 <pbuf_take+0x108>)
 80083e8:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 80083ec:	4935      	ldr	r1, [pc, #212]	@ (80084c4 <pbuf_take+0x114>)
 80083ee:	4834      	ldr	r0, [pc, #208]	@ (80084c0 <pbuf_take+0x110>)
 80083f0:	f00a fc82 	bl	8012cf8 <iprintf>
 80083f4:	f06f 030f 	mvn.w	r3, #15
 80083f8:	e05a      	b.n	80084b0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	891b      	ldrh	r3, [r3, #8]
 80083fe:	88fa      	ldrh	r2, [r7, #6]
 8008400:	429a      	cmp	r2, r3
 8008402:	d909      	bls.n	8008418 <pbuf_take+0x68>
 8008404:	4b2c      	ldr	r3, [pc, #176]	@ (80084b8 <pbuf_take+0x108>)
 8008406:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800840a:	492f      	ldr	r1, [pc, #188]	@ (80084c8 <pbuf_take+0x118>)
 800840c:	482c      	ldr	r0, [pc, #176]	@ (80084c0 <pbuf_take+0x110>)
 800840e:	f00a fc73 	bl	8012cf8 <iprintf>
 8008412:	f04f 33ff 	mov.w	r3, #4294967295
 8008416:	e04b      	b.n	80084b0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <pbuf_take+0x7e>
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d004      	beq.n	800842e <pbuf_take+0x7e>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	891b      	ldrh	r3, [r3, #8]
 8008428:	88fa      	ldrh	r2, [r7, #6]
 800842a:	429a      	cmp	r2, r3
 800842c:	d902      	bls.n	8008434 <pbuf_take+0x84>
    return ERR_ARG;
 800842e:	f06f 030f 	mvn.w	r3, #15
 8008432:	e03d      	b.n	80084b0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e028      	b.n	800848c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d106      	bne.n	800844e <pbuf_take+0x9e>
 8008440:	4b1d      	ldr	r3, [pc, #116]	@ (80084b8 <pbuf_take+0x108>)
 8008442:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8008446:	4921      	ldr	r1, [pc, #132]	@ (80084cc <pbuf_take+0x11c>)
 8008448:	481d      	ldr	r0, [pc, #116]	@ (80084c0 <pbuf_take+0x110>)
 800844a:	f00a fc55 	bl	8012cf8 <iprintf>
    buf_copy_len = total_copy_len;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	895b      	ldrh	r3, [r3, #10]
 8008456:	461a      	mov	r2, r3
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	4293      	cmp	r3, r2
 800845c:	d902      	bls.n	8008464 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	895b      	ldrh	r3, [r3, #10]
 8008462:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	6858      	ldr	r0, [r3, #4]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	4413      	add	r3, r2
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	4619      	mov	r1, r3
 8008472:	f00a fd1c 	bl	8012eae <memcpy>
    total_copy_len -= buf_copy_len;
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	4413      	add	r3, r2
 8008484:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	61fb      	str	r3, [r7, #28]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1d3      	bne.n	800843a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <pbuf_take+0xf0>
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	429a      	cmp	r2, r3
 800849e:	d006      	beq.n	80084ae <pbuf_take+0xfe>
 80084a0:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <pbuf_take+0x108>)
 80084a2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80084a6:	490a      	ldr	r1, [pc, #40]	@ (80084d0 <pbuf_take+0x120>)
 80084a8:	4805      	ldr	r0, [pc, #20]	@ (80084c0 <pbuf_take+0x110>)
 80084aa:	f00a fc25 	bl	8012cf8 <iprintf>
  return ERR_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3720      	adds	r7, #32
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	0801419c 	.word	0x0801419c
 80084bc:	08014574 	.word	0x08014574
 80084c0:	080141fc 	.word	0x080141fc
 80084c4:	0801458c 	.word	0x0801458c
 80084c8:	080145a8 	.word	0x080145a8
 80084cc:	080145c8 	.word	0x080145c8
 80084d0:	080145e0 	.word	0x080145e0

080084d4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4611      	mov	r1, r2
 80084e0:	461a      	mov	r2, r3
 80084e2:	460b      	mov	r3, r1
 80084e4:	80fb      	strh	r3, [r7, #6]
 80084e6:	4613      	mov	r3, r2
 80084e8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 80084ea:	f107 0210 	add.w	r2, r7, #16
 80084ee:	88bb      	ldrh	r3, [r7, #4]
 80084f0:	4619      	mov	r1, r3
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff ff49 	bl	800838a <pbuf_skip>
 80084f8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d047      	beq.n	8008590 <pbuf_take_at+0xbc>
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	891b      	ldrh	r3, [r3, #8]
 8008504:	461a      	mov	r2, r3
 8008506:	8a3b      	ldrh	r3, [r7, #16]
 8008508:	4619      	mov	r1, r3
 800850a:	88fb      	ldrh	r3, [r7, #6]
 800850c:	440b      	add	r3, r1
 800850e:	429a      	cmp	r2, r3
 8008510:	db3e      	blt.n	8008590 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	895a      	ldrh	r2, [r3, #10]
 800851e:	8a3b      	ldrh	r3, [r7, #16]
 8008520:	429a      	cmp	r2, r3
 8008522:	d806      	bhi.n	8008532 <pbuf_take_at+0x5e>
 8008524:	4b1d      	ldr	r3, [pc, #116]	@ (800859c <pbuf_take_at+0xc8>)
 8008526:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800852a:	491d      	ldr	r1, [pc, #116]	@ (80085a0 <pbuf_take_at+0xcc>)
 800852c:	481d      	ldr	r0, [pc, #116]	@ (80085a4 <pbuf_take_at+0xd0>)
 800852e:	f00a fbe3 	bl	8012cf8 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	895b      	ldrh	r3, [r3, #10]
 8008536:	461a      	mov	r2, r3
 8008538:	8a3b      	ldrh	r3, [r7, #16]
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	429a      	cmp	r2, r3
 8008540:	da05      	bge.n	800854e <pbuf_take_at+0x7a>
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	895a      	ldrh	r2, [r3, #10]
 8008546:	8a3b      	ldrh	r3, [r7, #16]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	b29b      	uxth	r3, r3
 800854c:	e000      	b.n	8008550 <pbuf_take_at+0x7c>
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	8a3a      	ldrh	r2, [r7, #16]
 8008558:	4413      	add	r3, r2
 800855a:	8a7a      	ldrh	r2, [r7, #18]
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	4618      	mov	r0, r3
 8008560:	f00a fca5 	bl	8012eae <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8008564:	8b7a      	ldrh	r2, [r7, #26]
 8008566:	8a7b      	ldrh	r3, [r7, #18]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800856c:	8a7b      	ldrh	r3, [r7, #18]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4413      	add	r3, r2
 8008572:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8008574:	8b7b      	ldrh	r3, [r7, #26]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d008      	beq.n	800858c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	8b7a      	ldrh	r2, [r7, #26]
 8008580:	6979      	ldr	r1, [r7, #20]
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff ff14 	bl	80083b0 <pbuf_take>
 8008588:	4603      	mov	r3, r0
 800858a:	e003      	b.n	8008594 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	e001      	b.n	8008594 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8008590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008594:	4618      	mov	r0, r3
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	0801419c 	.word	0x0801419c
 80085a0:	080145f8 	.word	0x080145f8
 80085a4:	080141fc 	.word	0x080141fc

080085a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	603a      	str	r2, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
 80085b4:	460b      	mov	r3, r1
 80085b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	8919      	ldrh	r1, [r3, #8]
 80085bc:	88ba      	ldrh	r2, [r7, #4]
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff f969 	bl	8007898 <pbuf_alloc>
 80085c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <pbuf_clone+0x2a>
    return NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e011      	b.n	80085f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fd6b 	bl	80080b0 <pbuf_copy>
 80085da:	4603      	mov	r3, r0
 80085dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80085de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d006      	beq.n	80085f4 <pbuf_clone+0x4c>
 80085e6:	4b06      	ldr	r3, [pc, #24]	@ (8008600 <pbuf_clone+0x58>)
 80085e8:	f240 5224 	movw	r2, #1316	@ 0x524
 80085ec:	4905      	ldr	r1, [pc, #20]	@ (8008604 <pbuf_clone+0x5c>)
 80085ee:	4806      	ldr	r0, [pc, #24]	@ (8008608 <pbuf_clone+0x60>)
 80085f0:	f00a fb82 	bl	8012cf8 <iprintf>
  return q;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	0801419c 	.word	0x0801419c
 8008604:	08014610 	.word	0x08014610
 8008608:	080141fc 	.word	0x080141fc

0800860c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	807b      	strh	r3, [r7, #2]
 8008618:	4613      	mov	r3, r2
 800861a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800861c:	f107 020a 	add.w	r2, r7, #10
 8008620:	887b      	ldrh	r3, [r7, #2]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff feb0 	bl	800838a <pbuf_skip>
 800862a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <pbuf_put_at+0x3c>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	895a      	ldrh	r2, [r3, #10]
 8008636:	897b      	ldrh	r3, [r7, #10]
 8008638:	429a      	cmp	r2, r3
 800863a:	d905      	bls.n	8008648 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	897a      	ldrh	r2, [r7, #10]
 8008642:	4413      	add	r3, r2
 8008644:	787a      	ldrb	r2, [r7, #1]
 8008646:	701a      	strb	r2, [r3, #0]
  }
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008654:	f00a fa50 	bl	8012af8 <rand>
 8008658:	4603      	mov	r3, r0
 800865a:	b29b      	uxth	r3, r3
 800865c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008660:	b29b      	uxth	r3, r3
 8008662:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008666:	b29a      	uxth	r2, r3
 8008668:	4b01      	ldr	r3, [pc, #4]	@ (8008670 <tcp_init+0x20>)
 800866a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800866c:	bf00      	nop
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000020 	.word	0x20000020

08008674 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	7d1b      	ldrb	r3, [r3, #20]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d105      	bne.n	8008690 <tcp_free+0x1c>
 8008684:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <tcp_free+0x2c>)
 8008686:	22d4      	movs	r2, #212	@ 0xd4
 8008688:	4906      	ldr	r1, [pc, #24]	@ (80086a4 <tcp_free+0x30>)
 800868a:	4807      	ldr	r0, [pc, #28]	@ (80086a8 <tcp_free+0x34>)
 800868c:	f00a fb34 	bl	8012cf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	2001      	movs	r0, #1
 8008694:	f7fe fd48 	bl	8007128 <memp_free>
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	0801469c 	.word	0x0801469c
 80086a4:	080146cc 	.word	0x080146cc
 80086a8:	080146e0 	.word	0x080146e0

080086ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	7d1b      	ldrb	r3, [r3, #20]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d105      	bne.n	80086c8 <tcp_free_listen+0x1c>
 80086bc:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <tcp_free_listen+0x2c>)
 80086be:	22df      	movs	r2, #223	@ 0xdf
 80086c0:	4906      	ldr	r1, [pc, #24]	@ (80086dc <tcp_free_listen+0x30>)
 80086c2:	4807      	ldr	r0, [pc, #28]	@ (80086e0 <tcp_free_listen+0x34>)
 80086c4:	f00a fb18 	bl	8012cf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	2002      	movs	r0, #2
 80086cc:	f7fe fd2c 	bl	8007128 <memp_free>
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	0801469c 	.word	0x0801469c
 80086dc:	08014708 	.word	0x08014708
 80086e0:	080146e0 	.word	0x080146e0

080086e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80086e8:	f000 fea4 	bl	8009434 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80086ec:	4b07      	ldr	r3, [pc, #28]	@ (800870c <tcp_tmr+0x28>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	4b05      	ldr	r3, [pc, #20]	@ (800870c <tcp_tmr+0x28>)
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	4b04      	ldr	r3, [pc, #16]	@ (800870c <tcp_tmr+0x28>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008704:	f000 fb54 	bl	8008db0 <tcp_slowtmr>
  }
}
 8008708:	bf00      	nop
 800870a:	bd80      	pop	{r7, pc}
 800870c:	200088c5 	.word	0x200088c5

08008710 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d105      	bne.n	800872c <tcp_remove_listener+0x1c>
 8008720:	4b0d      	ldr	r3, [pc, #52]	@ (8008758 <tcp_remove_listener+0x48>)
 8008722:	22ff      	movs	r2, #255	@ 0xff
 8008724:	490d      	ldr	r1, [pc, #52]	@ (800875c <tcp_remove_listener+0x4c>)
 8008726:	480e      	ldr	r0, [pc, #56]	@ (8008760 <tcp_remove_listener+0x50>)
 8008728:	f00a fae6 	bl	8012cf8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e00a      	b.n	8008748 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d102      	bne.n	8008742 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1f1      	bne.n	8008732 <tcp_remove_listener+0x22>
    }
  }
}
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	0801469c 	.word	0x0801469c
 800875c:	08014724 	.word	0x08014724
 8008760:	080146e0 	.word	0x080146e0

08008764 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d106      	bne.n	8008780 <tcp_listen_closed+0x1c>
 8008772:	4b14      	ldr	r3, [pc, #80]	@ (80087c4 <tcp_listen_closed+0x60>)
 8008774:	f240 1211 	movw	r2, #273	@ 0x111
 8008778:	4913      	ldr	r1, [pc, #76]	@ (80087c8 <tcp_listen_closed+0x64>)
 800877a:	4814      	ldr	r0, [pc, #80]	@ (80087cc <tcp_listen_closed+0x68>)
 800877c:	f00a fabc 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7d1b      	ldrb	r3, [r3, #20]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d006      	beq.n	8008796 <tcp_listen_closed+0x32>
 8008788:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <tcp_listen_closed+0x60>)
 800878a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800878e:	4910      	ldr	r1, [pc, #64]	@ (80087d0 <tcp_listen_closed+0x6c>)
 8008790:	480e      	ldr	r0, [pc, #56]	@ (80087cc <tcp_listen_closed+0x68>)
 8008792:	f00a fab1 	bl	8012cf8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008796:	2301      	movs	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	e00b      	b.n	80087b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800879c:	4a0d      	ldr	r2, [pc, #52]	@ (80087d4 <tcp_listen_closed+0x70>)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff ffb1 	bl	8008710 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d9f0      	bls.n	800879c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	0801469c 	.word	0x0801469c
 80087c8:	0801474c 	.word	0x0801474c
 80087cc:	080146e0 	.word	0x080146e0
 80087d0:	08014758 	.word	0x08014758
 80087d4:	08016a2c 	.word	0x08016a2c

080087d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80087d8:	b5b0      	push	{r4, r5, r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af04      	add	r7, sp, #16
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <tcp_close_shutdown+0x20>
 80087ea:	4b63      	ldr	r3, [pc, #396]	@ (8008978 <tcp_close_shutdown+0x1a0>)
 80087ec:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80087f0:	4962      	ldr	r1, [pc, #392]	@ (800897c <tcp_close_shutdown+0x1a4>)
 80087f2:	4863      	ldr	r0, [pc, #396]	@ (8008980 <tcp_close_shutdown+0x1a8>)
 80087f4:	f00a fa80 	bl	8012cf8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d066      	beq.n	80088cc <tcp_close_shutdown+0xf4>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7d1b      	ldrb	r3, [r3, #20]
 8008802:	2b04      	cmp	r3, #4
 8008804:	d003      	beq.n	800880e <tcp_close_shutdown+0x36>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7d1b      	ldrb	r3, [r3, #20]
 800880a:	2b07      	cmp	r3, #7
 800880c:	d15e      	bne.n	80088cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <tcp_close_shutdown+0x48>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800881a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800881e:	d055      	beq.n	80088cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	8b5b      	ldrh	r3, [r3, #26]
 8008824:	f003 0310 	and.w	r3, r3, #16
 8008828:	2b00      	cmp	r3, #0
 800882a:	d106      	bne.n	800883a <tcp_close_shutdown+0x62>
 800882c:	4b52      	ldr	r3, [pc, #328]	@ (8008978 <tcp_close_shutdown+0x1a0>)
 800882e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008832:	4954      	ldr	r1, [pc, #336]	@ (8008984 <tcp_close_shutdown+0x1ac>)
 8008834:	4852      	ldr	r0, [pc, #328]	@ (8008980 <tcp_close_shutdown+0x1a8>)
 8008836:	f00a fa5f 	bl	8012cf8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008842:	687d      	ldr	r5, [r7, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	8ad2      	ldrh	r2, [r2, #22]
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	8b09      	ldrh	r1, [r1, #24]
 8008850:	9102      	str	r1, [sp, #8]
 8008852:	9201      	str	r2, [sp, #4]
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	462b      	mov	r3, r5
 8008858:	4622      	mov	r2, r4
 800885a:	4601      	mov	r1, r0
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f004 feaf 	bl	800d5c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 f8c8 	bl	80099f8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008868:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <tcp_close_shutdown+0x1b0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d105      	bne.n	800887e <tcp_close_shutdown+0xa6>
 8008872:	4b45      	ldr	r3, [pc, #276]	@ (8008988 <tcp_close_shutdown+0x1b0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	4a43      	ldr	r2, [pc, #268]	@ (8008988 <tcp_close_shutdown+0x1b0>)
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	e013      	b.n	80088a6 <tcp_close_shutdown+0xce>
 800887e:	4b42      	ldr	r3, [pc, #264]	@ (8008988 <tcp_close_shutdown+0x1b0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e00c      	b.n	80088a0 <tcp_close_shutdown+0xc8>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	429a      	cmp	r2, r3
 800888e:	d104      	bne.n	800889a <tcp_close_shutdown+0xc2>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	60da      	str	r2, [r3, #12]
 8008898:	e005      	b.n	80088a6 <tcp_close_shutdown+0xce>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1ef      	bne.n	8008886 <tcp_close_shutdown+0xae>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	60da      	str	r2, [r3, #12]
 80088ac:	4b37      	ldr	r3, [pc, #220]	@ (800898c <tcp_close_shutdown+0x1b4>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80088b2:	4b37      	ldr	r3, [pc, #220]	@ (8008990 <tcp_close_shutdown+0x1b8>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d102      	bne.n	80088c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80088bc:	f003 fd5c 	bl	800c378 <tcp_trigger_input_pcb_close>
 80088c0:	e002      	b.n	80088c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff fed6 	bl	8008674 <tcp_free>
      }
      return ERR_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	e050      	b.n	800896e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7d1b      	ldrb	r3, [r3, #20]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d03b      	beq.n	800894c <tcp_close_shutdown+0x174>
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	dc44      	bgt.n	8008962 <tcp_close_shutdown+0x18a>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <tcp_close_shutdown+0x10a>
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d02a      	beq.n	8008936 <tcp_close_shutdown+0x15e>
 80088e0:	e03f      	b.n	8008962 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	8adb      	ldrh	r3, [r3, #22]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d021      	beq.n	800892e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80088ea:	4b2a      	ldr	r3, [pc, #168]	@ (8008994 <tcp_close_shutdown+0x1bc>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d105      	bne.n	8008900 <tcp_close_shutdown+0x128>
 80088f4:	4b27      	ldr	r3, [pc, #156]	@ (8008994 <tcp_close_shutdown+0x1bc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	4a26      	ldr	r2, [pc, #152]	@ (8008994 <tcp_close_shutdown+0x1bc>)
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e013      	b.n	8008928 <tcp_close_shutdown+0x150>
 8008900:	4b24      	ldr	r3, [pc, #144]	@ (8008994 <tcp_close_shutdown+0x1bc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60bb      	str	r3, [r7, #8]
 8008906:	e00c      	b.n	8008922 <tcp_close_shutdown+0x14a>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	429a      	cmp	r2, r3
 8008910:	d104      	bne.n	800891c <tcp_close_shutdown+0x144>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	60da      	str	r2, [r3, #12]
 800891a:	e005      	b.n	8008928 <tcp_close_shutdown+0x150>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	60bb      	str	r3, [r7, #8]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1ef      	bne.n	8008908 <tcp_close_shutdown+0x130>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff fea0 	bl	8008674 <tcp_free>
      break;
 8008934:	e01a      	b.n	800896c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff ff14 	bl	8008764 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4816      	ldr	r0, [pc, #88]	@ (8008998 <tcp_close_shutdown+0x1c0>)
 8008940:	f001 f8aa 	bl	8009a98 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff feb1 	bl	80086ac <tcp_free_listen>
      break;
 800894a:	e00f      	b.n	800896c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	480e      	ldr	r0, [pc, #56]	@ (8008988 <tcp_close_shutdown+0x1b0>)
 8008950:	f001 f8a2 	bl	8009a98 <tcp_pcb_remove>
 8008954:	4b0d      	ldr	r3, [pc, #52]	@ (800898c <tcp_close_shutdown+0x1b4>)
 8008956:	2201      	movs	r2, #1
 8008958:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fe8a 	bl	8008674 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008960:	e004      	b.n	800896c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f81a 	bl	800899c <tcp_close_shutdown_fin>
 8008968:	4603      	mov	r3, r0
 800896a:	e000      	b.n	800896e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bdb0      	pop	{r4, r5, r7, pc}
 8008976:	bf00      	nop
 8008978:	0801469c 	.word	0x0801469c
 800897c:	08014770 	.word	0x08014770
 8008980:	080146e0 	.word	0x080146e0
 8008984:	08014790 	.word	0x08014790
 8008988:	200088bc 	.word	0x200088bc
 800898c:	200088c4 	.word	0x200088c4
 8008990:	200088fc 	.word	0x200088fc
 8008994:	200088b4 	.word	0x200088b4
 8008998:	200088b8 	.word	0x200088b8

0800899c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d106      	bne.n	80089b8 <tcp_close_shutdown_fin+0x1c>
 80089aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008a64 <tcp_close_shutdown_fin+0xc8>)
 80089ac:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80089b0:	492d      	ldr	r1, [pc, #180]	@ (8008a68 <tcp_close_shutdown_fin+0xcc>)
 80089b2:	482e      	ldr	r0, [pc, #184]	@ (8008a6c <tcp_close_shutdown_fin+0xd0>)
 80089b4:	f00a f9a0 	bl	8012cf8 <iprintf>

  switch (pcb->state) {
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	7d1b      	ldrb	r3, [r3, #20]
 80089bc:	2b07      	cmp	r3, #7
 80089be:	d020      	beq.n	8008a02 <tcp_close_shutdown_fin+0x66>
 80089c0:	2b07      	cmp	r3, #7
 80089c2:	dc2b      	bgt.n	8008a1c <tcp_close_shutdown_fin+0x80>
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d002      	beq.n	80089ce <tcp_close_shutdown_fin+0x32>
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d00d      	beq.n	80089e8 <tcp_close_shutdown_fin+0x4c>
 80089cc:	e026      	b.n	8008a1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f003 fee2 	bl	800c798 <tcp_send_fin>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80089d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d11f      	bne.n	8008a20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2205      	movs	r2, #5
 80089e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80089e6:	e01b      	b.n	8008a20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f003 fed5 	bl	800c798 <tcp_send_fin>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80089f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d114      	bne.n	8008a24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2205      	movs	r2, #5
 80089fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008a00:	e010      	b.n	8008a24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f003 fec8 	bl	800c798 <tcp_send_fin>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d109      	bne.n	8008a28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2209      	movs	r2, #9
 8008a18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008a1a:	e005      	b.n	8008a28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e01c      	b.n	8008a5a <tcp_close_shutdown_fin+0xbe>
      break;
 8008a20:	bf00      	nop
 8008a22:	e002      	b.n	8008a2a <tcp_close_shutdown_fin+0x8e>
      break;
 8008a24:	bf00      	nop
 8008a26:	e000      	b.n	8008a2a <tcp_close_shutdown_fin+0x8e>
      break;
 8008a28:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d103      	bne.n	8008a3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f003 ffee 	bl	800ca14 <tcp_output>
 8008a38:	e00d      	b.n	8008a56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a42:	d108      	bne.n	8008a56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8b5b      	ldrh	r3, [r3, #26]
 8008a48:	f043 0308 	orr.w	r3, r3, #8
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e001      	b.n	8008a5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	0801469c 	.word	0x0801469c
 8008a68:	0801474c 	.word	0x0801474c
 8008a6c:	080146e0 	.word	0x080146e0

08008a70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d109      	bne.n	8008a92 <tcp_close+0x22>
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008abc <tcp_close+0x4c>)
 8008a80:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008a84:	490e      	ldr	r1, [pc, #56]	@ (8008ac0 <tcp_close+0x50>)
 8008a86:	480f      	ldr	r0, [pc, #60]	@ (8008ac4 <tcp_close+0x54>)
 8008a88:	f00a f936 	bl	8012cf8 <iprintf>
 8008a8c:	f06f 030f 	mvn.w	r3, #15
 8008a90:	e00f      	b.n	8008ab2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7d1b      	ldrb	r3, [r3, #20]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d006      	beq.n	8008aa8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	8b5b      	ldrh	r3, [r3, #26]
 8008a9e:	f043 0310 	orr.w	r3, r3, #16
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fe94 	bl	80087d8 <tcp_close_shutdown>
 8008ab0:	4603      	mov	r3, r0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	0801469c 	.word	0x0801469c
 8008ac0:	080147ac 	.word	0x080147ac
 8008ac4:	080146e0 	.word	0x080146e0

08008ac8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08e      	sub	sp, #56	@ 0x38
 8008acc:	af04      	add	r7, sp, #16
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d107      	bne.n	8008ae8 <tcp_abandon+0x20>
 8008ad8:	4b52      	ldr	r3, [pc, #328]	@ (8008c24 <tcp_abandon+0x15c>)
 8008ada:	f240 223d 	movw	r2, #573	@ 0x23d
 8008ade:	4952      	ldr	r1, [pc, #328]	@ (8008c28 <tcp_abandon+0x160>)
 8008ae0:	4852      	ldr	r0, [pc, #328]	@ (8008c2c <tcp_abandon+0x164>)
 8008ae2:	f00a f909 	bl	8012cf8 <iprintf>
 8008ae6:	e099      	b.n	8008c1c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7d1b      	ldrb	r3, [r3, #20]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d106      	bne.n	8008afe <tcp_abandon+0x36>
 8008af0:	4b4c      	ldr	r3, [pc, #304]	@ (8008c24 <tcp_abandon+0x15c>)
 8008af2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008af6:	494e      	ldr	r1, [pc, #312]	@ (8008c30 <tcp_abandon+0x168>)
 8008af8:	484c      	ldr	r0, [pc, #304]	@ (8008c2c <tcp_abandon+0x164>)
 8008afa:	f00a f8fd 	bl	8012cf8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7d1b      	ldrb	r3, [r3, #20]
 8008b02:	2b0a      	cmp	r3, #10
 8008b04:	d107      	bne.n	8008b16 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	484a      	ldr	r0, [pc, #296]	@ (8008c34 <tcp_abandon+0x16c>)
 8008b0a:	f000 ffc5 	bl	8009a98 <tcp_pcb_remove>
    tcp_free(pcb);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff fdb0 	bl	8008674 <tcp_free>
 8008b14:	e082      	b.n	8008c1c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b22:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b28:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b30:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7d1b      	ldrb	r3, [r3, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d126      	bne.n	8008b8e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8adb      	ldrh	r3, [r3, #22]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d02e      	beq.n	8008ba6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b48:	4b3b      	ldr	r3, [pc, #236]	@ (8008c38 <tcp_abandon+0x170>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d105      	bne.n	8008b5e <tcp_abandon+0x96>
 8008b52:	4b39      	ldr	r3, [pc, #228]	@ (8008c38 <tcp_abandon+0x170>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	4a37      	ldr	r2, [pc, #220]	@ (8008c38 <tcp_abandon+0x170>)
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	e013      	b.n	8008b86 <tcp_abandon+0xbe>
 8008b5e:	4b36      	ldr	r3, [pc, #216]	@ (8008c38 <tcp_abandon+0x170>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	e00c      	b.n	8008b80 <tcp_abandon+0xb8>
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d104      	bne.n	8008b7a <tcp_abandon+0xb2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	e005      	b.n	8008b86 <tcp_abandon+0xbe>
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1ef      	bne.n	8008b66 <tcp_abandon+0x9e>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	60da      	str	r2, [r3, #12]
 8008b8c:	e00b      	b.n	8008ba6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8adb      	ldrh	r3, [r3, #22]
 8008b96:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	4828      	ldr	r0, [pc, #160]	@ (8008c3c <tcp_abandon+0x174>)
 8008b9c:	f000 ff7c 	bl	8009a98 <tcp_pcb_remove>
 8008ba0:	4b27      	ldr	r3, [pc, #156]	@ (8008c40 <tcp_abandon+0x178>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d004      	beq.n	8008bb8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fd1e 	bl	80095f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fd15 	bl	80095f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fd0c 	bl	80095f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00e      	beq.n	8008c00 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	8b12      	ldrh	r2, [r2, #24]
 8008bec:	9202      	str	r2, [sp, #8]
 8008bee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008bf0:	9201      	str	r2, [sp, #4]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	69b9      	ldr	r1, [r7, #24]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f004 fce0 	bl	800d5c0 <tcp_rst>
    }
    last_state = pcb->state;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7d1b      	ldrb	r3, [r3, #20]
 8008c04:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fd34 	bl	8008674 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d004      	beq.n	8008c1c <tcp_abandon+0x154>
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f06f 010c 	mvn.w	r1, #12
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	4798      	blx	r3
  }
}
 8008c1c:	3728      	adds	r7, #40	@ 0x28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	0801469c 	.word	0x0801469c
 8008c28:	080147e0 	.word	0x080147e0
 8008c2c:	080146e0 	.word	0x080146e0
 8008c30:	080147fc 	.word	0x080147fc
 8008c34:	200088c0 	.word	0x200088c0
 8008c38:	200088b4 	.word	0x200088b4
 8008c3c:	200088bc 	.word	0x200088bc
 8008c40:	200088c4 	.word	0x200088c4

08008c44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff ff3a 	bl	8008ac8 <tcp_abandon>
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <tcp_update_rcv_ann_wnd+0x1c>
 8008c6a:	4b25      	ldr	r3, [pc, #148]	@ (8008d00 <tcp_update_rcv_ann_wnd+0xa4>)
 8008c6c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008c70:	4924      	ldr	r1, [pc, #144]	@ (8008d04 <tcp_update_rcv_ann_wnd+0xa8>)
 8008c72:	4825      	ldr	r0, [pc, #148]	@ (8008d08 <tcp_update_rcv_ann_wnd+0xac>)
 8008c74:	f00a f840 	bl	8012cf8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008c80:	4413      	add	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008c8c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008c90:	bf28      	it	cs
 8008c92:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8008c96:	b292      	uxth	r2, r2
 8008c98:	4413      	add	r3, r2
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	db08      	blt.n	8008cb4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	e020      	b.n	8008cf6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	dd03      	ble.n	8008cca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008cc8:	e014      	b.n	8008cf4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cdc:	d306      	bcc.n	8008cec <tcp_update_rcv_ann_wnd+0x90>
 8008cde:	4b08      	ldr	r3, [pc, #32]	@ (8008d00 <tcp_update_rcv_ann_wnd+0xa4>)
 8008ce0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008ce4:	4909      	ldr	r1, [pc, #36]	@ (8008d0c <tcp_update_rcv_ann_wnd+0xb0>)
 8008ce6:	4808      	ldr	r0, [pc, #32]	@ (8008d08 <tcp_update_rcv_ann_wnd+0xac>)
 8008ce8:	f00a f806 	bl	8012cf8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008cf4:	2300      	movs	r3, #0
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	0801469c 	.word	0x0801469c
 8008d04:	080148f8 	.word	0x080148f8
 8008d08:	080146e0 	.word	0x080146e0
 8008d0c:	0801491c 	.word	0x0801491c

08008d10 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <tcp_recved+0x22>
 8008d22:	4b1f      	ldr	r3, [pc, #124]	@ (8008da0 <tcp_recved+0x90>)
 8008d24:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8008d28:	491e      	ldr	r1, [pc, #120]	@ (8008da4 <tcp_recved+0x94>)
 8008d2a:	481f      	ldr	r0, [pc, #124]	@ (8008da8 <tcp_recved+0x98>)
 8008d2c:	f009 ffe4 	bl	8012cf8 <iprintf>
 8008d30:	e032      	b.n	8008d98 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7d1b      	ldrb	r3, [r3, #20]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d106      	bne.n	8008d48 <tcp_recved+0x38>
 8008d3a:	4b19      	ldr	r3, [pc, #100]	@ (8008da0 <tcp_recved+0x90>)
 8008d3c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008d40:	491a      	ldr	r1, [pc, #104]	@ (8008dac <tcp_recved+0x9c>)
 8008d42:	4819      	ldr	r0, [pc, #100]	@ (8008da8 <tcp_recved+0x98>)
 8008d44:	f009 ffd8 	bl	8012cf8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008d4c:	887b      	ldrh	r3, [r7, #2]
 8008d4e:	4413      	add	r3, r2
 8008d50:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008d52:	89fb      	ldrh	r3, [r7, #14]
 8008d54:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008d58:	d804      	bhi.n	8008d64 <tcp_recved+0x54>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d5e:	89fa      	ldrh	r2, [r7, #14]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d204      	bcs.n	8008d6e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008d6c:	e002      	b.n	8008d74 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	89fa      	ldrh	r2, [r7, #14]
 8008d72:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff ff71 	bl	8008c5c <tcp_update_rcv_ann_wnd>
 8008d7a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008d82:	d309      	bcc.n	8008d98 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	8b5b      	ldrh	r3, [r3, #26]
 8008d88:	f043 0302 	orr.w	r3, r3, #2
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f003 fe3e 	bl	800ca14 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	0801469c 	.word	0x0801469c
 8008da4:	08014938 	.word	0x08014938
 8008da8:	080146e0 	.word	0x080146e0
 8008dac:	08014950 	.word	0x08014950

08008db0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008db0:	b5b0      	push	{r4, r5, r7, lr}
 8008db2:	b090      	sub	sp, #64	@ 0x40
 8008db4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8008dbc:	4b95      	ldr	r3, [pc, #596]	@ (8009014 <tcp_slowtmr+0x264>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	4a94      	ldr	r2, [pc, #592]	@ (8009014 <tcp_slowtmr+0x264>)
 8008dc4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008dc6:	4b94      	ldr	r3, [pc, #592]	@ (8009018 <tcp_slowtmr+0x268>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	4b92      	ldr	r3, [pc, #584]	@ (8009018 <tcp_slowtmr+0x268>)
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e000      	b.n	8008dd6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8008dd4:	bf00      	nop
  prev = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8008dda:	4b90      	ldr	r3, [pc, #576]	@ (800901c <tcp_slowtmr+0x26c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008de0:	e29f      	b.n	8009322 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de4:	7d1b      	ldrb	r3, [r3, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <tcp_slowtmr+0x48>
 8008dea:	4b8d      	ldr	r3, [pc, #564]	@ (8009020 <tcp_slowtmr+0x270>)
 8008dec:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008df0:	498c      	ldr	r1, [pc, #560]	@ (8009024 <tcp_slowtmr+0x274>)
 8008df2:	488d      	ldr	r0, [pc, #564]	@ (8009028 <tcp_slowtmr+0x278>)
 8008df4:	f009 ff80 	bl	8012cf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfa:	7d1b      	ldrb	r3, [r3, #20]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d106      	bne.n	8008e0e <tcp_slowtmr+0x5e>
 8008e00:	4b87      	ldr	r3, [pc, #540]	@ (8009020 <tcp_slowtmr+0x270>)
 8008e02:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008e06:	4989      	ldr	r1, [pc, #548]	@ (800902c <tcp_slowtmr+0x27c>)
 8008e08:	4887      	ldr	r0, [pc, #540]	@ (8009028 <tcp_slowtmr+0x278>)
 8008e0a:	f009 ff75 	bl	8012cf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e10:	7d1b      	ldrb	r3, [r3, #20]
 8008e12:	2b0a      	cmp	r3, #10
 8008e14:	d106      	bne.n	8008e24 <tcp_slowtmr+0x74>
 8008e16:	4b82      	ldr	r3, [pc, #520]	@ (8009020 <tcp_slowtmr+0x270>)
 8008e18:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008e1c:	4984      	ldr	r1, [pc, #528]	@ (8009030 <tcp_slowtmr+0x280>)
 8008e1e:	4882      	ldr	r0, [pc, #520]	@ (8009028 <tcp_slowtmr+0x278>)
 8008e20:	f009 ff6a 	bl	8012cf8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	7f9a      	ldrb	r2, [r3, #30]
 8008e28:	4b7b      	ldr	r3, [pc, #492]	@ (8009018 <tcp_slowtmr+0x268>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d105      	bne.n	8008e3c <tcp_slowtmr+0x8c>
      prev = pcb;
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8008e3a:	e272      	b.n	8009322 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8008e3c:	4b76      	ldr	r3, [pc, #472]	@ (8009018 <tcp_slowtmr+0x268>)
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e42:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e52:	7d1b      	ldrb	r3, [r3, #20]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d10a      	bne.n	8008e6e <tcp_slowtmr+0xbe>
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d905      	bls.n	8008e6e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008e62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e66:	3301      	adds	r3, #1
 8008e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008e6c:	e11e      	b.n	80090ac <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e74:	2b0b      	cmp	r3, #11
 8008e76:	d905      	bls.n	8008e84 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008e82:	e113      	b.n	80090ac <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e86:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d075      	beq.n	8008f7a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <tcp_slowtmr+0xf4>
 8008e96:	4b62      	ldr	r3, [pc, #392]	@ (8009020 <tcp_slowtmr+0x270>)
 8008e98:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008e9c:	4965      	ldr	r1, [pc, #404]	@ (8009034 <tcp_slowtmr+0x284>)
 8008e9e:	4862      	ldr	r0, [pc, #392]	@ (8009028 <tcp_slowtmr+0x278>)
 8008ea0:	f009 ff2a 	bl	8012cf8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d106      	bne.n	8008eba <tcp_slowtmr+0x10a>
 8008eac:	4b5c      	ldr	r3, [pc, #368]	@ (8009020 <tcp_slowtmr+0x270>)
 8008eae:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008eb2:	4961      	ldr	r1, [pc, #388]	@ (8009038 <tcp_slowtmr+0x288>)
 8008eb4:	485c      	ldr	r0, [pc, #368]	@ (8009028 <tcp_slowtmr+0x278>)
 8008eb6:	f009 ff1f 	bl	8012cf8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ebc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008ec0:	2b0b      	cmp	r3, #11
 8008ec2:	d905      	bls.n	8008ed0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ece:	e0ed      	b.n	80090ac <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	4a58      	ldr	r2, [pc, #352]	@ (800903c <tcp_slowtmr+0x28c>)
 8008eda:	5cd3      	ldrb	r3, [r2, r3]
 8008edc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ee4:	7c7a      	ldrb	r2, [r7, #17]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d907      	bls.n	8008efa <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8008efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008f00:	7c7a      	ldrb	r2, [r7, #17]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f200 80d2 	bhi.w	80090ac <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8008f08:	2301      	movs	r3, #1
 8008f0a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8008f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d108      	bne.n	8008f28 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008f16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f18:	f004 fc46 	bl	800d7a8 <tcp_zero_window_probe>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d014      	beq.n	8008f4c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8008f22:	2300      	movs	r3, #0
 8008f24:	623b      	str	r3, [r7, #32]
 8008f26:	e011      	b.n	8008f4c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f32:	f003 fae9 	bl	800c508 <tcp_split_unsent_seg>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d107      	bne.n	8008f4c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008f3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f3e:	f003 fd69 	bl	800ca14 <tcp_output>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80ac 	beq.w	80090ac <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008f62:	2b06      	cmp	r3, #6
 8008f64:	f200 80a2 	bhi.w	80090ac <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008f6e:	3301      	adds	r3, #1
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f74:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008f78:	e098      	b.n	80090ac <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	db0f      	blt.n	8008fa4 <tcp_slowtmr+0x1f4>
 8008f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008f8a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d008      	beq.n	8008fa4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	b21a      	sxth	r2, r3
 8008fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	db7b      	blt.n	80090ac <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008fb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008fb6:	f004 f833 	bl	800d020 <tcp_rexmit_rto_prepare>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <tcp_slowtmr+0x220>
 8008fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d171      	bne.n	80090ac <tcp_slowtmr+0x2fc>
 8008fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d06d      	beq.n	80090ac <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd2:	7d1b      	ldrb	r3, [r3, #20]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d03a      	beq.n	800904e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fde:	2b0c      	cmp	r3, #12
 8008fe0:	bf28      	it	cs
 8008fe2:	230c      	movcs	r3, #12
 8008fe4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008fec:	10db      	asrs	r3, r3, #3
 8008fee:	b21b      	sxth	r3, r3
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008ff8:	4413      	add	r3, r2
 8008ffa:	7efa      	ldrb	r2, [r7, #27]
 8008ffc:	4910      	ldr	r1, [pc, #64]	@ (8009040 <tcp_slowtmr+0x290>)
 8008ffe:	5c8a      	ldrb	r2, [r1, r2]
 8009000:	4093      	lsls	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800900a:	4293      	cmp	r3, r2
 800900c:	dc1a      	bgt.n	8009044 <tcp_slowtmr+0x294>
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	b21a      	sxth	r2, r3
 8009012:	e019      	b.n	8009048 <tcp_slowtmr+0x298>
 8009014:	200088b0 	.word	0x200088b0
 8009018:	200088c6 	.word	0x200088c6
 800901c:	200088bc 	.word	0x200088bc
 8009020:	0801469c 	.word	0x0801469c
 8009024:	080149e0 	.word	0x080149e0
 8009028:	080146e0 	.word	0x080146e0
 800902c:	08014a0c 	.word	0x08014a0c
 8009030:	08014a38 	.word	0x08014a38
 8009034:	08014a68 	.word	0x08014a68
 8009038:	08014a9c 	.word	0x08014a9c
 800903c:	08016a24 	.word	0x08016a24
 8009040:	08016a14 	.word	0x08016a14
 8009044:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800904e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009050:	2200      	movs	r2, #0
 8009052:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009056:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800905a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009060:	4293      	cmp	r3, r2
 8009062:	bf28      	it	cs
 8009064:	4613      	movcs	r3, r2
 8009066:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009068:	8a7b      	ldrh	r3, [r7, #18]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009070:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009076:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800907a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	429a      	cmp	r2, r3
 8009084:	d206      	bcs.n	8009094 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009088:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009090:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800909e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80090a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090a8:	f004 f82a 	bl	800d100 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80090ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ae:	7d1b      	ldrb	r3, [r3, #20]
 80090b0:	2b06      	cmp	r3, #6
 80090b2:	d111      	bne.n	80090d8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80090b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b6:	8b5b      	ldrh	r3, [r3, #26]
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00b      	beq.n	80090d8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090c0:	4b9d      	ldr	r3, [pc, #628]	@ (8009338 <tcp_slowtmr+0x588>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b28      	cmp	r3, #40	@ 0x28
 80090cc:	d904      	bls.n	80090d8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80090ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090d2:	3301      	adds	r3, #1
 80090d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80090d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090da:	7a5b      	ldrb	r3, [r3, #9]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d04c      	beq.n	800917e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80090e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d003      	beq.n	80090f4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80090ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80090f0:	2b07      	cmp	r3, #7
 80090f2:	d144      	bne.n	800917e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090f4:	4b90      	ldr	r3, [pc, #576]	@ (8009338 <tcp_slowtmr+0x588>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80090fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009104:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8009108:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800910c:	498b      	ldr	r1, [pc, #556]	@ (800933c <tcp_slowtmr+0x58c>)
 800910e:	fba1 1303 	umull	r1, r3, r1, r3
 8009112:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009114:	429a      	cmp	r2, r3
 8009116:	d90a      	bls.n	800912e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8009118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800911c:	3301      	adds	r3, #1
 800911e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009122:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009126:	3301      	adds	r3, #1
 8009128:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800912c:	e027      	b.n	800917e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800912e:	4b82      	ldr	r3, [pc, #520]	@ (8009338 <tcp_slowtmr+0x588>)
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800913e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009140:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009144:	4618      	mov	r0, r3
 8009146:	4b7e      	ldr	r3, [pc, #504]	@ (8009340 <tcp_slowtmr+0x590>)
 8009148:	fb00 f303 	mul.w	r3, r0, r3
 800914c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800914e:	497b      	ldr	r1, [pc, #492]	@ (800933c <tcp_slowtmr+0x58c>)
 8009150:	fba1 1303 	umull	r1, r3, r1, r3
 8009154:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009156:	429a      	cmp	r2, r3
 8009158:	d911      	bls.n	800917e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800915a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800915c:	f004 fae4 	bl	800d728 <tcp_keepalive>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009166:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800916a:	2b00      	cmp	r3, #0
 800916c:	d107      	bne.n	800917e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800916e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009170:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009174:	3301      	adds	r3, #1
 8009176:	b2da      	uxtb	r2, r3
 8009178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800917e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009182:	2b00      	cmp	r3, #0
 8009184:	d011      	beq.n	80091aa <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009186:	4b6c      	ldr	r3, [pc, #432]	@ (8009338 <tcp_slowtmr+0x588>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	1ad2      	subs	r2, r2, r3
 8009190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009192:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009196:	4619      	mov	r1, r3
 8009198:	460b      	mov	r3, r1
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	440b      	add	r3, r1
 800919e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d302      	bcc.n	80091aa <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80091a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091a6:	f000 fddb 	bl	8009d60 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80091aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ac:	7d1b      	ldrb	r3, [r3, #20]
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d10b      	bne.n	80091ca <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80091b2:	4b61      	ldr	r3, [pc, #388]	@ (8009338 <tcp_slowtmr+0x588>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	2b28      	cmp	r3, #40	@ 0x28
 80091be:	d904      	bls.n	80091ca <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80091c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091c4:	3301      	adds	r3, #1
 80091c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091cc:	7d1b      	ldrb	r3, [r3, #20]
 80091ce:	2b09      	cmp	r3, #9
 80091d0:	d10b      	bne.n	80091ea <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80091d2:	4b59      	ldr	r3, [pc, #356]	@ (8009338 <tcp_slowtmr+0x588>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2bf0      	cmp	r3, #240	@ 0xf0
 80091de:	d904      	bls.n	80091ea <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80091e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091e4:	3301      	adds	r3, #1
 80091e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80091ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d060      	beq.n	80092b4 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80091f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80091fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091fc:	f000 fbfc 	bl	80099f8 <tcp_pcb_purge>
      if (prev != NULL) {
 8009200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009202:	2b00      	cmp	r3, #0
 8009204:	d010      	beq.n	8009228 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009206:	4b4f      	ldr	r3, [pc, #316]	@ (8009344 <tcp_slowtmr+0x594>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800920c:	429a      	cmp	r2, r3
 800920e:	d106      	bne.n	800921e <tcp_slowtmr+0x46e>
 8009210:	4b4d      	ldr	r3, [pc, #308]	@ (8009348 <tcp_slowtmr+0x598>)
 8009212:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009216:	494d      	ldr	r1, [pc, #308]	@ (800934c <tcp_slowtmr+0x59c>)
 8009218:	484d      	ldr	r0, [pc, #308]	@ (8009350 <tcp_slowtmr+0x5a0>)
 800921a:	f009 fd6d 	bl	8012cf8 <iprintf>
        prev->next = pcb->next;
 800921e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	60da      	str	r2, [r3, #12]
 8009226:	e00f      	b.n	8009248 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009228:	4b46      	ldr	r3, [pc, #280]	@ (8009344 <tcp_slowtmr+0x594>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800922e:	429a      	cmp	r2, r3
 8009230:	d006      	beq.n	8009240 <tcp_slowtmr+0x490>
 8009232:	4b45      	ldr	r3, [pc, #276]	@ (8009348 <tcp_slowtmr+0x598>)
 8009234:	f240 5271 	movw	r2, #1393	@ 0x571
 8009238:	4946      	ldr	r1, [pc, #280]	@ (8009354 <tcp_slowtmr+0x5a4>)
 800923a:	4845      	ldr	r0, [pc, #276]	@ (8009350 <tcp_slowtmr+0x5a0>)
 800923c:	f009 fd5c 	bl	8012cf8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	4a3f      	ldr	r2, [pc, #252]	@ (8009344 <tcp_slowtmr+0x594>)
 8009246:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009248:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800924c:	2b00      	cmp	r3, #0
 800924e:	d013      	beq.n	8009278 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009252:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009256:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009258:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800925a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925c:	3304      	adds	r3, #4
 800925e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009260:	8ad2      	ldrh	r2, [r2, #22]
 8009262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009264:	8b09      	ldrh	r1, [r1, #24]
 8009266:	9102      	str	r1, [sp, #8]
 8009268:	9201      	str	r2, [sp, #4]
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	462b      	mov	r3, r5
 800926e:	4622      	mov	r2, r4
 8009270:	4601      	mov	r1, r0
 8009272:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009274:	f004 f9a4 	bl	800d5c0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800927e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009280:	7d1b      	ldrb	r3, [r3, #20]
 8009282:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800928e:	6838      	ldr	r0, [r7, #0]
 8009290:	f7ff f9f0 	bl	8008674 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009294:	4b30      	ldr	r3, [pc, #192]	@ (8009358 <tcp_slowtmr+0x5a8>)
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <tcp_slowtmr+0x4fa>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f06f 010c 	mvn.w	r1, #12
 80092a6:	68b8      	ldr	r0, [r7, #8]
 80092a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80092aa:	4b2b      	ldr	r3, [pc, #172]	@ (8009358 <tcp_slowtmr+0x5a8>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d037      	beq.n	8009322 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80092b2:	e590      	b.n	8008dd6 <tcp_slowtmr+0x26>
      prev = pcb;
 80092b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80092b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80092be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c0:	7f1b      	ldrb	r3, [r3, #28]
 80092c2:	3301      	adds	r3, #1
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80092ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092cc:	7f1a      	ldrb	r2, [r3, #28]
 80092ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d0:	7f5b      	ldrb	r3, [r3, #29]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d325      	bcc.n	8009322 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80092d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80092dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009358 <tcp_slowtmr+0x5a8>)
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80092e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <tcp_slowtmr+0x554>
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092f4:	6912      	ldr	r2, [r2, #16]
 80092f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	4603      	mov	r3, r0
 80092fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009302:	e002      	b.n	800930a <tcp_slowtmr+0x55a>
 8009304:	2300      	movs	r3, #0
 8009306:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800930a:	4b13      	ldr	r3, [pc, #76]	@ (8009358 <tcp_slowtmr+0x5a8>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f47f ad60 	bne.w	8008dd4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009314:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800931c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800931e:	f003 fb79 	bl	800ca14 <tcp_output>
  while (pcb != NULL) {
 8009322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009324:	2b00      	cmp	r3, #0
 8009326:	f47f ad5c 	bne.w	8008de2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800932a:	2300      	movs	r3, #0
 800932c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800932e:	4b0b      	ldr	r3, [pc, #44]	@ (800935c <tcp_slowtmr+0x5ac>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009334:	e067      	b.n	8009406 <tcp_slowtmr+0x656>
 8009336:	bf00      	nop
 8009338:	200088b0 	.word	0x200088b0
 800933c:	10624dd3 	.word	0x10624dd3
 8009340:	000124f8 	.word	0x000124f8
 8009344:	200088bc 	.word	0x200088bc
 8009348:	0801469c 	.word	0x0801469c
 800934c:	08014ad4 	.word	0x08014ad4
 8009350:	080146e0 	.word	0x080146e0
 8009354:	08014b00 	.word	0x08014b00
 8009358:	200088c4 	.word	0x200088c4
 800935c:	200088c0 	.word	0x200088c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009362:	7d1b      	ldrb	r3, [r3, #20]
 8009364:	2b0a      	cmp	r3, #10
 8009366:	d006      	beq.n	8009376 <tcp_slowtmr+0x5c6>
 8009368:	4b2b      	ldr	r3, [pc, #172]	@ (8009418 <tcp_slowtmr+0x668>)
 800936a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800936e:	492b      	ldr	r1, [pc, #172]	@ (800941c <tcp_slowtmr+0x66c>)
 8009370:	482b      	ldr	r0, [pc, #172]	@ (8009420 <tcp_slowtmr+0x670>)
 8009372:	f009 fcc1 	bl	8012cf8 <iprintf>
    pcb_remove = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800937c:	4b29      	ldr	r3, [pc, #164]	@ (8009424 <tcp_slowtmr+0x674>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2bf0      	cmp	r3, #240	@ 0xf0
 8009388:	d904      	bls.n	8009394 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800938a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800938e:	3301      	adds	r3, #1
 8009390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009398:	2b00      	cmp	r3, #0
 800939a:	d02f      	beq.n	80093fc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800939c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800939e:	f000 fb2b 	bl	80099f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80093a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d010      	beq.n	80093ca <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80093a8:	4b1f      	ldr	r3, [pc, #124]	@ (8009428 <tcp_slowtmr+0x678>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d106      	bne.n	80093c0 <tcp_slowtmr+0x610>
 80093b2:	4b19      	ldr	r3, [pc, #100]	@ (8009418 <tcp_slowtmr+0x668>)
 80093b4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80093b8:	491c      	ldr	r1, [pc, #112]	@ (800942c <tcp_slowtmr+0x67c>)
 80093ba:	4819      	ldr	r0, [pc, #100]	@ (8009420 <tcp_slowtmr+0x670>)
 80093bc:	f009 fc9c 	bl	8012cf8 <iprintf>
        prev->next = pcb->next;
 80093c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c6:	60da      	str	r2, [r3, #12]
 80093c8:	e00f      	b.n	80093ea <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80093ca:	4b17      	ldr	r3, [pc, #92]	@ (8009428 <tcp_slowtmr+0x678>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d006      	beq.n	80093e2 <tcp_slowtmr+0x632>
 80093d4:	4b10      	ldr	r3, [pc, #64]	@ (8009418 <tcp_slowtmr+0x668>)
 80093d6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80093da:	4915      	ldr	r1, [pc, #84]	@ (8009430 <tcp_slowtmr+0x680>)
 80093dc:	4810      	ldr	r0, [pc, #64]	@ (8009420 <tcp_slowtmr+0x670>)
 80093de:	f009 fc8b 	bl	8012cf8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80093e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	4a10      	ldr	r2, [pc, #64]	@ (8009428 <tcp_slowtmr+0x678>)
 80093e8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80093ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80093ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80093f4:	69f8      	ldr	r0, [r7, #28]
 80093f6:	f7ff f93d 	bl	8008674 <tcp_free>
 80093fa:	e004      	b.n	8009406 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80093fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1a9      	bne.n	8009360 <tcp_slowtmr+0x5b0>
    }
  }
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	3730      	adds	r7, #48	@ 0x30
 8009412:	46bd      	mov	sp, r7
 8009414:	bdb0      	pop	{r4, r5, r7, pc}
 8009416:	bf00      	nop
 8009418:	0801469c 	.word	0x0801469c
 800941c:	08014b2c 	.word	0x08014b2c
 8009420:	080146e0 	.word	0x080146e0
 8009424:	200088b0 	.word	0x200088b0
 8009428:	200088c0 	.word	0x200088c0
 800942c:	08014b5c 	.word	0x08014b5c
 8009430:	08014b84 	.word	0x08014b84

08009434 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800943a:	4b2d      	ldr	r3, [pc, #180]	@ (80094f0 <tcp_fasttmr+0xbc>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	b2da      	uxtb	r2, r3
 8009442:	4b2b      	ldr	r3, [pc, #172]	@ (80094f0 <tcp_fasttmr+0xbc>)
 8009444:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009446:	4b2b      	ldr	r3, [pc, #172]	@ (80094f4 <tcp_fasttmr+0xc0>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800944c:	e048      	b.n	80094e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	7f9a      	ldrb	r2, [r3, #30]
 8009452:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <tcp_fasttmr+0xbc>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d03f      	beq.n	80094da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800945a:	4b25      	ldr	r3, [pc, #148]	@ (80094f0 <tcp_fasttmr+0xbc>)
 800945c:	781a      	ldrb	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8b5b      	ldrh	r3, [r3, #26]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d010      	beq.n	8009490 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8b5b      	ldrh	r3, [r3, #26]
 8009472:	f043 0302 	orr.w	r3, r3, #2
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f003 fac9 	bl	800ca14 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	8b5b      	ldrh	r3, [r3, #26]
 8009486:	f023 0303 	bic.w	r3, r3, #3
 800948a:	b29a      	uxth	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	8b5b      	ldrh	r3, [r3, #26]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b00      	cmp	r3, #0
 800949a:	d009      	beq.n	80094b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8b5b      	ldrh	r3, [r3, #26]
 80094a0:	f023 0308 	bic.w	r3, r3, #8
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fa76 	bl	800899c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80094be:	4b0e      	ldr	r3, [pc, #56]	@ (80094f8 <tcp_fasttmr+0xc4>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f819 	bl	80094fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80094ca:	4b0b      	ldr	r3, [pc, #44]	@ (80094f8 <tcp_fasttmr+0xc4>)
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d000      	beq.n	80094d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80094d2:	e7b8      	b.n	8009446 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	e002      	b.n	80094e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1b3      	bne.n	800944e <tcp_fasttmr+0x1a>
    }
  }
}
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	200088c6 	.word	0x200088c6
 80094f4:	200088bc 	.word	0x200088bc
 80094f8:	200088c4 	.word	0x200088c4

080094fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80094fc:	b590      	push	{r4, r7, lr}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <tcp_process_refused_data+0x22>
 800950a:	4b37      	ldr	r3, [pc, #220]	@ (80095e8 <tcp_process_refused_data+0xec>)
 800950c:	f240 6209 	movw	r2, #1545	@ 0x609
 8009510:	4936      	ldr	r1, [pc, #216]	@ (80095ec <tcp_process_refused_data+0xf0>)
 8009512:	4837      	ldr	r0, [pc, #220]	@ (80095f0 <tcp_process_refused_data+0xf4>)
 8009514:	f009 fbf0 	bl	8012cf8 <iprintf>
 8009518:	f06f 030f 	mvn.w	r3, #15
 800951c:	e060      	b.n	80095e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009522:	7b5b      	ldrb	r3, [r3, #13]
 8009524:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800952a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <tcp_process_refused_data+0x58>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6918      	ldr	r0, [r3, #16]
 8009546:	2300      	movs	r3, #0
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	47a0      	blx	r4
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]
 8009552:	e007      	b.n	8009564 <tcp_process_refused_data+0x68>
 8009554:	2300      	movs	r3, #0
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	2000      	movs	r0, #0
 800955c:	f000 f8a4 	bl	80096a8 <tcp_recv_null>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d12a      	bne.n	80095c2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d033      	beq.n	80095de <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800957a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800957e:	d005      	beq.n	800958c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009584:	3301      	adds	r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <tcp_process_refused_data+0xb2>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6918      	ldr	r0, [r3, #16]
 80095a0:	2300      	movs	r3, #0
 80095a2:	2200      	movs	r2, #0
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	47a0      	blx	r4
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
 80095ac:	e001      	b.n	80095b2 <tcp_process_refused_data+0xb6>
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80095b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095b6:	f113 0f0d 	cmn.w	r3, #13
 80095ba:	d110      	bne.n	80095de <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80095bc:	f06f 030c 	mvn.w	r3, #12
 80095c0:	e00e      	b.n	80095e0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80095c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095c6:	f113 0f0d 	cmn.w	r3, #13
 80095ca:	d102      	bne.n	80095d2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80095cc:	f06f 030c 	mvn.w	r3, #12
 80095d0:	e006      	b.n	80095e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80095d8:	f06f 0304 	mvn.w	r3, #4
 80095dc:	e000      	b.n	80095e0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd90      	pop	{r4, r7, pc}
 80095e8:	0801469c 	.word	0x0801469c
 80095ec:	08014bac 	.word	0x08014bac
 80095f0:	080146e0 	.word	0x080146e0

080095f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80095fc:	e007      	b.n	800960e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f80a 	bl	800961e <tcp_seg_free>
    seg = next;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f4      	bne.n	80095fe <tcp_segs_free+0xa>
  }
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00c      	beq.n	8009646 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fc11 	bl	8007e60 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	2003      	movs	r0, #3
 8009642:	f7fd fd71 	bl	8007128 <memp_free>
  }
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <tcp_seg_copy+0x1c>
 800965e:	4b0f      	ldr	r3, [pc, #60]	@ (800969c <tcp_seg_copy+0x4c>)
 8009660:	f240 6282 	movw	r2, #1666	@ 0x682
 8009664:	490e      	ldr	r1, [pc, #56]	@ (80096a0 <tcp_seg_copy+0x50>)
 8009666:	480f      	ldr	r0, [pc, #60]	@ (80096a4 <tcp_seg_copy+0x54>)
 8009668:	f009 fb46 	bl	8012cf8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800966c:	2003      	movs	r0, #3
 800966e:	f7fd fceb 	bl	8007048 <memp_malloc>
 8009672:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <tcp_seg_copy+0x2e>
    return NULL;
 800967a:	2300      	movs	r3, #0
 800967c:	e00a      	b.n	8009694 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800967e:	2210      	movs	r2, #16
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f009 fc13 	bl	8012eae <memcpy>
  pbuf_ref(cseg->p);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fc87 	bl	8007fa0 <pbuf_ref>
  return cseg;
 8009692:	68fb      	ldr	r3, [r7, #12]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	0801469c 	.word	0x0801469c
 80096a0:	08014bf0 	.word	0x08014bf0
 80096a4:	080146e0 	.word	0x080146e0

080096a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d109      	bne.n	80096d0 <tcp_recv_null+0x28>
 80096bc:	4b12      	ldr	r3, [pc, #72]	@ (8009708 <tcp_recv_null+0x60>)
 80096be:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80096c2:	4912      	ldr	r1, [pc, #72]	@ (800970c <tcp_recv_null+0x64>)
 80096c4:	4812      	ldr	r0, [pc, #72]	@ (8009710 <tcp_recv_null+0x68>)
 80096c6:	f009 fb17 	bl	8012cf8 <iprintf>
 80096ca:	f06f 030f 	mvn.w	r3, #15
 80096ce:	e016      	b.n	80096fe <tcp_recv_null+0x56>

  if (p != NULL) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	891b      	ldrh	r3, [r3, #8]
 80096da:	4619      	mov	r1, r3
 80096dc:	68b8      	ldr	r0, [r7, #8]
 80096de:	f7ff fb17 	bl	8008d10 <tcp_recved>
    pbuf_free(p);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fe fbbc 	bl	8007e60 <pbuf_free>
 80096e8:	e008      	b.n	80096fc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80096ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d104      	bne.n	80096fc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80096f2:	68b8      	ldr	r0, [r7, #8]
 80096f4:	f7ff f9bc 	bl	8008a70 <tcp_close>
 80096f8:	4603      	mov	r3, r0
 80096fa:	e000      	b.n	80096fe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	0801469c 	.word	0x0801469c
 800970c:	08014c0c 	.word	0x08014c0c
 8009710:	080146e0 	.word	0x080146e0

08009714 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800971e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009722:	2b00      	cmp	r3, #0
 8009724:	db01      	blt.n	800972a <tcp_kill_prio+0x16>
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	e000      	b.n	800972c <tcp_kill_prio+0x18>
 800972a:	237f      	movs	r3, #127	@ 0x7f
 800972c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d034      	beq.n	800979e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	3b01      	subs	r3, #1
 8009738:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009742:	4b19      	ldr	r3, [pc, #100]	@ (80097a8 <tcp_kill_prio+0x94>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e01f      	b.n	800978a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	7d5b      	ldrb	r3, [r3, #21]
 800974e:	7afa      	ldrb	r2, [r7, #11]
 8009750:	429a      	cmp	r2, r3
 8009752:	d80c      	bhi.n	800976e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009758:	7afa      	ldrb	r2, [r7, #11]
 800975a:	429a      	cmp	r2, r3
 800975c:	d112      	bne.n	8009784 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800975e:	4b13      	ldr	r3, [pc, #76]	@ (80097ac <tcp_kill_prio+0x98>)
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	429a      	cmp	r2, r3
 800976c:	d80a      	bhi.n	8009784 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800976e:	4b0f      	ldr	r3, [pc, #60]	@ (80097ac <tcp_kill_prio+0x98>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	7d5b      	ldrb	r3, [r3, #21]
 8009782:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1dc      	bne.n	800974a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009796:	6938      	ldr	r0, [r7, #16]
 8009798:	f7ff fa54 	bl	8008c44 <tcp_abort>
 800979c:	e000      	b.n	80097a0 <tcp_kill_prio+0x8c>
    return;
 800979e:	bf00      	nop
  }
}
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	200088bc 	.word	0x200088bc
 80097ac:	200088b0 	.word	0x200088b0

080097b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d009      	beq.n	80097d4 <tcp_kill_state+0x24>
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	2b09      	cmp	r3, #9
 80097c4:	d006      	beq.n	80097d4 <tcp_kill_state+0x24>
 80097c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009830 <tcp_kill_state+0x80>)
 80097c8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80097cc:	4919      	ldr	r1, [pc, #100]	@ (8009834 <tcp_kill_state+0x84>)
 80097ce:	481a      	ldr	r0, [pc, #104]	@ (8009838 <tcp_kill_state+0x88>)
 80097d0:	f009 fa92 	bl	8012cf8 <iprintf>

  inactivity = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80097d8:	2300      	movs	r3, #0
 80097da:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097dc:	4b17      	ldr	r3, [pc, #92]	@ (800983c <tcp_kill_state+0x8c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e017      	b.n	8009814 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	7d1b      	ldrb	r3, [r3, #20]
 80097e8:	79fa      	ldrb	r2, [r7, #7]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d10f      	bne.n	800980e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80097ee:	4b14      	ldr	r3, [pc, #80]	@ (8009840 <tcp_kill_state+0x90>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d807      	bhi.n	800980e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80097fe:	4b10      	ldr	r3, [pc, #64]	@ (8009840 <tcp_kill_state+0x90>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e4      	bne.n	80097e4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d003      	beq.n	8009828 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009820:	2100      	movs	r1, #0
 8009822:	6938      	ldr	r0, [r7, #16]
 8009824:	f7ff f950 	bl	8008ac8 <tcp_abandon>
  }
}
 8009828:	bf00      	nop
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	0801469c 	.word	0x0801469c
 8009834:	08014c28 	.word	0x08014c28
 8009838:	080146e0 	.word	0x080146e0
 800983c:	200088bc 	.word	0x200088bc
 8009840:	200088b0 	.word	0x200088b0

08009844 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009852:	4b12      	ldr	r3, [pc, #72]	@ (800989c <tcp_kill_timewait+0x58>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	e012      	b.n	8009880 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800985a:	4b11      	ldr	r3, [pc, #68]	@ (80098a0 <tcp_kill_timewait+0x5c>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	429a      	cmp	r2, r3
 8009868:	d807      	bhi.n	800987a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800986a:	4b0d      	ldr	r3, [pc, #52]	@ (80098a0 <tcp_kill_timewait+0x5c>)
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e9      	bne.n	800985a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800988c:	68b8      	ldr	r0, [r7, #8]
 800988e:	f7ff f9d9 	bl	8008c44 <tcp_abort>
  }
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	200088c0 	.word	0x200088c0
 80098a0:	200088b0 	.word	0x200088b0

080098a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80098aa:	4b10      	ldr	r3, [pc, #64]	@ (80098ec <tcp_handle_closepend+0x48>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80098b0:	e014      	b.n	80098dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8b5b      	ldrh	r3, [r3, #26]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	8b5b      	ldrh	r3, [r3, #26]
 80098c8:	f023 0308 	bic.w	r3, r3, #8
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff f862 	bl	800899c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e7      	bne.n	80098b2 <tcp_handle_closepend+0xe>
  }
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	200088bc 	.word	0x200088bc

080098f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098fa:	2001      	movs	r0, #1
 80098fc:	f7fd fba4 	bl	8007048 <memp_malloc>
 8009900:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d126      	bne.n	8009956 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009908:	f7ff ffcc 	bl	80098a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800990c:	f7ff ff9a 	bl	8009844 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009910:	2001      	movs	r0, #1
 8009912:	f7fd fb99 	bl	8007048 <memp_malloc>
 8009916:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d11b      	bne.n	8009956 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800991e:	2009      	movs	r0, #9
 8009920:	f7ff ff46 	bl	80097b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009924:	2001      	movs	r0, #1
 8009926:	f7fd fb8f 	bl	8007048 <memp_malloc>
 800992a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d111      	bne.n	8009956 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009932:	2008      	movs	r0, #8
 8009934:	f7ff ff3c 	bl	80097b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009938:	2001      	movs	r0, #1
 800993a:	f7fd fb85 	bl	8007048 <memp_malloc>
 800993e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d107      	bne.n	8009956 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fee3 	bl	8009714 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800994e:	2001      	movs	r0, #1
 8009950:	f7fd fb7a 	bl	8007048 <memp_malloc>
 8009954:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d03f      	beq.n	80099dc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800995c:	229c      	movs	r2, #156	@ 0x9c
 800995e:	2100      	movs	r1, #0
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f009 fa2e 	bl	8012dc2 <memset>
    pcb->prio = prio;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	79fa      	ldrb	r2, [r7, #7]
 800996a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009972:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800997c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	22ff      	movs	r2, #255	@ 0xff
 800998a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009992:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2206      	movs	r2, #6
 8009998:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2206      	movs	r2, #6
 80099a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <tcp_alloc+0xf8>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80099ba:	4b0c      	ldr	r3, [pc, #48]	@ (80099ec <tcp_alloc+0xfc>)
 80099bc:	781a      	ldrb	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80099c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4a08      	ldr	r2, [pc, #32]	@ (80099f0 <tcp_alloc+0x100>)
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4a07      	ldr	r2, [pc, #28]	@ (80099f4 <tcp_alloc+0x104>)
 80099d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80099dc:	68fb      	ldr	r3, [r7, #12]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	200088b0 	.word	0x200088b0
 80099ec:	200088c6 	.word	0x200088c6
 80099f0:	080096a9 	.word	0x080096a9
 80099f4:	006ddd00 	.word	0x006ddd00

080099f8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d107      	bne.n	8009a16 <tcp_pcb_purge+0x1e>
 8009a06:	4b21      	ldr	r3, [pc, #132]	@ (8009a8c <tcp_pcb_purge+0x94>)
 8009a08:	f640 0251 	movw	r2, #2129	@ 0x851
 8009a0c:	4920      	ldr	r1, [pc, #128]	@ (8009a90 <tcp_pcb_purge+0x98>)
 8009a0e:	4821      	ldr	r0, [pc, #132]	@ (8009a94 <tcp_pcb_purge+0x9c>)
 8009a10:	f009 f972 	bl	8012cf8 <iprintf>
 8009a14:	e037      	b.n	8009a86 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	7d1b      	ldrb	r3, [r3, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d033      	beq.n	8009a86 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009a22:	2b0a      	cmp	r3, #10
 8009a24:	d02f      	beq.n	8009a86 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d02b      	beq.n	8009a86 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe fa10 	bl	8007e60 <pbuf_free>
      pcb->refused_data = NULL;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f986 	bl	8009d60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a5a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fdc7 	bl	80095f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fdc2 	bl	80095f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	0801469c 	.word	0x0801469c
 8009a90:	08014ce8 	.word	0x08014ce8
 8009a94:	080146e0 	.word	0x080146e0

08009a98 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d106      	bne.n	8009ab6 <tcp_pcb_remove+0x1e>
 8009aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ba4 <tcp_pcb_remove+0x10c>)
 8009aaa:	f640 0283 	movw	r2, #2179	@ 0x883
 8009aae:	493e      	ldr	r1, [pc, #248]	@ (8009ba8 <tcp_pcb_remove+0x110>)
 8009ab0:	483e      	ldr	r0, [pc, #248]	@ (8009bac <tcp_pcb_remove+0x114>)
 8009ab2:	f009 f921 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <tcp_pcb_remove+0x32>
 8009abc:	4b39      	ldr	r3, [pc, #228]	@ (8009ba4 <tcp_pcb_remove+0x10c>)
 8009abe:	f640 0284 	movw	r2, #2180	@ 0x884
 8009ac2:	493b      	ldr	r1, [pc, #236]	@ (8009bb0 <tcp_pcb_remove+0x118>)
 8009ac4:	4839      	ldr	r0, [pc, #228]	@ (8009bac <tcp_pcb_remove+0x114>)
 8009ac6:	f009 f917 	bl	8012cf8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d105      	bne.n	8009ae0 <tcp_pcb_remove+0x48>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	e013      	b.n	8009b08 <tcp_pcb_remove+0x70>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	e00c      	b.n	8009b02 <tcp_pcb_remove+0x6a>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d104      	bne.n	8009afc <tcp_pcb_remove+0x64>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	60da      	str	r2, [r3, #12]
 8009afa:	e005      	b.n	8009b08 <tcp_pcb_remove+0x70>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1ef      	bne.n	8009ae8 <tcp_pcb_remove+0x50>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009b0e:	6838      	ldr	r0, [r7, #0]
 8009b10:	f7ff ff72 	bl	80099f8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	7d1b      	ldrb	r3, [r3, #20]
 8009b18:	2b0a      	cmp	r3, #10
 8009b1a:	d013      	beq.n	8009b44 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d00f      	beq.n	8009b44 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	8b5b      	ldrh	r3, [r3, #26]
 8009b28:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d009      	beq.n	8009b44 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	8b5b      	ldrh	r3, [r3, #26]
 8009b34:	f043 0302 	orr.w	r3, r3, #2
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009b3e:	6838      	ldr	r0, [r7, #0]
 8009b40:	f002 ff68 	bl	800ca14 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	7d1b      	ldrb	r3, [r3, #20]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d020      	beq.n	8009b8e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d006      	beq.n	8009b62 <tcp_pcb_remove+0xca>
 8009b54:	4b13      	ldr	r3, [pc, #76]	@ (8009ba4 <tcp_pcb_remove+0x10c>)
 8009b56:	f640 0293 	movw	r2, #2195	@ 0x893
 8009b5a:	4916      	ldr	r1, [pc, #88]	@ (8009bb4 <tcp_pcb_remove+0x11c>)
 8009b5c:	4813      	ldr	r0, [pc, #76]	@ (8009bac <tcp_pcb_remove+0x114>)
 8009b5e:	f009 f8cb 	bl	8012cf8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d006      	beq.n	8009b78 <tcp_pcb_remove+0xe0>
 8009b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba4 <tcp_pcb_remove+0x10c>)
 8009b6c:	f640 0294 	movw	r2, #2196	@ 0x894
 8009b70:	4911      	ldr	r1, [pc, #68]	@ (8009bb8 <tcp_pcb_remove+0x120>)
 8009b72:	480e      	ldr	r0, [pc, #56]	@ (8009bac <tcp_pcb_remove+0x114>)
 8009b74:	f009 f8c0 	bl	8012cf8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <tcp_pcb_remove+0xf6>
 8009b80:	4b08      	ldr	r3, [pc, #32]	@ (8009ba4 <tcp_pcb_remove+0x10c>)
 8009b82:	f640 0296 	movw	r2, #2198	@ 0x896
 8009b86:	490d      	ldr	r1, [pc, #52]	@ (8009bbc <tcp_pcb_remove+0x124>)
 8009b88:	4808      	ldr	r0, [pc, #32]	@ (8009bac <tcp_pcb_remove+0x114>)
 8009b8a:	f009 f8b5 	bl	8012cf8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2200      	movs	r2, #0
 8009b92:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0801469c 	.word	0x0801469c
 8009ba8:	08014d04 	.word	0x08014d04
 8009bac:	080146e0 	.word	0x080146e0
 8009bb0:	08014d20 	.word	0x08014d20
 8009bb4:	08014d40 	.word	0x08014d40
 8009bb8:	08014d58 	.word	0x08014d58
 8009bbc:	08014d74 	.word	0x08014d74

08009bc0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d106      	bne.n	8009bdc <tcp_next_iss+0x1c>
 8009bce:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf8 <tcp_next_iss+0x38>)
 8009bd0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009bd4:	4909      	ldr	r1, [pc, #36]	@ (8009bfc <tcp_next_iss+0x3c>)
 8009bd6:	480a      	ldr	r0, [pc, #40]	@ (8009c00 <tcp_next_iss+0x40>)
 8009bd8:	f009 f88e 	bl	8012cf8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009bdc:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <tcp_next_iss+0x44>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	4b09      	ldr	r3, [pc, #36]	@ (8009c08 <tcp_next_iss+0x48>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4413      	add	r3, r2
 8009be6:	4a07      	ldr	r2, [pc, #28]	@ (8009c04 <tcp_next_iss+0x44>)
 8009be8:	6013      	str	r3, [r2, #0]
  return iss;
 8009bea:	4b06      	ldr	r3, [pc, #24]	@ (8009c04 <tcp_next_iss+0x44>)
 8009bec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0801469c 	.word	0x0801469c
 8009bfc:	08014d8c 	.word	0x08014d8c
 8009c00:	080146e0 	.word	0x080146e0
 8009c04:	20000024 	.word	0x20000024
 8009c08:	200088b0 	.word	0x200088b0

08009c0c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d106      	bne.n	8009c2e <tcp_eff_send_mss_netif+0x22>
 8009c20:	4b14      	ldr	r3, [pc, #80]	@ (8009c74 <tcp_eff_send_mss_netif+0x68>)
 8009c22:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8009c26:	4914      	ldr	r1, [pc, #80]	@ (8009c78 <tcp_eff_send_mss_netif+0x6c>)
 8009c28:	4814      	ldr	r0, [pc, #80]	@ (8009c7c <tcp_eff_send_mss_netif+0x70>)
 8009c2a:	f009 f865 	bl	8012cf8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	e019      	b.n	8009c6c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c3c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009c3e:	8afb      	ldrh	r3, [r7, #22]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d012      	beq.n	8009c6a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009c44:	2328      	movs	r3, #40	@ 0x28
 8009c46:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009c48:	8afa      	ldrh	r2, [r7, #22]
 8009c4a:	8abb      	ldrh	r3, [r7, #20]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d904      	bls.n	8009c5a <tcp_eff_send_mss_netif+0x4e>
 8009c50:	8afa      	ldrh	r2, [r7, #22]
 8009c52:	8abb      	ldrh	r3, [r7, #20]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	e000      	b.n	8009c5c <tcp_eff_send_mss_netif+0x50>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009c5e:	8a7a      	ldrh	r2, [r7, #18]
 8009c60:	89fb      	ldrh	r3, [r7, #14]
 8009c62:	4293      	cmp	r3, r2
 8009c64:	bf28      	it	cs
 8009c66:	4613      	movcs	r3, r2
 8009c68:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009c6a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	0801469c 	.word	0x0801469c
 8009c78:	08014da8 	.word	0x08014da8
 8009c7c:	080146e0 	.word	0x080146e0

08009c80 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d119      	bne.n	8009cc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009c94:	4b10      	ldr	r3, [pc, #64]	@ (8009cd8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009c96:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8009c9a:	4910      	ldr	r1, [pc, #64]	@ (8009cdc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009c9c:	4810      	ldr	r0, [pc, #64]	@ (8009ce0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009c9e:	f009 f82b 	bl	8012cf8 <iprintf>

  while (pcb != NULL) {
 8009ca2:	e011      	b.n	8009cc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d108      	bne.n	8009cc2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f7fe ffc4 	bl	8008c44 <tcp_abort>
      pcb = next;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	e002      	b.n	8009cc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1ea      	bne.n	8009ca4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009cce:	bf00      	nop
 8009cd0:	bf00      	nop
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	0801469c 	.word	0x0801469c
 8009cdc:	08014dd0 	.word	0x08014dd0
 8009ce0:	080146e0 	.word	0x080146e0

08009ce4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d02a      	beq.n	8009d4a <tcp_netif_ip_addr_changed+0x66>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d026      	beq.n	8009d4a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009cfc:	4b15      	ldr	r3, [pc, #84]	@ (8009d54 <tcp_netif_ip_addr_changed+0x70>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7ff ffbc 	bl	8009c80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009d08:	4b13      	ldr	r3, [pc, #76]	@ (8009d58 <tcp_netif_ip_addr_changed+0x74>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff ffb6 	bl	8009c80 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d017      	beq.n	8009d4a <tcp_netif_ip_addr_changed+0x66>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d013      	beq.n	8009d4a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d22:	4b0e      	ldr	r3, [pc, #56]	@ (8009d5c <tcp_netif_ip_addr_changed+0x78>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	e00c      	b.n	8009d44 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d103      	bne.n	8009d3e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1ef      	bne.n	8009d2a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200088bc 	.word	0x200088bc
 8009d58:	200088b4 	.word	0x200088b4
 8009d5c:	200088b8 	.word	0x200088b8

08009d60 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d007      	beq.n	8009d80 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fc3d 	bl	80095f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009d88:	b590      	push	{r4, r7, lr}
 8009d8a:	b08d      	sub	sp, #52	@ 0x34
 8009d8c:	af04      	add	r7, sp, #16
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d105      	bne.n	8009da4 <tcp_input+0x1c>
 8009d98:	4b9b      	ldr	r3, [pc, #620]	@ (800a008 <tcp_input+0x280>)
 8009d9a:	2283      	movs	r2, #131	@ 0x83
 8009d9c:	499b      	ldr	r1, [pc, #620]	@ (800a00c <tcp_input+0x284>)
 8009d9e:	489c      	ldr	r0, [pc, #624]	@ (800a010 <tcp_input+0x288>)
 8009da0:	f008 ffaa 	bl	8012cf8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	4a9a      	ldr	r2, [pc, #616]	@ (800a014 <tcp_input+0x28c>)
 8009daa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	895b      	ldrh	r3, [r3, #10]
 8009db0:	2b13      	cmp	r3, #19
 8009db2:	f240 83d1 	bls.w	800a558 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009db6:	4b98      	ldr	r3, [pc, #608]	@ (800a018 <tcp_input+0x290>)
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	4a97      	ldr	r2, [pc, #604]	@ (800a018 <tcp_input+0x290>)
 8009dbc:	6812      	ldr	r2, [r2, #0]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f007 ff33 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f040 83c7 	bne.w	800a55c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009dce:	4b92      	ldr	r3, [pc, #584]	@ (800a018 <tcp_input+0x290>)
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009dd6:	2be0      	cmp	r3, #224	@ 0xe0
 8009dd8:	f000 83c0 	beq.w	800a55c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009ddc:	4b8d      	ldr	r3, [pc, #564]	@ (800a014 <tcp_input+0x28c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	899b      	ldrh	r3, [r3, #12]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fc f89d 	bl	8005f24 <lwip_htons>
 8009dea:	4603      	mov	r3, r0
 8009dec:	0b1b      	lsrs	r3, r3, #12
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009df6:	7cbb      	ldrb	r3, [r7, #18]
 8009df8:	2b13      	cmp	r3, #19
 8009dfa:	f240 83b1 	bls.w	800a560 <tcp_input+0x7d8>
 8009dfe:	7cbb      	ldrb	r3, [r7, #18]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	891b      	ldrh	r3, [r3, #8]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	f200 83aa 	bhi.w	800a560 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009e0c:	7cbb      	ldrb	r3, [r7, #18]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	3b14      	subs	r3, #20
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	4b81      	ldr	r3, [pc, #516]	@ (800a01c <tcp_input+0x294>)
 8009e16:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009e18:	4b81      	ldr	r3, [pc, #516]	@ (800a020 <tcp_input+0x298>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	895a      	ldrh	r2, [r3, #10]
 8009e22:	7cbb      	ldrb	r3, [r7, #18]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d309      	bcc.n	8009e3e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800a01c <tcp_input+0x294>)
 8009e2c:	881a      	ldrh	r2, [r3, #0]
 8009e2e:	4b7d      	ldr	r3, [pc, #500]	@ (800a024 <tcp_input+0x29c>)
 8009e30:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009e32:	7cbb      	ldrb	r3, [r7, #18]
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fd ff8c 	bl	8007d54 <pbuf_remove_header>
 8009e3c:	e04e      	b.n	8009edc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d105      	bne.n	8009e52 <tcp_input+0xca>
 8009e46:	4b70      	ldr	r3, [pc, #448]	@ (800a008 <tcp_input+0x280>)
 8009e48:	22c2      	movs	r2, #194	@ 0xc2
 8009e4a:	4977      	ldr	r1, [pc, #476]	@ (800a028 <tcp_input+0x2a0>)
 8009e4c:	4870      	ldr	r0, [pc, #448]	@ (800a010 <tcp_input+0x288>)
 8009e4e:	f008 ff53 	bl	8012cf8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009e52:	2114      	movs	r1, #20
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7fd ff7d 	bl	8007d54 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	895a      	ldrh	r2, [r3, #10]
 8009e5e:	4b71      	ldr	r3, [pc, #452]	@ (800a024 <tcp_input+0x29c>)
 8009e60:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009e62:	4b6e      	ldr	r3, [pc, #440]	@ (800a01c <tcp_input+0x294>)
 8009e64:	881a      	ldrh	r2, [r3, #0]
 8009e66:	4b6f      	ldr	r3, [pc, #444]	@ (800a024 <tcp_input+0x29c>)
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009e6e:	4b6d      	ldr	r3, [pc, #436]	@ (800a024 <tcp_input+0x29c>)
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7fd ff6d 	bl	8007d54 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	895b      	ldrh	r3, [r3, #10]
 8009e80:	8a3a      	ldrh	r2, [r7, #16]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	f200 836e 	bhi.w	800a564 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	4a64      	ldr	r2, [pc, #400]	@ (800a020 <tcp_input+0x298>)
 8009e90:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	8a3a      	ldrh	r2, [r7, #16]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fd ff5a 	bl	8007d54 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	891a      	ldrh	r2, [r3, #8]
 8009ea4:	8a3b      	ldrh	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	895b      	ldrh	r3, [r3, #10]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <tcp_input+0x13a>
 8009eb6:	4b54      	ldr	r3, [pc, #336]	@ (800a008 <tcp_input+0x280>)
 8009eb8:	22df      	movs	r2, #223	@ 0xdf
 8009eba:	495c      	ldr	r1, [pc, #368]	@ (800a02c <tcp_input+0x2a4>)
 8009ebc:	4854      	ldr	r0, [pc, #336]	@ (800a010 <tcp_input+0x288>)
 8009ebe:	f008 ff1b 	bl	8012cf8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	891a      	ldrh	r2, [r3, #8]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	891b      	ldrh	r3, [r3, #8]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d005      	beq.n	8009edc <tcp_input+0x154>
 8009ed0:	4b4d      	ldr	r3, [pc, #308]	@ (800a008 <tcp_input+0x280>)
 8009ed2:	22e0      	movs	r2, #224	@ 0xe0
 8009ed4:	4956      	ldr	r1, [pc, #344]	@ (800a030 <tcp_input+0x2a8>)
 8009ed6:	484e      	ldr	r0, [pc, #312]	@ (800a010 <tcp_input+0x288>)
 8009ed8:	f008 ff0e 	bl	8012cf8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009edc:	4b4d      	ldr	r3, [pc, #308]	@ (800a014 <tcp_input+0x28c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	4a4b      	ldr	r2, [pc, #300]	@ (800a014 <tcp_input+0x28c>)
 8009ee6:	6814      	ldr	r4, [r2, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fc f81b 	bl	8005f24 <lwip_htons>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009ef2:	4b48      	ldr	r3, [pc, #288]	@ (800a014 <tcp_input+0x28c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	885b      	ldrh	r3, [r3, #2]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4a46      	ldr	r2, [pc, #280]	@ (800a014 <tcp_input+0x28c>)
 8009efc:	6814      	ldr	r4, [r2, #0]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fc f810 	bl	8005f24 <lwip_htons>
 8009f04:	4603      	mov	r3, r0
 8009f06:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009f08:	4b42      	ldr	r3, [pc, #264]	@ (800a014 <tcp_input+0x28c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	4a41      	ldr	r2, [pc, #260]	@ (800a014 <tcp_input+0x28c>)
 8009f10:	6814      	ldr	r4, [r2, #0]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fc f81b 	bl	8005f4e <lwip_htonl>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	6063      	str	r3, [r4, #4]
 8009f1c:	6863      	ldr	r3, [r4, #4]
 8009f1e:	4a45      	ldr	r2, [pc, #276]	@ (800a034 <tcp_input+0x2ac>)
 8009f20:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009f22:	4b3c      	ldr	r3, [pc, #240]	@ (800a014 <tcp_input+0x28c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	4a3a      	ldr	r2, [pc, #232]	@ (800a014 <tcp_input+0x28c>)
 8009f2a:	6814      	ldr	r4, [r2, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fc f80e 	bl	8005f4e <lwip_htonl>
 8009f32:	4603      	mov	r3, r0
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	68a3      	ldr	r3, [r4, #8]
 8009f38:	4a3f      	ldr	r2, [pc, #252]	@ (800a038 <tcp_input+0x2b0>)
 8009f3a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009f3c:	4b35      	ldr	r3, [pc, #212]	@ (800a014 <tcp_input+0x28c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	89db      	ldrh	r3, [r3, #14]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	4a33      	ldr	r2, [pc, #204]	@ (800a014 <tcp_input+0x28c>)
 8009f46:	6814      	ldr	r4, [r2, #0]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fb ffeb 	bl	8005f24 <lwip_htons>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009f52:	4b30      	ldr	r3, [pc, #192]	@ (800a014 <tcp_input+0x28c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	899b      	ldrh	r3, [r3, #12]
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fb ffe2 	bl	8005f24 <lwip_htons>
 8009f60:	4603      	mov	r3, r0
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	4b34      	ldr	r3, [pc, #208]	@ (800a03c <tcp_input+0x2b4>)
 8009f6c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	891a      	ldrh	r2, [r3, #8]
 8009f72:	4b33      	ldr	r3, [pc, #204]	@ (800a040 <tcp_input+0x2b8>)
 8009f74:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009f76:	4b31      	ldr	r3, [pc, #196]	@ (800a03c <tcp_input+0x2b4>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00c      	beq.n	8009f9c <tcp_input+0x214>
    tcplen++;
 8009f82:	4b2f      	ldr	r3, [pc, #188]	@ (800a040 <tcp_input+0x2b8>)
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	3301      	adds	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	4b2d      	ldr	r3, [pc, #180]	@ (800a040 <tcp_input+0x2b8>)
 8009f8c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	891a      	ldrh	r2, [r3, #8]
 8009f92:	4b2b      	ldr	r3, [pc, #172]	@ (800a040 <tcp_input+0x2b8>)
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	f200 82e6 	bhi.w	800a568 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fa0:	4b28      	ldr	r3, [pc, #160]	@ (800a044 <tcp_input+0x2bc>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	e09d      	b.n	800a0e4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	7d1b      	ldrb	r3, [r3, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d105      	bne.n	8009fbc <tcp_input+0x234>
 8009fb0:	4b15      	ldr	r3, [pc, #84]	@ (800a008 <tcp_input+0x280>)
 8009fb2:	22fb      	movs	r2, #251	@ 0xfb
 8009fb4:	4924      	ldr	r1, [pc, #144]	@ (800a048 <tcp_input+0x2c0>)
 8009fb6:	4816      	ldr	r0, [pc, #88]	@ (800a010 <tcp_input+0x288>)
 8009fb8:	f008 fe9e 	bl	8012cf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	7d1b      	ldrb	r3, [r3, #20]
 8009fc0:	2b0a      	cmp	r3, #10
 8009fc2:	d105      	bne.n	8009fd0 <tcp_input+0x248>
 8009fc4:	4b10      	ldr	r3, [pc, #64]	@ (800a008 <tcp_input+0x280>)
 8009fc6:	22fc      	movs	r2, #252	@ 0xfc
 8009fc8:	4920      	ldr	r1, [pc, #128]	@ (800a04c <tcp_input+0x2c4>)
 8009fca:	4811      	ldr	r0, [pc, #68]	@ (800a010 <tcp_input+0x288>)
 8009fcc:	f008 fe94 	bl	8012cf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	7d1b      	ldrb	r3, [r3, #20]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d105      	bne.n	8009fe4 <tcp_input+0x25c>
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	@ (800a008 <tcp_input+0x280>)
 8009fda:	22fd      	movs	r2, #253	@ 0xfd
 8009fdc:	491c      	ldr	r1, [pc, #112]	@ (800a050 <tcp_input+0x2c8>)
 8009fde:	480c      	ldr	r0, [pc, #48]	@ (800a010 <tcp_input+0x288>)
 8009fe0:	f008 fe8a 	bl	8012cf8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	7a1b      	ldrb	r3, [r3, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d033      	beq.n	800a054 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	7a1a      	ldrb	r2, [r3, #8]
 8009ff0:	4b09      	ldr	r3, [pc, #36]	@ (800a018 <tcp_input+0x290>)
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d029      	beq.n	800a054 <tcp_input+0x2cc>
      prev = pcb;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	61bb      	str	r3, [r7, #24]
      continue;
 800a004:	e06b      	b.n	800a0de <tcp_input+0x356>
 800a006:	bf00      	nop
 800a008:	08014e04 	.word	0x08014e04
 800a00c:	08014e38 	.word	0x08014e38
 800a010:	08014e50 	.word	0x08014e50
 800a014:	200088d8 	.word	0x200088d8
 800a018:	20005310 	.word	0x20005310
 800a01c:	200088dc 	.word	0x200088dc
 800a020:	200088e0 	.word	0x200088e0
 800a024:	200088de 	.word	0x200088de
 800a028:	08014e78 	.word	0x08014e78
 800a02c:	08014e88 	.word	0x08014e88
 800a030:	08014e94 	.word	0x08014e94
 800a034:	200088e8 	.word	0x200088e8
 800a038:	200088ec 	.word	0x200088ec
 800a03c:	200088f4 	.word	0x200088f4
 800a040:	200088f2 	.word	0x200088f2
 800a044:	200088bc 	.word	0x200088bc
 800a048:	08014eb4 	.word	0x08014eb4
 800a04c:	08014edc 	.word	0x08014edc
 800a050:	08014f08 	.word	0x08014f08
    }

    if (pcb->remote_port == tcphdr->src &&
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	8b1a      	ldrh	r2, [r3, #24]
 800a058:	4b72      	ldr	r3, [pc, #456]	@ (800a224 <tcp_input+0x49c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	429a      	cmp	r2, r3
 800a062:	d13a      	bne.n	800a0da <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	8ada      	ldrh	r2, [r3, #22]
 800a068:	4b6e      	ldr	r3, [pc, #440]	@ (800a224 <tcp_input+0x49c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	885b      	ldrh	r3, [r3, #2]
 800a06e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a070:	429a      	cmp	r2, r3
 800a072:	d132      	bne.n	800a0da <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	4b6b      	ldr	r3, [pc, #428]	@ (800a228 <tcp_input+0x4a0>)
 800a07a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d12c      	bne.n	800a0da <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b68      	ldr	r3, [pc, #416]	@ (800a228 <tcp_input+0x4a0>)
 800a086:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a088:	429a      	cmp	r2, r3
 800a08a:	d126      	bne.n	800a0da <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	429a      	cmp	r2, r3
 800a094:	d106      	bne.n	800a0a4 <tcp_input+0x31c>
 800a096:	4b65      	ldr	r3, [pc, #404]	@ (800a22c <tcp_input+0x4a4>)
 800a098:	f240 120d 	movw	r2, #269	@ 0x10d
 800a09c:	4964      	ldr	r1, [pc, #400]	@ (800a230 <tcp_input+0x4a8>)
 800a09e:	4865      	ldr	r0, [pc, #404]	@ (800a234 <tcp_input+0x4ac>)
 800a0a0:	f008 fe2a 	bl	8012cf8 <iprintf>
      if (prev != NULL) {
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <tcp_input+0x338>
        prev->next = pcb->next;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a0b2:	4b61      	ldr	r3, [pc, #388]	@ (800a238 <tcp_input+0x4b0>)
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a0ba:	4a5f      	ldr	r2, [pc, #380]	@ (800a238 <tcp_input+0x4b0>)
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d111      	bne.n	800a0ee <tcp_input+0x366>
 800a0ca:	4b58      	ldr	r3, [pc, #352]	@ (800a22c <tcp_input+0x4a4>)
 800a0cc:	f240 1215 	movw	r2, #277	@ 0x115
 800a0d0:	495a      	ldr	r1, [pc, #360]	@ (800a23c <tcp_input+0x4b4>)
 800a0d2:	4858      	ldr	r0, [pc, #352]	@ (800a234 <tcp_input+0x4ac>)
 800a0d4:	f008 fe10 	bl	8012cf8 <iprintf>
      break;
 800a0d8:	e009      	b.n	800a0ee <tcp_input+0x366>
    }
    prev = pcb;
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	61fb      	str	r3, [r7, #28]
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f47f af5e 	bne.w	8009fa8 <tcp_input+0x220>
 800a0ec:	e000      	b.n	800a0f0 <tcp_input+0x368>
      break;
 800a0ee:	bf00      	nop
  }

  if (pcb == NULL) {
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f040 80aa 	bne.w	800a24c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0f8:	4b51      	ldr	r3, [pc, #324]	@ (800a240 <tcp_input+0x4b8>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	61fb      	str	r3, [r7, #28]
 800a0fe:	e03f      	b.n	800a180 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	7d1b      	ldrb	r3, [r3, #20]
 800a104:	2b0a      	cmp	r3, #10
 800a106:	d006      	beq.n	800a116 <tcp_input+0x38e>
 800a108:	4b48      	ldr	r3, [pc, #288]	@ (800a22c <tcp_input+0x4a4>)
 800a10a:	f240 121f 	movw	r2, #287	@ 0x11f
 800a10e:	494d      	ldr	r1, [pc, #308]	@ (800a244 <tcp_input+0x4bc>)
 800a110:	4848      	ldr	r0, [pc, #288]	@ (800a234 <tcp_input+0x4ac>)
 800a112:	f008 fdf1 	bl	8012cf8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	7a1b      	ldrb	r3, [r3, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d009      	beq.n	800a132 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	7a1a      	ldrb	r2, [r3, #8]
 800a122:	4b41      	ldr	r3, [pc, #260]	@ (800a228 <tcp_input+0x4a0>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a12a:	3301      	adds	r3, #1
 800a12c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a12e:	429a      	cmp	r2, r3
 800a130:	d122      	bne.n	800a178 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	8b1a      	ldrh	r2, [r3, #24]
 800a136:	4b3b      	ldr	r3, [pc, #236]	@ (800a224 <tcp_input+0x49c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	429a      	cmp	r2, r3
 800a140:	d11b      	bne.n	800a17a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	8ada      	ldrh	r2, [r3, #22]
 800a146:	4b37      	ldr	r3, [pc, #220]	@ (800a224 <tcp_input+0x49c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	885b      	ldrh	r3, [r3, #2]
 800a14c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a14e:	429a      	cmp	r2, r3
 800a150:	d113      	bne.n	800a17a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	4b34      	ldr	r3, [pc, #208]	@ (800a228 <tcp_input+0x4a0>)
 800a158:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d10d      	bne.n	800a17a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b31      	ldr	r3, [pc, #196]	@ (800a228 <tcp_input+0x4a0>)
 800a164:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a166:	429a      	cmp	r2, r3
 800a168:	d107      	bne.n	800a17a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a16a:	69f8      	ldr	r0, [r7, #28]
 800a16c:	f000 fb56 	bl	800a81c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7fd fe75 	bl	8007e60 <pbuf_free>
        return;
 800a176:	e1fd      	b.n	800a574 <tcp_input+0x7ec>
        continue;
 800a178:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	61fb      	str	r3, [r7, #28]
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1bc      	bne.n	800a100 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a18a:	4b2f      	ldr	r3, [pc, #188]	@ (800a248 <tcp_input+0x4c0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	e02a      	b.n	800a1e8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	7a1b      	ldrb	r3, [r3, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00c      	beq.n	800a1b4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	7a1a      	ldrb	r2, [r3, #8]
 800a19e:	4b22      	ldr	r3, [pc, #136]	@ (800a228 <tcp_input+0x4a0>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d002      	beq.n	800a1b4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	61bb      	str	r3, [r7, #24]
        continue;
 800a1b2:	e016      	b.n	800a1e2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	8ada      	ldrh	r2, [r3, #22]
 800a1b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <tcp_input+0x49c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	885b      	ldrh	r3, [r3, #2]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d10c      	bne.n	800a1de <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4b17      	ldr	r3, [pc, #92]	@ (800a228 <tcp_input+0x4a0>)
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d00f      	beq.n	800a1f0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00d      	beq.n	800a1f2 <tcp_input+0x46a>
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d009      	beq.n	800a1f2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1d1      	bne.n	800a192 <tcp_input+0x40a>
 800a1ee:	e000      	b.n	800a1f2 <tcp_input+0x46a>
            break;
 800a1f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d029      	beq.n	800a24c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a206:	4b10      	ldr	r3, [pc, #64]	@ (800a248 <tcp_input+0x4c0>)
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a20e:	4a0e      	ldr	r2, [pc, #56]	@ (800a248 <tcp_input+0x4c0>)
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a214:	6978      	ldr	r0, [r7, #20]
 800a216:	f000 fa03 	bl	800a620 <tcp_listen_input>
      }
      pbuf_free(p);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7fd fe20 	bl	8007e60 <pbuf_free>
      return;
 800a220:	e1a8      	b.n	800a574 <tcp_input+0x7ec>
 800a222:	bf00      	nop
 800a224:	200088d8 	.word	0x200088d8
 800a228:	20005310 	.word	0x20005310
 800a22c:	08014e04 	.word	0x08014e04
 800a230:	08014f30 	.word	0x08014f30
 800a234:	08014e50 	.word	0x08014e50
 800a238:	200088bc 	.word	0x200088bc
 800a23c:	08014f5c 	.word	0x08014f5c
 800a240:	200088c0 	.word	0x200088c0
 800a244:	08014f88 	.word	0x08014f88
 800a248:	200088b8 	.word	0x200088b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 8158 	beq.w	800a504 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a254:	4b95      	ldr	r3, [pc, #596]	@ (800a4ac <tcp_input+0x724>)
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	891a      	ldrh	r2, [r3, #8]
 800a25e:	4b93      	ldr	r3, [pc, #588]	@ (800a4ac <tcp_input+0x724>)
 800a260:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a262:	4a92      	ldr	r2, [pc, #584]	@ (800a4ac <tcp_input+0x724>)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a268:	4b91      	ldr	r3, [pc, #580]	@ (800a4b0 <tcp_input+0x728>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a8f      	ldr	r2, [pc, #572]	@ (800a4ac <tcp_input+0x724>)
 800a26e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a270:	4b90      	ldr	r3, [pc, #576]	@ (800a4b4 <tcp_input+0x72c>)
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a276:	4b90      	ldr	r3, [pc, #576]	@ (800a4b8 <tcp_input+0x730>)
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a27c:	4b8f      	ldr	r3, [pc, #572]	@ (800a4bc <tcp_input+0x734>)
 800a27e:	2200      	movs	r2, #0
 800a280:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a282:	4b8f      	ldr	r3, [pc, #572]	@ (800a4c0 <tcp_input+0x738>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d006      	beq.n	800a29c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7b5b      	ldrb	r3, [r3, #13]
 800a292:	f043 0301 	orr.w	r3, r3, #1
 800a296:	b2da      	uxtb	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d017      	beq.n	800a2d4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a2a4:	69f8      	ldr	r0, [r7, #28]
 800a2a6:	f7ff f929 	bl	80094fc <tcp_process_refused_data>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f113 0f0d 	cmn.w	r3, #13
 800a2b0:	d007      	beq.n	800a2c2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00c      	beq.n	800a2d4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a2ba:	4b82      	ldr	r3, [pc, #520]	@ (800a4c4 <tcp_input+0x73c>)
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d008      	beq.n	800a2d4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f040 80e3 	bne.w	800a492 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a2cc:	69f8      	ldr	r0, [r7, #28]
 800a2ce:	f003 f9c9 	bl	800d664 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a2d2:	e0de      	b.n	800a492 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a2d4:	4a7c      	ldr	r2, [pc, #496]	@ (800a4c8 <tcp_input+0x740>)
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a2da:	69f8      	ldr	r0, [r7, #28]
 800a2dc:	f000 fb18 	bl	800a910 <tcp_process>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a2e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2e8:	f113 0f0d 	cmn.w	r3, #13
 800a2ec:	f000 80d3 	beq.w	800a496 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a2f0:	4b71      	ldr	r3, [pc, #452]	@ (800a4b8 <tcp_input+0x730>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d015      	beq.n	800a328 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a302:	2b00      	cmp	r3, #0
 800a304:	d008      	beq.n	800a318 <tcp_input+0x590>
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	6912      	ldr	r2, [r2, #16]
 800a310:	f06f 010d 	mvn.w	r1, #13
 800a314:	4610      	mov	r0, r2
 800a316:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a318:	69f9      	ldr	r1, [r7, #28]
 800a31a:	486c      	ldr	r0, [pc, #432]	@ (800a4cc <tcp_input+0x744>)
 800a31c:	f7ff fbbc 	bl	8009a98 <tcp_pcb_remove>
        tcp_free(pcb);
 800a320:	69f8      	ldr	r0, [r7, #28]
 800a322:	f7fe f9a7 	bl	8008674 <tcp_free>
 800a326:	e0da      	b.n	800a4de <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a32c:	4b63      	ldr	r3, [pc, #396]	@ (800a4bc <tcp_input+0x734>)
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01d      	beq.n	800a370 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a334:	4b61      	ldr	r3, [pc, #388]	@ (800a4bc <tcp_input+0x734>)
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00a      	beq.n	800a35a <tcp_input+0x5d2>
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	6910      	ldr	r0, [r2, #16]
 800a34e:	89fa      	ldrh	r2, [r7, #14]
 800a350:	69f9      	ldr	r1, [r7, #28]
 800a352:	4798      	blx	r3
 800a354:	4603      	mov	r3, r0
 800a356:	74fb      	strb	r3, [r7, #19]
 800a358:	e001      	b.n	800a35e <tcp_input+0x5d6>
 800a35a:	2300      	movs	r3, #0
 800a35c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a35e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a362:	f113 0f0d 	cmn.w	r3, #13
 800a366:	f000 8098 	beq.w	800a49a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a36a:	4b54      	ldr	r3, [pc, #336]	@ (800a4bc <tcp_input+0x734>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a370:	69f8      	ldr	r0, [r7, #28]
 800a372:	f000 f915 	bl	800a5a0 <tcp_input_delayed_close>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f040 8090 	bne.w	800a49e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a37e:	4b4d      	ldr	r3, [pc, #308]	@ (800a4b4 <tcp_input+0x72c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d041      	beq.n	800a40a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d006      	beq.n	800a39c <tcp_input+0x614>
 800a38e:	4b50      	ldr	r3, [pc, #320]	@ (800a4d0 <tcp_input+0x748>)
 800a390:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a394:	494f      	ldr	r1, [pc, #316]	@ (800a4d4 <tcp_input+0x74c>)
 800a396:	4850      	ldr	r0, [pc, #320]	@ (800a4d8 <tcp_input+0x750>)
 800a398:	f008 fcae 	bl	8012cf8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	8b5b      	ldrh	r3, [r3, #26]
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a3a8:	4b42      	ldr	r3, [pc, #264]	@ (800a4b4 <tcp_input+0x72c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd fd57 	bl	8007e60 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a3b2:	69f8      	ldr	r0, [r7, #28]
 800a3b4:	f7fe fc46 	bl	8008c44 <tcp_abort>
            goto aborted;
 800a3b8:	e091      	b.n	800a4de <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00c      	beq.n	800a3de <tcp_input+0x656>
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	6918      	ldr	r0, [r3, #16]
 800a3ce:	4b39      	ldr	r3, [pc, #228]	@ (800a4b4 <tcp_input+0x72c>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	69f9      	ldr	r1, [r7, #28]
 800a3d6:	47a0      	blx	r4
 800a3d8:	4603      	mov	r3, r0
 800a3da:	74fb      	strb	r3, [r7, #19]
 800a3dc:	e008      	b.n	800a3f0 <tcp_input+0x668>
 800a3de:	4b35      	ldr	r3, [pc, #212]	@ (800a4b4 <tcp_input+0x72c>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	69f9      	ldr	r1, [r7, #28]
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7ff f95e 	bl	80096a8 <tcp_recv_null>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a3f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3f4:	f113 0f0d 	cmn.w	r3, #13
 800a3f8:	d053      	beq.n	800a4a2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a3fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a402:	4b2c      	ldr	r3, [pc, #176]	@ (800a4b4 <tcp_input+0x72c>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a40a:	4b2b      	ldr	r3, [pc, #172]	@ (800a4b8 <tcp_input+0x730>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	f003 0320 	and.w	r3, r3, #32
 800a412:	2b00      	cmp	r3, #0
 800a414:	d030      	beq.n	800a478 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a422:	7b5a      	ldrb	r2, [r3, #13]
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a428:	f042 0220 	orr.w	r2, r2, #32
 800a42c:	b2d2      	uxtb	r2, r2
 800a42e:	735a      	strb	r2, [r3, #13]
 800a430:	e022      	b.n	800a478 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a436:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a43a:	d005      	beq.n	800a448 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a440:	3301      	adds	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <tcp_input+0x6e2>
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	6918      	ldr	r0, [r3, #16]
 800a45c:	2300      	movs	r3, #0
 800a45e:	2200      	movs	r2, #0
 800a460:	69f9      	ldr	r1, [r7, #28]
 800a462:	47a0      	blx	r4
 800a464:	4603      	mov	r3, r0
 800a466:	74fb      	strb	r3, [r7, #19]
 800a468:	e001      	b.n	800a46e <tcp_input+0x6e6>
 800a46a:	2300      	movs	r3, #0
 800a46c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a46e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a472:	f113 0f0d 	cmn.w	r3, #13
 800a476:	d016      	beq.n	800a4a6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a478:	4b13      	ldr	r3, [pc, #76]	@ (800a4c8 <tcp_input+0x740>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a47e:	69f8      	ldr	r0, [r7, #28]
 800a480:	f000 f88e 	bl	800a5a0 <tcp_input_delayed_close>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d128      	bne.n	800a4dc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a48a:	69f8      	ldr	r0, [r7, #28]
 800a48c:	f002 fac2 	bl	800ca14 <tcp_output>
 800a490:	e025      	b.n	800a4de <tcp_input+0x756>
        goto aborted;
 800a492:	bf00      	nop
 800a494:	e023      	b.n	800a4de <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a496:	bf00      	nop
 800a498:	e021      	b.n	800a4de <tcp_input+0x756>
              goto aborted;
 800a49a:	bf00      	nop
 800a49c:	e01f      	b.n	800a4de <tcp_input+0x756>
          goto aborted;
 800a49e:	bf00      	nop
 800a4a0:	e01d      	b.n	800a4de <tcp_input+0x756>
            goto aborted;
 800a4a2:	bf00      	nop
 800a4a4:	e01b      	b.n	800a4de <tcp_input+0x756>
              goto aborted;
 800a4a6:	bf00      	nop
 800a4a8:	e019      	b.n	800a4de <tcp_input+0x756>
 800a4aa:	bf00      	nop
 800a4ac:	200088c8 	.word	0x200088c8
 800a4b0:	200088d8 	.word	0x200088d8
 800a4b4:	200088f8 	.word	0x200088f8
 800a4b8:	200088f5 	.word	0x200088f5
 800a4bc:	200088f0 	.word	0x200088f0
 800a4c0:	200088f4 	.word	0x200088f4
 800a4c4:	200088f2 	.word	0x200088f2
 800a4c8:	200088fc 	.word	0x200088fc
 800a4cc:	200088bc 	.word	0x200088bc
 800a4d0:	08014e04 	.word	0x08014e04
 800a4d4:	08014fb8 	.word	0x08014fb8
 800a4d8:	08014e50 	.word	0x08014e50
          goto aborted;
 800a4dc:	bf00      	nop
    tcp_input_pcb = NULL;
 800a4de:	4b27      	ldr	r3, [pc, #156]	@ (800a57c <tcp_input+0x7f4>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a4e4:	4b26      	ldr	r3, [pc, #152]	@ (800a580 <tcp_input+0x7f8>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a4ea:	4b26      	ldr	r3, [pc, #152]	@ (800a584 <tcp_input+0x7fc>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d03f      	beq.n	800a572 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a4f2:	4b24      	ldr	r3, [pc, #144]	@ (800a584 <tcp_input+0x7fc>)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fd fcb2 	bl	8007e60 <pbuf_free>
      inseg.p = NULL;
 800a4fc:	4b21      	ldr	r3, [pc, #132]	@ (800a584 <tcp_input+0x7fc>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a502:	e036      	b.n	800a572 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a504:	4b20      	ldr	r3, [pc, #128]	@ (800a588 <tcp_input+0x800>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	899b      	ldrh	r3, [r3, #12]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fb fd09 	bl	8005f24 <lwip_htons>
 800a512:	4603      	mov	r3, r0
 800a514:	b2db      	uxtb	r3, r3
 800a516:	f003 0304 	and.w	r3, r3, #4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d118      	bne.n	800a550 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a51e:	4b1b      	ldr	r3, [pc, #108]	@ (800a58c <tcp_input+0x804>)
 800a520:	6819      	ldr	r1, [r3, #0]
 800a522:	4b1b      	ldr	r3, [pc, #108]	@ (800a590 <tcp_input+0x808>)
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	4b1a      	ldr	r3, [pc, #104]	@ (800a594 <tcp_input+0x80c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a52e:	4b16      	ldr	r3, [pc, #88]	@ (800a588 <tcp_input+0x800>)
 800a530:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a532:	885b      	ldrh	r3, [r3, #2]
 800a534:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a536:	4a14      	ldr	r2, [pc, #80]	@ (800a588 <tcp_input+0x800>)
 800a538:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a53a:	8812      	ldrh	r2, [r2, #0]
 800a53c:	b292      	uxth	r2, r2
 800a53e:	9202      	str	r2, [sp, #8]
 800a540:	9301      	str	r3, [sp, #4]
 800a542:	4b15      	ldr	r3, [pc, #84]	@ (800a598 <tcp_input+0x810>)
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	4b15      	ldr	r3, [pc, #84]	@ (800a59c <tcp_input+0x814>)
 800a548:	4602      	mov	r2, r0
 800a54a:	2000      	movs	r0, #0
 800a54c:	f003 f838 	bl	800d5c0 <tcp_rst>
    pbuf_free(p);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7fd fc85 	bl	8007e60 <pbuf_free>
  return;
 800a556:	e00c      	b.n	800a572 <tcp_input+0x7ea>
    goto dropped;
 800a558:	bf00      	nop
 800a55a:	e006      	b.n	800a56a <tcp_input+0x7e2>
    goto dropped;
 800a55c:	bf00      	nop
 800a55e:	e004      	b.n	800a56a <tcp_input+0x7e2>
    goto dropped;
 800a560:	bf00      	nop
 800a562:	e002      	b.n	800a56a <tcp_input+0x7e2>
      goto dropped;
 800a564:	bf00      	nop
 800a566:	e000      	b.n	800a56a <tcp_input+0x7e2>
      goto dropped;
 800a568:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7fd fc78 	bl	8007e60 <pbuf_free>
 800a570:	e000      	b.n	800a574 <tcp_input+0x7ec>
  return;
 800a572:	bf00      	nop
}
 800a574:	3724      	adds	r7, #36	@ 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd90      	pop	{r4, r7, pc}
 800a57a:	bf00      	nop
 800a57c:	200088fc 	.word	0x200088fc
 800a580:	200088f8 	.word	0x200088f8
 800a584:	200088c8 	.word	0x200088c8
 800a588:	200088d8 	.word	0x200088d8
 800a58c:	200088ec 	.word	0x200088ec
 800a590:	200088f2 	.word	0x200088f2
 800a594:	200088e8 	.word	0x200088e8
 800a598:	20005320 	.word	0x20005320
 800a59c:	20005324 	.word	0x20005324

0800a5a0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <tcp_input_delayed_close+0x1c>
 800a5ae:	4b17      	ldr	r3, [pc, #92]	@ (800a60c <tcp_input_delayed_close+0x6c>)
 800a5b0:	f240 225a 	movw	r2, #602	@ 0x25a
 800a5b4:	4916      	ldr	r1, [pc, #88]	@ (800a610 <tcp_input_delayed_close+0x70>)
 800a5b6:	4817      	ldr	r0, [pc, #92]	@ (800a614 <tcp_input_delayed_close+0x74>)
 800a5b8:	f008 fb9e 	bl	8012cf8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a5bc:	4b16      	ldr	r3, [pc, #88]	@ (800a618 <tcp_input_delayed_close+0x78>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01c      	beq.n	800a602 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	8b5b      	ldrh	r3, [r3, #26]
 800a5cc:	f003 0310 	and.w	r3, r3, #16
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10d      	bne.n	800a5f0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d008      	beq.n	800a5f0 <tcp_input_delayed_close+0x50>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6912      	ldr	r2, [r2, #16]
 800a5e8:	f06f 010e 	mvn.w	r1, #14
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	480a      	ldr	r0, [pc, #40]	@ (800a61c <tcp_input_delayed_close+0x7c>)
 800a5f4:	f7ff fa50 	bl	8009a98 <tcp_pcb_remove>
    tcp_free(pcb);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7fe f83b 	bl	8008674 <tcp_free>
    return 1;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e000      	b.n	800a604 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	08014e04 	.word	0x08014e04
 800a610:	08014fd4 	.word	0x08014fd4
 800a614:	08014e50 	.word	0x08014e50
 800a618:	200088f5 	.word	0x200088f5
 800a61c:	200088bc 	.word	0x200088bc

0800a620 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b08b      	sub	sp, #44	@ 0x2c
 800a624:	af04      	add	r7, sp, #16
 800a626:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a628:	4b6f      	ldr	r3, [pc, #444]	@ (800a7e8 <tcp_listen_input+0x1c8>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	f040 80d2 	bne.w	800a7da <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <tcp_listen_input+0x2a>
 800a63c:	4b6b      	ldr	r3, [pc, #428]	@ (800a7ec <tcp_listen_input+0x1cc>)
 800a63e:	f240 2281 	movw	r2, #641	@ 0x281
 800a642:	496b      	ldr	r1, [pc, #428]	@ (800a7f0 <tcp_listen_input+0x1d0>)
 800a644:	486b      	ldr	r0, [pc, #428]	@ (800a7f4 <tcp_listen_input+0x1d4>)
 800a646:	f008 fb57 	bl	8012cf8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a64a:	4b67      	ldr	r3, [pc, #412]	@ (800a7e8 <tcp_listen_input+0x1c8>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	f003 0310 	and.w	r3, r3, #16
 800a652:	2b00      	cmp	r3, #0
 800a654:	d019      	beq.n	800a68a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a656:	4b68      	ldr	r3, [pc, #416]	@ (800a7f8 <tcp_listen_input+0x1d8>)
 800a658:	6819      	ldr	r1, [r3, #0]
 800a65a:	4b68      	ldr	r3, [pc, #416]	@ (800a7fc <tcp_listen_input+0x1dc>)
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	4b67      	ldr	r3, [pc, #412]	@ (800a800 <tcp_listen_input+0x1e0>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a666:	4b67      	ldr	r3, [pc, #412]	@ (800a804 <tcp_listen_input+0x1e4>)
 800a668:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a66a:	885b      	ldrh	r3, [r3, #2]
 800a66c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a66e:	4a65      	ldr	r2, [pc, #404]	@ (800a804 <tcp_listen_input+0x1e4>)
 800a670:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a672:	8812      	ldrh	r2, [r2, #0]
 800a674:	b292      	uxth	r2, r2
 800a676:	9202      	str	r2, [sp, #8]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	4b63      	ldr	r3, [pc, #396]	@ (800a808 <tcp_listen_input+0x1e8>)
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	4b63      	ldr	r3, [pc, #396]	@ (800a80c <tcp_listen_input+0x1ec>)
 800a680:	4602      	mov	r2, r0
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f002 ff9c 	bl	800d5c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a688:	e0a9      	b.n	800a7de <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a68a:	4b57      	ldr	r3, [pc, #348]	@ (800a7e8 <tcp_listen_input+0x1c8>)
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	f003 0302 	and.w	r3, r3, #2
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 80a3 	beq.w	800a7de <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	7d5b      	ldrb	r3, [r3, #21]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff f927 	bl	80098f0 <tcp_alloc>
 800a6a2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d111      	bne.n	800a6ce <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00a      	beq.n	800a6c8 <tcp_listen_input+0xa8>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	6910      	ldr	r0, [r2, #16]
 800a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a6be:	2100      	movs	r1, #0
 800a6c0:	4798      	blx	r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73bb      	strb	r3, [r7, #14]
      return;
 800a6c6:	e08b      	b.n	800a7e0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a6c8:	23f0      	movs	r3, #240	@ 0xf0
 800a6ca:	73bb      	strb	r3, [r7, #14]
      return;
 800a6cc:	e088      	b.n	800a7e0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a6ce:	4b50      	ldr	r3, [pc, #320]	@ (800a810 <tcp_listen_input+0x1f0>)
 800a6d0:	695a      	ldr	r2, [r3, #20]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a6d6:	4b4e      	ldr	r3, [pc, #312]	@ (800a810 <tcp_listen_input+0x1f0>)
 800a6d8:	691a      	ldr	r2, [r3, #16]
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	8ada      	ldrh	r2, [r3, #22]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a6e6:	4b47      	ldr	r3, [pc, #284]	@ (800a804 <tcp_listen_input+0x1e4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2203      	movs	r2, #3
 800a6f6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a6f8:	4b41      	ldr	r3, [pc, #260]	@ (800a800 <tcp_listen_input+0x1e0>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a70a:	6978      	ldr	r0, [r7, #20]
 800a70c:	f7ff fa58 	bl	8009bc0 <tcp_next_iss>
 800a710:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a72a:	4b35      	ldr	r3, [pc, #212]	@ (800a800 <tcp_listen_input+0x1e0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	1e5a      	subs	r2, r3, #1
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	7a5b      	ldrb	r3, [r3, #9]
 800a746:	f003 030c 	and.w	r3, r3, #12
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7a1a      	ldrb	r2, [r3, #8]
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a758:	4b2e      	ldr	r3, [pc, #184]	@ (800a814 <tcp_listen_input+0x1f4>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	60da      	str	r2, [r3, #12]
 800a760:	4a2c      	ldr	r2, [pc, #176]	@ (800a814 <tcp_listen_input+0x1f4>)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	f003 f8ed 	bl	800d944 <tcp_timer_needed>
 800a76a:	4b2b      	ldr	r3, [pc, #172]	@ (800a818 <tcp_listen_input+0x1f8>)
 800a76c:	2201      	movs	r2, #1
 800a76e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a770:	6978      	ldr	r0, [r7, #20]
 800a772:	f001 fd8b 	bl	800c28c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a776:	4b23      	ldr	r3, [pc, #140]	@ (800a804 <tcp_listen_input+0x1e4>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	89db      	ldrh	r3, [r3, #14]
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	3304      	adds	r3, #4
 800a798:	4618      	mov	r0, r3
 800a79a:	f006 ff2d 	bl	80115f8 <ip4_route>
 800a79e:	4601      	mov	r1, r0
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f7ff fa30 	bl	8009c0c <tcp_eff_send_mss_netif>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a7b4:	2112      	movs	r1, #18
 800a7b6:	6978      	ldr	r0, [r7, #20]
 800a7b8:	f002 f83e 	bl	800c838 <tcp_enqueue_flags>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	6978      	ldr	r0, [r7, #20]
 800a7cc:	f7fe f97c 	bl	8008ac8 <tcp_abandon>
      return;
 800a7d0:	e006      	b.n	800a7e0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a7d2:	6978      	ldr	r0, [r7, #20]
 800a7d4:	f002 f91e 	bl	800ca14 <tcp_output>
  return;
 800a7d8:	e001      	b.n	800a7de <tcp_listen_input+0x1be>
    return;
 800a7da:	bf00      	nop
 800a7dc:	e000      	b.n	800a7e0 <tcp_listen_input+0x1c0>
  return;
 800a7de:	bf00      	nop
}
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd90      	pop	{r4, r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	200088f4 	.word	0x200088f4
 800a7ec:	08014e04 	.word	0x08014e04
 800a7f0:	08014ffc 	.word	0x08014ffc
 800a7f4:	08014e50 	.word	0x08014e50
 800a7f8:	200088ec 	.word	0x200088ec
 800a7fc:	200088f2 	.word	0x200088f2
 800a800:	200088e8 	.word	0x200088e8
 800a804:	200088d8 	.word	0x200088d8
 800a808:	20005320 	.word	0x20005320
 800a80c:	20005324 	.word	0x20005324
 800a810:	20005310 	.word	0x20005310
 800a814:	200088bc 	.word	0x200088bc
 800a818:	200088c4 	.word	0x200088c4

0800a81c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af04      	add	r7, sp, #16
 800a822:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a824:	4b2f      	ldr	r3, [pc, #188]	@ (800a8e4 <tcp_timewait_input+0xc8>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d153      	bne.n	800a8d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d106      	bne.n	800a844 <tcp_timewait_input+0x28>
 800a836:	4b2c      	ldr	r3, [pc, #176]	@ (800a8e8 <tcp_timewait_input+0xcc>)
 800a838:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a83c:	492b      	ldr	r1, [pc, #172]	@ (800a8ec <tcp_timewait_input+0xd0>)
 800a83e:	482c      	ldr	r0, [pc, #176]	@ (800a8f0 <tcp_timewait_input+0xd4>)
 800a840:	f008 fa5a 	bl	8012cf8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a844:	4b27      	ldr	r3, [pc, #156]	@ (800a8e4 <tcp_timewait_input+0xc8>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d02a      	beq.n	800a8a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a850:	4b28      	ldr	r3, [pc, #160]	@ (800a8f4 <tcp_timewait_input+0xd8>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	db2d      	blt.n	800a8ba <tcp_timewait_input+0x9e>
 800a85e:	4b25      	ldr	r3, [pc, #148]	@ (800a8f4 <tcp_timewait_input+0xd8>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a86a:	440b      	add	r3, r1
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	dc23      	bgt.n	800a8ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a872:	4b21      	ldr	r3, [pc, #132]	@ (800a8f8 <tcp_timewait_input+0xdc>)
 800a874:	6819      	ldr	r1, [r3, #0]
 800a876:	4b21      	ldr	r3, [pc, #132]	@ (800a8fc <tcp_timewait_input+0xe0>)
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	461a      	mov	r2, r3
 800a87c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8f4 <tcp_timewait_input+0xd8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a882:	4b1f      	ldr	r3, [pc, #124]	@ (800a900 <tcp_timewait_input+0xe4>)
 800a884:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a886:	885b      	ldrh	r3, [r3, #2]
 800a888:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a88a:	4a1d      	ldr	r2, [pc, #116]	@ (800a900 <tcp_timewait_input+0xe4>)
 800a88c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a88e:	8812      	ldrh	r2, [r2, #0]
 800a890:	b292      	uxth	r2, r2
 800a892:	9202      	str	r2, [sp, #8]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <tcp_timewait_input+0xe8>)
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	4b1b      	ldr	r3, [pc, #108]	@ (800a908 <tcp_timewait_input+0xec>)
 800a89c:	4602      	mov	r2, r0
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f002 fe8e 	bl	800d5c0 <tcp_rst>
      return;
 800a8a4:	e01b      	b.n	800a8de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e4 <tcp_timewait_input+0xc8>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a8b2:	4b16      	ldr	r3, [pc, #88]	@ (800a90c <tcp_timewait_input+0xf0>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a8ba:	4b10      	ldr	r3, [pc, #64]	@ (800a8fc <tcp_timewait_input+0xe0>)
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00c      	beq.n	800a8dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	8b5b      	ldrh	r3, [r3, #26]
 800a8c6:	f043 0302 	orr.w	r3, r3, #2
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f002 f89f 	bl	800ca14 <tcp_output>
  }
  return;
 800a8d6:	e001      	b.n	800a8dc <tcp_timewait_input+0xc0>
    return;
 800a8d8:	bf00      	nop
 800a8da:	e000      	b.n	800a8de <tcp_timewait_input+0xc2>
  return;
 800a8dc:	bf00      	nop
}
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	200088f4 	.word	0x200088f4
 800a8e8:	08014e04 	.word	0x08014e04
 800a8ec:	0801501c 	.word	0x0801501c
 800a8f0:	08014e50 	.word	0x08014e50
 800a8f4:	200088e8 	.word	0x200088e8
 800a8f8:	200088ec 	.word	0x200088ec
 800a8fc:	200088f2 	.word	0x200088f2
 800a900:	200088d8 	.word	0x200088d8
 800a904:	20005320 	.word	0x20005320
 800a908:	20005324 	.word	0x20005324
 800a90c:	200088b0 	.word	0x200088b0

0800a910 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a910:	b590      	push	{r4, r7, lr}
 800a912:	b08d      	sub	sp, #52	@ 0x34
 800a914:	af04      	add	r7, sp, #16
 800a916:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d106      	bne.n	800a934 <tcp_process+0x24>
 800a926:	4b9d      	ldr	r3, [pc, #628]	@ (800ab9c <tcp_process+0x28c>)
 800a928:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a92c:	499c      	ldr	r1, [pc, #624]	@ (800aba0 <tcp_process+0x290>)
 800a92e:	489d      	ldr	r0, [pc, #628]	@ (800aba4 <tcp_process+0x294>)
 800a930:	f008 f9e2 	bl	8012cf8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a934:	4b9c      	ldr	r3, [pc, #624]	@ (800aba8 <tcp_process+0x298>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d04e      	beq.n	800a9de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	7d1b      	ldrb	r3, [r3, #20]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d108      	bne.n	800a95a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a94c:	4b97      	ldr	r3, [pc, #604]	@ (800abac <tcp_process+0x29c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d123      	bne.n	800a99c <tcp_process+0x8c>
        acceptable = 1;
 800a954:	2301      	movs	r3, #1
 800a956:	76fb      	strb	r3, [r7, #27]
 800a958:	e020      	b.n	800a99c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a95e:	4b94      	ldr	r3, [pc, #592]	@ (800abb0 <tcp_process+0x2a0>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	429a      	cmp	r2, r3
 800a964:	d102      	bne.n	800a96c <tcp_process+0x5c>
        acceptable = 1;
 800a966:	2301      	movs	r3, #1
 800a968:	76fb      	strb	r3, [r7, #27]
 800a96a:	e017      	b.n	800a99c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a96c:	4b90      	ldr	r3, [pc, #576]	@ (800abb0 <tcp_process+0x2a0>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	db10      	blt.n	800a99c <tcp_process+0x8c>
 800a97a:	4b8d      	ldr	r3, [pc, #564]	@ (800abb0 <tcp_process+0x2a0>)
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a986:	440b      	add	r3, r1
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	dc06      	bgt.n	800a99c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	8b5b      	ldrh	r3, [r3, #26]
 800a992:	f043 0302 	orr.w	r3, r3, #2
 800a996:	b29a      	uxth	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a99c:	7efb      	ldrb	r3, [r7, #27]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d01b      	beq.n	800a9da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	7d1b      	ldrb	r3, [r3, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d106      	bne.n	800a9b8 <tcp_process+0xa8>
 800a9aa:	4b7c      	ldr	r3, [pc, #496]	@ (800ab9c <tcp_process+0x28c>)
 800a9ac:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a9b0:	4980      	ldr	r1, [pc, #512]	@ (800abb4 <tcp_process+0x2a4>)
 800a9b2:	487c      	ldr	r0, [pc, #496]	@ (800aba4 <tcp_process+0x294>)
 800a9b4:	f008 f9a0 	bl	8012cf8 <iprintf>
      recv_flags |= TF_RESET;
 800a9b8:	4b7f      	ldr	r3, [pc, #508]	@ (800abb8 <tcp_process+0x2a8>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	f043 0308 	orr.w	r3, r3, #8
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	4b7d      	ldr	r3, [pc, #500]	@ (800abb8 <tcp_process+0x2a8>)
 800a9c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	8b5b      	ldrh	r3, [r3, #26]
 800a9ca:	f023 0301 	bic.w	r3, r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a9d4:	f06f 030d 	mvn.w	r3, #13
 800a9d8:	e37a      	b.n	800b0d0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e378      	b.n	800b0d0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a9de:	4b72      	ldr	r3, [pc, #456]	@ (800aba8 <tcp_process+0x298>)
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d010      	beq.n	800aa0c <tcp_process+0xfc>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	7d1b      	ldrb	r3, [r3, #20]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d00c      	beq.n	800aa0c <tcp_process+0xfc>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7d1b      	ldrb	r3, [r3, #20]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d008      	beq.n	800aa0c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	8b5b      	ldrh	r3, [r3, #26]
 800a9fe:	f043 0302 	orr.w	r3, r3, #2
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e361      	b.n	800b0d0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8b5b      	ldrh	r3, [r3, #26]
 800aa10:	f003 0310 	and.w	r3, r3, #16
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800aa18:	4b68      	ldr	r3, [pc, #416]	@ (800abbc <tcp_process+0x2ac>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f001 fc2b 	bl	800c28c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	7d1b      	ldrb	r3, [r3, #20]
 800aa3a:	3b02      	subs	r3, #2
 800aa3c:	2b07      	cmp	r3, #7
 800aa3e:	f200 8337 	bhi.w	800b0b0 <tcp_process+0x7a0>
 800aa42:	a201      	add	r2, pc, #4	@ (adr r2, 800aa48 <tcp_process+0x138>)
 800aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa48:	0800aa69 	.word	0x0800aa69
 800aa4c:	0800ac99 	.word	0x0800ac99
 800aa50:	0800ae11 	.word	0x0800ae11
 800aa54:	0800ae3b 	.word	0x0800ae3b
 800aa58:	0800af5f 	.word	0x0800af5f
 800aa5c:	0800ae11 	.word	0x0800ae11
 800aa60:	0800afeb 	.word	0x0800afeb
 800aa64:	0800b07b 	.word	0x0800b07b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aa68:	4b4f      	ldr	r3, [pc, #316]	@ (800aba8 <tcp_process+0x298>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f003 0310 	and.w	r3, r3, #16
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 80e4 	beq.w	800ac3e <tcp_process+0x32e>
 800aa76:	4b4c      	ldr	r3, [pc, #304]	@ (800aba8 <tcp_process+0x298>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 80dd 	beq.w	800ac3e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	4b48      	ldr	r3, [pc, #288]	@ (800abac <tcp_process+0x29c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	f040 80d5 	bne.w	800ac3e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800aa94:	4b46      	ldr	r3, [pc, #280]	@ (800abb0 <tcp_process+0x2a0>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800aaa6:	4b41      	ldr	r3, [pc, #260]	@ (800abac <tcp_process+0x29c>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800aaae:	4b44      	ldr	r3, [pc, #272]	@ (800abc0 <tcp_process+0x2b0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	89db      	ldrh	r3, [r3, #14]
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800aac8:	4b39      	ldr	r3, [pc, #228]	@ (800abb0 <tcp_process+0x2a0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	1e5a      	subs	r2, r3, #1
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2204      	movs	r2, #4
 800aad6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	4618      	mov	r0, r3
 800aae2:	f006 fd89 	bl	80115f8 <ip4_route>
 800aae6:	4601      	mov	r1, r0
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3304      	adds	r3, #4
 800aaec:	461a      	mov	r2, r3
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f7ff f88c 	bl	8009c0c <tcp_eff_send_mss_netif>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab00:	009a      	lsls	r2, r3, #2
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ab0c:	428b      	cmp	r3, r1
 800ab0e:	bf38      	it	cc
 800ab10:	460b      	movcc	r3, r1
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d204      	bcs.n	800ab20 <tcp_process+0x210>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	e00d      	b.n	800ab3c <tcp_process+0x22c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d904      	bls.n	800ab38 <tcp_process+0x228>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	e001      	b.n	800ab3c <tcp_process+0x22c>
 800ab38:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d106      	bne.n	800ab5a <tcp_process+0x24a>
 800ab4c:	4b13      	ldr	r3, [pc, #76]	@ (800ab9c <tcp_process+0x28c>)
 800ab4e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ab52:	491c      	ldr	r1, [pc, #112]	@ (800abc4 <tcp_process+0x2b4>)
 800ab54:	4813      	ldr	r0, [pc, #76]	@ (800aba4 <tcp_process+0x294>)
 800ab56:	f008 f8cf 	bl	8012cf8 <iprintf>
        --pcb->snd_queuelen;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab6e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d12a      	bne.n	800abcc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab7a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d106      	bne.n	800ab90 <tcp_process+0x280>
 800ab82:	4b06      	ldr	r3, [pc, #24]	@ (800ab9c <tcp_process+0x28c>)
 800ab84:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800ab88:	490f      	ldr	r1, [pc, #60]	@ (800abc8 <tcp_process+0x2b8>)
 800ab8a:	4806      	ldr	r0, [pc, #24]	@ (800aba4 <tcp_process+0x294>)
 800ab8c:	f008 f8b4 	bl	8012cf8 <iprintf>
          pcb->unsent = rseg->next;
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ab98:	e01c      	b.n	800abd4 <tcp_process+0x2c4>
 800ab9a:	bf00      	nop
 800ab9c:	08014e04 	.word	0x08014e04
 800aba0:	0801503c 	.word	0x0801503c
 800aba4:	08014e50 	.word	0x08014e50
 800aba8:	200088f4 	.word	0x200088f4
 800abac:	200088ec 	.word	0x200088ec
 800abb0:	200088e8 	.word	0x200088e8
 800abb4:	08015058 	.word	0x08015058
 800abb8:	200088f5 	.word	0x200088f5
 800abbc:	200088b0 	.word	0x200088b0
 800abc0:	200088d8 	.word	0x200088d8
 800abc4:	08015078 	.word	0x08015078
 800abc8:	08015090 	.word	0x08015090
        } else {
          pcb->unacked = rseg->next;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800abd4:	69f8      	ldr	r0, [r7, #28]
 800abd6:	f7fe fd22 	bl	800961e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d104      	bne.n	800abec <tcp_process+0x2dc>
          pcb->rtime = -1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800abe8:	861a      	strh	r2, [r3, #48]	@ 0x30
 800abea:	e006      	b.n	800abfa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00a      	beq.n	800ac1a <tcp_process+0x30a>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	6910      	ldr	r0, [r2, #16]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	4798      	blx	r3
 800ac14:	4603      	mov	r3, r0
 800ac16:	76bb      	strb	r3, [r7, #26]
 800ac18:	e001      	b.n	800ac1e <tcp_process+0x30e>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ac1e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ac22:	f113 0f0d 	cmn.w	r3, #13
 800ac26:	d102      	bne.n	800ac2e <tcp_process+0x31e>
          return ERR_ABRT;
 800ac28:	f06f 030c 	mvn.w	r3, #12
 800ac2c:	e250      	b.n	800b0d0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	8b5b      	ldrh	r3, [r3, #26]
 800ac32:	f043 0302 	orr.w	r3, r3, #2
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ac3c:	e23a      	b.n	800b0b4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ac3e:	4b98      	ldr	r3, [pc, #608]	@ (800aea0 <tcp_process+0x590>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	f003 0310 	and.w	r3, r3, #16
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f000 8234 	beq.w	800b0b4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac4c:	4b95      	ldr	r3, [pc, #596]	@ (800aea4 <tcp_process+0x594>)
 800ac4e:	6819      	ldr	r1, [r3, #0]
 800ac50:	4b95      	ldr	r3, [pc, #596]	@ (800aea8 <tcp_process+0x598>)
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	4b95      	ldr	r3, [pc, #596]	@ (800aeac <tcp_process+0x59c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac5c:	4b94      	ldr	r3, [pc, #592]	@ (800aeb0 <tcp_process+0x5a0>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac60:	885b      	ldrh	r3, [r3, #2]
 800ac62:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac64:	4a92      	ldr	r2, [pc, #584]	@ (800aeb0 <tcp_process+0x5a0>)
 800ac66:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac68:	8812      	ldrh	r2, [r2, #0]
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	9202      	str	r2, [sp, #8]
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	4b90      	ldr	r3, [pc, #576]	@ (800aeb4 <tcp_process+0x5a4>)
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4b90      	ldr	r3, [pc, #576]	@ (800aeb8 <tcp_process+0x5a8>)
 800ac76:	4602      	mov	r2, r0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f002 fca1 	bl	800d5c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac84:	2b05      	cmp	r3, #5
 800ac86:	f200 8215 	bhi.w	800b0b4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f002 fa5d 	bl	800d150 <tcp_rexmit_rto>
      break;
 800ac96:	e20d      	b.n	800b0b4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ac98:	4b81      	ldr	r3, [pc, #516]	@ (800aea0 <tcp_process+0x590>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f003 0310 	and.w	r3, r3, #16
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 80a1 	beq.w	800ade8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aca6:	4b7f      	ldr	r3, [pc, #508]	@ (800aea4 <tcp_process+0x594>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	3b01      	subs	r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	db7e      	blt.n	800adb4 <tcp_process+0x4a4>
 800acb6:	4b7b      	ldr	r3, [pc, #492]	@ (800aea4 <tcp_process+0x594>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dc77      	bgt.n	800adb4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2204      	movs	r2, #4
 800acc8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d102      	bne.n	800acd8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800acd2:	23fa      	movs	r3, #250	@ 0xfa
 800acd4:	76bb      	strb	r3, [r7, #26]
 800acd6:	e01d      	b.n	800ad14 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <tcp_process+0x3e0>
 800ace2:	4b76      	ldr	r3, [pc, #472]	@ (800aebc <tcp_process+0x5ac>)
 800ace4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ace8:	4975      	ldr	r1, [pc, #468]	@ (800aec0 <tcp_process+0x5b0>)
 800acea:	4876      	ldr	r0, [pc, #472]	@ (800aec4 <tcp_process+0x5b4>)
 800acec:	f008 f804 	bl	8012cf8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <tcp_process+0x400>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6910      	ldr	r0, [r2, #16]
 800ad04:	2200      	movs	r2, #0
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	4798      	blx	r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	76bb      	strb	r3, [r7, #26]
 800ad0e:	e001      	b.n	800ad14 <tcp_process+0x404>
 800ad10:	23f0      	movs	r3, #240	@ 0xf0
 800ad12:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ad14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ad1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad20:	f113 0f0d 	cmn.w	r3, #13
 800ad24:	d002      	beq.n	800ad2c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7fd ff8c 	bl	8008c44 <tcp_abort>
            }
            return ERR_ABRT;
 800ad2c:	f06f 030c 	mvn.w	r3, #12
 800ad30:	e1ce      	b.n	800b0d0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fae0 	bl	800b2f8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ad38:	4b63      	ldr	r3, [pc, #396]	@ (800aec8 <tcp_process+0x5b8>)
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <tcp_process+0x43c>
            recv_acked--;
 800ad40:	4b61      	ldr	r3, [pc, #388]	@ (800aec8 <tcp_process+0x5b8>)
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	4b5f      	ldr	r3, [pc, #380]	@ (800aec8 <tcp_process+0x5b8>)
 800ad4a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad50:	009a      	lsls	r2, r3, #2
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	bf38      	it	cc
 800ad60:	460b      	movcc	r3, r1
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d204      	bcs.n	800ad70 <tcp_process+0x460>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	e00d      	b.n	800ad8c <tcp_process+0x47c>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d904      	bls.n	800ad88 <tcp_process+0x478>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	e001      	b.n	800ad8c <tcp_process+0x47c>
 800ad88:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ad92:	4b4e      	ldr	r3, [pc, #312]	@ (800aecc <tcp_process+0x5bc>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	f003 0320 	and.w	r3, r3, #32
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d037      	beq.n	800ae0e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	8b5b      	ldrh	r3, [r3, #26]
 800ada2:	f043 0302 	orr.w	r3, r3, #2
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2207      	movs	r2, #7
 800adb0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800adb2:	e02c      	b.n	800ae0e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adb4:	4b3b      	ldr	r3, [pc, #236]	@ (800aea4 <tcp_process+0x594>)
 800adb6:	6819      	ldr	r1, [r3, #0]
 800adb8:	4b3b      	ldr	r3, [pc, #236]	@ (800aea8 <tcp_process+0x598>)
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	461a      	mov	r2, r3
 800adbe:	4b3b      	ldr	r3, [pc, #236]	@ (800aeac <tcp_process+0x59c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adc4:	4b3a      	ldr	r3, [pc, #232]	@ (800aeb0 <tcp_process+0x5a0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adc8:	885b      	ldrh	r3, [r3, #2]
 800adca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adcc:	4a38      	ldr	r2, [pc, #224]	@ (800aeb0 <tcp_process+0x5a0>)
 800adce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800add0:	8812      	ldrh	r2, [r2, #0]
 800add2:	b292      	uxth	r2, r2
 800add4:	9202      	str	r2, [sp, #8]
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	4b36      	ldr	r3, [pc, #216]	@ (800aeb4 <tcp_process+0x5a4>)
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	4b36      	ldr	r3, [pc, #216]	@ (800aeb8 <tcp_process+0x5a8>)
 800adde:	4602      	mov	r2, r0
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f002 fbed 	bl	800d5c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ade6:	e167      	b.n	800b0b8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ade8:	4b2d      	ldr	r3, [pc, #180]	@ (800aea0 <tcp_process+0x590>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 8161 	beq.w	800b0b8 <tcp_process+0x7a8>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfa:	1e5a      	subs	r2, r3, #1
 800adfc:	4b2b      	ldr	r3, [pc, #172]	@ (800aeac <tcp_process+0x59c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	f040 8159 	bne.w	800b0b8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f002 f9c4 	bl	800d194 <tcp_rexmit>
      break;
 800ae0c:	e154      	b.n	800b0b8 <tcp_process+0x7a8>
 800ae0e:	e153      	b.n	800b0b8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa71 	bl	800b2f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ae16:	4b2d      	ldr	r3, [pc, #180]	@ (800aecc <tcp_process+0x5bc>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f003 0320 	and.w	r3, r3, #32
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 814c 	beq.w	800b0bc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	8b5b      	ldrh	r3, [r3, #26]
 800ae28:	f043 0302 	orr.w	r3, r3, #2
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2207      	movs	r2, #7
 800ae36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ae38:	e140      	b.n	800b0bc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fa5c 	bl	800b2f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ae40:	4b22      	ldr	r3, [pc, #136]	@ (800aecc <tcp_process+0x5bc>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 0320 	and.w	r3, r3, #32
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d071      	beq.n	800af30 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae4c:	4b14      	ldr	r3, [pc, #80]	@ (800aea0 <tcp_process+0x590>)
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d060      	beq.n	800af1a <tcp_process+0x60a>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae5c:	4b11      	ldr	r3, [pc, #68]	@ (800aea4 <tcp_process+0x594>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d15a      	bne.n	800af1a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d156      	bne.n	800af1a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8b5b      	ldrh	r3, [r3, #26]
 800ae70:	f043 0302 	orr.w	r3, r3, #2
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7fe fdbc 	bl	80099f8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ae80:	4b13      	ldr	r3, [pc, #76]	@ (800aed0 <tcp_process+0x5c0>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d105      	bne.n	800ae96 <tcp_process+0x586>
 800ae8a:	4b11      	ldr	r3, [pc, #68]	@ (800aed0 <tcp_process+0x5c0>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4a0f      	ldr	r2, [pc, #60]	@ (800aed0 <tcp_process+0x5c0>)
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	e02e      	b.n	800aef4 <tcp_process+0x5e4>
 800ae96:	4b0e      	ldr	r3, [pc, #56]	@ (800aed0 <tcp_process+0x5c0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e027      	b.n	800aeee <tcp_process+0x5de>
 800ae9e:	bf00      	nop
 800aea0:	200088f4 	.word	0x200088f4
 800aea4:	200088ec 	.word	0x200088ec
 800aea8:	200088f2 	.word	0x200088f2
 800aeac:	200088e8 	.word	0x200088e8
 800aeb0:	200088d8 	.word	0x200088d8
 800aeb4:	20005320 	.word	0x20005320
 800aeb8:	20005324 	.word	0x20005324
 800aebc:	08014e04 	.word	0x08014e04
 800aec0:	080150a4 	.word	0x080150a4
 800aec4:	08014e50 	.word	0x08014e50
 800aec8:	200088f0 	.word	0x200088f0
 800aecc:	200088f5 	.word	0x200088f5
 800aed0:	200088bc 	.word	0x200088bc
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d104      	bne.n	800aee8 <tcp_process+0x5d8>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68da      	ldr	r2, [r3, #12]
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	60da      	str	r2, [r3, #12]
 800aee6:	e005      	b.n	800aef4 <tcp_process+0x5e4>
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1ef      	bne.n	800aed4 <tcp_process+0x5c4>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	60da      	str	r2, [r3, #12]
 800aefa:	4b77      	ldr	r3, [pc, #476]	@ (800b0d8 <tcp_process+0x7c8>)
 800aefc:	2201      	movs	r2, #1
 800aefe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	220a      	movs	r2, #10
 800af04:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800af06:	4b75      	ldr	r3, [pc, #468]	@ (800b0dc <tcp_process+0x7cc>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60da      	str	r2, [r3, #12]
 800af0e:	4a73      	ldr	r2, [pc, #460]	@ (800b0dc <tcp_process+0x7cc>)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	f002 fd16 	bl	800d944 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800af18:	e0d2      	b.n	800b0c0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8b5b      	ldrh	r3, [r3, #26]
 800af1e:	f043 0302 	orr.w	r3, r3, #2
 800af22:	b29a      	uxth	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2208      	movs	r2, #8
 800af2c:	751a      	strb	r2, [r3, #20]
      break;
 800af2e:	e0c7      	b.n	800b0c0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af30:	4b6b      	ldr	r3, [pc, #428]	@ (800b0e0 <tcp_process+0x7d0>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	f003 0310 	and.w	r3, r3, #16
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 80c1 	beq.w	800b0c0 <tcp_process+0x7b0>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af42:	4b68      	ldr	r3, [pc, #416]	@ (800b0e4 <tcp_process+0x7d4>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	f040 80ba 	bne.w	800b0c0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af50:	2b00      	cmp	r3, #0
 800af52:	f040 80b5 	bne.w	800b0c0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2206      	movs	r2, #6
 800af5a:	751a      	strb	r2, [r3, #20]
      break;
 800af5c:	e0b0      	b.n	800b0c0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f9ca 	bl	800b2f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800af64:	4b60      	ldr	r3, [pc, #384]	@ (800b0e8 <tcp_process+0x7d8>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 80a9 	beq.w	800b0c4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	8b5b      	ldrh	r3, [r3, #26]
 800af76:	f043 0302 	orr.w	r3, r3, #2
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7fe fd39 	bl	80099f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800af86:	4b59      	ldr	r3, [pc, #356]	@ (800b0ec <tcp_process+0x7dc>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d105      	bne.n	800af9c <tcp_process+0x68c>
 800af90:	4b56      	ldr	r3, [pc, #344]	@ (800b0ec <tcp_process+0x7dc>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	4a55      	ldr	r2, [pc, #340]	@ (800b0ec <tcp_process+0x7dc>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	e013      	b.n	800afc4 <tcp_process+0x6b4>
 800af9c:	4b53      	ldr	r3, [pc, #332]	@ (800b0ec <tcp_process+0x7dc>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	613b      	str	r3, [r7, #16]
 800afa2:	e00c      	b.n	800afbe <tcp_process+0x6ae>
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d104      	bne.n	800afb8 <tcp_process+0x6a8>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	60da      	str	r2, [r3, #12]
 800afb6:	e005      	b.n	800afc4 <tcp_process+0x6b4>
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	613b      	str	r3, [r7, #16]
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1ef      	bne.n	800afa4 <tcp_process+0x694>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	60da      	str	r2, [r3, #12]
 800afca:	4b43      	ldr	r3, [pc, #268]	@ (800b0d8 <tcp_process+0x7c8>)
 800afcc:	2201      	movs	r2, #1
 800afce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	220a      	movs	r2, #10
 800afd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800afd6:	4b41      	ldr	r3, [pc, #260]	@ (800b0dc <tcp_process+0x7cc>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	60da      	str	r2, [r3, #12]
 800afde:	4a3f      	ldr	r2, [pc, #252]	@ (800b0dc <tcp_process+0x7cc>)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6013      	str	r3, [r2, #0]
 800afe4:	f002 fcae 	bl	800d944 <tcp_timer_needed>
      }
      break;
 800afe8:	e06c      	b.n	800b0c4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f984 	bl	800b2f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aff0:	4b3b      	ldr	r3, [pc, #236]	@ (800b0e0 <tcp_process+0x7d0>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d065      	beq.n	800b0c8 <tcp_process+0x7b8>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b000:	4b38      	ldr	r3, [pc, #224]	@ (800b0e4 <tcp_process+0x7d4>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	429a      	cmp	r2, r3
 800b006:	d15f      	bne.n	800b0c8 <tcp_process+0x7b8>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d15b      	bne.n	800b0c8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7fe fcf1 	bl	80099f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b016:	4b35      	ldr	r3, [pc, #212]	@ (800b0ec <tcp_process+0x7dc>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d105      	bne.n	800b02c <tcp_process+0x71c>
 800b020:	4b32      	ldr	r3, [pc, #200]	@ (800b0ec <tcp_process+0x7dc>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	4a31      	ldr	r2, [pc, #196]	@ (800b0ec <tcp_process+0x7dc>)
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	e013      	b.n	800b054 <tcp_process+0x744>
 800b02c:	4b2f      	ldr	r3, [pc, #188]	@ (800b0ec <tcp_process+0x7dc>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	e00c      	b.n	800b04e <tcp_process+0x73e>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d104      	bne.n	800b048 <tcp_process+0x738>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	60da      	str	r2, [r3, #12]
 800b046:	e005      	b.n	800b054 <tcp_process+0x744>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1ef      	bne.n	800b034 <tcp_process+0x724>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	60da      	str	r2, [r3, #12]
 800b05a:	4b1f      	ldr	r3, [pc, #124]	@ (800b0d8 <tcp_process+0x7c8>)
 800b05c:	2201      	movs	r2, #1
 800b05e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	220a      	movs	r2, #10
 800b064:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b066:	4b1d      	ldr	r3, [pc, #116]	@ (800b0dc <tcp_process+0x7cc>)
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60da      	str	r2, [r3, #12]
 800b06e:	4a1b      	ldr	r2, [pc, #108]	@ (800b0dc <tcp_process+0x7cc>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	f002 fc66 	bl	800d944 <tcp_timer_needed>
      }
      break;
 800b078:	e026      	b.n	800b0c8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f93c 	bl	800b2f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b080:	4b17      	ldr	r3, [pc, #92]	@ (800b0e0 <tcp_process+0x7d0>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d01f      	beq.n	800b0cc <tcp_process+0x7bc>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b090:	4b14      	ldr	r3, [pc, #80]	@ (800b0e4 <tcp_process+0x7d4>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	d119      	bne.n	800b0cc <tcp_process+0x7bc>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d115      	bne.n	800b0cc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b0a0:	4b11      	ldr	r3, [pc, #68]	@ (800b0e8 <tcp_process+0x7d8>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	f043 0310 	orr.w	r3, r3, #16
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e8 <tcp_process+0x7d8>)
 800b0ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b0ae:	e00d      	b.n	800b0cc <tcp_process+0x7bc>
    default:
      break;
 800b0b0:	bf00      	nop
 800b0b2:	e00c      	b.n	800b0ce <tcp_process+0x7be>
      break;
 800b0b4:	bf00      	nop
 800b0b6:	e00a      	b.n	800b0ce <tcp_process+0x7be>
      break;
 800b0b8:	bf00      	nop
 800b0ba:	e008      	b.n	800b0ce <tcp_process+0x7be>
      break;
 800b0bc:	bf00      	nop
 800b0be:	e006      	b.n	800b0ce <tcp_process+0x7be>
      break;
 800b0c0:	bf00      	nop
 800b0c2:	e004      	b.n	800b0ce <tcp_process+0x7be>
      break;
 800b0c4:	bf00      	nop
 800b0c6:	e002      	b.n	800b0ce <tcp_process+0x7be>
      break;
 800b0c8:	bf00      	nop
 800b0ca:	e000      	b.n	800b0ce <tcp_process+0x7be>
      break;
 800b0cc:	bf00      	nop
  }
  return ERR_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3724      	adds	r7, #36	@ 0x24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd90      	pop	{r4, r7, pc}
 800b0d8:	200088c4 	.word	0x200088c4
 800b0dc:	200088c0 	.word	0x200088c0
 800b0e0:	200088f4 	.word	0x200088f4
 800b0e4:	200088ec 	.word	0x200088ec
 800b0e8:	200088f5 	.word	0x200088f5
 800b0ec:	200088bc 	.word	0x200088bc

0800b0f0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b0f0:	b590      	push	{r4, r7, lr}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <tcp_oos_insert_segment+0x1e>
 800b100:	4b3b      	ldr	r3, [pc, #236]	@ (800b1f0 <tcp_oos_insert_segment+0x100>)
 800b102:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b106:	493b      	ldr	r1, [pc, #236]	@ (800b1f4 <tcp_oos_insert_segment+0x104>)
 800b108:	483b      	ldr	r0, [pc, #236]	@ (800b1f8 <tcp_oos_insert_segment+0x108>)
 800b10a:	f007 fdf5 	bl	8012cf8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	899b      	ldrh	r3, [r3, #12]
 800b114:	b29b      	uxth	r3, r3
 800b116:	4618      	mov	r0, r3
 800b118:	f7fa ff04 	bl	8005f24 <lwip_htons>
 800b11c:	4603      	mov	r3, r0
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b00      	cmp	r3, #0
 800b126:	d028      	beq.n	800b17a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b128:	6838      	ldr	r0, [r7, #0]
 800b12a:	f7fe fa63 	bl	80095f4 <tcp_segs_free>
    next = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	603b      	str	r3, [r7, #0]
 800b132:	e056      	b.n	800b1e2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	899b      	ldrh	r3, [r3, #12]
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fa fef1 	bl	8005f24 <lwip_htons>
 800b142:	4603      	mov	r3, r0
 800b144:	b2db      	uxtb	r3, r3
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00d      	beq.n	800b16a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	899b      	ldrh	r3, [r3, #12]
 800b154:	b29c      	uxth	r4, r3
 800b156:	2001      	movs	r0, #1
 800b158:	f7fa fee4 	bl	8005f24 <lwip_htons>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4322      	orrs	r2, r4
 800b166:	b292      	uxth	r2, r2
 800b168:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f7fe fa52 	bl	800961e <tcp_seg_free>
    while (next &&
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00e      	beq.n	800b19e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	891b      	ldrh	r3, [r3, #8]
 800b184:	461a      	mov	r2, r3
 800b186:	4b1d      	ldr	r3, [pc, #116]	@ (800b1fc <tcp_oos_insert_segment+0x10c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	441a      	add	r2, r3
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	8909      	ldrh	r1, [r1, #8]
 800b196:	440b      	add	r3, r1
 800b198:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	daca      	bge.n	800b134 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01e      	beq.n	800b1e2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	891b      	ldrh	r3, [r3, #8]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b14      	ldr	r3, [pc, #80]	@ (800b1fc <tcp_oos_insert_segment+0x10c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	441a      	add	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dd12      	ble.n	800b1e2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <tcp_oos_insert_segment+0x10c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	891b      	ldrh	r3, [r3, #8]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4610      	mov	r0, r2
 800b1de:	f7fc fcb9 	bl	8007b54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	601a      	str	r2, [r3, #0]
}
 800b1e8:	bf00      	nop
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd90      	pop	{r4, r7, pc}
 800b1f0:	08014e04 	.word	0x08014e04
 800b1f4:	080150c4 	.word	0x080150c4
 800b1f8:	08014e50 	.word	0x08014e50
 800b1fc:	200088e8 	.word	0x200088e8

0800b200 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b200:	b5b0      	push	{r4, r5, r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b20e:	e03e      	b.n	800b28e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fc fea6 	bl	8007f70 <pbuf_clen>
 800b224:	4603      	mov	r3, r0
 800b226:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b22e:	8a7a      	ldrh	r2, [r7, #18]
 800b230:	429a      	cmp	r2, r3
 800b232:	d906      	bls.n	800b242 <tcp_free_acked_segments+0x42>
 800b234:	4b2a      	ldr	r3, [pc, #168]	@ (800b2e0 <tcp_free_acked_segments+0xe0>)
 800b236:	f240 4257 	movw	r2, #1111	@ 0x457
 800b23a:	492a      	ldr	r1, [pc, #168]	@ (800b2e4 <tcp_free_acked_segments+0xe4>)
 800b23c:	482a      	ldr	r0, [pc, #168]	@ (800b2e8 <tcp_free_acked_segments+0xe8>)
 800b23e:	f007 fd5b 	bl	8012cf8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800b248:	8a7b      	ldrh	r3, [r7, #18]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	891a      	ldrh	r2, [r3, #8]
 800b258:	4b24      	ldr	r3, [pc, #144]	@ (800b2ec <tcp_free_acked_segments+0xec>)
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	4413      	add	r3, r2
 800b25e:	b29a      	uxth	r2, r3
 800b260:	4b22      	ldr	r3, [pc, #136]	@ (800b2ec <tcp_free_acked_segments+0xec>)
 800b262:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b264:	6978      	ldr	r0, [r7, #20]
 800b266:	f7fe f9da 	bl	800961e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00c      	beq.n	800b28e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d109      	bne.n	800b28e <tcp_free_acked_segments+0x8e>
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d106      	bne.n	800b28e <tcp_free_acked_segments+0x8e>
 800b280:	4b17      	ldr	r3, [pc, #92]	@ (800b2e0 <tcp_free_acked_segments+0xe0>)
 800b282:	f240 4261 	movw	r2, #1121	@ 0x461
 800b286:	491a      	ldr	r1, [pc, #104]	@ (800b2f0 <tcp_free_acked_segments+0xf0>)
 800b288:	4817      	ldr	r0, [pc, #92]	@ (800b2e8 <tcp_free_acked_segments+0xe8>)
 800b28a:	f007 fd35 	bl	8012cf8 <iprintf>
  while (seg_list != NULL &&
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d020      	beq.n	800b2d6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fa fe57 	bl	8005f4e <lwip_htonl>
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	891b      	ldrh	r3, [r3, #8]
 800b2a6:	461d      	mov	r5, r3
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	899b      	ldrh	r3, [r3, #12]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fa fe37 	bl	8005f24 <lwip_htons>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f003 0303 	and.w	r3, r3, #3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <tcp_free_acked_segments+0xc6>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <tcp_free_acked_segments+0xc8>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	442b      	add	r3, r5
 800b2ca:	18e2      	adds	r2, r4, r3
 800b2cc:	4b09      	ldr	r3, [pc, #36]	@ (800b2f4 <tcp_free_acked_segments+0xf4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	dd9c      	ble.n	800b210 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3718      	adds	r7, #24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e0:	08014e04 	.word	0x08014e04
 800b2e4:	080150ec 	.word	0x080150ec
 800b2e8:	08014e50 	.word	0x08014e50
 800b2ec:	200088f0 	.word	0x200088f0
 800b2f0:	08015114 	.word	0x08015114
 800b2f4:	200088ec 	.word	0x200088ec

0800b2f8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b2f8:	b5b0      	push	{r4, r5, r7, lr}
 800b2fa:	b094      	sub	sp, #80	@ 0x50
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d106      	bne.n	800b318 <tcp_receive+0x20>
 800b30a:	4b91      	ldr	r3, [pc, #580]	@ (800b550 <tcp_receive+0x258>)
 800b30c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800b310:	4990      	ldr	r1, [pc, #576]	@ (800b554 <tcp_receive+0x25c>)
 800b312:	4891      	ldr	r0, [pc, #580]	@ (800b558 <tcp_receive+0x260>)
 800b314:	f007 fcf0 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	7d1b      	ldrb	r3, [r3, #20]
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d806      	bhi.n	800b32e <tcp_receive+0x36>
 800b320:	4b8b      	ldr	r3, [pc, #556]	@ (800b550 <tcp_receive+0x258>)
 800b322:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b326:	498d      	ldr	r1, [pc, #564]	@ (800b55c <tcp_receive+0x264>)
 800b328:	488b      	ldr	r0, [pc, #556]	@ (800b558 <tcp_receive+0x260>)
 800b32a:	f007 fce5 	bl	8012cf8 <iprintf>

  if (flags & TCP_ACK) {
 800b32e:	4b8c      	ldr	r3, [pc, #560]	@ (800b560 <tcp_receive+0x268>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	f003 0310 	and.w	r3, r3, #16
 800b336:	2b00      	cmp	r3, #0
 800b338:	f000 8264 	beq.w	800b804 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b342:	461a      	mov	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b348:	4413      	add	r3, r2
 800b34a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b350:	4b84      	ldr	r3, [pc, #528]	@ (800b564 <tcp_receive+0x26c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	db1b      	blt.n	800b392 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b35e:	4b81      	ldr	r3, [pc, #516]	@ (800b564 <tcp_receive+0x26c>)
 800b360:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b362:	429a      	cmp	r2, r3
 800b364:	d106      	bne.n	800b374 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b36a:	4b7f      	ldr	r3, [pc, #508]	@ (800b568 <tcp_receive+0x270>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	db0e      	blt.n	800b392 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b378:	4b7b      	ldr	r3, [pc, #492]	@ (800b568 <tcp_receive+0x270>)
 800b37a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d125      	bne.n	800b3cc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b380:	4b7a      	ldr	r3, [pc, #488]	@ (800b56c <tcp_receive+0x274>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	89db      	ldrh	r3, [r3, #14]
 800b386:	b29a      	uxth	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b38e:	429a      	cmp	r2, r3
 800b390:	d91c      	bls.n	800b3cc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b392:	4b76      	ldr	r3, [pc, #472]	@ (800b56c <tcp_receive+0x274>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	89db      	ldrh	r3, [r3, #14]
 800b398:	b29a      	uxth	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d205      	bcs.n	800b3bc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800b3bc:	4b69      	ldr	r3, [pc, #420]	@ (800b564 <tcp_receive+0x26c>)
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800b3c4:	4b68      	ldr	r3, [pc, #416]	@ (800b568 <tcp_receive+0x270>)
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b3cc:	4b66      	ldr	r3, [pc, #408]	@ (800b568 <tcp_receive+0x270>)
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dc58      	bgt.n	800b48c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b3da:	4b65      	ldr	r3, [pc, #404]	@ (800b570 <tcp_receive+0x278>)
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d14b      	bne.n	800b47a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800b3ec:	4413      	add	r3, r2
 800b3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d142      	bne.n	800b47a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	db3d      	blt.n	800b47a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b402:	4b59      	ldr	r3, [pc, #356]	@ (800b568 <tcp_receive+0x270>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	429a      	cmp	r2, r3
 800b408:	d137      	bne.n	800b47a <tcp_receive+0x182>
              found_dupack = 1;
 800b40a:	2301      	movs	r3, #1
 800b40c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b414:	2bff      	cmp	r3, #255	@ 0xff
 800b416:	d007      	beq.n	800b428 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b41e:	3301      	adds	r3, #1
 800b420:	b2da      	uxtb	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d91b      	bls.n	800b46a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b43c:	4413      	add	r3, r2
 800b43e:	b29a      	uxth	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b446:	429a      	cmp	r2, r3
 800b448:	d30a      	bcc.n	800b460 <tcp_receive+0x168>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b454:	4413      	add	r3, r2
 800b456:	b29a      	uxth	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b45e:	e004      	b.n	800b46a <tcp_receive+0x172>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b466:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b470:	2b02      	cmp	r3, #2
 800b472:	d902      	bls.n	800b47a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 fef9 	bl	800d26c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b47a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f040 8161 	bne.w	800b744 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b48a:	e15b      	b.n	800b744 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b48c:	4b36      	ldr	r3, [pc, #216]	@ (800b568 <tcp_receive+0x270>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	3b01      	subs	r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f2c0 814e 	blt.w	800b73a <tcp_receive+0x442>
 800b49e:	4b32      	ldr	r3, [pc, #200]	@ (800b568 <tcp_receive+0x270>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f300 8146 	bgt.w	800b73a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	8b5b      	ldrh	r3, [r3, #26]
 800b4b2:	f003 0304 	and.w	r3, r3, #4
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d010      	beq.n	800b4dc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	8b5b      	ldrh	r3, [r3, #26]
 800b4be:	f023 0304 	bic.w	r3, r3, #4
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b4ea:	10db      	asrs	r3, r3, #3
 800b4ec:	b21b      	sxth	r3, r3
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	b21a      	sxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b504:	4b18      	ldr	r3, [pc, #96]	@ (800b568 <tcp_receive+0x270>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	b29a      	uxth	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b50e:	b29b      	uxth	r3, r3
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b51c:	4b12      	ldr	r3, [pc, #72]	@ (800b568 <tcp_receive+0x270>)
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	7d1b      	ldrb	r3, [r3, #20]
 800b528:	2b03      	cmp	r3, #3
 800b52a:	f240 8097 	bls.w	800b65c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d245      	bcs.n	800b5ca <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	8b5b      	ldrh	r3, [r3, #26]
 800b542:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b546:	2b00      	cmp	r3, #0
 800b548:	d014      	beq.n	800b574 <tcp_receive+0x27c>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e013      	b.n	800b576 <tcp_receive+0x27e>
 800b54e:	bf00      	nop
 800b550:	08014e04 	.word	0x08014e04
 800b554:	08015134 	.word	0x08015134
 800b558:	08014e50 	.word	0x08014e50
 800b55c:	08015150 	.word	0x08015150
 800b560:	200088f4 	.word	0x200088f4
 800b564:	200088e8 	.word	0x200088e8
 800b568:	200088ec 	.word	0x200088ec
 800b56c:	200088d8 	.word	0x200088d8
 800b570:	200088f2 	.word	0x200088f2
 800b574:	2302      	movs	r3, #2
 800b576:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b57a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b57e:	b29a      	uxth	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b584:	fb12 f303 	smulbb	r3, r2, r3
 800b588:	b29b      	uxth	r3, r3
 800b58a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b58c:	4293      	cmp	r3, r2
 800b58e:	bf28      	it	cs
 800b590:	4613      	movcs	r3, r2
 800b592:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b59a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b59c:	4413      	add	r3, r2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d309      	bcc.n	800b5be <tcp_receive+0x2c6>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b5b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5b2:	4413      	add	r3, r2
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b5bc:	e04e      	b.n	800b65c <tcp_receive+0x364>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b5c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b5c8:	e048      	b.n	800b65c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b5d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b5d2:	4413      	add	r3, r2
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d309      	bcc.n	800b5f4 <tcp_receive+0x2fc>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b5e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b5e8:	4413      	add	r3, r2
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b5f2:	e004      	b.n	800b5fe <tcp_receive+0x306>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b5fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d326      	bcc.n	800b65c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b62e:	4413      	add	r3, r2
 800b630:	b29a      	uxth	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b638:	429a      	cmp	r2, r3
 800b63a:	d30a      	bcc.n	800b652 <tcp_receive+0x35a>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b646:	4413      	add	r3, r2
 800b648:	b29a      	uxth	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b650:	e004      	b.n	800b65c <tcp_receive+0x364>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b658:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b664:	4a98      	ldr	r2, [pc, #608]	@ (800b8c8 <tcp_receive+0x5d0>)
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fdca 	bl	800b200 <tcp_free_acked_segments>
 800b66c:	4602      	mov	r2, r0
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b67a:	4a94      	ldr	r2, [pc, #592]	@ (800b8cc <tcp_receive+0x5d4>)
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff fdbf 	bl	800b200 <tcp_free_acked_segments>
 800b682:	4602      	mov	r2, r0
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d104      	bne.n	800b69a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b696:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b698:	e002      	b.n	800b6a0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d103      	bne.n	800b6b6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b6bc:	4b84      	ldr	r3, [pc, #528]	@ (800b8d0 <tcp_receive+0x5d8>)
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	8b5b      	ldrh	r3, [r3, #26]
 800b6ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d035      	beq.n	800b742 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d118      	bne.n	800b710 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00c      	beq.n	800b700 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fa fc2b 	bl	8005f4e <lwip_htonl>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dc20      	bgt.n	800b742 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	8b5b      	ldrh	r3, [r3, #26]
 800b704:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b708:	b29a      	uxth	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b70e:	e018      	b.n	800b742 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fa fc16 	bl	8005f4e <lwip_htonl>
 800b722:	4603      	mov	r3, r0
 800b724:	1ae3      	subs	r3, r4, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	dc0b      	bgt.n	800b742 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8b5b      	ldrh	r3, [r3, #26]
 800b72e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b732:	b29a      	uxth	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b738:	e003      	b.n	800b742 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 ff92 	bl	800d664 <tcp_send_empty_ack>
 800b740:	e000      	b.n	800b744 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b742:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d05b      	beq.n	800b804 <tcp_receive+0x50c>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b750:	4b60      	ldr	r3, [pc, #384]	@ (800b8d4 <tcp_receive+0x5dc>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	da54      	bge.n	800b804 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b75a:	4b5f      	ldr	r3, [pc, #380]	@ (800b8d8 <tcp_receive+0x5e0>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	b29a      	uxth	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b764:	b29b      	uxth	r3, r3
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	b29b      	uxth	r3, r3
 800b76a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b76e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b778:	10db      	asrs	r3, r3, #3
 800b77a:	b21b      	sxth	r3, r3
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	b29b      	uxth	r3, r3
 800b782:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b792:	4413      	add	r3, r2
 800b794:	b29b      	uxth	r3, r3
 800b796:	b21a      	sxth	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b79c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	da05      	bge.n	800b7b0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b7a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b7a8:	425b      	negs	r3, r3
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b7b0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b7ba:	109b      	asrs	r3, r3, #2
 800b7bc:	b21b      	sxth	r3, r3
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b7d4:	4413      	add	r3, r2
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	b21a      	sxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b7e4:	10db      	asrs	r3, r3, #3
 800b7e6:	b21b      	sxth	r3, r3
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	4413      	add	r3, r2
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	b21a      	sxth	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b804:	4b35      	ldr	r3, [pc, #212]	@ (800b8dc <tcp_receive+0x5e4>)
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 84df 	beq.w	800c1cc <tcp_receive+0xed4>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	7d1b      	ldrb	r3, [r3, #20]
 800b812:	2b06      	cmp	r3, #6
 800b814:	f200 84da 	bhi.w	800c1cc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b81c:	4b30      	ldr	r3, [pc, #192]	@ (800b8e0 <tcp_receive+0x5e8>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	3b01      	subs	r3, #1
 800b824:	2b00      	cmp	r3, #0
 800b826:	f2c0 808f 	blt.w	800b948 <tcp_receive+0x650>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b82e:	4b2b      	ldr	r3, [pc, #172]	@ (800b8dc <tcp_receive+0x5e4>)
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	4619      	mov	r1, r3
 800b834:	4b2a      	ldr	r3, [pc, #168]	@ (800b8e0 <tcp_receive+0x5e8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	440b      	add	r3, r1
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	3301      	adds	r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f300 8082 	bgt.w	800b948 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b844:	4b27      	ldr	r3, [pc, #156]	@ (800b8e4 <tcp_receive+0x5ec>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b84e:	4b24      	ldr	r3, [pc, #144]	@ (800b8e0 <tcp_receive+0x5e8>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b856:	4b23      	ldr	r3, [pc, #140]	@ (800b8e4 <tcp_receive+0x5ec>)
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <tcp_receive+0x574>
 800b85e:	4b22      	ldr	r3, [pc, #136]	@ (800b8e8 <tcp_receive+0x5f0>)
 800b860:	f240 5294 	movw	r2, #1428	@ 0x594
 800b864:	4921      	ldr	r1, [pc, #132]	@ (800b8ec <tcp_receive+0x5f4>)
 800b866:	4822      	ldr	r0, [pc, #136]	@ (800b8f0 <tcp_receive+0x5f8>)
 800b868:	f007 fa46 	bl	8012cf8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b872:	4293      	cmp	r3, r2
 800b874:	d906      	bls.n	800b884 <tcp_receive+0x58c>
 800b876:	4b1c      	ldr	r3, [pc, #112]	@ (800b8e8 <tcp_receive+0x5f0>)
 800b878:	f240 5295 	movw	r2, #1429	@ 0x595
 800b87c:	491d      	ldr	r1, [pc, #116]	@ (800b8f4 <tcp_receive+0x5fc>)
 800b87e:	481c      	ldr	r0, [pc, #112]	@ (800b8f0 <tcp_receive+0x5f8>)
 800b880:	f007 fa3a 	bl	8012cf8 <iprintf>
      off = (u16_t)off32;
 800b884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b886:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b88a:	4b16      	ldr	r3, [pc, #88]	@ (800b8e4 <tcp_receive+0x5ec>)
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	891b      	ldrh	r3, [r3, #8]
 800b890:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b894:	429a      	cmp	r2, r3
 800b896:	d906      	bls.n	800b8a6 <tcp_receive+0x5ae>
 800b898:	4b13      	ldr	r3, [pc, #76]	@ (800b8e8 <tcp_receive+0x5f0>)
 800b89a:	f240 5297 	movw	r2, #1431	@ 0x597
 800b89e:	4916      	ldr	r1, [pc, #88]	@ (800b8f8 <tcp_receive+0x600>)
 800b8a0:	4813      	ldr	r0, [pc, #76]	@ (800b8f0 <tcp_receive+0x5f8>)
 800b8a2:	f007 fa29 	bl	8012cf8 <iprintf>
      inseg.len -= off;
 800b8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e4 <tcp_receive+0x5ec>)
 800b8a8:	891a      	ldrh	r2, [r3, #8]
 800b8aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e4 <tcp_receive+0x5ec>)
 800b8b4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e4 <tcp_receive+0x5ec>)
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	891a      	ldrh	r2, [r3, #8]
 800b8bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b8c4:	e02a      	b.n	800b91c <tcp_receive+0x624>
 800b8c6:	bf00      	nop
 800b8c8:	0801516c 	.word	0x0801516c
 800b8cc:	08015174 	.word	0x08015174
 800b8d0:	200088f0 	.word	0x200088f0
 800b8d4:	200088ec 	.word	0x200088ec
 800b8d8:	200088b0 	.word	0x200088b0
 800b8dc:	200088f2 	.word	0x200088f2
 800b8e0:	200088e8 	.word	0x200088e8
 800b8e4:	200088c8 	.word	0x200088c8
 800b8e8:	08014e04 	.word	0x08014e04
 800b8ec:	0801517c 	.word	0x0801517c
 800b8f0:	08014e50 	.word	0x08014e50
 800b8f4:	0801518c 	.word	0x0801518c
 800b8f8:	0801519c 	.word	0x0801519c
        off -= p->len;
 800b8fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8fe:	895b      	ldrh	r3, [r3, #10]
 800b900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b90c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b90e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b912:	2200      	movs	r2, #0
 800b914:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b91c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b91e:	895b      	ldrh	r3, [r3, #10]
 800b920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b924:	429a      	cmp	r2, r3
 800b926:	d8e9      	bhi.n	800b8fc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b92c:	4619      	mov	r1, r3
 800b92e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b930:	f7fc fa10 	bl	8007d54 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b938:	4a90      	ldr	r2, [pc, #576]	@ (800bb7c <tcp_receive+0x884>)
 800b93a:	6013      	str	r3, [r2, #0]
 800b93c:	4b90      	ldr	r3, [pc, #576]	@ (800bb80 <tcp_receive+0x888>)
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	4a8e      	ldr	r2, [pc, #568]	@ (800bb7c <tcp_receive+0x884>)
 800b942:	6812      	ldr	r2, [r2, #0]
 800b944:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b946:	e00d      	b.n	800b964 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b948:	4b8c      	ldr	r3, [pc, #560]	@ (800bb7c <tcp_receive+0x884>)
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	da06      	bge.n	800b964 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	8b5b      	ldrh	r3, [r3, #26]
 800b95a:	f043 0302 	orr.w	r3, r3, #2
 800b95e:	b29a      	uxth	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b964:	4b85      	ldr	r3, [pc, #532]	@ (800bb7c <tcp_receive+0x884>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f2c0 8427 	blt.w	800c1c2 <tcp_receive+0xeca>
 800b974:	4b81      	ldr	r3, [pc, #516]	@ (800bb7c <tcp_receive+0x884>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97c:	6879      	ldr	r1, [r7, #4]
 800b97e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b980:	440b      	add	r3, r1
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	3301      	adds	r3, #1
 800b986:	2b00      	cmp	r3, #0
 800b988:	f300 841b 	bgt.w	800c1c2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b990:	4b7a      	ldr	r3, [pc, #488]	@ (800bb7c <tcp_receive+0x884>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	f040 8298 	bne.w	800beca <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b99a:	4b79      	ldr	r3, [pc, #484]	@ (800bb80 <tcp_receive+0x888>)
 800b99c:	891c      	ldrh	r4, [r3, #8]
 800b99e:	4b78      	ldr	r3, [pc, #480]	@ (800bb80 <tcp_receive+0x888>)
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	899b      	ldrh	r3, [r3, #12]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fa fabc 	bl	8005f24 <lwip_htons>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <tcp_receive+0x6c4>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <tcp_receive+0x6c6>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4423      	add	r3, r4
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	4b70      	ldr	r3, [pc, #448]	@ (800bb84 <tcp_receive+0x88c>)
 800b9c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b9ca:	4b6e      	ldr	r3, [pc, #440]	@ (800bb84 <tcp_receive+0x88c>)
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d274      	bcs.n	800babc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b9d2:	4b6b      	ldr	r3, [pc, #428]	@ (800bb80 <tcp_receive+0x888>)
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	899b      	ldrh	r3, [r3, #12]
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fa faa2 	bl	8005f24 <lwip_htons>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d01e      	beq.n	800ba2a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b9ec:	4b64      	ldr	r3, [pc, #400]	@ (800bb80 <tcp_receive+0x888>)
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	899b      	ldrh	r3, [r3, #12]
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	b21b      	sxth	r3, r3
 800b9f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b9fa:	b21c      	sxth	r4, r3
 800b9fc:	4b60      	ldr	r3, [pc, #384]	@ (800bb80 <tcp_receive+0x888>)
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	899b      	ldrh	r3, [r3, #12]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fa fa8d 	bl	8005f24 <lwip_htons>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fa fa85 	bl	8005f24 <lwip_htons>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	b21b      	sxth	r3, r3
 800ba1e:	4323      	orrs	r3, r4
 800ba20:	b21a      	sxth	r2, r3
 800ba22:	4b57      	ldr	r3, [pc, #348]	@ (800bb80 <tcp_receive+0x888>)
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	b292      	uxth	r2, r2
 800ba28:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ba2e:	4b54      	ldr	r3, [pc, #336]	@ (800bb80 <tcp_receive+0x888>)
 800ba30:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ba32:	4b53      	ldr	r3, [pc, #332]	@ (800bb80 <tcp_receive+0x888>)
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	899b      	ldrh	r3, [r3, #12]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fa fa72 	bl	8005f24 <lwip_htons>
 800ba40:	4603      	mov	r3, r0
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f003 0302 	and.w	r3, r3, #2
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <tcp_receive+0x760>
            inseg.len -= 1;
 800ba4c:	4b4c      	ldr	r3, [pc, #304]	@ (800bb80 <tcp_receive+0x888>)
 800ba4e:	891b      	ldrh	r3, [r3, #8]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	4b4a      	ldr	r3, [pc, #296]	@ (800bb80 <tcp_receive+0x888>)
 800ba56:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ba58:	4b49      	ldr	r3, [pc, #292]	@ (800bb80 <tcp_receive+0x888>)
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	4a48      	ldr	r2, [pc, #288]	@ (800bb80 <tcp_receive+0x888>)
 800ba5e:	8912      	ldrh	r2, [r2, #8]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fc f876 	bl	8007b54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ba68:	4b45      	ldr	r3, [pc, #276]	@ (800bb80 <tcp_receive+0x888>)
 800ba6a:	891c      	ldrh	r4, [r3, #8]
 800ba6c:	4b44      	ldr	r3, [pc, #272]	@ (800bb80 <tcp_receive+0x888>)
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	899b      	ldrh	r3, [r3, #12]
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fa fa55 	bl	8005f24 <lwip_htons>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <tcp_receive+0x792>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e000      	b.n	800ba8c <tcp_receive+0x794>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4423      	add	r3, r4
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	4b3c      	ldr	r3, [pc, #240]	@ (800bb84 <tcp_receive+0x88c>)
 800ba92:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ba94:	4b3b      	ldr	r3, [pc, #236]	@ (800bb84 <tcp_receive+0x88c>)
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4b38      	ldr	r3, [pc, #224]	@ (800bb7c <tcp_receive+0x884>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	441a      	add	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800baa8:	440b      	add	r3, r1
 800baaa:	429a      	cmp	r2, r3
 800baac:	d006      	beq.n	800babc <tcp_receive+0x7c4>
 800baae:	4b36      	ldr	r3, [pc, #216]	@ (800bb88 <tcp_receive+0x890>)
 800bab0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800bab4:	4935      	ldr	r1, [pc, #212]	@ (800bb8c <tcp_receive+0x894>)
 800bab6:	4836      	ldr	r0, [pc, #216]	@ (800bb90 <tcp_receive+0x898>)
 800bab8:	f007 f91e 	bl	8012cf8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80e6 	beq.w	800bc92 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bac6:	4b2e      	ldr	r3, [pc, #184]	@ (800bb80 <tcp_receive+0x888>)
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	899b      	ldrh	r3, [r3, #12]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fa fa28 	bl	8005f24 <lwip_htons>
 800bad4:	4603      	mov	r3, r0
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	2b00      	cmp	r3, #0
 800bade:	d010      	beq.n	800bb02 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bae0:	e00a      	b.n	800baf8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bae6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7fd fd93 	bl	800961e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1f0      	bne.n	800bae2 <tcp_receive+0x7ea>
 800bb00:	e0c7      	b.n	800bc92 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bb08:	e051      	b.n	800bbae <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bb0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	899b      	ldrh	r3, [r3, #12]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fa fa06 	bl	8005f24 <lwip_htons>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d03c      	beq.n	800bb9e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bb24:	4b16      	ldr	r3, [pc, #88]	@ (800bb80 <tcp_receive+0x888>)
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	899b      	ldrh	r3, [r3, #12]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fa f9f9 	bl	8005f24 <lwip_htons>
 800bb32:	4603      	mov	r3, r0
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d12f      	bne.n	800bb9e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bb3e:	4b10      	ldr	r3, [pc, #64]	@ (800bb80 <tcp_receive+0x888>)
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	899b      	ldrh	r3, [r3, #12]
 800bb44:	b29c      	uxth	r4, r3
 800bb46:	2001      	movs	r0, #1
 800bb48:	f7fa f9ec 	bl	8005f24 <lwip_htons>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4b0b      	ldr	r3, [pc, #44]	@ (800bb80 <tcp_receive+0x888>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	4322      	orrs	r2, r4
 800bb56:	b292      	uxth	r2, r2
 800bb58:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bb5a:	4b09      	ldr	r3, [pc, #36]	@ (800bb80 <tcp_receive+0x888>)
 800bb5c:	891c      	ldrh	r4, [r3, #8]
 800bb5e:	4b08      	ldr	r3, [pc, #32]	@ (800bb80 <tcp_receive+0x888>)
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	899b      	ldrh	r3, [r3, #12]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fa f9dc 	bl	8005f24 <lwip_htons>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f003 0303 	and.w	r3, r3, #3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00d      	beq.n	800bb94 <tcp_receive+0x89c>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e00c      	b.n	800bb96 <tcp_receive+0x89e>
 800bb7c:	200088e8 	.word	0x200088e8
 800bb80:	200088c8 	.word	0x200088c8
 800bb84:	200088f2 	.word	0x200088f2
 800bb88:	08014e04 	.word	0x08014e04
 800bb8c:	080151ac 	.word	0x080151ac
 800bb90:	08014e50 	.word	0x08014e50
 800bb94:	2300      	movs	r3, #0
 800bb96:	4423      	add	r3, r4
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	4b98      	ldr	r3, [pc, #608]	@ (800bdfc <tcp_receive+0xb04>)
 800bb9c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800bba8:	6938      	ldr	r0, [r7, #16]
 800bbaa:	f7fd fd38 	bl	800961e <tcp_seg_free>
            while (next &&
 800bbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00e      	beq.n	800bbd2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bbb4:	4b91      	ldr	r3, [pc, #580]	@ (800bdfc <tcp_receive+0xb04>)
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	4b91      	ldr	r3, [pc, #580]	@ (800be00 <tcp_receive+0xb08>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	441a      	add	r2, r3
 800bbc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbc8:	8909      	ldrh	r1, [r1, #8]
 800bbca:	440b      	add	r3, r1
 800bbcc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da9b      	bge.n	800bb0a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bbd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d059      	beq.n	800bc8c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800bbd8:	4b88      	ldr	r3, [pc, #544]	@ (800bdfc <tcp_receive+0xb04>)
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	4b88      	ldr	r3, [pc, #544]	@ (800be00 <tcp_receive+0xb08>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	441a      	add	r2, r3
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dd4d      	ble.n	800bc8c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bbf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	4b81      	ldr	r3, [pc, #516]	@ (800be00 <tcp_receive+0xb08>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	4b80      	ldr	r3, [pc, #512]	@ (800be04 <tcp_receive+0xb0c>)
 800bc04:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bc06:	4b7f      	ldr	r3, [pc, #508]	@ (800be04 <tcp_receive+0xb0c>)
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	899b      	ldrh	r3, [r3, #12]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fa f988 	bl	8005f24 <lwip_htons>
 800bc14:	4603      	mov	r3, r0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 0302 	and.w	r3, r3, #2
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d005      	beq.n	800bc2c <tcp_receive+0x934>
                inseg.len -= 1;
 800bc20:	4b78      	ldr	r3, [pc, #480]	@ (800be04 <tcp_receive+0xb0c>)
 800bc22:	891b      	ldrh	r3, [r3, #8]
 800bc24:	3b01      	subs	r3, #1
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	4b76      	ldr	r3, [pc, #472]	@ (800be04 <tcp_receive+0xb0c>)
 800bc2a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bc2c:	4b75      	ldr	r3, [pc, #468]	@ (800be04 <tcp_receive+0xb0c>)
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	4a74      	ldr	r2, [pc, #464]	@ (800be04 <tcp_receive+0xb0c>)
 800bc32:	8912      	ldrh	r2, [r2, #8]
 800bc34:	4611      	mov	r1, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fb ff8c 	bl	8007b54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bc3c:	4b71      	ldr	r3, [pc, #452]	@ (800be04 <tcp_receive+0xb0c>)
 800bc3e:	891c      	ldrh	r4, [r3, #8]
 800bc40:	4b70      	ldr	r3, [pc, #448]	@ (800be04 <tcp_receive+0xb0c>)
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	899b      	ldrh	r3, [r3, #12]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fa f96b 	bl	8005f24 <lwip_htons>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <tcp_receive+0x966>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e000      	b.n	800bc60 <tcp_receive+0x968>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	4423      	add	r3, r4
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	4b65      	ldr	r3, [pc, #404]	@ (800bdfc <tcp_receive+0xb04>)
 800bc66:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bc68:	4b64      	ldr	r3, [pc, #400]	@ (800bdfc <tcp_receive+0xb04>)
 800bc6a:	881b      	ldrh	r3, [r3, #0]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4b64      	ldr	r3, [pc, #400]	@ (800be00 <tcp_receive+0xb08>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	441a      	add	r2, r3
 800bc74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d006      	beq.n	800bc8c <tcp_receive+0x994>
 800bc7e:	4b62      	ldr	r3, [pc, #392]	@ (800be08 <tcp_receive+0xb10>)
 800bc80:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800bc84:	4961      	ldr	r1, [pc, #388]	@ (800be0c <tcp_receive+0xb14>)
 800bc86:	4862      	ldr	r0, [pc, #392]	@ (800be10 <tcp_receive+0xb18>)
 800bc88:	f007 f836 	bl	8012cf8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bc90:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bc92:	4b5a      	ldr	r3, [pc, #360]	@ (800bdfc <tcp_receive+0xb04>)
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	4b59      	ldr	r3, [pc, #356]	@ (800be00 <tcp_receive+0xb08>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	441a      	add	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bca6:	4b55      	ldr	r3, [pc, #340]	@ (800bdfc <tcp_receive+0xb04>)
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d206      	bcs.n	800bcbc <tcp_receive+0x9c4>
 800bcae:	4b56      	ldr	r3, [pc, #344]	@ (800be08 <tcp_receive+0xb10>)
 800bcb0:	f240 6207 	movw	r2, #1543	@ 0x607
 800bcb4:	4957      	ldr	r1, [pc, #348]	@ (800be14 <tcp_receive+0xb1c>)
 800bcb6:	4856      	ldr	r0, [pc, #344]	@ (800be10 <tcp_receive+0xb18>)
 800bcb8:	f007 f81e 	bl	8012cf8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bcc0:	4b4e      	ldr	r3, [pc, #312]	@ (800bdfc <tcp_receive+0xb04>)
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7fc ffc5 	bl	8008c5c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bcd2:	4b4c      	ldr	r3, [pc, #304]	@ (800be04 <tcp_receive+0xb0c>)
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	891b      	ldrh	r3, [r3, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d006      	beq.n	800bcea <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800bcdc:	4b49      	ldr	r3, [pc, #292]	@ (800be04 <tcp_receive+0xb0c>)
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	4a4d      	ldr	r2, [pc, #308]	@ (800be18 <tcp_receive+0xb20>)
 800bce2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bce4:	4b47      	ldr	r3, [pc, #284]	@ (800be04 <tcp_receive+0xb0c>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bcea:	4b46      	ldr	r3, [pc, #280]	@ (800be04 <tcp_receive+0xb0c>)
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	899b      	ldrh	r3, [r3, #12]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fa f916 	bl	8005f24 <lwip_htons>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f000 80b8 	beq.w	800be76 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bd06:	4b45      	ldr	r3, [pc, #276]	@ (800be1c <tcp_receive+0xb24>)
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	f043 0320 	orr.w	r3, r3, #32
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	4b42      	ldr	r3, [pc, #264]	@ (800be1c <tcp_receive+0xb24>)
 800bd12:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bd14:	e0af      	b.n	800be76 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd1a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	4a36      	ldr	r2, [pc, #216]	@ (800be00 <tcp_receive+0xb08>)
 800bd26:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	891b      	ldrh	r3, [r3, #8]
 800bd2c:	461c      	mov	r4, r3
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	899b      	ldrh	r3, [r3, #12]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fa f8f4 	bl	8005f24 <lwip_htons>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f003 0303 	and.w	r3, r3, #3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <tcp_receive+0xa54>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e000      	b.n	800bd4e <tcp_receive+0xa56>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	191a      	adds	r2, r3, r4
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd54:	441a      	add	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd5e:	461c      	mov	r4, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	891b      	ldrh	r3, [r3, #8]
 800bd64:	461d      	mov	r5, r3
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	899b      	ldrh	r3, [r3, #12]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fa f8d8 	bl	8005f24 <lwip_htons>
 800bd74:	4603      	mov	r3, r0
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <tcp_receive+0xa8c>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e000      	b.n	800bd86 <tcp_receive+0xa8e>
 800bd84:	2300      	movs	r3, #0
 800bd86:	442b      	add	r3, r5
 800bd88:	429c      	cmp	r4, r3
 800bd8a:	d206      	bcs.n	800bd9a <tcp_receive+0xaa2>
 800bd8c:	4b1e      	ldr	r3, [pc, #120]	@ (800be08 <tcp_receive+0xb10>)
 800bd8e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800bd92:	4923      	ldr	r1, [pc, #140]	@ (800be20 <tcp_receive+0xb28>)
 800bd94:	481e      	ldr	r0, [pc, #120]	@ (800be10 <tcp_receive+0xb18>)
 800bd96:	f006 ffaf 	bl	8012cf8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	891b      	ldrh	r3, [r3, #8]
 800bd9e:	461c      	mov	r4, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	899b      	ldrh	r3, [r3, #12]
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fa f8bb 	bl	8005f24 <lwip_htons>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	f003 0303 	and.w	r3, r3, #3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <tcp_receive+0xac6>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <tcp_receive+0xac8>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	1919      	adds	r1, r3, r4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bdc6:	b28b      	uxth	r3, r1
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7fc ff43 	bl	8008c5c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	891b      	ldrh	r3, [r3, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d028      	beq.n	800be32 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bde0:	4b0d      	ldr	r3, [pc, #52]	@ (800be18 <tcp_receive+0xb20>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d01d      	beq.n	800be24 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bde8:	4b0b      	ldr	r3, [pc, #44]	@ (800be18 <tcp_receive+0xb20>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fc f8f6 	bl	8007fe4 <pbuf_cat>
 800bdf8:	e018      	b.n	800be2c <tcp_receive+0xb34>
 800bdfa:	bf00      	nop
 800bdfc:	200088f2 	.word	0x200088f2
 800be00:	200088e8 	.word	0x200088e8
 800be04:	200088c8 	.word	0x200088c8
 800be08:	08014e04 	.word	0x08014e04
 800be0c:	080151e4 	.word	0x080151e4
 800be10:	08014e50 	.word	0x08014e50
 800be14:	08015220 	.word	0x08015220
 800be18:	200088f8 	.word	0x200088f8
 800be1c:	200088f5 	.word	0x200088f5
 800be20:	08015240 	.word	0x08015240
            } else {
              recv_data = cseg->p;
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	4a70      	ldr	r2, [pc, #448]	@ (800bfec <tcp_receive+0xcf4>)
 800be2a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2200      	movs	r2, #0
 800be30:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	899b      	ldrh	r3, [r3, #12]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fa f872 	bl	8005f24 <lwip_htons>
 800be40:	4603      	mov	r3, r0
 800be42:	b2db      	uxtb	r3, r3
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00d      	beq.n	800be68 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800be4c:	4b68      	ldr	r3, [pc, #416]	@ (800bff0 <tcp_receive+0xcf8>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f043 0320 	orr.w	r3, r3, #32
 800be54:	b2da      	uxtb	r2, r3
 800be56:	4b66      	ldr	r3, [pc, #408]	@ (800bff0 <tcp_receive+0xcf8>)
 800be58:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	7d1b      	ldrb	r3, [r3, #20]
 800be5e:	2b04      	cmp	r3, #4
 800be60:	d102      	bne.n	800be68 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2207      	movs	r2, #7
 800be66:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800be70:	68b8      	ldr	r0, [r7, #8]
 800be72:	f7fd fbd4 	bl	800961e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d008      	beq.n	800be90 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800be8a:	429a      	cmp	r2, r3
 800be8c:	f43f af43 	beq.w	800bd16 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	8b5b      	ldrh	r3, [r3, #26]
 800be94:	f003 0301 	and.w	r3, r3, #1
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00e      	beq.n	800beba <tcp_receive+0xbc2>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	8b5b      	ldrh	r3, [r3, #26]
 800bea0:	f023 0301 	bic.w	r3, r3, #1
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	835a      	strh	r2, [r3, #26]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	8b5b      	ldrh	r3, [r3, #26]
 800beae:	f043 0302 	orr.w	r3, r3, #2
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800beb8:	e187      	b.n	800c1ca <tcp_receive+0xed2>
        tcp_ack(pcb);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	8b5b      	ldrh	r3, [r3, #26]
 800bebe:	f043 0301 	orr.w	r3, r3, #1
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bec8:	e17f      	b.n	800c1ca <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bed2:	4848      	ldr	r0, [pc, #288]	@ (800bff4 <tcp_receive+0xcfc>)
 800bed4:	f7fd fbbc 	bl	8009650 <tcp_seg_copy>
 800bed8:	4602      	mov	r2, r0
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	675a      	str	r2, [r3, #116]	@ 0x74
 800bede:	e16c      	b.n	800c1ba <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bee8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800beea:	e156      	b.n	800c19a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800beec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	4b41      	ldr	r3, [pc, #260]	@ (800bff8 <tcp_receive+0xd00>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d11d      	bne.n	800bf36 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800befa:	4b3e      	ldr	r3, [pc, #248]	@ (800bff4 <tcp_receive+0xcfc>)
 800befc:	891a      	ldrh	r2, [r3, #8]
 800befe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf00:	891b      	ldrh	r3, [r3, #8]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	f240 814e 	bls.w	800c1a4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bf08:	483a      	ldr	r0, [pc, #232]	@ (800bff4 <tcp_receive+0xcfc>)
 800bf0a:	f7fd fba1 	bl	8009650 <tcp_seg_copy>
 800bf0e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f000 8148 	beq.w	800c1a8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800bf18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	e002      	b.n	800bf2c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bf2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bf2e:	6978      	ldr	r0, [r7, #20]
 800bf30:	f7ff f8de 	bl	800b0f0 <tcp_oos_insert_segment>
                }
                break;
 800bf34:	e138      	b.n	800c1a8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bf36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d117      	bne.n	800bf6c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bf3c:	4b2e      	ldr	r3, [pc, #184]	@ (800bff8 <tcp_receive+0xd00>)
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	da57      	bge.n	800bffc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bf4c:	4829      	ldr	r0, [pc, #164]	@ (800bff4 <tcp_receive+0xcfc>)
 800bf4e:	f7fd fb7f 	bl	8009650 <tcp_seg_copy>
 800bf52:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f000 8128 	beq.w	800c1ac <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bf62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bf64:	69b8      	ldr	r0, [r7, #24]
 800bf66:	f7ff f8c3 	bl	800b0f0 <tcp_oos_insert_segment>
                  }
                  break;
 800bf6a:	e11f      	b.n	800c1ac <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bf6c:	4b22      	ldr	r3, [pc, #136]	@ (800bff8 <tcp_receive+0xd00>)
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	db3e      	blt.n	800bffc <tcp_receive+0xd04>
 800bf7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bff8 <tcp_receive+0xd00>)
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dc35      	bgt.n	800bffc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bf90:	4818      	ldr	r0, [pc, #96]	@ (800bff4 <tcp_receive+0xcfc>)
 800bf92:	f7fd fb5d 	bl	8009650 <tcp_seg_copy>
 800bf96:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 8108 	beq.w	800c1b0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfa8:	8912      	ldrh	r2, [r2, #8]
 800bfaa:	441a      	add	r2, r3
 800bfac:	4b12      	ldr	r3, [pc, #72]	@ (800bff8 <tcp_receive+0xd00>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	dd12      	ble.n	800bfdc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bfb6:	4b10      	ldr	r3, [pc, #64]	@ (800bff8 <tcp_receive+0xd00>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfd2:	891b      	ldrh	r3, [r3, #8]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f7fb fdbc 	bl	8007b54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bfdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfde:	69fa      	ldr	r2, [r7, #28]
 800bfe0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bfe2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bfe4:	69f8      	ldr	r0, [r7, #28]
 800bfe6:	f7ff f883 	bl	800b0f0 <tcp_oos_insert_segment>
                  }
                  break;
 800bfea:	e0e1      	b.n	800c1b0 <tcp_receive+0xeb8>
 800bfec:	200088f8 	.word	0x200088f8
 800bff0:	200088f5 	.word	0x200088f5
 800bff4:	200088c8 	.word	0x200088c8
 800bff8:	200088e8 	.word	0x200088e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffe:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	f040 80c5 	bne.w	800c194 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c00a:	4b7f      	ldr	r3, [pc, #508]	@ (800c208 <tcp_receive+0xf10>)
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c016:	2b00      	cmp	r3, #0
 800c018:	f340 80bc 	ble.w	800c194 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	899b      	ldrh	r3, [r3, #12]
 800c022:	b29b      	uxth	r3, r3
 800c024:	4618      	mov	r0, r3
 800c026:	f7f9 ff7d 	bl	8005f24 <lwip_htons>
 800c02a:	4603      	mov	r3, r0
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	2b00      	cmp	r3, #0
 800c034:	f040 80be 	bne.w	800c1b4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c038:	4874      	ldr	r0, [pc, #464]	@ (800c20c <tcp_receive+0xf14>)
 800c03a:	f7fd fb09 	bl	8009650 <tcp_seg_copy>
 800c03e:	4602      	mov	r2, r0
 800c040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c042:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 80b5 	beq.w	800c1b8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c056:	8912      	ldrh	r2, [r2, #8]
 800c058:	441a      	add	r2, r3
 800c05a:	4b6b      	ldr	r3, [pc, #428]	@ (800c208 <tcp_receive+0xf10>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	dd12      	ble.n	800c08a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c064:	4b68      	ldr	r3, [pc, #416]	@ (800c208 <tcp_receive+0xf10>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	b29a      	uxth	r2, r3
 800c06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	b29b      	uxth	r3, r3
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29a      	uxth	r2, r3
 800c076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c078:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c080:	891b      	ldrh	r3, [r3, #8]
 800c082:	4619      	mov	r1, r3
 800c084:	4610      	mov	r0, r2
 800c086:	f7fb fd65 	bl	8007b54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c08a:	4b61      	ldr	r3, [pc, #388]	@ (800c210 <tcp_receive+0xf18>)
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	4b5d      	ldr	r3, [pc, #372]	@ (800c208 <tcp_receive+0xf10>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	441a      	add	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c09e:	440b      	add	r3, r1
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f340 8088 	ble.w	800c1b8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	899b      	ldrh	r3, [r3, #12]
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7f9 ff36 	bl	8005f24 <lwip_htons>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d021      	beq.n	800c108 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	899b      	ldrh	r3, [r3, #12]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	b21b      	sxth	r3, r3
 800c0d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c0d4:	b21c      	sxth	r4, r3
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	899b      	ldrh	r3, [r3, #12]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f9 ff1f 	bl	8005f24 <lwip_htons>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7f9 ff17 	bl	8005f24 <lwip_htons>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	b21b      	sxth	r3, r3
 800c0fa:	4323      	orrs	r3, r4
 800c0fc:	b21a      	sxth	r2, r3
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	b292      	uxth	r2, r2
 800c106:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c112:	4413      	add	r3, r2
 800c114:	b299      	uxth	r1, r3
 800c116:	4b3c      	ldr	r3, [pc, #240]	@ (800c208 <tcp_receive+0xf10>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	1a8a      	subs	r2, r1, r2
 800c122:	b292      	uxth	r2, r2
 800c124:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	891b      	ldrh	r3, [r3, #8]
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7fb fd0d 	bl	8007b54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	891c      	ldrh	r4, [r3, #8]
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	899b      	ldrh	r3, [r3, #12]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7f9 feea 	bl	8005f24 <lwip_htons>
 800c150:	4603      	mov	r3, r0
 800c152:	b2db      	uxtb	r3, r3
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <tcp_receive+0xe68>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e000      	b.n	800c162 <tcp_receive+0xe6a>
 800c160:	2300      	movs	r3, #0
 800c162:	4423      	add	r3, r4
 800c164:	b29a      	uxth	r2, r3
 800c166:	4b2a      	ldr	r3, [pc, #168]	@ (800c210 <tcp_receive+0xf18>)
 800c168:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c16a:	4b29      	ldr	r3, [pc, #164]	@ (800c210 <tcp_receive+0xf18>)
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	4b25      	ldr	r3, [pc, #148]	@ (800c208 <tcp_receive+0xf10>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	441a      	add	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c17e:	440b      	add	r3, r1
 800c180:	429a      	cmp	r2, r3
 800c182:	d019      	beq.n	800c1b8 <tcp_receive+0xec0>
 800c184:	4b23      	ldr	r3, [pc, #140]	@ (800c214 <tcp_receive+0xf1c>)
 800c186:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c18a:	4923      	ldr	r1, [pc, #140]	@ (800c218 <tcp_receive+0xf20>)
 800c18c:	4823      	ldr	r0, [pc, #140]	@ (800c21c <tcp_receive+0xf24>)
 800c18e:	f006 fdb3 	bl	8012cf8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c192:	e011      	b.n	800c1b8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f47f aea5 	bne.w	800beec <tcp_receive+0xbf4>
 800c1a2:	e00a      	b.n	800c1ba <tcp_receive+0xec2>
                break;
 800c1a4:	bf00      	nop
 800c1a6:	e008      	b.n	800c1ba <tcp_receive+0xec2>
                break;
 800c1a8:	bf00      	nop
 800c1aa:	e006      	b.n	800c1ba <tcp_receive+0xec2>
                  break;
 800c1ac:	bf00      	nop
 800c1ae:	e004      	b.n	800c1ba <tcp_receive+0xec2>
                  break;
 800c1b0:	bf00      	nop
 800c1b2:	e002      	b.n	800c1ba <tcp_receive+0xec2>
                  break;
 800c1b4:	bf00      	nop
 800c1b6:	e000      	b.n	800c1ba <tcp_receive+0xec2>
                break;
 800c1b8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f001 fa52 	bl	800d664 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c1c0:	e003      	b.n	800c1ca <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 fa4e 	bl	800d664 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c1c8:	e01a      	b.n	800c200 <tcp_receive+0xf08>
 800c1ca:	e019      	b.n	800c200 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c1cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c208 <tcp_receive+0xf10>)
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	db0a      	blt.n	800c1f0 <tcp_receive+0xef8>
 800c1da:	4b0b      	ldr	r3, [pc, #44]	@ (800c208 <tcp_receive+0xf10>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c1e6:	440b      	add	r3, r1
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dd07      	ble.n	800c200 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	8b5b      	ldrh	r3, [r3, #26]
 800c1f4:	f043 0302 	orr.w	r3, r3, #2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c1fe:	e7ff      	b.n	800c200 <tcp_receive+0xf08>
 800c200:	bf00      	nop
 800c202:	3750      	adds	r7, #80	@ 0x50
 800c204:	46bd      	mov	sp, r7
 800c206:	bdb0      	pop	{r4, r5, r7, pc}
 800c208:	200088e8 	.word	0x200088e8
 800c20c:	200088c8 	.word	0x200088c8
 800c210:	200088f2 	.word	0x200088f2
 800c214:	08014e04 	.word	0x08014e04
 800c218:	080151ac 	.word	0x080151ac
 800c21c:	08014e50 	.word	0x08014e50

0800c220 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c226:	4b15      	ldr	r3, [pc, #84]	@ (800c27c <tcp_get_next_optbyte+0x5c>)
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	b291      	uxth	r1, r2
 800c22e:	4a13      	ldr	r2, [pc, #76]	@ (800c27c <tcp_get_next_optbyte+0x5c>)
 800c230:	8011      	strh	r1, [r2, #0]
 800c232:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c234:	4b12      	ldr	r3, [pc, #72]	@ (800c280 <tcp_get_next_optbyte+0x60>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <tcp_get_next_optbyte+0x26>
 800c23c:	4b11      	ldr	r3, [pc, #68]	@ (800c284 <tcp_get_next_optbyte+0x64>)
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	88fa      	ldrh	r2, [r7, #6]
 800c242:	429a      	cmp	r2, r3
 800c244:	d208      	bcs.n	800c258 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c246:	4b10      	ldr	r3, [pc, #64]	@ (800c288 <tcp_get_next_optbyte+0x68>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3314      	adds	r3, #20
 800c24c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c24e:	88fb      	ldrh	r3, [r7, #6]
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	4413      	add	r3, r2
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	e00b      	b.n	800c270 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c258:	88fb      	ldrh	r3, [r7, #6]
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	4b09      	ldr	r3, [pc, #36]	@ (800c284 <tcp_get_next_optbyte+0x64>)
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c266:	4b06      	ldr	r3, [pc, #24]	@ (800c280 <tcp_get_next_optbyte+0x60>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	797b      	ldrb	r3, [r7, #5]
 800c26c:	4413      	add	r3, r2
 800c26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c270:	4618      	mov	r0, r3
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	200088e4 	.word	0x200088e4
 800c280:	200088e0 	.word	0x200088e0
 800c284:	200088de 	.word	0x200088de
 800c288:	200088d8 	.word	0x200088d8

0800c28c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <tcp_parseopt+0x1c>
 800c29a:	4b32      	ldr	r3, [pc, #200]	@ (800c364 <tcp_parseopt+0xd8>)
 800c29c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c2a0:	4931      	ldr	r1, [pc, #196]	@ (800c368 <tcp_parseopt+0xdc>)
 800c2a2:	4832      	ldr	r0, [pc, #200]	@ (800c36c <tcp_parseopt+0xe0>)
 800c2a4:	f006 fd28 	bl	8012cf8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c2a8:	4b31      	ldr	r3, [pc, #196]	@ (800c370 <tcp_parseopt+0xe4>)
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d056      	beq.n	800c35e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c2b0:	4b30      	ldr	r3, [pc, #192]	@ (800c374 <tcp_parseopt+0xe8>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	801a      	strh	r2, [r3, #0]
 800c2b6:	e046      	b.n	800c346 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800c2b8:	f7ff ffb2 	bl	800c220 <tcp_get_next_optbyte>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d006      	beq.n	800c2d4 <tcp_parseopt+0x48>
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	dc2a      	bgt.n	800c320 <tcp_parseopt+0x94>
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d042      	beq.n	800c354 <tcp_parseopt+0xc8>
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d038      	beq.n	800c344 <tcp_parseopt+0xb8>
 800c2d2:	e025      	b.n	800c320 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c2d4:	f7ff ffa4 	bl	800c220 <tcp_get_next_optbyte>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	d13c      	bne.n	800c358 <tcp_parseopt+0xcc>
 800c2de:	4b25      	ldr	r3, [pc, #148]	@ (800c374 <tcp_parseopt+0xe8>)
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	4a22      	ldr	r2, [pc, #136]	@ (800c370 <tcp_parseopt+0xe4>)
 800c2e6:	8812      	ldrh	r2, [r2, #0]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	da35      	bge.n	800c358 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c2ec:	f7ff ff98 	bl	800c220 <tcp_get_next_optbyte>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	021b      	lsls	r3, r3, #8
 800c2f4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c2f6:	f7ff ff93 	bl	800c220 <tcp_get_next_optbyte>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	89bb      	ldrh	r3, [r7, #12]
 800c300:	4313      	orrs	r3, r2
 800c302:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c304:	89bb      	ldrh	r3, [r7, #12]
 800c306:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c30a:	d804      	bhi.n	800c316 <tcp_parseopt+0x8a>
 800c30c:	89bb      	ldrh	r3, [r7, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <tcp_parseopt+0x8a>
 800c312:	89ba      	ldrh	r2, [r7, #12]
 800c314:	e001      	b.n	800c31a <tcp_parseopt+0x8e>
 800c316:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800c31e:	e012      	b.n	800c346 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c320:	f7ff ff7e 	bl	800c220 <tcp_get_next_optbyte>
 800c324:	4603      	mov	r3, r0
 800c326:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d916      	bls.n	800c35c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c32e:	7afb      	ldrb	r3, [r7, #11]
 800c330:	b29a      	uxth	r2, r3
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <tcp_parseopt+0xe8>)
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	4413      	add	r3, r2
 800c338:	b29b      	uxth	r3, r3
 800c33a:	3b02      	subs	r3, #2
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <tcp_parseopt+0xe8>)
 800c340:	801a      	strh	r2, [r3, #0]
 800c342:	e000      	b.n	800c346 <tcp_parseopt+0xba>
          break;
 800c344:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c346:	4b0b      	ldr	r3, [pc, #44]	@ (800c374 <tcp_parseopt+0xe8>)
 800c348:	881a      	ldrh	r2, [r3, #0]
 800c34a:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <tcp_parseopt+0xe4>)
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d3b2      	bcc.n	800c2b8 <tcp_parseopt+0x2c>
 800c352:	e004      	b.n	800c35e <tcp_parseopt+0xd2>
          return;
 800c354:	bf00      	nop
 800c356:	e002      	b.n	800c35e <tcp_parseopt+0xd2>
            return;
 800c358:	bf00      	nop
 800c35a:	e000      	b.n	800c35e <tcp_parseopt+0xd2>
            return;
 800c35c:	bf00      	nop
      }
    }
  }
}
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	08014e04 	.word	0x08014e04
 800c368:	08015268 	.word	0x08015268
 800c36c:	08014e50 	.word	0x08014e50
 800c370:	200088dc 	.word	0x200088dc
 800c374:	200088e4 	.word	0x200088e4

0800c378 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c378:	b480      	push	{r7}
 800c37a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c37c:	4b05      	ldr	r3, [pc, #20]	@ (800c394 <tcp_trigger_input_pcb_close+0x1c>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f043 0310 	orr.w	r3, r3, #16
 800c384:	b2da      	uxtb	r2, r3
 800c386:	4b03      	ldr	r3, [pc, #12]	@ (800c394 <tcp_trigger_input_pcb_close+0x1c>)
 800c388:	701a      	strb	r2, [r3, #0]
}
 800c38a:	bf00      	nop
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	200088f5 	.word	0x200088f5

0800c398 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00a      	beq.n	800c3c0 <tcp_route+0x28>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	7a1b      	ldrb	r3, [r3, #8]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d006      	beq.n	800c3c0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	7a1b      	ldrb	r3, [r3, #8]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fb f9f2 	bl	80077a0 <netif_get_by_index>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	e003      	b.n	800c3c8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f005 f919 	bl	80115f8 <ip4_route>
 800c3c6:	4603      	mov	r3, r0
  }
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c3d0:	b590      	push	{r4, r7, lr}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	603b      	str	r3, [r7, #0]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d105      	bne.n	800c3f2 <tcp_create_segment+0x22>
 800c3e6:	4b43      	ldr	r3, [pc, #268]	@ (800c4f4 <tcp_create_segment+0x124>)
 800c3e8:	22a3      	movs	r2, #163	@ 0xa3
 800c3ea:	4943      	ldr	r1, [pc, #268]	@ (800c4f8 <tcp_create_segment+0x128>)
 800c3ec:	4843      	ldr	r0, [pc, #268]	@ (800c4fc <tcp_create_segment+0x12c>)
 800c3ee:	f006 fc83 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d105      	bne.n	800c404 <tcp_create_segment+0x34>
 800c3f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4f4 <tcp_create_segment+0x124>)
 800c3fa:	22a4      	movs	r2, #164	@ 0xa4
 800c3fc:	4940      	ldr	r1, [pc, #256]	@ (800c500 <tcp_create_segment+0x130>)
 800c3fe:	483f      	ldr	r0, [pc, #252]	@ (800c4fc <tcp_create_segment+0x12c>)
 800c400:	f006 fc7a 	bl	8012cf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c404:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	f003 0304 	and.w	r3, r3, #4
 800c410:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c412:	2003      	movs	r0, #3
 800c414:	f7fa fe18 	bl	8007048 <memp_malloc>
 800c418:	6138      	str	r0, [r7, #16]
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d104      	bne.n	800c42a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c420:	68b8      	ldr	r0, [r7, #8]
 800c422:	f7fb fd1d 	bl	8007e60 <pbuf_free>
    return NULL;
 800c426:	2300      	movs	r3, #0
 800c428:	e060      	b.n	800c4ec <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c430:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	891a      	ldrh	r2, [r3, #8]
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	b29b      	uxth	r3, r3
 800c446:	429a      	cmp	r2, r3
 800c448:	d205      	bcs.n	800c456 <tcp_create_segment+0x86>
 800c44a:	4b2a      	ldr	r3, [pc, #168]	@ (800c4f4 <tcp_create_segment+0x124>)
 800c44c:	22b0      	movs	r2, #176	@ 0xb0
 800c44e:	492d      	ldr	r1, [pc, #180]	@ (800c504 <tcp_create_segment+0x134>)
 800c450:	482a      	ldr	r0, [pc, #168]	@ (800c4fc <tcp_create_segment+0x12c>)
 800c452:	f006 fc51 	bl	8012cf8 <iprintf>
  seg->len = p->tot_len - optlen;
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	891a      	ldrh	r2, [r3, #8]
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	b29a      	uxth	r2, r3
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c466:	2114      	movs	r1, #20
 800c468:	68b8      	ldr	r0, [r7, #8]
 800c46a:	f7fb fc63 	bl	8007d34 <pbuf_add_header>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d004      	beq.n	800c47e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c474:	6938      	ldr	r0, [r7, #16]
 800c476:	f7fd f8d2 	bl	800961e <tcp_seg_free>
    return NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	e036      	b.n	800c4ec <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	8ada      	ldrh	r2, [r3, #22]
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	68dc      	ldr	r4, [r3, #12]
 800c490:	4610      	mov	r0, r2
 800c492:	f7f9 fd47 	bl	8005f24 <lwip_htons>
 800c496:	4603      	mov	r3, r0
 800c498:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	8b1a      	ldrh	r2, [r3, #24]
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	68dc      	ldr	r4, [r3, #12]
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	f7f9 fd3e 	bl	8005f24 <lwip_htons>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	68dc      	ldr	r4, [r3, #12]
 800c4b0:	6838      	ldr	r0, [r7, #0]
 800c4b2:	f7f9 fd4c 	bl	8005f4e <lwip_htonl>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c4ba:	7dfb      	ldrb	r3, [r7, #23]
 800c4bc:	089b      	lsrs	r3, r3, #2
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	3305      	adds	r3, #5
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	031b      	lsls	r3, r3, #12
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	79fb      	ldrb	r3, [r7, #7]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	68dc      	ldr	r4, [r3, #12]
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	f7f9 fd25 	bl	8005f24 <lwip_htons>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	749a      	strb	r2, [r3, #18]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	74da      	strb	r2, [r3, #19]
  return seg;
 800c4ea:	693b      	ldr	r3, [r7, #16]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	371c      	adds	r7, #28
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd90      	pop	{r4, r7, pc}
 800c4f4:	08015284 	.word	0x08015284
 800c4f8:	080152b8 	.word	0x080152b8
 800c4fc:	080152d8 	.word	0x080152d8
 800c500:	08015300 	.word	0x08015300
 800c504:	08015324 	.word	0x08015324

0800c508 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b08b      	sub	sp, #44	@ 0x2c
 800c50c:	af02      	add	r7, sp, #8
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	460b      	mov	r3, r1
 800c512:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	61fb      	str	r3, [r7, #28]
 800c518:	2300      	movs	r3, #0
 800c51a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <tcp_split_unsent_seg+0x2c>
 800c526:	4b95      	ldr	r3, [pc, #596]	@ (800c77c <tcp_split_unsent_seg+0x274>)
 800c528:	f240 324b 	movw	r2, #843	@ 0x34b
 800c52c:	4994      	ldr	r1, [pc, #592]	@ (800c780 <tcp_split_unsent_seg+0x278>)
 800c52e:	4895      	ldr	r0, [pc, #596]	@ (800c784 <tcp_split_unsent_seg+0x27c>)
 800c530:	f006 fbe2 	bl	8012cf8 <iprintf>

  useg = pcb->unsent;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c538:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d102      	bne.n	800c546 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c540:	f04f 33ff 	mov.w	r3, #4294967295
 800c544:	e116      	b.n	800c774 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c546:	887b      	ldrh	r3, [r7, #2]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d109      	bne.n	800c560 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c54c:	4b8b      	ldr	r3, [pc, #556]	@ (800c77c <tcp_split_unsent_seg+0x274>)
 800c54e:	f240 3253 	movw	r2, #851	@ 0x353
 800c552:	498d      	ldr	r1, [pc, #564]	@ (800c788 <tcp_split_unsent_seg+0x280>)
 800c554:	488b      	ldr	r0, [pc, #556]	@ (800c784 <tcp_split_unsent_seg+0x27c>)
 800c556:	f006 fbcf 	bl	8012cf8 <iprintf>
    return ERR_VAL;
 800c55a:	f06f 0305 	mvn.w	r3, #5
 800c55e:	e109      	b.n	800c774 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	891b      	ldrh	r3, [r3, #8]
 800c564:	887a      	ldrh	r2, [r7, #2]
 800c566:	429a      	cmp	r2, r3
 800c568:	d301      	bcc.n	800c56e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e102      	b.n	800c774 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c572:	887a      	ldrh	r2, [r7, #2]
 800c574:	429a      	cmp	r2, r3
 800c576:	d906      	bls.n	800c586 <tcp_split_unsent_seg+0x7e>
 800c578:	4b80      	ldr	r3, [pc, #512]	@ (800c77c <tcp_split_unsent_seg+0x274>)
 800c57a:	f240 325b 	movw	r2, #859	@ 0x35b
 800c57e:	4983      	ldr	r1, [pc, #524]	@ (800c78c <tcp_split_unsent_seg+0x284>)
 800c580:	4880      	ldr	r0, [pc, #512]	@ (800c784 <tcp_split_unsent_seg+0x27c>)
 800c582:	f006 fbb9 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	891b      	ldrh	r3, [r3, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <tcp_split_unsent_seg+0x94>
 800c58e:	4b7b      	ldr	r3, [pc, #492]	@ (800c77c <tcp_split_unsent_seg+0x274>)
 800c590:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c594:	497e      	ldr	r1, [pc, #504]	@ (800c790 <tcp_split_unsent_seg+0x288>)
 800c596:	487b      	ldr	r0, [pc, #492]	@ (800c784 <tcp_split_unsent_seg+0x27c>)
 800c598:	f006 fbae 	bl	8012cf8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	7a9b      	ldrb	r3, [r3, #10]
 800c5a0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	f003 0304 	and.w	r3, r3, #4
 800c5ac:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	891a      	ldrh	r2, [r3, #8]
 800c5b2:	887b      	ldrh	r3, [r7, #2]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	89bb      	ldrh	r3, [r7, #12]
 800c5be:	4413      	add	r3, r2
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	2036      	movs	r0, #54	@ 0x36
 800c5ca:	f7fb f965 	bl	8007898 <pbuf_alloc>
 800c5ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 80b7 	beq.w	800c746 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	891a      	ldrh	r2, [r3, #8]
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	891b      	ldrh	r3, [r3, #8]
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	887b      	ldrh	r3, [r7, #2]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	6858      	ldr	r0, [r3, #4]
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	7bbb      	ldrb	r3, [r7, #14]
 800c5f6:	18d1      	adds	r1, r2, r3
 800c5f8:	897b      	ldrh	r3, [r7, #10]
 800c5fa:	89ba      	ldrh	r2, [r7, #12]
 800c5fc:	f7fb fe2a 	bl	8008254 <pbuf_copy_partial>
 800c600:	4603      	mov	r3, r0
 800c602:	461a      	mov	r2, r3
 800c604:	89bb      	ldrh	r3, [r7, #12]
 800c606:	4293      	cmp	r3, r2
 800c608:	f040 809f 	bne.w	800c74a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	899b      	ldrh	r3, [r3, #12]
 800c612:	b29b      	uxth	r3, r3
 800c614:	4618      	mov	r0, r3
 800c616:	f7f9 fc85 	bl	8005f24 <lwip_htons>
 800c61a:	4603      	mov	r3, r0
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c622:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c624:	2300      	movs	r3, #0
 800c626:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c628:	7efb      	ldrb	r3, [r7, #27]
 800c62a:	f003 0308 	and.w	r3, r3, #8
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c632:	7efb      	ldrb	r3, [r7, #27]
 800c634:	f023 0308 	bic.w	r3, r3, #8
 800c638:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c63a:	7ebb      	ldrb	r3, [r7, #26]
 800c63c:	f043 0308 	orr.w	r3, r3, #8
 800c640:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c642:	7efb      	ldrb	r3, [r7, #27]
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d007      	beq.n	800c65c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c64c:	7efb      	ldrb	r3, [r7, #27]
 800c64e:	f023 0301 	bic.w	r3, r3, #1
 800c652:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c654:	7ebb      	ldrb	r3, [r7, #26]
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	4618      	mov	r0, r3
 800c664:	f7f9 fc73 	bl	8005f4e <lwip_htonl>
 800c668:	4602      	mov	r2, r0
 800c66a:	887b      	ldrh	r3, [r7, #2]
 800c66c:	18d1      	adds	r1, r2, r3
 800c66e:	7eba      	ldrb	r2, [r7, #26]
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	460b      	mov	r3, r1
 800c676:	6939      	ldr	r1, [r7, #16]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff fea9 	bl	800c3d0 <tcp_create_segment>
 800c67e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d063      	beq.n	800c74e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fb fc70 	bl	8007f70 <pbuf_clen>
 800c690:	4603      	mov	r3, r0
 800c692:	461a      	mov	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c69a:	1a9b      	subs	r3, r3, r2
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	6858      	ldr	r0, [r3, #4]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	891a      	ldrh	r2, [r3, #8]
 800c6ae:	89bb      	ldrh	r3, [r7, #12]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	f7fb fa4d 	bl	8007b54 <pbuf_realloc>
  useg->len -= remainder;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	891a      	ldrh	r2, [r3, #8]
 800c6be:	89bb      	ldrh	r3, [r7, #12]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	899b      	ldrh	r3, [r3, #12]
 800c6ce:	b29c      	uxth	r4, r3
 800c6d0:	7efb      	ldrb	r3, [r7, #27]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7f9 fc25 	bl	8005f24 <lwip_htons>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	461a      	mov	r2, r3
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	4322      	orrs	r2, r4
 800c6e4:	b292      	uxth	r2, r2
 800c6e6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fb fc3f 	bl	8007f70 <pbuf_clen>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c6fc:	4413      	add	r3, r2
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fb fc30 	bl	8007f70 <pbuf_clen>
 800c710:	4603      	mov	r3, r0
 800c712:	461a      	mov	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c71a:	4413      	add	r3, r2
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	69fa      	ldr	r2, [r7, #28]
 800c730:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d103      	bne.n	800c742 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	e016      	b.n	800c774 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c746:	bf00      	nop
 800c748:	e002      	b.n	800c750 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c74a:	bf00      	nop
 800c74c:	e000      	b.n	800c750 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c74e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d006      	beq.n	800c764 <tcp_split_unsent_seg+0x25c>
 800c756:	4b09      	ldr	r3, [pc, #36]	@ (800c77c <tcp_split_unsent_seg+0x274>)
 800c758:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c75c:	490d      	ldr	r1, [pc, #52]	@ (800c794 <tcp_split_unsent_seg+0x28c>)
 800c75e:	4809      	ldr	r0, [pc, #36]	@ (800c784 <tcp_split_unsent_seg+0x27c>)
 800c760:	f006 faca 	bl	8012cf8 <iprintf>
  if (p != NULL) {
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d002      	beq.n	800c770 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c76a:	6938      	ldr	r0, [r7, #16]
 800c76c:	f7fb fb78 	bl	8007e60 <pbuf_free>
  }

  return ERR_MEM;
 800c770:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c774:	4618      	mov	r0, r3
 800c776:	3724      	adds	r7, #36	@ 0x24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd90      	pop	{r4, r7, pc}
 800c77c:	08015284 	.word	0x08015284
 800c780:	08015618 	.word	0x08015618
 800c784:	080152d8 	.word	0x080152d8
 800c788:	0801563c 	.word	0x0801563c
 800c78c:	08015660 	.word	0x08015660
 800c790:	08015670 	.word	0x08015670
 800c794:	08015680 	.word	0x08015680

0800c798 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c798:	b590      	push	{r4, r7, lr}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d106      	bne.n	800c7b4 <tcp_send_fin+0x1c>
 800c7a6:	4b21      	ldr	r3, [pc, #132]	@ (800c82c <tcp_send_fin+0x94>)
 800c7a8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c7ac:	4920      	ldr	r1, [pc, #128]	@ (800c830 <tcp_send_fin+0x98>)
 800c7ae:	4821      	ldr	r0, [pc, #132]	@ (800c834 <tcp_send_fin+0x9c>)
 800c7b0:	f006 faa2 	bl	8012cf8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d02e      	beq.n	800c81a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	e002      	b.n	800c7ca <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f8      	bne.n	800c7c4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	899b      	ldrh	r3, [r3, #12]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f9 fba2 	bl	8005f24 <lwip_htons>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0307 	and.w	r3, r3, #7
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d116      	bne.n	800c81a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	899b      	ldrh	r3, [r3, #12]
 800c7f2:	b29c      	uxth	r4, r3
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	f7f9 fb95 	bl	8005f24 <lwip_htons>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	4322      	orrs	r2, r4
 800c804:	b292      	uxth	r2, r2
 800c806:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	8b5b      	ldrh	r3, [r3, #26]
 800c80c:	f043 0320 	orr.w	r3, r3, #32
 800c810:	b29a      	uxth	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c816:	2300      	movs	r3, #0
 800c818:	e004      	b.n	800c824 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c81a:	2101      	movs	r1, #1
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f80b 	bl	800c838 <tcp_enqueue_flags>
 800c822:	4603      	mov	r3, r0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd90      	pop	{r4, r7, pc}
 800c82c:	08015284 	.word	0x08015284
 800c830:	0801568c 	.word	0x0801568c
 800c834:	080152d8 	.word	0x080152d8

0800c838 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	@ 0x28
 800c83c:	af02      	add	r7, sp, #8
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c84c:	78fb      	ldrb	r3, [r7, #3]
 800c84e:	f003 0303 	and.w	r3, r3, #3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d106      	bne.n	800c864 <tcp_enqueue_flags+0x2c>
 800c856:	4b67      	ldr	r3, [pc, #412]	@ (800c9f4 <tcp_enqueue_flags+0x1bc>)
 800c858:	f240 4211 	movw	r2, #1041	@ 0x411
 800c85c:	4966      	ldr	r1, [pc, #408]	@ (800c9f8 <tcp_enqueue_flags+0x1c0>)
 800c85e:	4867      	ldr	r0, [pc, #412]	@ (800c9fc <tcp_enqueue_flags+0x1c4>)
 800c860:	f006 fa4a 	bl	8012cf8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <tcp_enqueue_flags+0x40>
 800c86a:	4b62      	ldr	r3, [pc, #392]	@ (800c9f4 <tcp_enqueue_flags+0x1bc>)
 800c86c:	f240 4213 	movw	r2, #1043	@ 0x413
 800c870:	4963      	ldr	r1, [pc, #396]	@ (800ca00 <tcp_enqueue_flags+0x1c8>)
 800c872:	4862      	ldr	r0, [pc, #392]	@ (800c9fc <tcp_enqueue_flags+0x1c4>)
 800c874:	f006 fa40 	bl	8012cf8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c878:	78fb      	ldrb	r3, [r7, #3]
 800c87a:	f003 0302 	and.w	r3, r3, #2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c882:	2301      	movs	r3, #1
 800c884:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c886:	7ffb      	ldrb	r3, [r7, #31]
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	b29b      	uxth	r3, r3
 800c896:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c89a:	4619      	mov	r1, r3
 800c89c:	2036      	movs	r0, #54	@ 0x36
 800c89e:	f7fa fffb 	bl	8007898 <pbuf_alloc>
 800c8a2:	6138      	str	r0, [r7, #16]
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d109      	bne.n	800c8be <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	8b5b      	ldrh	r3, [r3, #26]
 800c8ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8bc:	e095      	b.n	800c9ea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	895a      	ldrh	r2, [r3, #10]
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d206      	bcs.n	800c8d8 <tcp_enqueue_flags+0xa0>
 800c8ca:	4b4a      	ldr	r3, [pc, #296]	@ (800c9f4 <tcp_enqueue_flags+0x1bc>)
 800c8cc:	f240 4239 	movw	r2, #1081	@ 0x439
 800c8d0:	494c      	ldr	r1, [pc, #304]	@ (800ca04 <tcp_enqueue_flags+0x1cc>)
 800c8d2:	484a      	ldr	r0, [pc, #296]	@ (800c9fc <tcp_enqueue_flags+0x1c4>)
 800c8d4:	f006 fa10 	bl	8012cf8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c8dc:	78fa      	ldrb	r2, [r7, #3]
 800c8de:	7ffb      	ldrb	r3, [r7, #31]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	6939      	ldr	r1, [r7, #16]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff fd72 	bl	800c3d0 <tcp_create_segment>
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d109      	bne.n	800c908 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	8b5b      	ldrh	r3, [r3, #26]
 800c8f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c902:	f04f 33ff 	mov.w	r3, #4294967295
 800c906:	e070      	b.n	800c9ea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	f003 0303 	and.w	r3, r3, #3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d006      	beq.n	800c922 <tcp_enqueue_flags+0xea>
 800c914:	4b37      	ldr	r3, [pc, #220]	@ (800c9f4 <tcp_enqueue_flags+0x1bc>)
 800c916:	f240 4242 	movw	r2, #1090	@ 0x442
 800c91a:	493b      	ldr	r1, [pc, #236]	@ (800ca08 <tcp_enqueue_flags+0x1d0>)
 800c91c:	4837      	ldr	r0, [pc, #220]	@ (800c9fc <tcp_enqueue_flags+0x1c4>)
 800c91e:	f006 f9eb 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	891b      	ldrh	r3, [r3, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d006      	beq.n	800c938 <tcp_enqueue_flags+0x100>
 800c92a:	4b32      	ldr	r3, [pc, #200]	@ (800c9f4 <tcp_enqueue_flags+0x1bc>)
 800c92c:	f240 4243 	movw	r2, #1091	@ 0x443
 800c930:	4936      	ldr	r1, [pc, #216]	@ (800ca0c <tcp_enqueue_flags+0x1d4>)
 800c932:	4832      	ldr	r0, [pc, #200]	@ (800c9fc <tcp_enqueue_flags+0x1c4>)
 800c934:	f006 f9e0 	bl	8012cf8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d103      	bne.n	800c948 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c946:	e00d      	b.n	800c964 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c94c:	61bb      	str	r3, [r7, #24]
 800c94e:	e002      	b.n	800c956 <tcp_enqueue_flags+0x11e>
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1f8      	bne.n	800c950 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c96c:	78fb      	ldrb	r3, [r7, #3]
 800c96e:	f003 0302 	and.w	r3, r3, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <tcp_enqueue_flags+0x148>
 800c976:	78fb      	ldrb	r3, [r7, #3]
 800c978:	f003 0301 	and.w	r3, r3, #1
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d006      	beq.n	800c9a2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	8b5b      	ldrh	r3, [r3, #26]
 800c998:	f043 0320 	orr.w	r3, r3, #32
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fb fae2 	bl	8007f70 <pbuf_clen>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c9b6:	4413      	add	r3, r2
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00e      	beq.n	800c9e8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10a      	bne.n	800c9e8 <tcp_enqueue_flags+0x1b0>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <tcp_enqueue_flags+0x1b0>
 800c9da:	4b06      	ldr	r3, [pc, #24]	@ (800c9f4 <tcp_enqueue_flags+0x1bc>)
 800c9dc:	f240 4265 	movw	r2, #1125	@ 0x465
 800c9e0:	490b      	ldr	r1, [pc, #44]	@ (800ca10 <tcp_enqueue_flags+0x1d8>)
 800c9e2:	4806      	ldr	r0, [pc, #24]	@ (800c9fc <tcp_enqueue_flags+0x1c4>)
 800c9e4:	f006 f988 	bl	8012cf8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3720      	adds	r7, #32
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08015284 	.word	0x08015284
 800c9f8:	080156a8 	.word	0x080156a8
 800c9fc:	080152d8 	.word	0x080152d8
 800ca00:	08015700 	.word	0x08015700
 800ca04:	08015720 	.word	0x08015720
 800ca08:	0801575c 	.word	0x0801575c
 800ca0c:	08015774 	.word	0x08015774
 800ca10:	080157a0 	.word	0x080157a0

0800ca14 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ca14:	b5b0      	push	{r4, r5, r7, lr}
 800ca16:	b08a      	sub	sp, #40	@ 0x28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <tcp_output+0x1c>
 800ca22:	4b8a      	ldr	r3, [pc, #552]	@ (800cc4c <tcp_output+0x238>)
 800ca24:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ca28:	4989      	ldr	r1, [pc, #548]	@ (800cc50 <tcp_output+0x23c>)
 800ca2a:	488a      	ldr	r0, [pc, #552]	@ (800cc54 <tcp_output+0x240>)
 800ca2c:	f006 f964 	bl	8012cf8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7d1b      	ldrb	r3, [r3, #20]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d106      	bne.n	800ca46 <tcp_output+0x32>
 800ca38:	4b84      	ldr	r3, [pc, #528]	@ (800cc4c <tcp_output+0x238>)
 800ca3a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ca3e:	4986      	ldr	r1, [pc, #536]	@ (800cc58 <tcp_output+0x244>)
 800ca40:	4884      	ldr	r0, [pc, #528]	@ (800cc54 <tcp_output+0x240>)
 800ca42:	f006 f959 	bl	8012cf8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ca46:	4b85      	ldr	r3, [pc, #532]	@ (800cc5c <tcp_output+0x248>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d101      	bne.n	800ca54 <tcp_output+0x40>
    return ERR_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	e1ce      	b.n	800cdf2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ca60:	4293      	cmp	r3, r2
 800ca62:	bf28      	it	cs
 800ca64:	4613      	movcs	r3, r2
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ca70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d10b      	bne.n	800ca8e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	8b5b      	ldrh	r3, [r3, #26]
 800ca7a:	f003 0302 	and.w	r3, r3, #2
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 81aa 	beq.w	800cdd8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fded 	bl	800d664 <tcp_send_empty_ack>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	e1b1      	b.n	800cdf2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3304      	adds	r3, #4
 800ca94:	461a      	mov	r2, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff fc7e 	bl	800c398 <tcp_route>
 800ca9c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d102      	bne.n	800caaa <tcp_output+0x96>
    return ERR_RTE;
 800caa4:	f06f 0303 	mvn.w	r3, #3
 800caa8:	e1a3      	b.n	800cdf2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d003      	beq.n	800cab8 <tcp_output+0xa4>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d111      	bne.n	800cadc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <tcp_output+0xb0>
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	3304      	adds	r3, #4
 800cac2:	e000      	b.n	800cac6 <tcp_output+0xb2>
 800cac4:	2300      	movs	r3, #0
 800cac6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d102      	bne.n	800cad4 <tcp_output+0xc0>
      return ERR_RTE;
 800cace:	f06f 0303 	mvn.w	r3, #3
 800cad2:	e18e      	b.n	800cdf2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7f9 fa33 	bl	8005f4e <lwip_htonl>
 800cae8:	4602      	mov	r2, r0
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caf2:	8912      	ldrh	r2, [r2, #8]
 800caf4:	4413      	add	r3, r2
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d227      	bcs.n	800cb4c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cb02:	461a      	mov	r2, r3
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d114      	bne.n	800cb34 <tcp_output+0x120>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d110      	bne.n	800cb34 <tcp_output+0x120>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10b      	bne.n	800cb34 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8b5b      	ldrh	r3, [r3, #26]
 800cb38:	f003 0302 	and.w	r3, r3, #2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 814d 	beq.w	800cddc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fd8e 	bl	800d664 <tcp_send_empty_ack>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	e152      	b.n	800cdf2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb58:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f000 811c 	beq.w	800cd9a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cb62:	e002      	b.n	800cb6a <tcp_output+0x156>
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	623b      	str	r3, [r7, #32]
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1f8      	bne.n	800cb64 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cb72:	e112      	b.n	800cd9a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	899b      	ldrh	r3, [r3, #12]
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7f9 f9d1 	bl	8005f24 <lwip_htons>
 800cb82:	4603      	mov	r3, r0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	f003 0304 	and.w	r3, r3, #4
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d006      	beq.n	800cb9c <tcp_output+0x188>
 800cb8e:	4b2f      	ldr	r3, [pc, #188]	@ (800cc4c <tcp_output+0x238>)
 800cb90:	f240 5236 	movw	r2, #1334	@ 0x536
 800cb94:	4932      	ldr	r1, [pc, #200]	@ (800cc60 <tcp_output+0x24c>)
 800cb96:	482f      	ldr	r0, [pc, #188]	@ (800cc54 <tcp_output+0x240>)
 800cb98:	f006 f8ae 	bl	8012cf8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d01f      	beq.n	800cbe4 <tcp_output+0x1d0>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8b5b      	ldrh	r3, [r3, #26]
 800cba8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d119      	bne.n	800cbe4 <tcp_output+0x1d0>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <tcp_output+0x1bc>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d110      	bne.n	800cbe4 <tcp_output+0x1d0>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbc6:	891a      	ldrh	r2, [r3, #8]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d209      	bcs.n	800cbe4 <tcp_output+0x1d0>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d004      	beq.n	800cbe4 <tcp_output+0x1d0>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cbe0:	2b08      	cmp	r3, #8
 800cbe2:	d901      	bls.n	800cbe8 <tcp_output+0x1d4>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e000      	b.n	800cbea <tcp_output+0x1d6>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d106      	bne.n	800cbfc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	8b5b      	ldrh	r3, [r3, #26]
 800cbf2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 80e4 	beq.w	800cdc4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7d1b      	ldrb	r3, [r3, #20]
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d00d      	beq.n	800cc20 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	899b      	ldrh	r3, [r3, #12]
 800cc0a:	b29c      	uxth	r4, r3
 800cc0c:	2010      	movs	r0, #16
 800cc0e:	f7f9 f989 	bl	8005f24 <lwip_htons>
 800cc12:	4603      	mov	r3, r0
 800cc14:	461a      	mov	r2, r3
 800cc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	4322      	orrs	r2, r4
 800cc1c:	b292      	uxth	r2, r2
 800cc1e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cc20:	697a      	ldr	r2, [r7, #20]
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc26:	f000 f909 	bl	800ce3c <tcp_output_segment>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cc2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d016      	beq.n	800cc64 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	8b5b      	ldrh	r3, [r3, #26]
 800cc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	835a      	strh	r2, [r3, #26]
      return err;
 800cc44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc48:	e0d3      	b.n	800cdf2 <tcp_output+0x3de>
 800cc4a:	bf00      	nop
 800cc4c:	08015284 	.word	0x08015284
 800cc50:	080157c8 	.word	0x080157c8
 800cc54:	080152d8 	.word	0x080152d8
 800cc58:	080157e0 	.word	0x080157e0
 800cc5c:	200088fc 	.word	0x200088fc
 800cc60:	08015808 	.word	0x08015808
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d006      	beq.n	800cc82 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	8b5b      	ldrh	r3, [r3, #26]
 800cc78:	f023 0303 	bic.w	r3, r3, #3
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f9 f960 	bl	8005f4e <lwip_htonl>
 800cc8e:	4604      	mov	r4, r0
 800cc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc92:	891b      	ldrh	r3, [r3, #8]
 800cc94:	461d      	mov	r5, r3
 800cc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	899b      	ldrh	r3, [r3, #12]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f9 f940 	bl	8005f24 <lwip_htons>
 800cca4:	4603      	mov	r3, r0
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f003 0303 	and.w	r3, r3, #3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <tcp_output+0x2a0>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e000      	b.n	800ccb6 <tcp_output+0x2a2>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	442b      	add	r3, r5
 800ccb8:	4423      	add	r3, r4
 800ccba:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da02      	bge.n	800ccce <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ccce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd0:	891b      	ldrh	r3, [r3, #8]
 800ccd2:	461c      	mov	r4, r3
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	899b      	ldrh	r3, [r3, #12]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7f9 f921 	bl	8005f24 <lwip_htons>
 800cce2:	4603      	mov	r3, r0
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	f003 0303 	and.w	r3, r3, #3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <tcp_output+0x2de>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e000      	b.n	800ccf4 <tcp_output+0x2e0>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4423      	add	r3, r4
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d049      	beq.n	800cd8e <tcp_output+0x37a>
      seg->next = NULL;
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d105      	bne.n	800cd14 <tcp_output+0x300>
        pcb->unacked = seg;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd0c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd10:	623b      	str	r3, [r7, #32]
 800cd12:	e03f      	b.n	800cd94 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f9 f917 	bl	8005f4e <lwip_htonl>
 800cd20:	4604      	mov	r4, r0
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f9 f910 	bl	8005f4e <lwip_htonl>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	1ae3      	subs	r3, r4, r3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	da24      	bge.n	800cd80 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3370      	adds	r3, #112	@ 0x70
 800cd3a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cd3c:	e002      	b.n	800cd44 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d011      	beq.n	800cd70 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7f9 f8fa 	bl	8005f4e <lwip_htonl>
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7f9 f8f3 	bl	8005f4e <lwip_htonl>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	dbe6      	blt.n	800cd3e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd76:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd7c:	601a      	str	r2, [r3, #0]
 800cd7e:	e009      	b.n	800cd94 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd84:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cd86:	6a3b      	ldr	r3, [r7, #32]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	623b      	str	r3, [r7, #32]
 800cd8c:	e002      	b.n	800cd94 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cd8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd90:	f7fc fc45 	bl	800961e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd98:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d012      	beq.n	800cdc6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f9 f8d1 	bl	8005f4e <lwip_htonl>
 800cdac:	4602      	mov	r2, r0
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdb6:	8912      	ldrh	r2, [r2, #8]
 800cdb8:	4413      	add	r3, r2
  while (seg != NULL &&
 800cdba:	69ba      	ldr	r2, [r7, #24]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	f4bf aed9 	bcs.w	800cb74 <tcp_output+0x160>
 800cdc2:	e000      	b.n	800cdc6 <tcp_output+0x3b2>
      break;
 800cdc4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d108      	bne.n	800cde0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800cdd6:	e004      	b.n	800cde2 <tcp_output+0x3ce>
    goto output_done;
 800cdd8:	bf00      	nop
 800cdda:	e002      	b.n	800cde2 <tcp_output+0x3ce>
    goto output_done;
 800cddc:	bf00      	nop
 800cdde:	e000      	b.n	800cde2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cde0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	8b5b      	ldrh	r3, [r3, #26]
 800cde6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3728      	adds	r7, #40	@ 0x28
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bdb0      	pop	{r4, r5, r7, pc}
 800cdfa:	bf00      	nop

0800cdfc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d106      	bne.n	800ce18 <tcp_output_segment_busy+0x1c>
 800ce0a:	4b09      	ldr	r3, [pc, #36]	@ (800ce30 <tcp_output_segment_busy+0x34>)
 800ce0c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800ce10:	4908      	ldr	r1, [pc, #32]	@ (800ce34 <tcp_output_segment_busy+0x38>)
 800ce12:	4809      	ldr	r0, [pc, #36]	@ (800ce38 <tcp_output_segment_busy+0x3c>)
 800ce14:	f005 ff70 	bl	8012cf8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	7b9b      	ldrb	r3, [r3, #14]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d001      	beq.n	800ce26 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	08015284 	.word	0x08015284
 800ce34:	08015820 	.word	0x08015820
 800ce38:	080152d8 	.word	0x080152d8

0800ce3c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ce3c:	b5b0      	push	{r4, r5, r7, lr}
 800ce3e:	b08c      	sub	sp, #48	@ 0x30
 800ce40:	af04      	add	r7, sp, #16
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <tcp_output_segment+0x20>
 800ce4e:	4b6d      	ldr	r3, [pc, #436]	@ (800d004 <tcp_output_segment+0x1c8>)
 800ce50:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800ce54:	496c      	ldr	r1, [pc, #432]	@ (800d008 <tcp_output_segment+0x1cc>)
 800ce56:	486d      	ldr	r0, [pc, #436]	@ (800d00c <tcp_output_segment+0x1d0>)
 800ce58:	f005 ff4e 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <tcp_output_segment+0x34>
 800ce62:	4b68      	ldr	r3, [pc, #416]	@ (800d004 <tcp_output_segment+0x1c8>)
 800ce64:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800ce68:	4969      	ldr	r1, [pc, #420]	@ (800d010 <tcp_output_segment+0x1d4>)
 800ce6a:	4868      	ldr	r0, [pc, #416]	@ (800d00c <tcp_output_segment+0x1d0>)
 800ce6c:	f005 ff44 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d106      	bne.n	800ce84 <tcp_output_segment+0x48>
 800ce76:	4b63      	ldr	r3, [pc, #396]	@ (800d004 <tcp_output_segment+0x1c8>)
 800ce78:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800ce7c:	4965      	ldr	r1, [pc, #404]	@ (800d014 <tcp_output_segment+0x1d8>)
 800ce7e:	4863      	ldr	r0, [pc, #396]	@ (800d00c <tcp_output_segment+0x1d0>)
 800ce80:	f005 ff3a 	bl	8012cf8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff ffb9 	bl	800cdfc <tcp_output_segment_busy>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	e0b3      	b.n	800cffc <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	68dc      	ldr	r4, [r3, #12]
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f7f9 f856 	bl	8005f4e <lwip_htonl>
 800cea2:	4603      	mov	r3, r0
 800cea4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	68dc      	ldr	r4, [r3, #12]
 800ceae:	4610      	mov	r0, r2
 800ceb0:	f7f9 f838 	bl	8005f24 <lwip_htons>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800cec0:	441a      	add	r2, r3
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	3314      	adds	r3, #20
 800cecc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	7a9b      	ldrb	r3, [r3, #10]
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d015      	beq.n	800cf06 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	3304      	adds	r3, #4
 800cede:	461a      	mov	r2, r3
 800cee0:	6879      	ldr	r1, [r7, #4]
 800cee2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800cee6:	f7fc fe91 	bl	8009c0c <tcp_eff_send_mss_netif>
 800ceea:	4603      	mov	r3, r0
 800ceec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ceee:	8b7b      	ldrh	r3, [r7, #26]
 800cef0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7f9 f82a 	bl	8005f4e <lwip_htonl>
 800cefa:	4602      	mov	r2, r0
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	3304      	adds	r3, #4
 800cf04:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	da02      	bge.n	800cf16 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2200      	movs	r2, #0
 800cf14:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10c      	bne.n	800cf38 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cf1e:	4b3e      	ldr	r3, [pc, #248]	@ (800d018 <tcp_output_segment+0x1dc>)
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f9 f80e 	bl	8005f4e <lwip_htonl>
 800cf32:	4602      	mov	r2, r0
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	68da      	ldr	r2, [r3, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	8959      	ldrh	r1, [r3, #10]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	8b3a      	ldrh	r2, [r7, #24]
 800cf52:	1a8a      	subs	r2, r1, r2
 800cf54:	b292      	uxth	r2, r2
 800cf56:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	8919      	ldrh	r1, [r3, #8]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	8b3a      	ldrh	r2, [r7, #24]
 800cf64:	1a8a      	subs	r2, r1, r2
 800cf66:	b292      	uxth	r2, r2
 800cf68:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	68d2      	ldr	r2, [r2, #12]
 800cf72:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	741a      	strb	r2, [r3, #16]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	68da      	ldr	r2, [r3, #12]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	7a9b      	ldrb	r3, [r3, #10]
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <tcp_output_segment+0x158>
 800cf90:	2318      	movs	r3, #24
 800cf92:	e000      	b.n	800cf96 <tcp_output_segment+0x15a>
 800cf94:	2314      	movs	r3, #20
 800cf96:	4413      	add	r3, r2
 800cf98:	69fa      	ldr	r2, [r7, #28]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d006      	beq.n	800cfac <tcp_output_segment+0x170>
 800cf9e:	4b19      	ldr	r3, [pc, #100]	@ (800d004 <tcp_output_segment+0x1c8>)
 800cfa0:	f240 621c 	movw	r2, #1564	@ 0x61c
 800cfa4:	491d      	ldr	r1, [pc, #116]	@ (800d01c <tcp_output_segment+0x1e0>)
 800cfa6:	4819      	ldr	r0, [pc, #100]	@ (800d00c <tcp_output_segment+0x1d0>)
 800cfa8:	f005 fea6 	bl	8012cf8 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800cfb4:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800cfb6:	68bd      	ldr	r5, [r7, #8]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	68d4      	ldr	r4, [r2, #12]
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	462b      	mov	r3, r5
 800cfc4:	460a      	mov	r2, r1
 800cfc6:	2106      	movs	r1, #6
 800cfc8:	f7f9 fbcb 	bl	8006762 <ip_chksum_pseudo>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6858      	ldr	r0, [r3, #4]
 800cfd4:	68b9      	ldr	r1, [r7, #8]
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	1d1c      	adds	r4, r3, #4
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	7add      	ldrb	r5, [r3, #11]
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	7a9b      	ldrb	r3, [r3, #10]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	9202      	str	r2, [sp, #8]
 800cfe6:	2206      	movs	r2, #6
 800cfe8:	9201      	str	r2, [sp, #4]
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	462b      	mov	r3, r5
 800cfee:	4622      	mov	r2, r4
 800cff0:	f004 fcde 	bl	80119b0 <ip4_output_if>
 800cff4:	4603      	mov	r3, r0
 800cff6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bdb0      	pop	{r4, r5, r7, pc}
 800d004:	08015284 	.word	0x08015284
 800d008:	08015848 	.word	0x08015848
 800d00c:	080152d8 	.word	0x080152d8
 800d010:	08015868 	.word	0x08015868
 800d014:	08015888 	.word	0x08015888
 800d018:	200088b0 	.word	0x200088b0
 800d01c:	080158ac 	.word	0x080158ac

0800d020 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d020:	b5b0      	push	{r4, r5, r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d106      	bne.n	800d03c <tcp_rexmit_rto_prepare+0x1c>
 800d02e:	4b31      	ldr	r3, [pc, #196]	@ (800d0f4 <tcp_rexmit_rto_prepare+0xd4>)
 800d030:	f240 6263 	movw	r2, #1635	@ 0x663
 800d034:	4930      	ldr	r1, [pc, #192]	@ (800d0f8 <tcp_rexmit_rto_prepare+0xd8>)
 800d036:	4831      	ldr	r0, [pc, #196]	@ (800d0fc <tcp_rexmit_rto_prepare+0xdc>)
 800d038:	f005 fe5e 	bl	8012cf8 <iprintf>

  if (pcb->unacked == NULL) {
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d044:	f06f 0305 	mvn.w	r3, #5
 800d048:	e050      	b.n	800d0ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d04e:	60fb      	str	r3, [r7, #12]
 800d050:	e00b      	b.n	800d06a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f7ff fed2 	bl	800cdfc <tcp_output_segment_busy>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d002      	beq.n	800d064 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d05e:	f06f 0305 	mvn.w	r3, #5
 800d062:	e043      	b.n	800d0ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1ef      	bne.n	800d052 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7ff fec2 	bl	800cdfc <tcp_output_segment_busy>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d002      	beq.n	800d084 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d07e:	f06f 0305 	mvn.w	r3, #5
 800d082:	e033      	b.n	800d0ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	8b5b      	ldrh	r3, [r3, #26]
 800d09e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7f8 ff4d 	bl	8005f4e <lwip_htonl>
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	891b      	ldrh	r3, [r3, #8]
 800d0ba:	461d      	mov	r5, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	899b      	ldrh	r3, [r3, #12]
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7f8 ff2d 	bl	8005f24 <lwip_htons>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	f003 0303 	and.w	r3, r3, #3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <tcp_rexmit_rto_prepare+0xba>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e000      	b.n	800d0dc <tcp_rexmit_rto_prepare+0xbc>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	442b      	add	r3, r5
 800d0de:	18e2      	adds	r2, r4, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bdb0      	pop	{r4, r5, r7, pc}
 800d0f4:	08015284 	.word	0x08015284
 800d0f8:	080158c0 	.word	0x080158c0
 800d0fc:	080152d8 	.word	0x080152d8

0800d100 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d106      	bne.n	800d11c <tcp_rexmit_rto_commit+0x1c>
 800d10e:	4b0d      	ldr	r3, [pc, #52]	@ (800d144 <tcp_rexmit_rto_commit+0x44>)
 800d110:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d114:	490c      	ldr	r1, [pc, #48]	@ (800d148 <tcp_rexmit_rto_commit+0x48>)
 800d116:	480d      	ldr	r0, [pc, #52]	@ (800d14c <tcp_rexmit_rto_commit+0x4c>)
 800d118:	f005 fdee 	bl	8012cf8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d122:	2bff      	cmp	r3, #255	@ 0xff
 800d124:	d007      	beq.n	800d136 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d12c:	3301      	adds	r3, #1
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff fc6c 	bl	800ca14 <tcp_output>
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	08015284 	.word	0x08015284
 800d148:	080158e4 	.word	0x080158e4
 800d14c:	080152d8 	.word	0x080152d8

0800d150 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <tcp_rexmit_rto+0x1c>
 800d15e:	4b0a      	ldr	r3, [pc, #40]	@ (800d188 <tcp_rexmit_rto+0x38>)
 800d160:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d164:	4909      	ldr	r1, [pc, #36]	@ (800d18c <tcp_rexmit_rto+0x3c>)
 800d166:	480a      	ldr	r0, [pc, #40]	@ (800d190 <tcp_rexmit_rto+0x40>)
 800d168:	f005 fdc6 	bl	8012cf8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f7ff ff57 	bl	800d020 <tcp_rexmit_rto_prepare>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d102      	bne.n	800d17e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff ffc1 	bl	800d100 <tcp_rexmit_rto_commit>
  }
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	08015284 	.word	0x08015284
 800d18c:	08015908 	.word	0x08015908
 800d190:	080152d8 	.word	0x080152d8

0800d194 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d194:	b590      	push	{r4, r7, lr}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <tcp_rexmit+0x1c>
 800d1a2:	4b2f      	ldr	r3, [pc, #188]	@ (800d260 <tcp_rexmit+0xcc>)
 800d1a4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d1a8:	492e      	ldr	r1, [pc, #184]	@ (800d264 <tcp_rexmit+0xd0>)
 800d1aa:	482f      	ldr	r0, [pc, #188]	@ (800d268 <tcp_rexmit+0xd4>)
 800d1ac:	f005 fda4 	bl	8012cf8 <iprintf>

  if (pcb->unacked == NULL) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d102      	bne.n	800d1be <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d1b8:	f06f 0305 	mvn.w	r3, #5
 800d1bc:	e04c      	b.n	800d258 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d1c4:	68b8      	ldr	r0, [r7, #8]
 800d1c6:	f7ff fe19 	bl	800cdfc <tcp_output_segment_busy>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d1d0:	f06f 0305 	mvn.w	r3, #5
 800d1d4:	e040      	b.n	800d258 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	336c      	adds	r3, #108	@ 0x6c
 800d1e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d1e4:	e002      	b.n	800d1ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d011      	beq.n	800d218 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7f8 fea6 	bl	8005f4e <lwip_htonl>
 800d202:	4604      	mov	r4, r0
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7f8 fe9f 	bl	8005f4e <lwip_htonl>
 800d210:	4603      	mov	r3, r0
 800d212:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d214:	2b00      	cmp	r3, #0
 800d216:	dbe6      	blt.n	800d1e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d103      	bne.n	800d236 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d23c:	2bff      	cmp	r3, #255	@ 0xff
 800d23e:	d007      	beq.n	800d250 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d246:	3301      	adds	r3, #1
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3714      	adds	r7, #20
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd90      	pop	{r4, r7, pc}
 800d260:	08015284 	.word	0x08015284
 800d264:	08015924 	.word	0x08015924
 800d268:	080152d8 	.word	0x080152d8

0800d26c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d106      	bne.n	800d288 <tcp_rexmit_fast+0x1c>
 800d27a:	4b2a      	ldr	r3, [pc, #168]	@ (800d324 <tcp_rexmit_fast+0xb8>)
 800d27c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d280:	4929      	ldr	r1, [pc, #164]	@ (800d328 <tcp_rexmit_fast+0xbc>)
 800d282:	482a      	ldr	r0, [pc, #168]	@ (800d32c <tcp_rexmit_fast+0xc0>)
 800d284:	f005 fd38 	bl	8012cf8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d044      	beq.n	800d31a <tcp_rexmit_fast+0xae>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	8b5b      	ldrh	r3, [r3, #26]
 800d294:	f003 0304 	and.w	r3, r3, #4
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d13e      	bne.n	800d31a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7ff ff79 	bl	800d194 <tcp_rexmit>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d138      	bne.n	800d31a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	bf28      	it	cs
 800d2b8:	4613      	movcs	r3, r2
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	0fda      	lsrs	r2, r3, #31
 800d2be:	4413      	add	r3, r2
 800d2c0:	105b      	asrs	r3, r3, #1
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d206      	bcs.n	800d2ea <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	0049      	lsls	r1, r1, #1
 800d2f8:	440b      	add	r3, r1
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	4413      	add	r3, r2
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	8b5b      	ldrh	r3, [r3, #26]
 800d30a:	f043 0304 	orr.w	r3, r3, #4
 800d30e:	b29a      	uxth	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d31a:	bf00      	nop
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	08015284 	.word	0x08015284
 800d328:	0801593c 	.word	0x0801593c
 800d32c:	080152d8 	.word	0x080152d8

0800d330 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	607b      	str	r3, [r7, #4]
 800d33a:	460b      	mov	r3, r1
 800d33c:	817b      	strh	r3, [r7, #10]
 800d33e:	4613      	mov	r3, r2
 800d340:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d342:	897a      	ldrh	r2, [r7, #10]
 800d344:	893b      	ldrh	r3, [r7, #8]
 800d346:	4413      	add	r3, r2
 800d348:	b29b      	uxth	r3, r3
 800d34a:	3314      	adds	r3, #20
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d352:	4619      	mov	r1, r3
 800d354:	2022      	movs	r0, #34	@ 0x22
 800d356:	f7fa fa9f 	bl	8007898 <pbuf_alloc>
 800d35a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d04d      	beq.n	800d3fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d362:	897b      	ldrh	r3, [r7, #10]
 800d364:	3313      	adds	r3, #19
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	8952      	ldrh	r2, [r2, #10]
 800d36a:	4293      	cmp	r3, r2
 800d36c:	db06      	blt.n	800d37c <tcp_output_alloc_header_common+0x4c>
 800d36e:	4b26      	ldr	r3, [pc, #152]	@ (800d408 <tcp_output_alloc_header_common+0xd8>)
 800d370:	f240 7223 	movw	r2, #1827	@ 0x723
 800d374:	4925      	ldr	r1, [pc, #148]	@ (800d40c <tcp_output_alloc_header_common+0xdc>)
 800d376:	4826      	ldr	r0, [pc, #152]	@ (800d410 <tcp_output_alloc_header_common+0xe0>)
 800d378:	f005 fcbe 	bl	8012cf8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d382:	8c3b      	ldrh	r3, [r7, #32]
 800d384:	4618      	mov	r0, r3
 800d386:	f7f8 fdcd 	bl	8005f24 <lwip_htons>
 800d38a:	4603      	mov	r3, r0
 800d38c:	461a      	mov	r2, r3
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d394:	4618      	mov	r0, r3
 800d396:	f7f8 fdc5 	bl	8005f24 <lwip_htons>
 800d39a:	4603      	mov	r3, r0
 800d39c:	461a      	mov	r2, r3
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f7f8 fdd0 	bl	8005f4e <lwip_htonl>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d3b4:	897b      	ldrh	r3, [r7, #10]
 800d3b6:	089b      	lsrs	r3, r3, #2
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	3305      	adds	r3, #5
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	031b      	lsls	r3, r3, #12
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7f8 fda9 	bl	8005f24 <lwip_htons>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d3da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7f8 fda1 	bl	8005f24 <lwip_htons>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	741a      	strb	r2, [r3, #16]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	749a      	strb	r2, [r3, #18]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d3fe:	697b      	ldr	r3, [r7, #20]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	08015284 	.word	0x08015284
 800d40c:	0801595c 	.word	0x0801595c
 800d410:	080152d8 	.word	0x080152d8

0800d414 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d414:	b5b0      	push	{r4, r5, r7, lr}
 800d416:	b08a      	sub	sp, #40	@ 0x28
 800d418:	af04      	add	r7, sp, #16
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	607b      	str	r3, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	817b      	strh	r3, [r7, #10]
 800d422:	4613      	mov	r3, r2
 800d424:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d106      	bne.n	800d43a <tcp_output_alloc_header+0x26>
 800d42c:	4b15      	ldr	r3, [pc, #84]	@ (800d484 <tcp_output_alloc_header+0x70>)
 800d42e:	f240 7242 	movw	r2, #1858	@ 0x742
 800d432:	4915      	ldr	r1, [pc, #84]	@ (800d488 <tcp_output_alloc_header+0x74>)
 800d434:	4815      	ldr	r0, [pc, #84]	@ (800d48c <tcp_output_alloc_header+0x78>)
 800d436:	f005 fc5f 	bl	8012cf8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	8adb      	ldrh	r3, [r3, #22]
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	8b12      	ldrh	r2, [r2, #24]
 800d446:	68f9      	ldr	r1, [r7, #12]
 800d448:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d44a:	893d      	ldrh	r5, [r7, #8]
 800d44c:	897c      	ldrh	r4, [r7, #10]
 800d44e:	9103      	str	r1, [sp, #12]
 800d450:	2110      	movs	r1, #16
 800d452:	9102      	str	r1, [sp, #8]
 800d454:	9201      	str	r2, [sp, #4]
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	462a      	mov	r2, r5
 800d45c:	4621      	mov	r1, r4
 800d45e:	f7ff ff67 	bl	800d330 <tcp_output_alloc_header_common>
 800d462:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d006      	beq.n	800d478 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d472:	441a      	add	r2, r3
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d478:	697b      	ldr	r3, [r7, #20]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bdb0      	pop	{r4, r5, r7, pc}
 800d482:	bf00      	nop
 800d484:	08015284 	.word	0x08015284
 800d488:	0801598c 	.word	0x0801598c
 800d48c:	080152d8 	.word	0x080152d8

0800d490 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	4611      	mov	r1, r2
 800d49c:	461a      	mov	r2, r3
 800d49e:	460b      	mov	r3, r1
 800d4a0:	71fb      	strb	r3, [r7, #7]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <tcp_output_fill_options+0x2e>
 800d4b0:	4b12      	ldr	r3, [pc, #72]	@ (800d4fc <tcp_output_fill_options+0x6c>)
 800d4b2:	f240 7256 	movw	r2, #1878	@ 0x756
 800d4b6:	4912      	ldr	r1, [pc, #72]	@ (800d500 <tcp_output_fill_options+0x70>)
 800d4b8:	4812      	ldr	r0, [pc, #72]	@ (800d504 <tcp_output_fill_options+0x74>)
 800d4ba:	f005 fc1d 	bl	8012cf8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d4ca:	8bfb      	ldrh	r3, [r7, #30]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	f003 0304 	and.w	r3, r3, #4
 800d4d8:	4413      	add	r3, r2
 800d4da:	3314      	adds	r3, #20
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	4413      	add	r3, r2
 800d4e0:	697a      	ldr	r2, [r7, #20]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d006      	beq.n	800d4f4 <tcp_output_fill_options+0x64>
 800d4e6:	4b05      	ldr	r3, [pc, #20]	@ (800d4fc <tcp_output_fill_options+0x6c>)
 800d4e8:	f240 7275 	movw	r2, #1909	@ 0x775
 800d4ec:	4906      	ldr	r1, [pc, #24]	@ (800d508 <tcp_output_fill_options+0x78>)
 800d4ee:	4805      	ldr	r0, [pc, #20]	@ (800d504 <tcp_output_fill_options+0x74>)
 800d4f0:	f005 fc02 	bl	8012cf8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d4f4:	bf00      	nop
 800d4f6:	3720      	adds	r7, #32
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	08015284 	.word	0x08015284
 800d500:	080159b4 	.word	0x080159b4
 800d504:	080152d8 	.word	0x080152d8
 800d508:	080158ac 	.word	0x080158ac

0800d50c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08c      	sub	sp, #48	@ 0x30
 800d510:	af04      	add	r7, sp, #16
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d106      	bne.n	800d52e <tcp_output_control_segment+0x22>
 800d520:	4b24      	ldr	r3, [pc, #144]	@ (800d5b4 <tcp_output_control_segment+0xa8>)
 800d522:	f240 7287 	movw	r2, #1927	@ 0x787
 800d526:	4924      	ldr	r1, [pc, #144]	@ (800d5b8 <tcp_output_control_segment+0xac>)
 800d528:	4824      	ldr	r0, [pc, #144]	@ (800d5bc <tcp_output_control_segment+0xb0>)
 800d52a:	f005 fbe5 	bl	8012cf8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f7fe ff30 	bl	800c398 <tcp_route>
 800d538:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d102      	bne.n	800d546 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d540:	23fc      	movs	r3, #252	@ 0xfc
 800d542:	77fb      	strb	r3, [r7, #31]
 800d544:	e02c      	b.n	800d5a0 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	891a      	ldrh	r2, [r3, #8]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2106      	movs	r1, #6
 800d558:	68b8      	ldr	r0, [r7, #8]
 800d55a:	f7f9 f902 	bl	8006762 <ip_chksum_pseudo>
 800d55e:	4603      	mov	r3, r0
 800d560:	461a      	mov	r2, r3
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d006      	beq.n	800d57a <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	7adb      	ldrb	r3, [r3, #11]
 800d570:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	7a9b      	ldrb	r3, [r3, #10]
 800d576:	777b      	strb	r3, [r7, #29]
 800d578:	e003      	b.n	800d582 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d57a:	23ff      	movs	r3, #255	@ 0xff
 800d57c:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d582:	7fba      	ldrb	r2, [r7, #30]
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	9302      	str	r3, [sp, #8]
 800d588:	2306      	movs	r3, #6
 800d58a:	9301      	str	r3, [sp, #4]
 800d58c:	7f7b      	ldrb	r3, [r7, #29]
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	4613      	mov	r3, r2
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	6879      	ldr	r1, [r7, #4]
 800d596:	68b8      	ldr	r0, [r7, #8]
 800d598:	f004 fa0a 	bl	80119b0 <ip4_output_if>
 800d59c:	4603      	mov	r3, r0
 800d59e:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d5a0:	68b8      	ldr	r0, [r7, #8]
 800d5a2:	f7fa fc5d 	bl	8007e60 <pbuf_free>
  return err;
 800d5a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	08015284 	.word	0x08015284
 800d5b8:	080159dc 	.word	0x080159dc
 800d5bc:	080152d8 	.word	0x080152d8

0800d5c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d5c0:	b590      	push	{r4, r7, lr}
 800d5c2:	b08b      	sub	sp, #44	@ 0x2c
 800d5c4:	af04      	add	r7, sp, #16
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
 800d5cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d106      	bne.n	800d5e2 <tcp_rst+0x22>
 800d5d4:	4b1f      	ldr	r3, [pc, #124]	@ (800d654 <tcp_rst+0x94>)
 800d5d6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d5da:	491f      	ldr	r1, [pc, #124]	@ (800d658 <tcp_rst+0x98>)
 800d5dc:	481f      	ldr	r0, [pc, #124]	@ (800d65c <tcp_rst+0x9c>)
 800d5de:	f005 fb8b 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d106      	bne.n	800d5f6 <tcp_rst+0x36>
 800d5e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d654 <tcp_rst+0x94>)
 800d5ea:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d5ee:	491c      	ldr	r1, [pc, #112]	@ (800d660 <tcp_rst+0xa0>)
 800d5f0:	481a      	ldr	r0, [pc, #104]	@ (800d65c <tcp_rst+0x9c>)
 800d5f2:	f005 fb81 	bl	8012cf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d5fa:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d5fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d600:	7dfb      	ldrb	r3, [r7, #23]
 800d602:	b29c      	uxth	r4, r3
 800d604:	68b8      	ldr	r0, [r7, #8]
 800d606:	f7f8 fca2 	bl	8005f4e <lwip_htonl>
 800d60a:	4602      	mov	r2, r0
 800d60c:	8abb      	ldrh	r3, [r7, #20]
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	2314      	movs	r3, #20
 800d612:	9302      	str	r3, [sp, #8]
 800d614:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d616:	9301      	str	r3, [sp, #4]
 800d618:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4613      	mov	r3, r2
 800d61e:	2200      	movs	r2, #0
 800d620:	4621      	mov	r1, r4
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7ff fe84 	bl	800d330 <tcp_output_alloc_header_common>
 800d628:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00c      	beq.n	800d64a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d630:	7dfb      	ldrb	r3, [r7, #23]
 800d632:	2200      	movs	r2, #0
 800d634:	6939      	ldr	r1, [r7, #16]
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7ff ff2a 	bl	800d490 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	6939      	ldr	r1, [r7, #16]
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f7ff ff62 	bl	800d50c <tcp_output_control_segment>
 800d648:	e000      	b.n	800d64c <tcp_rst+0x8c>
    return;
 800d64a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d64c:	371c      	adds	r7, #28
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd90      	pop	{r4, r7, pc}
 800d652:	bf00      	nop
 800d654:	08015284 	.word	0x08015284
 800d658:	08015a08 	.word	0x08015a08
 800d65c:	080152d8 	.word	0x080152d8
 800d660:	08015a24 	.word	0x08015a24

0800d664 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d106      	bne.n	800d688 <tcp_send_empty_ack+0x24>
 800d67a:	4b28      	ldr	r3, [pc, #160]	@ (800d71c <tcp_send_empty_ack+0xb8>)
 800d67c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d680:	4927      	ldr	r1, [pc, #156]	@ (800d720 <tcp_send_empty_ack+0xbc>)
 800d682:	4828      	ldr	r0, [pc, #160]	@ (800d724 <tcp_send_empty_ack+0xc0>)
 800d684:	f005 fb38 	bl	8012cf8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d688:	7dfb      	ldrb	r3, [r7, #23]
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0304 	and.w	r3, r3, #4
 800d692:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d694:	7d7b      	ldrb	r3, [r7, #21]
 800d696:	b29c      	uxth	r4, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7f8 fc56 	bl	8005f4e <lwip_htonl>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7ff feb3 	bl	800d414 <tcp_output_alloc_header>
 800d6ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d109      	bne.n	800d6ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	8b5b      	ldrh	r3, [r3, #26]
 800d6ba:	f043 0303 	orr.w	r3, r3, #3
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d6c4:	f06f 0301 	mvn.w	r3, #1
 800d6c8:	e023      	b.n	800d712 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d6ca:	7dbb      	ldrb	r3, [r7, #22]
 800d6cc:	7dfa      	ldrb	r2, [r7, #23]
 800d6ce:	6939      	ldr	r1, [r7, #16]
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff fedd 	bl	800d490 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3304      	adds	r3, #4
 800d6dc:	6939      	ldr	r1, [r7, #16]
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff ff14 	bl	800d50c <tcp_output_control_segment>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d007      	beq.n	800d700 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	8b5b      	ldrh	r3, [r3, #26]
 800d6f4:	f043 0303 	orr.w	r3, r3, #3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	835a      	strh	r2, [r3, #26]
 800d6fe:	e006      	b.n	800d70e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	8b5b      	ldrh	r3, [r3, #26]
 800d704:	f023 0303 	bic.w	r3, r3, #3
 800d708:	b29a      	uxth	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	371c      	adds	r7, #28
 800d716:	46bd      	mov	sp, r7
 800d718:	bd90      	pop	{r4, r7, pc}
 800d71a:	bf00      	nop
 800d71c:	08015284 	.word	0x08015284
 800d720:	08015a40 	.word	0x08015a40
 800d724:	080152d8 	.word	0x080152d8

0800d728 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d728:	b590      	push	{r4, r7, lr}
 800d72a:	b087      	sub	sp, #28
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d730:	2300      	movs	r3, #0
 800d732:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d106      	bne.n	800d748 <tcp_keepalive+0x20>
 800d73a:	4b18      	ldr	r3, [pc, #96]	@ (800d79c <tcp_keepalive+0x74>)
 800d73c:	f640 0224 	movw	r2, #2084	@ 0x824
 800d740:	4917      	ldr	r1, [pc, #92]	@ (800d7a0 <tcp_keepalive+0x78>)
 800d742:	4818      	ldr	r0, [pc, #96]	@ (800d7a4 <tcp_keepalive+0x7c>)
 800d744:	f005 fad8 	bl	8012cf8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d748:	7dfb      	ldrb	r3, [r7, #23]
 800d74a:	b29c      	uxth	r4, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d750:	3b01      	subs	r3, #1
 800d752:	4618      	mov	r0, r3
 800d754:	f7f8 fbfb 	bl	8005f4e <lwip_htonl>
 800d758:	4603      	mov	r3, r0
 800d75a:	2200      	movs	r2, #0
 800d75c:	4621      	mov	r1, r4
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff fe58 	bl	800d414 <tcp_output_alloc_header>
 800d764:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d102      	bne.n	800d772 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d76c:	f04f 33ff 	mov.w	r3, #4294967295
 800d770:	e010      	b.n	800d794 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d772:	7dfb      	ldrb	r3, [r7, #23]
 800d774:	2200      	movs	r2, #0
 800d776:	6939      	ldr	r1, [r7, #16]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff fe89 	bl	800d490 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3304      	adds	r3, #4
 800d784:	6939      	ldr	r1, [r7, #16]
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff fec0 	bl	800d50c <tcp_output_control_segment>
 800d78c:	4603      	mov	r3, r0
 800d78e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d794:	4618      	mov	r0, r3
 800d796:	371c      	adds	r7, #28
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd90      	pop	{r4, r7, pc}
 800d79c:	08015284 	.word	0x08015284
 800d7a0:	08015a60 	.word	0x08015a60
 800d7a4:	080152d8 	.word	0x080152d8

0800d7a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d7a8:	b590      	push	{r4, r7, lr}
 800d7aa:	b08b      	sub	sp, #44	@ 0x2c
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <tcp_zero_window_probe+0x22>
 800d7bc:	4b4c      	ldr	r3, [pc, #304]	@ (800d8f0 <tcp_zero_window_probe+0x148>)
 800d7be:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d7c2:	494c      	ldr	r1, [pc, #304]	@ (800d8f4 <tcp_zero_window_probe+0x14c>)
 800d7c4:	484c      	ldr	r0, [pc, #304]	@ (800d8f8 <tcp_zero_window_probe+0x150>)
 800d7c6:	f005 fa97 	bl	8012cf8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d101      	bne.n	800d7da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e086      	b.n	800d8e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d7e0:	2bff      	cmp	r3, #255	@ 0xff
 800d7e2:	d007      	beq.n	800d7f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	899b      	ldrh	r3, [r3, #12]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7f8 fb91 	bl	8005f24 <lwip_htons>
 800d802:	4603      	mov	r3, r0
 800d804:	b2db      	uxtb	r3, r3
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d005      	beq.n	800d81a <tcp_zero_window_probe+0x72>
 800d80e:	6a3b      	ldr	r3, [r7, #32]
 800d810:	891b      	ldrh	r3, [r3, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <tcp_zero_window_probe+0x72>
 800d816:	2301      	movs	r3, #1
 800d818:	e000      	b.n	800d81c <tcp_zero_window_probe+0x74>
 800d81a:	2300      	movs	r3, #0
 800d81c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d81e:	7ffb      	ldrb	r3, [r7, #31]
 800d820:	2b00      	cmp	r3, #0
 800d822:	bf0c      	ite	eq
 800d824:	2301      	moveq	r3, #1
 800d826:	2300      	movne	r3, #0
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d82c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d830:	b299      	uxth	r1, r3
 800d832:	6a3b      	ldr	r3, [r7, #32]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	8bba      	ldrh	r2, [r7, #28]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff fdea 	bl	800d414 <tcp_output_alloc_header>
 800d840:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d102      	bne.n	800d84e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d848:	f04f 33ff 	mov.w	r3, #4294967295
 800d84c:	e04c      	b.n	800d8e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d854:	7ffb      	ldrb	r3, [r7, #31]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d011      	beq.n	800d87e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	899b      	ldrh	r3, [r3, #12]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	b21b      	sxth	r3, r3
 800d862:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d866:	b21c      	sxth	r4, r3
 800d868:	2011      	movs	r0, #17
 800d86a:	f7f8 fb5b 	bl	8005f24 <lwip_htons>
 800d86e:	4603      	mov	r3, r0
 800d870:	b21b      	sxth	r3, r3
 800d872:	4323      	orrs	r3, r4
 800d874:	b21b      	sxth	r3, r3
 800d876:	b29a      	uxth	r2, r3
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	819a      	strh	r2, [r3, #12]
 800d87c:	e010      	b.n	800d8a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	3314      	adds	r3, #20
 800d884:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d886:	6a3b      	ldr	r3, [r7, #32]
 800d888:	6858      	ldr	r0, [r3, #4]
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	891a      	ldrh	r2, [r3, #8]
 800d890:	6a3b      	ldr	r3, [r7, #32]
 800d892:	891b      	ldrh	r3, [r3, #8]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	b29b      	uxth	r3, r3
 800d898:	2201      	movs	r2, #1
 800d89a:	6939      	ldr	r1, [r7, #16]
 800d89c:	f7fa fcda 	bl	8008254 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d8a0:	6a3b      	ldr	r3, [r7, #32]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7f8 fb51 	bl	8005f4e <lwip_htonl>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	da02      	bge.n	800d8c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	69b9      	ldr	r1, [r7, #24]
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7ff fddf 	bl	800d490 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	69b9      	ldr	r1, [r7, #24]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff fe16 	bl	800d50c <tcp_output_control_segment>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d8e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	372c      	adds	r7, #44	@ 0x2c
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd90      	pop	{r4, r7, pc}
 800d8f0:	08015284 	.word	0x08015284
 800d8f4:	08015a7c 	.word	0x08015a7c
 800d8f8:	080152d8 	.word	0x080152d8

0800d8fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d904:	f7fa feee 	bl	80086e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d908:	4b0a      	ldr	r3, [pc, #40]	@ (800d934 <tcpip_tcp_timer+0x38>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d103      	bne.n	800d918 <tcpip_tcp_timer+0x1c>
 800d910:	4b09      	ldr	r3, [pc, #36]	@ (800d938 <tcpip_tcp_timer+0x3c>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d005      	beq.n	800d924 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d918:	2200      	movs	r2, #0
 800d91a:	4908      	ldr	r1, [pc, #32]	@ (800d93c <tcpip_tcp_timer+0x40>)
 800d91c:	20fa      	movs	r0, #250	@ 0xfa
 800d91e:	f000 f8f3 	bl	800db08 <sys_timeout>
 800d922:	e003      	b.n	800d92c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d924:	4b06      	ldr	r3, [pc, #24]	@ (800d940 <tcpip_tcp_timer+0x44>)
 800d926:	2200      	movs	r2, #0
 800d928:	601a      	str	r2, [r3, #0]
  }
}
 800d92a:	bf00      	nop
 800d92c:	bf00      	nop
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	200088bc 	.word	0x200088bc
 800d938:	200088c0 	.word	0x200088c0
 800d93c:	0800d8fd 	.word	0x0800d8fd
 800d940:	20008908 	.word	0x20008908

0800d944 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d948:	4b0a      	ldr	r3, [pc, #40]	@ (800d974 <tcp_timer_needed+0x30>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10f      	bne.n	800d970 <tcp_timer_needed+0x2c>
 800d950:	4b09      	ldr	r3, [pc, #36]	@ (800d978 <tcp_timer_needed+0x34>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d103      	bne.n	800d960 <tcp_timer_needed+0x1c>
 800d958:	4b08      	ldr	r3, [pc, #32]	@ (800d97c <tcp_timer_needed+0x38>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d960:	4b04      	ldr	r3, [pc, #16]	@ (800d974 <tcp_timer_needed+0x30>)
 800d962:	2201      	movs	r2, #1
 800d964:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d966:	2200      	movs	r2, #0
 800d968:	4905      	ldr	r1, [pc, #20]	@ (800d980 <tcp_timer_needed+0x3c>)
 800d96a:	20fa      	movs	r0, #250	@ 0xfa
 800d96c:	f000 f8cc 	bl	800db08 <sys_timeout>
  }
}
 800d970:	bf00      	nop
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20008908 	.word	0x20008908
 800d978:	200088bc 	.word	0x200088bc
 800d97c:	200088c0 	.word	0x200088c0
 800d980:	0800d8fd 	.word	0x0800d8fd

0800d984 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d990:	2006      	movs	r0, #6
 800d992:	f7f9 fb59 	bl	8007048 <memp_malloc>
 800d996:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d109      	bne.n	800d9b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d151      	bne.n	800da48 <sys_timeout_abs+0xc4>
 800d9a4:	4b2a      	ldr	r3, [pc, #168]	@ (800da50 <sys_timeout_abs+0xcc>)
 800d9a6:	22be      	movs	r2, #190	@ 0xbe
 800d9a8:	492a      	ldr	r1, [pc, #168]	@ (800da54 <sys_timeout_abs+0xd0>)
 800d9aa:	482b      	ldr	r0, [pc, #172]	@ (800da58 <sys_timeout_abs+0xd4>)
 800d9ac:	f005 f9a4 	bl	8012cf8 <iprintf>
    return;
 800d9b0:	e04a      	b.n	800da48 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d9ca:	4b24      	ldr	r3, [pc, #144]	@ (800da5c <sys_timeout_abs+0xd8>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d103      	bne.n	800d9da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d9d2:	4a22      	ldr	r2, [pc, #136]	@ (800da5c <sys_timeout_abs+0xd8>)
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6013      	str	r3, [r2, #0]
    return;
 800d9d8:	e037      	b.n	800da4a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	4b1f      	ldr	r3, [pc, #124]	@ (800da5c <sys_timeout_abs+0xd8>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	0fdb      	lsrs	r3, r3, #31
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d007      	beq.n	800da02 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d9f2:	4b1a      	ldr	r3, [pc, #104]	@ (800da5c <sys_timeout_abs+0xd8>)
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d9fa:	4a18      	ldr	r2, [pc, #96]	@ (800da5c <sys_timeout_abs+0xd8>)
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	6013      	str	r3, [r2, #0]
 800da00:	e023      	b.n	800da4a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800da02:	4b16      	ldr	r3, [pc, #88]	@ (800da5c <sys_timeout_abs+0xd8>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	e01a      	b.n	800da40 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00b      	beq.n	800da2a <sys_timeout_abs+0xa6>
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	0fdb      	lsrs	r3, r3, #31
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	b2db      	uxtb	r3, r3
 800da26:	2b00      	cmp	r3, #0
 800da28:	d007      	beq.n	800da3a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	601a      	str	r2, [r3, #0]
        break;
 800da38:	e007      	b.n	800da4a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	617b      	str	r3, [r7, #20]
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1e1      	bne.n	800da0a <sys_timeout_abs+0x86>
 800da46:	e000      	b.n	800da4a <sys_timeout_abs+0xc6>
    return;
 800da48:	bf00      	nop
      }
    }
  }
}
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	08015aa0 	.word	0x08015aa0
 800da54:	08015ad4 	.word	0x08015ad4
 800da58:	08015b14 	.word	0x08015b14
 800da5c:	20008900 	.word	0x20008900

0800da60 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	4798      	blx	r3

  now = sys_now();
 800da72:	f7f8 f84f 	bl	8005b14 <sys_now>
 800da76:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	4b0f      	ldr	r3, [pc, #60]	@ (800dabc <lwip_cyclic_timer+0x5c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4413      	add	r3, r2
 800da82:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	0fdb      	lsrs	r3, r3, #31
 800da8c:	f003 0301 	and.w	r3, r3, #1
 800da90:	b2db      	uxtb	r3, r3
 800da92:	2b00      	cmp	r3, #0
 800da94:	d009      	beq.n	800daaa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	4413      	add	r3, r2
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	4907      	ldr	r1, [pc, #28]	@ (800dac0 <lwip_cyclic_timer+0x60>)
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff ff6e 	bl	800d984 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800daa8:	e004      	b.n	800dab4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	4904      	ldr	r1, [pc, #16]	@ (800dac0 <lwip_cyclic_timer+0x60>)
 800daae:	68f8      	ldr	r0, [r7, #12]
 800dab0:	f7ff ff68 	bl	800d984 <sys_timeout_abs>
}
 800dab4:	bf00      	nop
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	20008904 	.word	0x20008904
 800dac0:	0800da61 	.word	0x0800da61

0800dac4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800daca:	2301      	movs	r3, #1
 800dacc:	607b      	str	r3, [r7, #4]
 800dace:	e00e      	b.n	800daee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dad0:	4a0b      	ldr	r2, [pc, #44]	@ (800db00 <sys_timeouts_init+0x3c>)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	00db      	lsls	r3, r3, #3
 800dadc:	4a08      	ldr	r2, [pc, #32]	@ (800db00 <sys_timeouts_init+0x3c>)
 800dade:	4413      	add	r3, r2
 800dae0:	461a      	mov	r2, r3
 800dae2:	4908      	ldr	r1, [pc, #32]	@ (800db04 <sys_timeouts_init+0x40>)
 800dae4:	f000 f810 	bl	800db08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	3301      	adds	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b05      	cmp	r3, #5
 800daf2:	d9ed      	bls.n	800dad0 <sys_timeouts_init+0xc>
  }
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	08016a3c 	.word	0x08016a3c
 800db04:	0800da61 	.word	0x0800da61

0800db08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db1a:	d306      	bcc.n	800db2a <sys_timeout+0x22>
 800db1c:	4b0a      	ldr	r3, [pc, #40]	@ (800db48 <sys_timeout+0x40>)
 800db1e:	f240 1229 	movw	r2, #297	@ 0x129
 800db22:	490a      	ldr	r1, [pc, #40]	@ (800db4c <sys_timeout+0x44>)
 800db24:	480a      	ldr	r0, [pc, #40]	@ (800db50 <sys_timeout+0x48>)
 800db26:	f005 f8e7 	bl	8012cf8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800db2a:	f7f7 fff3 	bl	8005b14 <sys_now>
 800db2e:	4602      	mov	r2, r0
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4413      	add	r3, r2
 800db34:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	68b9      	ldr	r1, [r7, #8]
 800db3a:	6978      	ldr	r0, [r7, #20]
 800db3c:	f7ff ff22 	bl	800d984 <sys_timeout_abs>
#endif
}
 800db40:	bf00      	nop
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	08015aa0 	.word	0x08015aa0
 800db4c:	08015b3c 	.word	0x08015b3c
 800db50:	08015b14 	.word	0x08015b14

0800db54 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800db5a:	f7f7 ffdb 	bl	8005b14 <sys_now>
 800db5e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800db60:	4b1a      	ldr	r3, [pc, #104]	@ (800dbcc <sys_check_timeouts+0x78>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <sys_check_timeouts+0x1a>
 800db6a:	f7f9 fe3f 	bl	80077ec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800db6e:	4b18      	ldr	r3, [pc, #96]	@ (800dbd0 <sys_check_timeouts+0x7c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d022      	beq.n	800dbc0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	0fdb      	lsrs	r3, r3, #31
 800db84:	f003 0301 	and.w	r3, r3, #1
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d11a      	bne.n	800dbc4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a0f      	ldr	r2, [pc, #60]	@ (800dbd0 <sys_check_timeouts+0x7c>)
 800db94:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	4a0b      	ldr	r2, [pc, #44]	@ (800dbd4 <sys_check_timeouts+0x80>)
 800dba8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dbaa:	68b9      	ldr	r1, [r7, #8]
 800dbac:	2006      	movs	r0, #6
 800dbae:	f7f9 fabb 	bl	8007128 <memp_free>
    if (handler != NULL) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d0d3      	beq.n	800db60 <sys_check_timeouts+0xc>
      handler(arg);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6838      	ldr	r0, [r7, #0]
 800dbbc:	4798      	blx	r3
  do {
 800dbbe:	e7cf      	b.n	800db60 <sys_check_timeouts+0xc>
      return;
 800dbc0:	bf00      	nop
 800dbc2:	e000      	b.n	800dbc6 <sys_check_timeouts+0x72>
      return;
 800dbc4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	200088ad 	.word	0x200088ad
 800dbd0:	20008900 	.word	0x20008900
 800dbd4:	20008904 	.word	0x20008904

0800dbd8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dbdc:	f004 ff8c 	bl	8012af8 <rand>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	4b01      	ldr	r3, [pc, #4]	@ (800dbf8 <udp_init+0x20>)
 800dbf2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dbf4:	bf00      	nop
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20000028 	.word	0x20000028

0800dbfc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dc06:	4b17      	ldr	r3, [pc, #92]	@ (800dc64 <udp_new_port+0x68>)
 800dc08:	881b      	ldrh	r3, [r3, #0]
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	b291      	uxth	r1, r2
 800dc0e:	4a15      	ldr	r2, [pc, #84]	@ (800dc64 <udp_new_port+0x68>)
 800dc10:	8011      	strh	r1, [r2, #0]
 800dc12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d103      	bne.n	800dc22 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800dc1a:	4b12      	ldr	r3, [pc, #72]	@ (800dc64 <udp_new_port+0x68>)
 800dc1c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800dc20:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc22:	4b11      	ldr	r3, [pc, #68]	@ (800dc68 <udp_new_port+0x6c>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	e011      	b.n	800dc4e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	8a5a      	ldrh	r2, [r3, #18]
 800dc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800dc64 <udp_new_port+0x68>)
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d108      	bne.n	800dc48 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800dc36:	88fb      	ldrh	r3, [r7, #6]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	80fb      	strh	r3, [r7, #6]
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
 800dc3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc42:	d3e0      	bcc.n	800dc06 <udp_new_port+0xa>
        return 0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	e007      	b.n	800dc58 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	603b      	str	r3, [r7, #0]
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1ea      	bne.n	800dc2a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800dc54:	4b03      	ldr	r3, [pc, #12]	@ (800dc64 <udp_new_port+0x68>)
 800dc56:	881b      	ldrh	r3, [r3, #0]
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr
 800dc64:	20000028 	.word	0x20000028
 800dc68:	2000890c 	.word	0x2000890c

0800dc6c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4613      	mov	r3, r2
 800dc78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d105      	bne.n	800dc8c <udp_input_local_match+0x20>
 800dc80:	4b27      	ldr	r3, [pc, #156]	@ (800dd20 <udp_input_local_match+0xb4>)
 800dc82:	2287      	movs	r2, #135	@ 0x87
 800dc84:	4927      	ldr	r1, [pc, #156]	@ (800dd24 <udp_input_local_match+0xb8>)
 800dc86:	4828      	ldr	r0, [pc, #160]	@ (800dd28 <udp_input_local_match+0xbc>)
 800dc88:	f005 f836 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d105      	bne.n	800dc9e <udp_input_local_match+0x32>
 800dc92:	4b23      	ldr	r3, [pc, #140]	@ (800dd20 <udp_input_local_match+0xb4>)
 800dc94:	2288      	movs	r2, #136	@ 0x88
 800dc96:	4925      	ldr	r1, [pc, #148]	@ (800dd2c <udp_input_local_match+0xc0>)
 800dc98:	4823      	ldr	r0, [pc, #140]	@ (800dd28 <udp_input_local_match+0xbc>)
 800dc9a:	f005 f82d 	bl	8012cf8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	7a1b      	ldrb	r3, [r3, #8]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00b      	beq.n	800dcbe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	7a1a      	ldrb	r2, [r3, #8]
 800dcaa:	4b21      	ldr	r3, [pc, #132]	@ (800dd30 <udp_input_local_match+0xc4>)
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d001      	beq.n	800dcbe <udp_input_local_match+0x52>
    return 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	e02b      	b.n	800dd16 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d018      	beq.n	800dcf6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d013      	beq.n	800dcf2 <udp_input_local_match+0x86>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00f      	beq.n	800dcf2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dcd2:	4b17      	ldr	r3, [pc, #92]	@ (800dd30 <udp_input_local_match+0xc4>)
 800dcd4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcda:	d00a      	beq.n	800dcf2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	4b13      	ldr	r3, [pc, #76]	@ (800dd30 <udp_input_local_match+0xc4>)
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	405a      	eors	r2, r3
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	3308      	adds	r3, #8
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d110      	bne.n	800dd14 <udp_input_local_match+0xa8>
          return 1;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e00f      	b.n	800dd16 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d009      	beq.n	800dd10 <udp_input_local_match+0xa4>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d005      	beq.n	800dd10 <udp_input_local_match+0xa4>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	4b09      	ldr	r3, [pc, #36]	@ (800dd30 <udp_input_local_match+0xc4>)
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d101      	bne.n	800dd14 <udp_input_local_match+0xa8>
        return 1;
 800dd10:	2301      	movs	r3, #1
 800dd12:	e000      	b.n	800dd16 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	08015b88 	.word	0x08015b88
 800dd24:	08015bb8 	.word	0x08015bb8
 800dd28:	08015bdc 	.word	0x08015bdc
 800dd2c:	08015c04 	.word	0x08015c04
 800dd30:	20005310 	.word	0x20005310

0800dd34 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b08d      	sub	sp, #52	@ 0x34
 800dd38:	af02      	add	r7, sp, #8
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d105      	bne.n	800dd54 <udp_input+0x20>
 800dd48:	4b7c      	ldr	r3, [pc, #496]	@ (800df3c <udp_input+0x208>)
 800dd4a:	22cf      	movs	r2, #207	@ 0xcf
 800dd4c:	497c      	ldr	r1, [pc, #496]	@ (800df40 <udp_input+0x20c>)
 800dd4e:	487d      	ldr	r0, [pc, #500]	@ (800df44 <udp_input+0x210>)
 800dd50:	f004 ffd2 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d105      	bne.n	800dd66 <udp_input+0x32>
 800dd5a:	4b78      	ldr	r3, [pc, #480]	@ (800df3c <udp_input+0x208>)
 800dd5c:	22d0      	movs	r2, #208	@ 0xd0
 800dd5e:	497a      	ldr	r1, [pc, #488]	@ (800df48 <udp_input+0x214>)
 800dd60:	4878      	ldr	r0, [pc, #480]	@ (800df44 <udp_input+0x210>)
 800dd62:	f004 ffc9 	bl	8012cf8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	895b      	ldrh	r3, [r3, #10]
 800dd6a:	2b07      	cmp	r3, #7
 800dd6c:	d803      	bhi.n	800dd76 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7fa f876 	bl	8007e60 <pbuf_free>
    goto end;
 800dd74:	e0de      	b.n	800df34 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dd7c:	4b73      	ldr	r3, [pc, #460]	@ (800df4c <udp_input+0x218>)
 800dd7e:	695b      	ldr	r3, [r3, #20]
 800dd80:	4a72      	ldr	r2, [pc, #456]	@ (800df4c <udp_input+0x218>)
 800dd82:	6812      	ldr	r2, [r2, #0]
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f003 ff50 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7f8 f8c4 	bl	8005f24 <lwip_htons>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	885b      	ldrh	r3, [r3, #2]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7f8 f8bc 	bl	8005f24 <lwip_htons>
 800ddac:	4603      	mov	r3, r0
 800ddae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddbc:	4b64      	ldr	r3, [pc, #400]	@ (800df50 <udp_input+0x21c>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddc2:	e054      	b.n	800de6e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc6:	8a5b      	ldrh	r3, [r3, #18]
 800ddc8:	89fa      	ldrh	r2, [r7, #14]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d14a      	bne.n	800de64 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ddce:	7cfb      	ldrb	r3, [r7, #19]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddd6:	f7ff ff49 	bl	800dc6c <udp_input_local_match>
 800ddda:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d041      	beq.n	800de64 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800dde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde2:	7c1b      	ldrb	r3, [r3, #16]
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d11d      	bne.n	800de28 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d102      	bne.n	800ddf8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf4:	61fb      	str	r3, [r7, #28]
 800ddf6:	e017      	b.n	800de28 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ddf8:	7cfb      	ldrb	r3, [r7, #19]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d014      	beq.n	800de28 <udp_input+0xf4>
 800ddfe:	4b53      	ldr	r3, [pc, #332]	@ (800df4c <udp_input+0x218>)
 800de00:	695b      	ldr	r3, [r3, #20]
 800de02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de06:	d10f      	bne.n	800de28 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	3304      	adds	r3, #4
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d008      	beq.n	800de28 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800de16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	3304      	adds	r3, #4
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	429a      	cmp	r2, r3
 800de22:	d101      	bne.n	800de28 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800de24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de26:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	8a9b      	ldrh	r3, [r3, #20]
 800de2c:	8a3a      	ldrh	r2, [r7, #16]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d118      	bne.n	800de64 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de34:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800de36:	2b00      	cmp	r3, #0
 800de38:	d005      	beq.n	800de46 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800de3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	4b43      	ldr	r3, [pc, #268]	@ (800df4c <udp_input+0x218>)
 800de40:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de42:	429a      	cmp	r2, r3
 800de44:	d10e      	bne.n	800de64 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d014      	beq.n	800de76 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4e:	68da      	ldr	r2, [r3, #12]
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800de54:	4b3e      	ldr	r3, [pc, #248]	@ (800df50 <udp_input+0x21c>)
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800de5c:	4a3c      	ldr	r2, [pc, #240]	@ (800df50 <udp_input+0x21c>)
 800de5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de60:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800de62:	e008      	b.n	800de76 <udp_input+0x142>
      }
    }

    prev = pcb;
 800de64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de66:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800de6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1a7      	bne.n	800ddc4 <udp_input+0x90>
 800de74:	e000      	b.n	800de78 <udp_input+0x144>
        break;
 800de76:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800de78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d101      	bne.n	800de82 <udp_input+0x14e>
    pcb = uncon_pcb;
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <udp_input+0x15a>
    for_us = 1;
 800de88:	2301      	movs	r3, #1
 800de8a:	76fb      	strb	r3, [r7, #27]
 800de8c:	e00a      	b.n	800dea4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	3304      	adds	r3, #4
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	4b2d      	ldr	r3, [pc, #180]	@ (800df4c <udp_input+0x218>)
 800de96:	695b      	ldr	r3, [r3, #20]
 800de98:	429a      	cmp	r2, r3
 800de9a:	bf0c      	ite	eq
 800de9c:	2301      	moveq	r3, #1
 800de9e:	2300      	movne	r3, #0
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dea4:	7efb      	ldrb	r3, [r7, #27]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d041      	beq.n	800df2e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800deaa:	2108      	movs	r1, #8
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7f9 ff51 	bl	8007d54 <pbuf_remove_header>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00a      	beq.n	800dece <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800deb8:	4b20      	ldr	r3, [pc, #128]	@ (800df3c <udp_input+0x208>)
 800deba:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800debe:	4925      	ldr	r1, [pc, #148]	@ (800df54 <udp_input+0x220>)
 800dec0:	4820      	ldr	r0, [pc, #128]	@ (800df44 <udp_input+0x210>)
 800dec2:	f004 ff19 	bl	8012cf8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7f9 ffca 	bl	8007e60 <pbuf_free>
      goto end;
 800decc:	e032      	b.n	800df34 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d012      	beq.n	800defa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ded4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded6:	699b      	ldr	r3, [r3, #24]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d00a      	beq.n	800def2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dede:	699c      	ldr	r4, [r3, #24]
 800dee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee2:	69d8      	ldr	r0, [r3, #28]
 800dee4:	8a3b      	ldrh	r3, [r7, #16]
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	4b1b      	ldr	r3, [pc, #108]	@ (800df58 <udp_input+0x224>)
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800deee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800def0:	e021      	b.n	800df36 <udp_input+0x202>
        pbuf_free(p);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7f9 ffb4 	bl	8007e60 <pbuf_free>
        goto end;
 800def8:	e01c      	b.n	800df34 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800defa:	7cfb      	ldrb	r3, [r7, #19]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d112      	bne.n	800df26 <udp_input+0x1f2>
 800df00:	4b12      	ldr	r3, [pc, #72]	@ (800df4c <udp_input+0x218>)
 800df02:	695b      	ldr	r3, [r3, #20]
 800df04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df08:	2be0      	cmp	r3, #224	@ 0xe0
 800df0a:	d00c      	beq.n	800df26 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800df0c:	4b0f      	ldr	r3, [pc, #60]	@ (800df4c <udp_input+0x218>)
 800df0e:	899b      	ldrh	r3, [r3, #12]
 800df10:	3308      	adds	r3, #8
 800df12:	b29b      	uxth	r3, r3
 800df14:	b21b      	sxth	r3, r3
 800df16:	4619      	mov	r1, r3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7f9 ff8e 	bl	8007e3a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800df1e:	2103      	movs	r1, #3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f003 fad5 	bl	80114d0 <icmp_dest_unreach>
      pbuf_free(p);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7f9 ff9a 	bl	8007e60 <pbuf_free>
  return;
 800df2c:	e003      	b.n	800df36 <udp_input+0x202>
    pbuf_free(p);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7f9 ff96 	bl	8007e60 <pbuf_free>
  return;
 800df34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800df36:	372c      	adds	r7, #44	@ 0x2c
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd90      	pop	{r4, r7, pc}
 800df3c:	08015b88 	.word	0x08015b88
 800df40:	08015c2c 	.word	0x08015c2c
 800df44:	08015bdc 	.word	0x08015bdc
 800df48:	08015c44 	.word	0x08015c44
 800df4c:	20005310 	.word	0x20005310
 800df50:	2000890c 	.word	0x2000890c
 800df54:	08015c60 	.word	0x08015c60
 800df58:	20005320 	.word	0x20005320

0800df5c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b088      	sub	sp, #32
 800df60:	af02      	add	r7, sp, #8
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
 800df68:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d109      	bne.n	800df84 <udp_sendto+0x28>
 800df70:	4b23      	ldr	r3, [pc, #140]	@ (800e000 <udp_sendto+0xa4>)
 800df72:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800df76:	4923      	ldr	r1, [pc, #140]	@ (800e004 <udp_sendto+0xa8>)
 800df78:	4823      	ldr	r0, [pc, #140]	@ (800e008 <udp_sendto+0xac>)
 800df7a:	f004 febd 	bl	8012cf8 <iprintf>
 800df7e:	f06f 030f 	mvn.w	r3, #15
 800df82:	e038      	b.n	800dff6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d109      	bne.n	800df9e <udp_sendto+0x42>
 800df8a:	4b1d      	ldr	r3, [pc, #116]	@ (800e000 <udp_sendto+0xa4>)
 800df8c:	f240 2219 	movw	r2, #537	@ 0x219
 800df90:	491e      	ldr	r1, [pc, #120]	@ (800e00c <udp_sendto+0xb0>)
 800df92:	481d      	ldr	r0, [pc, #116]	@ (800e008 <udp_sendto+0xac>)
 800df94:	f004 feb0 	bl	8012cf8 <iprintf>
 800df98:	f06f 030f 	mvn.w	r3, #15
 800df9c:	e02b      	b.n	800dff6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d109      	bne.n	800dfb8 <udp_sendto+0x5c>
 800dfa4:	4b16      	ldr	r3, [pc, #88]	@ (800e000 <udp_sendto+0xa4>)
 800dfa6:	f240 221a 	movw	r2, #538	@ 0x21a
 800dfaa:	4919      	ldr	r1, [pc, #100]	@ (800e010 <udp_sendto+0xb4>)
 800dfac:	4816      	ldr	r0, [pc, #88]	@ (800e008 <udp_sendto+0xac>)
 800dfae:	f004 fea3 	bl	8012cf8 <iprintf>
 800dfb2:	f06f 030f 	mvn.w	r3, #15
 800dfb6:	e01e      	b.n	800dff6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	7a1b      	ldrb	r3, [r3, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d006      	beq.n	800dfce <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	7a1b      	ldrb	r3, [r3, #8]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7f9 fbeb 	bl	80077a0 <netif_get_by_index>
 800dfca:	6178      	str	r0, [r7, #20]
 800dfcc:	e003      	b.n	800dfd6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f003 fb12 	bl	80115f8 <ip4_route>
 800dfd4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d102      	bne.n	800dfe2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800dfdc:	f06f 0303 	mvn.w	r3, #3
 800dfe0:	e009      	b.n	800dff6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800dfe2:	887a      	ldrh	r2, [r7, #2]
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	68b9      	ldr	r1, [r7, #8]
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f000 f810 	bl	800e014 <udp_sendto_if>
 800dff4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	08015b88 	.word	0x08015b88
 800e004:	08015cac 	.word	0x08015cac
 800e008:	08015bdc 	.word	0x08015bdc
 800e00c:	08015cc4 	.word	0x08015cc4
 800e010:	08015ce0 	.word	0x08015ce0

0800e014 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af02      	add	r7, sp, #8
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d109      	bne.n	800e03c <udp_sendto_if+0x28>
 800e028:	4b2e      	ldr	r3, [pc, #184]	@ (800e0e4 <udp_sendto_if+0xd0>)
 800e02a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e02e:	492e      	ldr	r1, [pc, #184]	@ (800e0e8 <udp_sendto_if+0xd4>)
 800e030:	482e      	ldr	r0, [pc, #184]	@ (800e0ec <udp_sendto_if+0xd8>)
 800e032:	f004 fe61 	bl	8012cf8 <iprintf>
 800e036:	f06f 030f 	mvn.w	r3, #15
 800e03a:	e04f      	b.n	800e0dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d109      	bne.n	800e056 <udp_sendto_if+0x42>
 800e042:	4b28      	ldr	r3, [pc, #160]	@ (800e0e4 <udp_sendto_if+0xd0>)
 800e044:	f240 2281 	movw	r2, #641	@ 0x281
 800e048:	4929      	ldr	r1, [pc, #164]	@ (800e0f0 <udp_sendto_if+0xdc>)
 800e04a:	4828      	ldr	r0, [pc, #160]	@ (800e0ec <udp_sendto_if+0xd8>)
 800e04c:	f004 fe54 	bl	8012cf8 <iprintf>
 800e050:	f06f 030f 	mvn.w	r3, #15
 800e054:	e042      	b.n	800e0dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d109      	bne.n	800e070 <udp_sendto_if+0x5c>
 800e05c:	4b21      	ldr	r3, [pc, #132]	@ (800e0e4 <udp_sendto_if+0xd0>)
 800e05e:	f240 2282 	movw	r2, #642	@ 0x282
 800e062:	4924      	ldr	r1, [pc, #144]	@ (800e0f4 <udp_sendto_if+0xe0>)
 800e064:	4821      	ldr	r0, [pc, #132]	@ (800e0ec <udp_sendto_if+0xd8>)
 800e066:	f004 fe47 	bl	8012cf8 <iprintf>
 800e06a:	f06f 030f 	mvn.w	r3, #15
 800e06e:	e035      	b.n	800e0dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e070:	6a3b      	ldr	r3, [r7, #32]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d109      	bne.n	800e08a <udp_sendto_if+0x76>
 800e076:	4b1b      	ldr	r3, [pc, #108]	@ (800e0e4 <udp_sendto_if+0xd0>)
 800e078:	f240 2283 	movw	r2, #643	@ 0x283
 800e07c:	491e      	ldr	r1, [pc, #120]	@ (800e0f8 <udp_sendto_if+0xe4>)
 800e07e:	481b      	ldr	r0, [pc, #108]	@ (800e0ec <udp_sendto_if+0xd8>)
 800e080:	f004 fe3a 	bl	8012cf8 <iprintf>
 800e084:	f06f 030f 	mvn.w	r3, #15
 800e088:	e028      	b.n	800e0dc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d009      	beq.n	800e0a4 <udp_sendto_if+0x90>
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d005      	beq.n	800e0a4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0a0:	2be0      	cmp	r3, #224	@ 0xe0
 800e0a2:	d103      	bne.n	800e0ac <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e0a4:	6a3b      	ldr	r3, [r7, #32]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	617b      	str	r3, [r7, #20]
 800e0aa:	e00b      	b.n	800e0c4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	6a3b      	ldr	r3, [r7, #32]
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d002      	beq.n	800e0c0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e0ba:	f06f 0303 	mvn.w	r3, #3
 800e0be:	e00d      	b.n	800e0dc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e0c4:	887a      	ldrh	r2, [r7, #2]
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	68b9      	ldr	r1, [r7, #8]
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f000 f811 	bl	800e0fc <udp_sendto_if_src>
 800e0da:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3718      	adds	r7, #24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	08015b88 	.word	0x08015b88
 800e0e8:	08015cfc 	.word	0x08015cfc
 800e0ec:	08015bdc 	.word	0x08015bdc
 800e0f0:	08015d18 	.word	0x08015d18
 800e0f4:	08015d34 	.word	0x08015d34
 800e0f8:	08015d54 	.word	0x08015d54

0800e0fc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08c      	sub	sp, #48	@ 0x30
 800e100:	af04      	add	r7, sp, #16
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d109      	bne.n	800e124 <udp_sendto_if_src+0x28>
 800e110:	4b72      	ldr	r3, [pc, #456]	@ (800e2dc <udp_sendto_if_src+0x1e0>)
 800e112:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e116:	4972      	ldr	r1, [pc, #456]	@ (800e2e0 <udp_sendto_if_src+0x1e4>)
 800e118:	4872      	ldr	r0, [pc, #456]	@ (800e2e4 <udp_sendto_if_src+0x1e8>)
 800e11a:	f004 fded 	bl	8012cf8 <iprintf>
 800e11e:	f06f 030f 	mvn.w	r3, #15
 800e122:	e0d6      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d109      	bne.n	800e13e <udp_sendto_if_src+0x42>
 800e12a:	4b6c      	ldr	r3, [pc, #432]	@ (800e2dc <udp_sendto_if_src+0x1e0>)
 800e12c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800e130:	496d      	ldr	r1, [pc, #436]	@ (800e2e8 <udp_sendto_if_src+0x1ec>)
 800e132:	486c      	ldr	r0, [pc, #432]	@ (800e2e4 <udp_sendto_if_src+0x1e8>)
 800e134:	f004 fde0 	bl	8012cf8 <iprintf>
 800e138:	f06f 030f 	mvn.w	r3, #15
 800e13c:	e0c9      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d109      	bne.n	800e158 <udp_sendto_if_src+0x5c>
 800e144:	4b65      	ldr	r3, [pc, #404]	@ (800e2dc <udp_sendto_if_src+0x1e0>)
 800e146:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800e14a:	4968      	ldr	r1, [pc, #416]	@ (800e2ec <udp_sendto_if_src+0x1f0>)
 800e14c:	4865      	ldr	r0, [pc, #404]	@ (800e2e4 <udp_sendto_if_src+0x1e8>)
 800e14e:	f004 fdd3 	bl	8012cf8 <iprintf>
 800e152:	f06f 030f 	mvn.w	r3, #15
 800e156:	e0bc      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d109      	bne.n	800e172 <udp_sendto_if_src+0x76>
 800e15e:	4b5f      	ldr	r3, [pc, #380]	@ (800e2dc <udp_sendto_if_src+0x1e0>)
 800e160:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800e164:	4962      	ldr	r1, [pc, #392]	@ (800e2f0 <udp_sendto_if_src+0x1f4>)
 800e166:	485f      	ldr	r0, [pc, #380]	@ (800e2e4 <udp_sendto_if_src+0x1e8>)
 800e168:	f004 fdc6 	bl	8012cf8 <iprintf>
 800e16c:	f06f 030f 	mvn.w	r3, #15
 800e170:	e0af      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e174:	2b00      	cmp	r3, #0
 800e176:	d109      	bne.n	800e18c <udp_sendto_if_src+0x90>
 800e178:	4b58      	ldr	r3, [pc, #352]	@ (800e2dc <udp_sendto_if_src+0x1e0>)
 800e17a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e17e:	495d      	ldr	r1, [pc, #372]	@ (800e2f4 <udp_sendto_if_src+0x1f8>)
 800e180:	4858      	ldr	r0, [pc, #352]	@ (800e2e4 <udp_sendto_if_src+0x1e8>)
 800e182:	f004 fdb9 	bl	8012cf8 <iprintf>
 800e186:	f06f 030f 	mvn.w	r3, #15
 800e18a:	e0a2      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	8a5b      	ldrh	r3, [r3, #18]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10f      	bne.n	800e1b4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e194:	68f9      	ldr	r1, [r7, #12]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8a5b      	ldrh	r3, [r3, #18]
 800e19a:	461a      	mov	r2, r3
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f000 f8ad 	bl	800e2fc <udp_bind>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800e1a6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e1ae:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e1b2:	e08e      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	891b      	ldrh	r3, [r3, #8]
 800e1b8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d902      	bls.n	800e1c6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c4:	e085      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e1c6:	2108      	movs	r1, #8
 800e1c8:	68b8      	ldr	r0, [r7, #8]
 800e1ca:	f7f9 fdb3 	bl	8007d34 <pbuf_add_header>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d015      	beq.n	800e200 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e1d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e1d8:	2108      	movs	r1, #8
 800e1da:	2022      	movs	r0, #34	@ 0x22
 800e1dc:	f7f9 fb5c 	bl	8007898 <pbuf_alloc>
 800e1e0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ec:	e071      	b.n	800e2d2 <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	891b      	ldrh	r3, [r3, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d006      	beq.n	800e204 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e1f6:	68b9      	ldr	r1, [r7, #8]
 800e1f8:	69f8      	ldr	r0, [r7, #28]
 800e1fa:	f7f9 ff49 	bl	8008090 <pbuf_chain>
 800e1fe:	e001      	b.n	800e204 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	895b      	ldrh	r3, [r3, #10]
 800e208:	2b07      	cmp	r3, #7
 800e20a:	d806      	bhi.n	800e21a <udp_sendto_if_src+0x11e>
 800e20c:	4b33      	ldr	r3, [pc, #204]	@ (800e2dc <udp_sendto_if_src+0x1e0>)
 800e20e:	f240 320d 	movw	r2, #781	@ 0x30d
 800e212:	4939      	ldr	r1, [pc, #228]	@ (800e2f8 <udp_sendto_if_src+0x1fc>)
 800e214:	4833      	ldr	r0, [pc, #204]	@ (800e2e4 <udp_sendto_if_src+0x1e8>)
 800e216:	f004 fd6f 	bl	8012cf8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	8a5b      	ldrh	r3, [r3, #18]
 800e224:	4618      	mov	r0, r3
 800e226:	f7f7 fe7d 	bl	8005f24 <lwip_htons>
 800e22a:	4603      	mov	r3, r0
 800e22c:	461a      	mov	r2, r3
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e232:	887b      	ldrh	r3, [r7, #2]
 800e234:	4618      	mov	r0, r3
 800e236:	f7f7 fe75 	bl	8005f24 <lwip_htons>
 800e23a:	4603      	mov	r3, r0
 800e23c:	461a      	mov	r2, r3
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2200      	movs	r2, #0
 800e246:	719a      	strb	r2, [r3, #6]
 800e248:	2200      	movs	r2, #0
 800e24a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	891b      	ldrh	r3, [r3, #8]
 800e250:	4618      	mov	r0, r3
 800e252:	f7f7 fe67 	bl	8005f24 <lwip_htons>
 800e256:	4603      	mov	r3, r0
 800e258:	461a      	mov	r2, r3
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	7c1b      	ldrb	r3, [r3, #16]
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	2b00      	cmp	r3, #0
 800e268:	d113      	bne.n	800e292 <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	891a      	ldrh	r2, [r3, #8]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e274:	2111      	movs	r1, #17
 800e276:	69f8      	ldr	r0, [r7, #28]
 800e278:	f7f8 fa73 	bl	8006762 <ip_chksum_pseudo>
 800e27c:	4603      	mov	r3, r0
 800e27e:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800e280:	8b7b      	ldrh	r3, [r7, #26]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d102      	bne.n	800e28c <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800e286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e28a:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	8b7a      	ldrh	r2, [r7, #26]
 800e290:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e292:	2311      	movs	r3, #17
 800e294:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	7adb      	ldrb	r3, [r3, #11]
 800e29a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	7a9b      	ldrb	r3, [r3, #10]
 800e2a0:	7cb9      	ldrb	r1, [r7, #18]
 800e2a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2a4:	9202      	str	r2, [sp, #8]
 800e2a6:	7cfa      	ldrb	r2, [r7, #19]
 800e2a8:	9201      	str	r2, [sp, #4]
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2b2:	69f8      	ldr	r0, [r7, #28]
 800e2b4:	f003 fba6 	bl	8011a04 <ip4_output_if_src>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e2bc:	69fa      	ldr	r2, [r7, #28]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d004      	beq.n	800e2ce <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800e2c4:	69f8      	ldr	r0, [r7, #28]
 800e2c6:	f7f9 fdcb 	bl	8007e60 <pbuf_free>
    q = NULL;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e2ce:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3720      	adds	r7, #32
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	08015b88 	.word	0x08015b88
 800e2e0:	08015d74 	.word	0x08015d74
 800e2e4:	08015bdc 	.word	0x08015bdc
 800e2e8:	08015d94 	.word	0x08015d94
 800e2ec:	08015db4 	.word	0x08015db4
 800e2f0:	08015dd8 	.word	0x08015dd8
 800e2f4:	08015dfc 	.word	0x08015dfc
 800e2f8:	08015e20 	.word	0x08015e20

0800e2fc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	4613      	mov	r3, r2
 800e308:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e310:	4b39      	ldr	r3, [pc, #228]	@ (800e3f8 <udp_bind+0xfc>)
 800e312:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d109      	bne.n	800e32e <udp_bind+0x32>
 800e31a:	4b38      	ldr	r3, [pc, #224]	@ (800e3fc <udp_bind+0x100>)
 800e31c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800e320:	4937      	ldr	r1, [pc, #220]	@ (800e400 <udp_bind+0x104>)
 800e322:	4838      	ldr	r0, [pc, #224]	@ (800e404 <udp_bind+0x108>)
 800e324:	f004 fce8 	bl	8012cf8 <iprintf>
 800e328:	f06f 030f 	mvn.w	r3, #15
 800e32c:	e060      	b.n	800e3f0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e332:	4b35      	ldr	r3, [pc, #212]	@ (800e408 <udp_bind+0x10c>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	617b      	str	r3, [r7, #20]
 800e338:	e009      	b.n	800e34e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d102      	bne.n	800e348 <udp_bind+0x4c>
      rebind = 1;
 800e342:	2301      	movs	r3, #1
 800e344:	74fb      	strb	r3, [r7, #19]
      break;
 800e346:	e005      	b.n	800e354 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	617b      	str	r3, [r7, #20]
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d1f2      	bne.n	800e33a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d109      	bne.n	800e36e <udp_bind+0x72>
    port = udp_new_port();
 800e35a:	f7ff fc4f 	bl	800dbfc <udp_new_port>
 800e35e:	4603      	mov	r3, r0
 800e360:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e362:	88fb      	ldrh	r3, [r7, #6]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d12c      	bne.n	800e3c2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e368:	f06f 0307 	mvn.w	r3, #7
 800e36c:	e040      	b.n	800e3f0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e36e:	4b26      	ldr	r3, [pc, #152]	@ (800e408 <udp_bind+0x10c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	617b      	str	r3, [r7, #20]
 800e374:	e022      	b.n	800e3bc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d01b      	beq.n	800e3b6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	8a5b      	ldrh	r3, [r3, #18]
 800e382:	88fa      	ldrh	r2, [r7, #6]
 800e384:	429a      	cmp	r2, r3
 800e386:	d116      	bne.n	800e3b6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e390:	429a      	cmp	r2, r3
 800e392:	d00d      	beq.n	800e3b0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00a      	beq.n	800e3b0 <udp_bind+0xb4>
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d006      	beq.n	800e3b0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e3a2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d003      	beq.n	800e3b0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e3b0:	f06f 0307 	mvn.w	r3, #7
 800e3b4:	e01c      	b.n	800e3f0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	617b      	str	r3, [r7, #20]
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1d9      	bne.n	800e376 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <udp_bind+0xd2>
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	e000      	b.n	800e3d0 <udp_bind+0xd4>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	88fa      	ldrh	r2, [r7, #6]
 800e3d8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e3da:	7cfb      	ldrb	r3, [r7, #19]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d106      	bne.n	800e3ee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e3e0:	4b09      	ldr	r3, [pc, #36]	@ (800e408 <udp_bind+0x10c>)
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e3e8:	4a07      	ldr	r2, [pc, #28]	@ (800e408 <udp_bind+0x10c>)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3718      	adds	r7, #24
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	08016a6c 	.word	0x08016a6c
 800e3fc:	08015b88 	.word	0x08015b88
 800e400:	08015e50 	.word	0x08015e50
 800e404:	08015bdc 	.word	0x08015bdc
 800e408:	2000890c 	.word	0x2000890c

0800e40c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	4613      	mov	r3, r2
 800e418:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d109      	bne.n	800e434 <udp_connect+0x28>
 800e420:	4b2c      	ldr	r3, [pc, #176]	@ (800e4d4 <udp_connect+0xc8>)
 800e422:	f240 4235 	movw	r2, #1077	@ 0x435
 800e426:	492c      	ldr	r1, [pc, #176]	@ (800e4d8 <udp_connect+0xcc>)
 800e428:	482c      	ldr	r0, [pc, #176]	@ (800e4dc <udp_connect+0xd0>)
 800e42a:	f004 fc65 	bl	8012cf8 <iprintf>
 800e42e:	f06f 030f 	mvn.w	r3, #15
 800e432:	e04b      	b.n	800e4cc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d109      	bne.n	800e44e <udp_connect+0x42>
 800e43a:	4b26      	ldr	r3, [pc, #152]	@ (800e4d4 <udp_connect+0xc8>)
 800e43c:	f240 4236 	movw	r2, #1078	@ 0x436
 800e440:	4927      	ldr	r1, [pc, #156]	@ (800e4e0 <udp_connect+0xd4>)
 800e442:	4826      	ldr	r0, [pc, #152]	@ (800e4dc <udp_connect+0xd0>)
 800e444:	f004 fc58 	bl	8012cf8 <iprintf>
 800e448:	f06f 030f 	mvn.w	r3, #15
 800e44c:	e03e      	b.n	800e4cc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	8a5b      	ldrh	r3, [r3, #18]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10f      	bne.n	800e476 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	8a5b      	ldrh	r3, [r3, #18]
 800e45c:	461a      	mov	r2, r3
 800e45e:	68f8      	ldr	r0, [r7, #12]
 800e460:	f7ff ff4c 	bl	800e2fc <udp_bind>
 800e464:	4603      	mov	r3, r0
 800e466:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e468:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <udp_connect+0x6a>
      return err;
 800e470:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e474:	e02a      	b.n	800e4cc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d002      	beq.n	800e482 <udp_connect+0x76>
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	e000      	b.n	800e484 <udp_connect+0x78>
 800e482:	2300      	movs	r3, #0
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	88fa      	ldrh	r2, [r7, #6]
 800e48c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	7c1b      	ldrb	r3, [r3, #16]
 800e492:	f043 0304 	orr.w	r3, r3, #4
 800e496:	b2da      	uxtb	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e49c:	4b11      	ldr	r3, [pc, #68]	@ (800e4e4 <udp_connect+0xd8>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	617b      	str	r3, [r7, #20]
 800e4a2:	e008      	b.n	800e4b6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d101      	bne.n	800e4b0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	e00d      	b.n	800e4cc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	617b      	str	r3, [r7, #20]
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1f3      	bne.n	800e4a4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e4bc:	4b09      	ldr	r3, [pc, #36]	@ (800e4e4 <udp_connect+0xd8>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e4c4:	4a07      	ldr	r2, [pc, #28]	@ (800e4e4 <udp_connect+0xd8>)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3718      	adds	r7, #24
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	08015b88 	.word	0x08015b88
 800e4d8:	08015e68 	.word	0x08015e68
 800e4dc:	08015bdc 	.word	0x08015bdc
 800e4e0:	08015e84 	.word	0x08015e84
 800e4e4:	2000890c 	.word	0x2000890c

0800e4e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d107      	bne.n	800e50a <udp_recv+0x22>
 800e4fa:	4b08      	ldr	r3, [pc, #32]	@ (800e51c <udp_recv+0x34>)
 800e4fc:	f240 428a 	movw	r2, #1162	@ 0x48a
 800e500:	4907      	ldr	r1, [pc, #28]	@ (800e520 <udp_recv+0x38>)
 800e502:	4808      	ldr	r0, [pc, #32]	@ (800e524 <udp_recv+0x3c>)
 800e504:	f004 fbf8 	bl	8012cf8 <iprintf>
 800e508:	e005      	b.n	800e516 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	61da      	str	r2, [r3, #28]
}
 800e516:	3710      	adds	r7, #16
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	08015b88 	.word	0x08015b88
 800e520:	08015ebc 	.word	0x08015ebc
 800e524:	08015bdc 	.word	0x08015bdc

0800e528 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d107      	bne.n	800e546 <udp_remove+0x1e>
 800e536:	4b19      	ldr	r3, [pc, #100]	@ (800e59c <udp_remove+0x74>)
 800e538:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800e53c:	4918      	ldr	r1, [pc, #96]	@ (800e5a0 <udp_remove+0x78>)
 800e53e:	4819      	ldr	r0, [pc, #100]	@ (800e5a4 <udp_remove+0x7c>)
 800e540:	f004 fbda 	bl	8012cf8 <iprintf>
 800e544:	e026      	b.n	800e594 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e546:	4b18      	ldr	r3, [pc, #96]	@ (800e5a8 <udp_remove+0x80>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d105      	bne.n	800e55c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e550:	4b15      	ldr	r3, [pc, #84]	@ (800e5a8 <udp_remove+0x80>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	4a14      	ldr	r2, [pc, #80]	@ (800e5a8 <udp_remove+0x80>)
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	e017      	b.n	800e58c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e55c:	4b12      	ldr	r3, [pc, #72]	@ (800e5a8 <udp_remove+0x80>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	60fb      	str	r3, [r7, #12]
 800e562:	e010      	b.n	800e586 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d009      	beq.n	800e580 <udp_remove+0x58>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	429a      	cmp	r2, r3
 800e574:	d104      	bne.n	800e580 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	60da      	str	r2, [r3, #12]
        break;
 800e57e:	e005      	b.n	800e58c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1eb      	bne.n	800e564 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e58c:	6879      	ldr	r1, [r7, #4]
 800e58e:	2000      	movs	r0, #0
 800e590:	f7f8 fdca 	bl	8007128 <memp_free>
}
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	08015b88 	.word	0x08015b88
 800e5a0:	08015ed4 	.word	0x08015ed4
 800e5a4:	08015bdc 	.word	0x08015bdc
 800e5a8:	2000890c 	.word	0x2000890c

0800e5ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	f7f8 fd48 	bl	8007048 <memp_malloc>
 800e5b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d007      	beq.n	800e5d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e5c0:	2220      	movs	r2, #32
 800e5c2:	2100      	movs	r1, #0
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f004 fbfc 	bl	8012dc2 <memset>
    pcb->ttl = UDP_TTL;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	22ff      	movs	r2, #255	@ 0xff
 800e5ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e5d0:	687b      	ldr	r3, [r7, #4]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d01e      	beq.n	800e62a <udp_netif_ip_addr_changed+0x4e>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d01a      	beq.n	800e62a <udp_netif_ip_addr_changed+0x4e>
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d017      	beq.n	800e62a <udp_netif_ip_addr_changed+0x4e>
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d013      	beq.n	800e62a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e602:	4b0d      	ldr	r3, [pc, #52]	@ (800e638 <udp_netif_ip_addr_changed+0x5c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	60fb      	str	r3, [r7, #12]
 800e608:	e00c      	b.n	800e624 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d103      	bne.n	800e61e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1ef      	bne.n	800e60a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e62a:	bf00      	nop
 800e62c:	3714      	adds	r7, #20
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	2000890c 	.word	0x2000890c

0800e63c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e640:	4b20      	ldr	r3, [pc, #128]	@ (800e6c4 <dhcp_inc_pcb_refcount+0x88>)
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d133      	bne.n	800e6b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e648:	4b1f      	ldr	r3, [pc, #124]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d005      	beq.n	800e65c <dhcp_inc_pcb_refcount+0x20>
 800e650:	4b1e      	ldr	r3, [pc, #120]	@ (800e6cc <dhcp_inc_pcb_refcount+0x90>)
 800e652:	22e5      	movs	r2, #229	@ 0xe5
 800e654:	491e      	ldr	r1, [pc, #120]	@ (800e6d0 <dhcp_inc_pcb_refcount+0x94>)
 800e656:	481f      	ldr	r0, [pc, #124]	@ (800e6d4 <dhcp_inc_pcb_refcount+0x98>)
 800e658:	f004 fb4e 	bl	8012cf8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e65c:	f7ff ffa6 	bl	800e5ac <udp_new>
 800e660:	4603      	mov	r3, r0
 800e662:	4a19      	ldr	r2, [pc, #100]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e664:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e666:	4b18      	ldr	r3, [pc, #96]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d102      	bne.n	800e674 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e66e:	f04f 33ff 	mov.w	r3, #4294967295
 800e672:	e024      	b.n	800e6be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e674:	4b14      	ldr	r3, [pc, #80]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	7a5a      	ldrb	r2, [r3, #9]
 800e67a:	4b13      	ldr	r3, [pc, #76]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f042 0220 	orr.w	r2, r2, #32
 800e682:	b2d2      	uxtb	r2, r2
 800e684:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e686:	4b10      	ldr	r3, [pc, #64]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2244      	movs	r2, #68	@ 0x44
 800e68c:	4912      	ldr	r1, [pc, #72]	@ (800e6d8 <dhcp_inc_pcb_refcount+0x9c>)
 800e68e:	4618      	mov	r0, r3
 800e690:	f7ff fe34 	bl	800e2fc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e694:	4b0c      	ldr	r3, [pc, #48]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2243      	movs	r2, #67	@ 0x43
 800e69a:	490f      	ldr	r1, [pc, #60]	@ (800e6d8 <dhcp_inc_pcb_refcount+0x9c>)
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff feb5 	bl	800e40c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e6a2:	4b09      	ldr	r3, [pc, #36]	@ (800e6c8 <dhcp_inc_pcb_refcount+0x8c>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	490c      	ldr	r1, [pc, #48]	@ (800e6dc <dhcp_inc_pcb_refcount+0xa0>)
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff ff1c 	bl	800e4e8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e6b0:	4b04      	ldr	r3, [pc, #16]	@ (800e6c4 <dhcp_inc_pcb_refcount+0x88>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	4b02      	ldr	r3, [pc, #8]	@ (800e6c4 <dhcp_inc_pcb_refcount+0x88>)
 800e6ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20008948 	.word	0x20008948
 800e6c8:	20008944 	.word	0x20008944
 800e6cc:	08015eec 	.word	0x08015eec
 800e6d0:	08015f24 	.word	0x08015f24
 800e6d4:	08015f4c 	.word	0x08015f4c
 800e6d8:	08016a6c 	.word	0x08016a6c
 800e6dc:	08010005 	.word	0x08010005

0800e6e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e6e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e720 <dhcp_dec_pcb_refcount+0x40>)
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d105      	bne.n	800e6f8 <dhcp_dec_pcb_refcount+0x18>
 800e6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e724 <dhcp_dec_pcb_refcount+0x44>)
 800e6ee:	22ff      	movs	r2, #255	@ 0xff
 800e6f0:	490d      	ldr	r1, [pc, #52]	@ (800e728 <dhcp_dec_pcb_refcount+0x48>)
 800e6f2:	480e      	ldr	r0, [pc, #56]	@ (800e72c <dhcp_dec_pcb_refcount+0x4c>)
 800e6f4:	f004 fb00 	bl	8012cf8 <iprintf>
  dhcp_pcb_refcount--;
 800e6f8:	4b09      	ldr	r3, [pc, #36]	@ (800e720 <dhcp_dec_pcb_refcount+0x40>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <dhcp_dec_pcb_refcount+0x40>)
 800e702:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e704:	4b06      	ldr	r3, [pc, #24]	@ (800e720 <dhcp_dec_pcb_refcount+0x40>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d107      	bne.n	800e71c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e70c:	4b08      	ldr	r3, [pc, #32]	@ (800e730 <dhcp_dec_pcb_refcount+0x50>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4618      	mov	r0, r3
 800e712:	f7ff ff09 	bl	800e528 <udp_remove>
    dhcp_pcb = NULL;
 800e716:	4b06      	ldr	r3, [pc, #24]	@ (800e730 <dhcp_dec_pcb_refcount+0x50>)
 800e718:	2200      	movs	r2, #0
 800e71a:	601a      	str	r2, [r3, #0]
  }
}
 800e71c:	bf00      	nop
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20008948 	.word	0x20008948
 800e724:	08015eec 	.word	0x08015eec
 800e728:	08015f74 	.word	0x08015f74
 800e72c:	08015f4c 	.word	0x08015f4c
 800e730:	20008944 	.word	0x20008944

0800e734 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e740:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e742:	210c      	movs	r1, #12
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f001 f86f 	bl	800f828 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e74a:	4b06      	ldr	r3, [pc, #24]	@ (800e764 <dhcp_handle_nak+0x30>)
 800e74c:	4a05      	ldr	r2, [pc, #20]	@ (800e764 <dhcp_handle_nak+0x30>)
 800e74e:	4905      	ldr	r1, [pc, #20]	@ (800e764 <dhcp_handle_nak+0x30>)
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7f8 fe95 	bl	8007480 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 fc68 	bl	800f02c <dhcp_discover>
}
 800e75c:	bf00      	nop
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	08016a6c 	.word	0x08016a6c

0800e768 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e774:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e776:	2108      	movs	r1, #8
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f001 f855 	bl	800f828 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	331c      	adds	r3, #28
 800e782:	2200      	movs	r2, #0
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f002 fb86 	bl	8010e98 <etharp_query>
 800e78c:	4603      	mov	r3, r0
 800e78e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	799b      	ldrb	r3, [r3, #6]
 800e794:	2bff      	cmp	r3, #255	@ 0xff
 800e796:	d005      	beq.n	800e7a4 <dhcp_check+0x3c>
    dhcp->tries++;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	799b      	ldrb	r3, [r3, #6]
 800e79c:	3301      	adds	r3, #1
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e7a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800e7a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e7aa:	893b      	ldrh	r3, [r7, #8]
 800e7ac:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800e7b0:	4a06      	ldr	r2, [pc, #24]	@ (800e7cc <dhcp_check+0x64>)
 800e7b2:	fb82 1203 	smull	r1, r2, r2, r3
 800e7b6:	1152      	asrs	r2, r2, #5
 800e7b8:	17db      	asrs	r3, r3, #31
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e7c2:	bf00      	nop
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	10624dd3 	.word	0x10624dd3

0800e7d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e814 <dhcp_handle_offer+0x44>)
 800e7e2:	789b      	ldrb	r3, [r3, #2]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d011      	beq.n	800e80c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e818 <dhcp_handle_offer+0x48>)
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7f7 fbab 	bl	8005f4e <lwip_htonl>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	691a      	ldr	r2, [r3, #16]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f808 	bl	800e81c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e80c:	bf00      	nop
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	20008938 	.word	0x20008938
 800e818:	20008910 	.word	0x20008910

0800e81c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e81c:	b5b0      	push	{r4, r5, r7, lr}
 800e81e:	b08a      	sub	sp, #40	@ 0x28
 800e820:	af02      	add	r7, sp, #8
 800e822:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d109      	bne.n	800e83e <dhcp_select+0x22>
 800e82a:	4b71      	ldr	r3, [pc, #452]	@ (800e9f0 <dhcp_select+0x1d4>)
 800e82c:	f240 1277 	movw	r2, #375	@ 0x177
 800e830:	4970      	ldr	r1, [pc, #448]	@ (800e9f4 <dhcp_select+0x1d8>)
 800e832:	4871      	ldr	r0, [pc, #452]	@ (800e9f8 <dhcp_select+0x1dc>)
 800e834:	f004 fa60 	bl	8012cf8 <iprintf>
 800e838:	f06f 030f 	mvn.w	r3, #15
 800e83c:	e0d3      	b.n	800e9e6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e842:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d109      	bne.n	800e85e <dhcp_select+0x42>
 800e84a:	4b69      	ldr	r3, [pc, #420]	@ (800e9f0 <dhcp_select+0x1d4>)
 800e84c:	f240 1279 	movw	r2, #377	@ 0x179
 800e850:	496a      	ldr	r1, [pc, #424]	@ (800e9fc <dhcp_select+0x1e0>)
 800e852:	4869      	ldr	r0, [pc, #420]	@ (800e9f8 <dhcp_select+0x1dc>)
 800e854:	f004 fa50 	bl	8012cf8 <iprintf>
 800e858:	f06f 0305 	mvn.w	r3, #5
 800e85c:	e0c3      	b.n	800e9e6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e85e:	2101      	movs	r1, #1
 800e860:	69b8      	ldr	r0, [r7, #24]
 800e862:	f000 ffe1 	bl	800f828 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e866:	f107 030c 	add.w	r3, r7, #12
 800e86a:	2203      	movs	r2, #3
 800e86c:	69b9      	ldr	r1, [r7, #24]
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f001 fc96 	bl	80101a0 <dhcp_create_msg>
 800e874:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f000 8085 	beq.w	800e988 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e884:	89b8      	ldrh	r0, [r7, #12]
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e88c:	2302      	movs	r3, #2
 800e88e:	2239      	movs	r2, #57	@ 0x39
 800e890:	f000 ffe4 	bl	800f85c <dhcp_option>
 800e894:	4603      	mov	r3, r0
 800e896:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e898:	89b8      	ldrh	r0, [r7, #12]
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	f001 f833 	bl	800f910 <dhcp_option_short>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e8ae:	89b8      	ldrh	r0, [r7, #12]
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e8b6:	2304      	movs	r3, #4
 800e8b8:	2232      	movs	r2, #50	@ 0x32
 800e8ba:	f000 ffcf 	bl	800f85c <dhcp_option>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e8c2:	89bc      	ldrh	r4, [r7, #12]
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	69db      	ldr	r3, [r3, #28]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7f7 fb3d 	bl	8005f4e <lwip_htonl>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f001 f84a 	bl	800f974 <dhcp_option_long>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e8e4:	89b8      	ldrh	r0, [r7, #12]
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e8ec:	2304      	movs	r3, #4
 800e8ee:	2236      	movs	r2, #54	@ 0x36
 800e8f0:	f000 ffb4 	bl	800f85c <dhcp_option>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e8f8:	89bc      	ldrh	r4, [r7, #12]
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	4618      	mov	r0, r3
 800e906:	f7f7 fb22 	bl	8005f4e <lwip_htonl>
 800e90a:	4603      	mov	r3, r0
 800e90c:	461a      	mov	r2, r3
 800e90e:	4629      	mov	r1, r5
 800e910:	4620      	mov	r0, r4
 800e912:	f001 f82f 	bl	800f974 <dhcp_option_long>
 800e916:	4603      	mov	r3, r0
 800e918:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e91a:	89b8      	ldrh	r0, [r7, #12]
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e922:	2304      	movs	r3, #4
 800e924:	2237      	movs	r2, #55	@ 0x37
 800e926:	f000 ff99 	bl	800f85c <dhcp_option>
 800e92a:	4603      	mov	r3, r0
 800e92c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e92e:	2300      	movs	r3, #0
 800e930:	77bb      	strb	r3, [r7, #30]
 800e932:	e00e      	b.n	800e952 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e934:	89b8      	ldrh	r0, [r7, #12]
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e93c:	7fbb      	ldrb	r3, [r7, #30]
 800e93e:	4a30      	ldr	r2, [pc, #192]	@ (800ea00 <dhcp_select+0x1e4>)
 800e940:	5cd3      	ldrb	r3, [r2, r3]
 800e942:	461a      	mov	r2, r3
 800e944:	f000 ffbe 	bl	800f8c4 <dhcp_option_byte>
 800e948:	4603      	mov	r3, r0
 800e94a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e94c:	7fbb      	ldrb	r3, [r7, #30]
 800e94e:	3301      	adds	r3, #1
 800e950:	77bb      	strb	r3, [r7, #30]
 800e952:	7fbb      	ldrb	r3, [r7, #30]
 800e954:	2b03      	cmp	r3, #3
 800e956:	d9ed      	bls.n	800e934 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e958:	89b8      	ldrh	r0, [r7, #12]
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	33f0      	adds	r3, #240	@ 0xf0
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	4619      	mov	r1, r3
 800e962:	f001 fcf3 	bl	801034c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e966:	4b27      	ldr	r3, [pc, #156]	@ (800ea04 <dhcp_select+0x1e8>)
 800e968:	6818      	ldr	r0, [r3, #0]
 800e96a:	4b27      	ldr	r3, [pc, #156]	@ (800ea08 <dhcp_select+0x1ec>)
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	2343      	movs	r3, #67	@ 0x43
 800e974:	4a25      	ldr	r2, [pc, #148]	@ (800ea0c <dhcp_select+0x1f0>)
 800e976:	6979      	ldr	r1, [r7, #20]
 800e978:	f7ff fbc0 	bl	800e0fc <udp_sendto_if_src>
 800e97c:	4603      	mov	r3, r0
 800e97e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e980:	6978      	ldr	r0, [r7, #20]
 800e982:	f7f9 fa6d 	bl	8007e60 <pbuf_free>
 800e986:	e001      	b.n	800e98c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e988:	23ff      	movs	r3, #255	@ 0xff
 800e98a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	799b      	ldrb	r3, [r3, #6]
 800e990:	2bff      	cmp	r3, #255	@ 0xff
 800e992:	d005      	beq.n	800e9a0 <dhcp_select+0x184>
    dhcp->tries++;
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	799b      	ldrb	r3, [r3, #6]
 800e998:	3301      	adds	r3, #1
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	799b      	ldrb	r3, [r3, #6]
 800e9a4:	2b05      	cmp	r3, #5
 800e9a6:	d80d      	bhi.n	800e9c4 <dhcp_select+0x1a8>
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	799b      	ldrb	r3, [r3, #6]
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	4093      	lsls	r3, r2
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	0152      	lsls	r2, r2, #5
 800e9b8:	1ad2      	subs	r2, r2, r3
 800e9ba:	0092      	lsls	r2, r2, #2
 800e9bc:	4413      	add	r3, r2
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	e001      	b.n	800e9c8 <dhcp_select+0x1ac>
 800e9c4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800e9c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e9ca:	89fb      	ldrh	r3, [r7, #14]
 800e9cc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800e9d0:	4a0f      	ldr	r2, [pc, #60]	@ (800ea10 <dhcp_select+0x1f4>)
 800e9d2:	fb82 1203 	smull	r1, r2, r2, r3
 800e9d6:	1152      	asrs	r2, r2, #5
 800e9d8:	17db      	asrs	r3, r3, #31
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	b29a      	uxth	r2, r3
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e9e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	08015eec 	.word	0x08015eec
 800e9f4:	08015f98 	.word	0x08015f98
 800e9f8:	08015f4c 	.word	0x08015f4c
 800e9fc:	08015fb4 	.word	0x08015fb4
 800ea00:	2000002c 	.word	0x2000002c
 800ea04:	20008944 	.word	0x20008944
 800ea08:	08016a6c 	.word	0x08016a6c
 800ea0c:	08016a70 	.word	0x08016a70
 800ea10:	10624dd3 	.word	0x10624dd3

0800ea14 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800ea1a:	4b27      	ldr	r3, [pc, #156]	@ (800eab8 <dhcp_coarse_tmr+0xa4>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	607b      	str	r3, [r7, #4]
 800ea20:	e042      	b.n	800eaa8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea26:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d039      	beq.n	800eaa2 <dhcp_coarse_tmr+0x8e>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	795b      	ldrb	r3, [r3, #5]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d035      	beq.n	800eaa2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	8a9b      	ldrh	r3, [r3, #20]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d012      	beq.n	800ea64 <dhcp_coarse_tmr+0x50>
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	8a5b      	ldrh	r3, [r3, #18]
 800ea42:	3301      	adds	r3, #1
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	825a      	strh	r2, [r3, #18]
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	8a5a      	ldrh	r2, [r3, #18]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	8a9b      	ldrh	r3, [r3, #20]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d106      	bne.n	800ea64 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 fe4c 	bl	800f6f4 <dhcp_release_and_stop>
        dhcp_start(netif);
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f989 	bl	800ed74 <dhcp_start>
 800ea62:	e01e      	b.n	800eaa2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	8a1b      	ldrh	r3, [r3, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00b      	beq.n	800ea84 <dhcp_coarse_tmr+0x70>
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	8a1b      	ldrh	r3, [r3, #16]
 800ea70:	1e5a      	subs	r2, r3, #1
 800ea72:	b291      	uxth	r1, r2
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	8211      	strh	r1, [r2, #16]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d103      	bne.n	800ea84 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f8c6 	bl	800ec0e <dhcp_t2_timeout>
 800ea82:	e00e      	b.n	800eaa2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	89db      	ldrh	r3, [r3, #14]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00a      	beq.n	800eaa2 <dhcp_coarse_tmr+0x8e>
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	89db      	ldrh	r3, [r3, #14]
 800ea90:	1e5a      	subs	r2, r3, #1
 800ea92:	b291      	uxth	r1, r2
 800ea94:	683a      	ldr	r2, [r7, #0]
 800ea96:	81d1      	strh	r1, [r2, #14]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d102      	bne.n	800eaa2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 f888 	bl	800ebb2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	607b      	str	r3, [r7, #4]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1b9      	bne.n	800ea22 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800eaae:	bf00      	nop
 800eab0:	bf00      	nop
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	200088a4 	.word	0x200088a4

0800eabc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800eac2:	4b16      	ldr	r3, [pc, #88]	@ (800eb1c <dhcp_fine_tmr+0x60>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	607b      	str	r3, [r7, #4]
 800eac8:	e020      	b.n	800eb0c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eace:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d017      	beq.n	800eb06 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	891b      	ldrh	r3, [r3, #8]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d906      	bls.n	800eaec <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	891b      	ldrh	r3, [r3, #8]
 800eae2:	3b01      	subs	r3, #1
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	811a      	strh	r2, [r3, #8]
 800eaea:	e00c      	b.n	800eb06 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	891b      	ldrh	r3, [r3, #8]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d108      	bne.n	800eb06 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	891b      	ldrh	r3, [r3, #8]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 f80d 	bl	800eb20 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	607b      	str	r3, [r7, #4]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1db      	bne.n	800eaca <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800eb12:	bf00      	nop
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	200088a4 	.word	0x200088a4

0800eb20 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb2c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	795b      	ldrb	r3, [r3, #5]
 800eb32:	2b0c      	cmp	r3, #12
 800eb34:	d003      	beq.n	800eb3e <dhcp_timeout+0x1e>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	795b      	ldrb	r3, [r3, #5]
 800eb3a:	2b06      	cmp	r3, #6
 800eb3c:	d103      	bne.n	800eb46 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 fa74 	bl	800f02c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800eb44:	e031      	b.n	800ebaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	795b      	ldrb	r3, [r3, #5]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d10e      	bne.n	800eb6c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	799b      	ldrb	r3, [r3, #6]
 800eb52:	2b05      	cmp	r3, #5
 800eb54:	d803      	bhi.n	800eb5e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff fe60 	bl	800e81c <dhcp_select>
}
 800eb5c:	e025      	b.n	800ebaa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 fdc8 	bl	800f6f4 <dhcp_release_and_stop>
      dhcp_start(netif);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f905 	bl	800ed74 <dhcp_start>
}
 800eb6a:	e01e      	b.n	800ebaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	795b      	ldrb	r3, [r3, #5]
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	d10b      	bne.n	800eb8c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	799b      	ldrb	r3, [r3, #6]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d803      	bhi.n	800eb84 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7ff fdf3 	bl	800e768 <dhcp_check>
}
 800eb82:	e012      	b.n	800ebaa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 faf3 	bl	800f170 <dhcp_bind>
}
 800eb8a:	e00e      	b.n	800ebaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	795b      	ldrb	r3, [r3, #5]
 800eb90:	2b03      	cmp	r3, #3
 800eb92:	d10a      	bne.n	800ebaa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	799b      	ldrb	r3, [r3, #6]
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d803      	bhi.n	800eba4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fcf5 	bl	800f58c <dhcp_reboot>
}
 800eba2:	e002      	b.n	800ebaa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 fa41 	bl	800f02c <dhcp_discover>
}
 800ebaa:	bf00      	nop
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b084      	sub	sp, #16
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebbe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	795b      	ldrb	r3, [r3, #5]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d007      	beq.n	800ebd8 <dhcp_t1_timeout+0x26>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	795b      	ldrb	r3, [r3, #5]
 800ebcc:	2b0a      	cmp	r3, #10
 800ebce:	d003      	beq.n	800ebd8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ebd4:	2b05      	cmp	r3, #5
 800ebd6:	d116      	bne.n	800ec06 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 fba3 	bl	800f324 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	899b      	ldrh	r3, [r3, #12]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	8a5b      	ldrh	r3, [r3, #18]
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	dd0b      	ble.n	800ec06 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	899b      	ldrh	r3, [r3, #12]
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	8a5b      	ldrh	r3, [r3, #18]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	0fda      	lsrs	r2, r3, #31
 800ebfc:	4413      	add	r3, r2
 800ebfe:	105b      	asrs	r3, r3, #1
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ec06:	bf00      	nop
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b084      	sub	sp, #16
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec1a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	795b      	ldrb	r3, [r3, #5]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d00b      	beq.n	800ec3c <dhcp_t2_timeout+0x2e>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	795b      	ldrb	r3, [r3, #5]
 800ec28:	2b0a      	cmp	r3, #10
 800ec2a:	d007      	beq.n	800ec3c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ec30:	2b05      	cmp	r3, #5
 800ec32:	d003      	beq.n	800ec3c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	795b      	ldrb	r3, [r3, #5]
 800ec38:	2b04      	cmp	r3, #4
 800ec3a:	d116      	bne.n	800ec6a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 fc0b 	bl	800f458 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	8a9b      	ldrh	r3, [r3, #20]
 800ec46:	461a      	mov	r2, r3
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	8a5b      	ldrh	r3, [r3, #18]
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	dd0b      	ble.n	800ec6a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	8a9b      	ldrh	r3, [r3, #20]
 800ec56:	461a      	mov	r2, r3
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	8a5b      	ldrh	r3, [r3, #18]
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	0fda      	lsrs	r2, r3, #31
 800ec60:	4413      	add	r3, r2
 800ec62:	105b      	asrs	r3, r3, #1
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ec6a:	bf00      	nop
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b086      	sub	sp, #24
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec82:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	2200      	movs	r2, #0
 800ec88:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ec90:	4b36      	ldr	r3, [pc, #216]	@ (800ed6c <dhcp_handle_ack+0xf8>)
 800ec92:	78db      	ldrb	r3, [r3, #3]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d003      	beq.n	800eca0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ec98:	4b35      	ldr	r3, [pc, #212]	@ (800ed70 <dhcp_handle_ack+0xfc>)
 800ec9a:	68da      	ldr	r2, [r3, #12]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800eca0:	4b32      	ldr	r3, [pc, #200]	@ (800ed6c <dhcp_handle_ack+0xf8>)
 800eca2:	791b      	ldrb	r3, [r3, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d004      	beq.n	800ecb2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800eca8:	4b31      	ldr	r3, [pc, #196]	@ (800ed70 <dhcp_handle_ack+0xfc>)
 800ecaa:	691a      	ldr	r2, [r3, #16]
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ecb0:	e004      	b.n	800ecbc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecb6:	085a      	lsrs	r2, r3, #1
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ecbc:	4b2b      	ldr	r3, [pc, #172]	@ (800ed6c <dhcp_handle_ack+0xf8>)
 800ecbe:	795b      	ldrb	r3, [r3, #5]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d004      	beq.n	800ecce <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ecc4:	4b2a      	ldr	r3, [pc, #168]	@ (800ed70 <dhcp_handle_ack+0xfc>)
 800ecc6:	695a      	ldr	r2, [r3, #20]
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	631a      	str	r2, [r3, #48]	@ 0x30
 800eccc:	e007      	b.n	800ecde <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	00db      	lsls	r3, r3, #3
 800ecd6:	1a9b      	subs	r3, r3, r2
 800ecd8:	08da      	lsrs	r2, r3, #3
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	691a      	ldr	r2, [r3, #16]
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ece6:	4b21      	ldr	r3, [pc, #132]	@ (800ed6c <dhcp_handle_ack+0xf8>)
 800ece8:	799b      	ldrb	r3, [r3, #6]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00b      	beq.n	800ed06 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ecee:	4b20      	ldr	r3, [pc, #128]	@ (800ed70 <dhcp_handle_ack+0xfc>)
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7f7 f92b 	bl	8005f4e <lwip_htonl>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	2201      	movs	r2, #1
 800ed02:	71da      	strb	r2, [r3, #7]
 800ed04:	e002      	b.n	800ed0c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ed0c:	4b17      	ldr	r3, [pc, #92]	@ (800ed6c <dhcp_handle_ack+0xf8>)
 800ed0e:	79db      	ldrb	r3, [r3, #7]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d007      	beq.n	800ed24 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ed14:	4b16      	ldr	r3, [pc, #88]	@ (800ed70 <dhcp_handle_ack+0xfc>)
 800ed16:	69db      	ldr	r3, [r3, #28]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7f7 f918 	bl	8005f4e <lwip_htonl>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800ed24:	2300      	movs	r3, #0
 800ed26:	75fb      	strb	r3, [r7, #23]
 800ed28:	e013      	b.n	800ed52 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	3308      	adds	r3, #8
 800ed2e:	4a10      	ldr	r2, [pc, #64]	@ (800ed70 <dhcp_handle_ack+0xfc>)
 800ed30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7f7 f90a 	bl	8005f4e <lwip_htonl>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800ed3e:	f107 020c 	add.w	r2, r7, #12
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	4611      	mov	r1, r2
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f7 f922 	bl	8005f90 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	75fb      	strb	r3, [r7, #23]
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d805      	bhi.n	800ed64 <dhcp_handle_ack+0xf0>
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
 800ed5a:	3308      	adds	r3, #8
 800ed5c:	4a03      	ldr	r2, [pc, #12]	@ (800ed6c <dhcp_handle_ack+0xf8>)
 800ed5e:	5cd3      	ldrb	r3, [r2, r3]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1e2      	bne.n	800ed2a <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ed64:	bf00      	nop
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	20008938 	.word	0x20008938
 800ed70:	20008910 	.word	0x20008910

0800ed74 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d109      	bne.n	800ed96 <dhcp_start+0x22>
 800ed82:	4b37      	ldr	r3, [pc, #220]	@ (800ee60 <dhcp_start+0xec>)
 800ed84:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800ed88:	4936      	ldr	r1, [pc, #216]	@ (800ee64 <dhcp_start+0xf0>)
 800ed8a:	4837      	ldr	r0, [pc, #220]	@ (800ee68 <dhcp_start+0xf4>)
 800ed8c:	f003 ffb4 	bl	8012cf8 <iprintf>
 800ed90:	f06f 030f 	mvn.w	r3, #15
 800ed94:	e060      	b.n	800ee58 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ed9c:	f003 0301 	and.w	r3, r3, #1
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d109      	bne.n	800edb8 <dhcp_start+0x44>
 800eda4:	4b2e      	ldr	r3, [pc, #184]	@ (800ee60 <dhcp_start+0xec>)
 800eda6:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800edaa:	4930      	ldr	r1, [pc, #192]	@ (800ee6c <dhcp_start+0xf8>)
 800edac:	482e      	ldr	r0, [pc, #184]	@ (800ee68 <dhcp_start+0xf4>)
 800edae:	f003 ffa3 	bl	8012cf8 <iprintf>
 800edb2:	f06f 030f 	mvn.w	r3, #15
 800edb6:	e04f      	b.n	800ee58 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edbc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800edc2:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800edc6:	d202      	bcs.n	800edce <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800edc8:	f04f 33ff 	mov.w	r3, #4294967295
 800edcc:	e044      	b.n	800ee58 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10d      	bne.n	800edf0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800edd4:	2034      	movs	r0, #52	@ 0x34
 800edd6:	f7f7 ffa7 	bl	8006d28 <mem_malloc>
 800edda:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d102      	bne.n	800ede8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ede2:	f04f 33ff 	mov.w	r3, #4294967295
 800ede6:	e037      	b.n	800ee58 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	629a      	str	r2, [r3, #40]	@ 0x28
 800edee:	e005      	b.n	800edfc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	791b      	ldrb	r3, [r3, #4]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800edf8:	f7ff fc72 	bl	800e6e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800edfc:	2234      	movs	r2, #52	@ 0x34
 800edfe:	2100      	movs	r1, #0
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f003 ffde 	bl	8012dc2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ee06:	f7ff fc19 	bl	800e63c <dhcp_inc_pcb_refcount>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <dhcp_start+0xa2>
    return ERR_MEM;
 800ee10:	f04f 33ff 	mov.w	r3, #4294967295
 800ee14:	e020      	b.n	800ee58 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ee22:	f003 0304 	and.w	r3, r3, #4
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d105      	bne.n	800ee36 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ee2a:	2102      	movs	r1, #2
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f000 fcfb 	bl	800f828 <dhcp_set_state>
    return ERR_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	e010      	b.n	800ee58 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 f8f8 	bl	800f02c <dhcp_discover>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ee40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d005      	beq.n	800ee54 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fc53 	bl	800f6f4 <dhcp_release_and_stop>
    return ERR_MEM;
 800ee4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee52:	e001      	b.n	800ee58 <dhcp_start+0xe4>
  }
  return result;
 800ee54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	08015eec 	.word	0x08015eec
 800ee64:	08015fd0 	.word	0x08015fd0
 800ee68:	08015f4c 	.word	0x08015f4c
 800ee6c:	08016014 	.word	0x08016014

0800ee70 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee7c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d025      	beq.n	800eed0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	795b      	ldrb	r3, [r3, #5]
 800ee88:	2b0a      	cmp	r3, #10
 800ee8a:	d008      	beq.n	800ee9e <dhcp_network_changed+0x2e>
 800ee8c:	2b0a      	cmp	r3, #10
 800ee8e:	dc0d      	bgt.n	800eeac <dhcp_network_changed+0x3c>
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d01f      	beq.n	800eed4 <dhcp_network_changed+0x64>
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	db09      	blt.n	800eeac <dhcp_network_changed+0x3c>
 800ee98:	3b03      	subs	r3, #3
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d806      	bhi.n	800eeac <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2200      	movs	r2, #0
 800eea2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 fb71 	bl	800f58c <dhcp_reboot>
      break;
 800eeaa:	e014      	b.n	800eed6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	795b      	ldrb	r3, [r3, #5]
 800eeb0:	2b0c      	cmp	r3, #12
 800eeb2:	d906      	bls.n	800eec2 <dhcp_network_changed+0x52>
 800eeb4:	4b09      	ldr	r3, [pc, #36]	@ (800eedc <dhcp_network_changed+0x6c>)
 800eeb6:	f240 326d 	movw	r2, #877	@ 0x36d
 800eeba:	4909      	ldr	r1, [pc, #36]	@ (800eee0 <dhcp_network_changed+0x70>)
 800eebc:	4809      	ldr	r0, [pc, #36]	@ (800eee4 <dhcp_network_changed+0x74>)
 800eebe:	f003 ff1b 	bl	8012cf8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f8af 	bl	800f02c <dhcp_discover>
      break;
 800eece:	e002      	b.n	800eed6 <dhcp_network_changed+0x66>
    return;
 800eed0:	bf00      	nop
 800eed2:	e000      	b.n	800eed6 <dhcp_network_changed+0x66>
      break;
 800eed4:	bf00      	nop
  }
}
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	08015eec 	.word	0x08015eec
 800eee0:	08016038 	.word	0x08016038
 800eee4:	08015f4c 	.word	0x08015f4c

0800eee8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d107      	bne.n	800ef08 <dhcp_arp_reply+0x20>
 800eef8:	4b0e      	ldr	r3, [pc, #56]	@ (800ef34 <dhcp_arp_reply+0x4c>)
 800eefa:	f240 328b 	movw	r2, #907	@ 0x38b
 800eefe:	490e      	ldr	r1, [pc, #56]	@ (800ef38 <dhcp_arp_reply+0x50>)
 800ef00:	480e      	ldr	r0, [pc, #56]	@ (800ef3c <dhcp_arp_reply+0x54>)
 800ef02:	f003 fef9 	bl	8012cf8 <iprintf>
 800ef06:	e012      	b.n	800ef2e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef0c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00c      	beq.n	800ef2e <dhcp_arp_reply+0x46>
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	795b      	ldrb	r3, [r3, #5]
 800ef18:	2b08      	cmp	r3, #8
 800ef1a:	d108      	bne.n	800ef2e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	69db      	ldr	r3, [r3, #28]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d102      	bne.n	800ef2e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 f809 	bl	800ef40 <dhcp_decline>
    }
  }
}
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	08015eec 	.word	0x08015eec
 800ef38:	08015fd0 	.word	0x08015fd0
 800ef3c:	08015f4c 	.word	0x08015f4c

0800ef40 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800ef40:	b5b0      	push	{r4, r5, r7, lr}
 800ef42:	b08a      	sub	sp, #40	@ 0x28
 800ef44:	af02      	add	r7, sp, #8
 800ef46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef4c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ef4e:	210c      	movs	r1, #12
 800ef50:	69b8      	ldr	r0, [r7, #24]
 800ef52:	f000 fc69 	bl	800f828 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800ef56:	f107 030c 	add.w	r3, r7, #12
 800ef5a:	2204      	movs	r2, #4
 800ef5c:	69b9      	ldr	r1, [r7, #24]
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f001 f91e 	bl	80101a0 <dhcp_create_msg>
 800ef64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d035      	beq.n	800efd8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ef72:	89b8      	ldrh	r0, [r7, #12]
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ef7a:	2304      	movs	r3, #4
 800ef7c:	2232      	movs	r2, #50	@ 0x32
 800ef7e:	f000 fc6d 	bl	800f85c <dhcp_option>
 800ef82:	4603      	mov	r3, r0
 800ef84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ef86:	89bc      	ldrh	r4, [r7, #12]
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	69db      	ldr	r3, [r3, #28]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7f6 ffdb 	bl	8005f4e <lwip_htonl>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f000 fce8 	bl	800f974 <dhcp_option_long>
 800efa4:	4603      	mov	r3, r0
 800efa6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800efa8:	89b8      	ldrh	r0, [r7, #12]
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	33f0      	adds	r3, #240	@ 0xf0
 800efae:	697a      	ldr	r2, [r7, #20]
 800efb0:	4619      	mov	r1, r3
 800efb2:	f001 f9cb 	bl	801034c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800efb6:	4b19      	ldr	r3, [pc, #100]	@ (800f01c <dhcp_decline+0xdc>)
 800efb8:	6818      	ldr	r0, [r3, #0]
 800efba:	4b19      	ldr	r3, [pc, #100]	@ (800f020 <dhcp_decline+0xe0>)
 800efbc:	9301      	str	r3, [sp, #4]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	2343      	movs	r3, #67	@ 0x43
 800efc4:	4a17      	ldr	r2, [pc, #92]	@ (800f024 <dhcp_decline+0xe4>)
 800efc6:	6979      	ldr	r1, [r7, #20]
 800efc8:	f7ff f898 	bl	800e0fc <udp_sendto_if_src>
 800efcc:	4603      	mov	r3, r0
 800efce:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800efd0:	6978      	ldr	r0, [r7, #20]
 800efd2:	f7f8 ff45 	bl	8007e60 <pbuf_free>
 800efd6:	e001      	b.n	800efdc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800efd8:	23ff      	movs	r3, #255	@ 0xff
 800efda:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	799b      	ldrb	r3, [r3, #6]
 800efe0:	2bff      	cmp	r3, #255	@ 0xff
 800efe2:	d005      	beq.n	800eff0 <dhcp_decline+0xb0>
    dhcp->tries++;
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	799b      	ldrb	r3, [r3, #6]
 800efe8:	3301      	adds	r3, #1
 800efea:	b2da      	uxtb	r2, r3
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800eff0:	f242 7310 	movw	r3, #10000	@ 0x2710
 800eff4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eff6:	89fb      	ldrh	r3, [r7, #14]
 800eff8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800effc:	4a0a      	ldr	r2, [pc, #40]	@ (800f028 <dhcp_decline+0xe8>)
 800effe:	fb82 1203 	smull	r1, r2, r2, r3
 800f002:	1152      	asrs	r2, r2, #5
 800f004:	17db      	asrs	r3, r3, #31
 800f006:	1ad3      	subs	r3, r2, r3
 800f008:	b29a      	uxth	r2, r3
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f00e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3720      	adds	r7, #32
 800f016:	46bd      	mov	sp, r7
 800f018:	bdb0      	pop	{r4, r5, r7, pc}
 800f01a:	bf00      	nop
 800f01c:	20008944 	.word	0x20008944
 800f020:	08016a6c 	.word	0x08016a6c
 800f024:	08016a70 	.word	0x08016a70
 800f028:	10624dd3 	.word	0x10624dd3

0800f02c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08a      	sub	sp, #40	@ 0x28
 800f030:	af02      	add	r7, sp, #8
 800f032:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f038:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f03a:	2300      	movs	r3, #0
 800f03c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	2200      	movs	r2, #0
 800f042:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f044:	2106      	movs	r1, #6
 800f046:	69b8      	ldr	r0, [r7, #24]
 800f048:	f000 fbee 	bl	800f828 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f04c:	f107 0308 	add.w	r3, r7, #8
 800f050:	2201      	movs	r2, #1
 800f052:	69b9      	ldr	r1, [r7, #24]
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f001 f8a3 	bl	80101a0 <dhcp_create_msg>
 800f05a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d04b      	beq.n	800f0fa <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f068:	8938      	ldrh	r0, [r7, #8]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f070:	2302      	movs	r3, #2
 800f072:	2239      	movs	r2, #57	@ 0x39
 800f074:	f000 fbf2 	bl	800f85c <dhcp_option>
 800f078:	4603      	mov	r3, r0
 800f07a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f07c:	8938      	ldrh	r0, [r7, #8]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f088:	461a      	mov	r2, r3
 800f08a:	f000 fc41 	bl	800f910 <dhcp_option_short>
 800f08e:	4603      	mov	r3, r0
 800f090:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f092:	8938      	ldrh	r0, [r7, #8]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f09a:	2304      	movs	r3, #4
 800f09c:	2237      	movs	r2, #55	@ 0x37
 800f09e:	f000 fbdd 	bl	800f85c <dhcp_option>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	77fb      	strb	r3, [r7, #31]
 800f0aa:	e00e      	b.n	800f0ca <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f0ac:	8938      	ldrh	r0, [r7, #8]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f0b4:	7ffb      	ldrb	r3, [r7, #31]
 800f0b6:	4a29      	ldr	r2, [pc, #164]	@ (800f15c <dhcp_discover+0x130>)
 800f0b8:	5cd3      	ldrb	r3, [r2, r3]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	f000 fc02 	bl	800f8c4 <dhcp_option_byte>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f0c4:	7ffb      	ldrb	r3, [r7, #31]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	77fb      	strb	r3, [r7, #31]
 800f0ca:	7ffb      	ldrb	r3, [r7, #31]
 800f0cc:	2b03      	cmp	r3, #3
 800f0ce:	d9ed      	bls.n	800f0ac <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f0d0:	8938      	ldrh	r0, [r7, #8]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	33f0      	adds	r3, #240	@ 0xf0
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	4619      	mov	r1, r3
 800f0da:	f001 f937 	bl	801034c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f0de:	4b20      	ldr	r3, [pc, #128]	@ (800f160 <dhcp_discover+0x134>)
 800f0e0:	6818      	ldr	r0, [r3, #0]
 800f0e2:	4b20      	ldr	r3, [pc, #128]	@ (800f164 <dhcp_discover+0x138>)
 800f0e4:	9301      	str	r3, [sp, #4]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	2343      	movs	r3, #67	@ 0x43
 800f0ec:	4a1e      	ldr	r2, [pc, #120]	@ (800f168 <dhcp_discover+0x13c>)
 800f0ee:	6939      	ldr	r1, [r7, #16]
 800f0f0:	f7ff f804 	bl	800e0fc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f0f4:	6938      	ldr	r0, [r7, #16]
 800f0f6:	f7f8 feb3 	bl	8007e60 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	799b      	ldrb	r3, [r3, #6]
 800f0fe:	2bff      	cmp	r3, #255	@ 0xff
 800f100:	d005      	beq.n	800f10e <dhcp_discover+0xe2>
    dhcp->tries++;
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	799b      	ldrb	r3, [r3, #6]
 800f106:	3301      	adds	r3, #1
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	799b      	ldrb	r3, [r3, #6]
 800f112:	2b05      	cmp	r3, #5
 800f114:	d80d      	bhi.n	800f132 <dhcp_discover+0x106>
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	799b      	ldrb	r3, [r3, #6]
 800f11a:	461a      	mov	r2, r3
 800f11c:	2301      	movs	r3, #1
 800f11e:	4093      	lsls	r3, r2
 800f120:	b29b      	uxth	r3, r3
 800f122:	461a      	mov	r2, r3
 800f124:	0152      	lsls	r2, r2, #5
 800f126:	1ad2      	subs	r2, r2, r3
 800f128:	0092      	lsls	r2, r2, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	00db      	lsls	r3, r3, #3
 800f12e:	b29b      	uxth	r3, r3
 800f130:	e001      	b.n	800f136 <dhcp_discover+0x10a>
 800f132:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800f136:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f138:	897b      	ldrh	r3, [r7, #10]
 800f13a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f13e:	4a0b      	ldr	r2, [pc, #44]	@ (800f16c <dhcp_discover+0x140>)
 800f140:	fb82 1203 	smull	r1, r2, r2, r3
 800f144:	1152      	asrs	r2, r2, #5
 800f146:	17db      	asrs	r3, r3, #31
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f150:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f154:	4618      	mov	r0, r3
 800f156:	3720      	adds	r7, #32
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	2000002c 	.word	0x2000002c
 800f160:	20008944 	.word	0x20008944
 800f164:	08016a6c 	.word	0x08016a6c
 800f168:	08016a70 	.word	0x08016a70
 800f16c:	10624dd3 	.word	0x10624dd3

0800f170 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d107      	bne.n	800f18e <dhcp_bind+0x1e>
 800f17e:	4b64      	ldr	r3, [pc, #400]	@ (800f310 <dhcp_bind+0x1a0>)
 800f180:	f240 4215 	movw	r2, #1045	@ 0x415
 800f184:	4963      	ldr	r1, [pc, #396]	@ (800f314 <dhcp_bind+0x1a4>)
 800f186:	4864      	ldr	r0, [pc, #400]	@ (800f318 <dhcp_bind+0x1a8>)
 800f188:	f003 fdb6 	bl	8012cf8 <iprintf>
 800f18c:	e0bc      	b.n	800f308 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f192:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d107      	bne.n	800f1aa <dhcp_bind+0x3a>
 800f19a:	4b5d      	ldr	r3, [pc, #372]	@ (800f310 <dhcp_bind+0x1a0>)
 800f19c:	f240 4217 	movw	r2, #1047	@ 0x417
 800f1a0:	495e      	ldr	r1, [pc, #376]	@ (800f31c <dhcp_bind+0x1ac>)
 800f1a2:	485d      	ldr	r0, [pc, #372]	@ (800f318 <dhcp_bind+0x1a8>)
 800f1a4:	f003 fda8 	bl	8012cf8 <iprintf>
 800f1a8:	e0ae      	b.n	800f308 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b8:	d019      	beq.n	800f1ee <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1be:	331e      	adds	r3, #30
 800f1c0:	4a57      	ldr	r2, [pc, #348]	@ (800f320 <dhcp_bind+0x1b0>)
 800f1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c6:	095b      	lsrs	r3, r3, #5
 800f1c8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1d0:	d302      	bcc.n	800f1d8 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f1d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f1d6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	8a9b      	ldrh	r3, [r3, #20]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d102      	bne.n	800f1ee <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f6:	d01d      	beq.n	800f234 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1fc:	331e      	adds	r3, #30
 800f1fe:	4a48      	ldr	r2, [pc, #288]	@ (800f320 <dhcp_bind+0x1b0>)
 800f200:	fba2 2303 	umull	r2, r3, r2, r3
 800f204:	095b      	lsrs	r3, r3, #5
 800f206:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f20e:	d302      	bcc.n	800f216 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f214:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	b29a      	uxth	r2, r3
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	895b      	ldrh	r3, [r3, #10]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d102      	bne.n	800f22c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	2201      	movs	r2, #1
 800f22a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	895a      	ldrh	r2, [r3, #10]
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23c:	d01d      	beq.n	800f27a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f242:	331e      	adds	r3, #30
 800f244:	4a36      	ldr	r2, [pc, #216]	@ (800f320 <dhcp_bind+0x1b0>)
 800f246:	fba2 2303 	umull	r2, r3, r2, r3
 800f24a:	095b      	lsrs	r3, r3, #5
 800f24c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f254:	d302      	bcc.n	800f25c <dhcp_bind+0xec>
      timeout = 0xffff;
 800f256:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f25a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	b29a      	uxth	r2, r3
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	899b      	ldrh	r3, [r3, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d102      	bne.n	800f272 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	2201      	movs	r2, #1
 800f270:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	899a      	ldrh	r2, [r3, #12]
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	895a      	ldrh	r2, [r3, #10]
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	899b      	ldrh	r3, [r3, #12]
 800f282:	429a      	cmp	r2, r3
 800f284:	d306      	bcc.n	800f294 <dhcp_bind+0x124>
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	899b      	ldrh	r3, [r3, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d002      	beq.n	800f294 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	2200      	movs	r2, #0
 800f292:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	79db      	ldrb	r3, [r3, #7]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d003      	beq.n	800f2a4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	6a1b      	ldr	r3, [r3, #32]
 800f2a0:	613b      	str	r3, [r7, #16]
 800f2a2:	e014      	b.n	800f2ce <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	331c      	adds	r3, #28
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f2ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	db02      	blt.n	800f2ba <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f2b4:	23ff      	movs	r3, #255	@ 0xff
 800f2b6:	613b      	str	r3, [r7, #16]
 800f2b8:	e009      	b.n	800f2ce <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	2bbf      	cmp	r3, #191	@ 0xbf
 800f2be:	d903      	bls.n	800f2c8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f2c0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800f2c4:	613b      	str	r3, [r7, #16]
 800f2c6:	e002      	b.n	800f2ce <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f2c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f2cc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d108      	bne.n	800f2ec <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	69da      	ldr	r2, [r3, #28]
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f2ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f2ec:	210a      	movs	r1, #10
 800f2ee:	69b8      	ldr	r0, [r7, #24]
 800f2f0:	f000 fa9a 	bl	800f828 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	f103 011c 	add.w	r1, r3, #28
 800f2fa:	f107 030c 	add.w	r3, r7, #12
 800f2fe:	f107 0210 	add.w	r2, r7, #16
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7f8 f8bc 	bl	8007480 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f308:	3720      	adds	r7, #32
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	08015eec 	.word	0x08015eec
 800f314:	0801604c 	.word	0x0801604c
 800f318:	08015f4c 	.word	0x08015f4c
 800f31c:	08016068 	.word	0x08016068
 800f320:	88888889 	.word	0x88888889

0800f324 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b08a      	sub	sp, #40	@ 0x28
 800f328:	af02      	add	r7, sp, #8
 800f32a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f330:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f332:	2105      	movs	r1, #5
 800f334:	69b8      	ldr	r0, [r7, #24]
 800f336:	f000 fa77 	bl	800f828 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f33a:	f107 030c 	add.w	r3, r7, #12
 800f33e:	2203      	movs	r2, #3
 800f340:	69b9      	ldr	r1, [r7, #24]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 ff2c 	bl	80101a0 <dhcp_create_msg>
 800f348:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d04e      	beq.n	800f3ee <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f356:	89b8      	ldrh	r0, [r7, #12]
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f35e:	2302      	movs	r3, #2
 800f360:	2239      	movs	r2, #57	@ 0x39
 800f362:	f000 fa7b 	bl	800f85c <dhcp_option>
 800f366:	4603      	mov	r3, r0
 800f368:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f36a:	89b8      	ldrh	r0, [r7, #12]
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f376:	461a      	mov	r2, r3
 800f378:	f000 faca 	bl	800f910 <dhcp_option_short>
 800f37c:	4603      	mov	r3, r0
 800f37e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f380:	89b8      	ldrh	r0, [r7, #12]
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f388:	2304      	movs	r3, #4
 800f38a:	2237      	movs	r2, #55	@ 0x37
 800f38c:	f000 fa66 	bl	800f85c <dhcp_option>
 800f390:	4603      	mov	r3, r0
 800f392:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f394:	2300      	movs	r3, #0
 800f396:	77bb      	strb	r3, [r7, #30]
 800f398:	e00e      	b.n	800f3b8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f39a:	89b8      	ldrh	r0, [r7, #12]
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f3a2:	7fbb      	ldrb	r3, [r7, #30]
 800f3a4:	4a29      	ldr	r2, [pc, #164]	@ (800f44c <dhcp_renew+0x128>)
 800f3a6:	5cd3      	ldrb	r3, [r2, r3]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	f000 fa8b 	bl	800f8c4 <dhcp_option_byte>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3b2:	7fbb      	ldrb	r3, [r7, #30]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	77bb      	strb	r3, [r7, #30]
 800f3b8:	7fbb      	ldrb	r3, [r7, #30]
 800f3ba:	2b03      	cmp	r3, #3
 800f3bc:	d9ed      	bls.n	800f39a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f3be:	89b8      	ldrh	r0, [r7, #12]
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	33f0      	adds	r3, #240	@ 0xf0
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	f000 ffc0 	bl	801034c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f3cc:	4b20      	ldr	r3, [pc, #128]	@ (800f450 <dhcp_renew+0x12c>)
 800f3ce:	6818      	ldr	r0, [r3, #0]
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	f103 0218 	add.w	r2, r3, #24
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	2343      	movs	r3, #67	@ 0x43
 800f3dc:	6979      	ldr	r1, [r7, #20]
 800f3de:	f7fe fe19 	bl	800e014 <udp_sendto_if>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f3e6:	6978      	ldr	r0, [r7, #20]
 800f3e8:	f7f8 fd3a 	bl	8007e60 <pbuf_free>
 800f3ec:	e001      	b.n	800f3f2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f3ee:	23ff      	movs	r3, #255	@ 0xff
 800f3f0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	799b      	ldrb	r3, [r3, #6]
 800f3f6:	2bff      	cmp	r3, #255	@ 0xff
 800f3f8:	d005      	beq.n	800f406 <dhcp_renew+0xe2>
    dhcp->tries++;
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	799b      	ldrb	r3, [r3, #6]
 800f3fe:	3301      	adds	r3, #1
 800f400:	b2da      	uxtb	r2, r3
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	799b      	ldrb	r3, [r3, #6]
 800f40a:	2b09      	cmp	r3, #9
 800f40c:	d809      	bhi.n	800f422 <dhcp_renew+0xfe>
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	799b      	ldrb	r3, [r3, #6]
 800f412:	461a      	mov	r2, r3
 800f414:	0152      	lsls	r2, r2, #5
 800f416:	1ad2      	subs	r2, r2, r3
 800f418:	0092      	lsls	r2, r2, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	011b      	lsls	r3, r3, #4
 800f41e:	b29b      	uxth	r3, r3
 800f420:	e001      	b.n	800f426 <dhcp_renew+0x102>
 800f422:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800f426:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f428:	89fb      	ldrh	r3, [r7, #14]
 800f42a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f42e:	4a09      	ldr	r2, [pc, #36]	@ (800f454 <dhcp_renew+0x130>)
 800f430:	fb82 1203 	smull	r1, r2, r2, r3
 800f434:	1152      	asrs	r2, r2, #5
 800f436:	17db      	asrs	r3, r3, #31
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f440:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3720      	adds	r7, #32
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	2000002c 	.word	0x2000002c
 800f450:	20008944 	.word	0x20008944
 800f454:	10624dd3 	.word	0x10624dd3

0800f458 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b08a      	sub	sp, #40	@ 0x28
 800f45c:	af02      	add	r7, sp, #8
 800f45e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f464:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f466:	2104      	movs	r1, #4
 800f468:	69b8      	ldr	r0, [r7, #24]
 800f46a:	f000 f9dd 	bl	800f828 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f46e:	f107 030c 	add.w	r3, r7, #12
 800f472:	2203      	movs	r2, #3
 800f474:	69b9      	ldr	r1, [r7, #24]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 fe92 	bl	80101a0 <dhcp_create_msg>
 800f47c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d04c      	beq.n	800f51e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f48a:	89b8      	ldrh	r0, [r7, #12]
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f492:	2302      	movs	r3, #2
 800f494:	2239      	movs	r2, #57	@ 0x39
 800f496:	f000 f9e1 	bl	800f85c <dhcp_option>
 800f49a:	4603      	mov	r3, r0
 800f49c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f49e:	89b8      	ldrh	r0, [r7, #12]
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f000 fa30 	bl	800f910 <dhcp_option_short>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f4b4:	89b8      	ldrh	r0, [r7, #12]
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f4bc:	2304      	movs	r3, #4
 800f4be:	2237      	movs	r2, #55	@ 0x37
 800f4c0:	f000 f9cc 	bl	800f85c <dhcp_option>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	77bb      	strb	r3, [r7, #30]
 800f4cc:	e00e      	b.n	800f4ec <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f4ce:	89b8      	ldrh	r0, [r7, #12]
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f4d6:	7fbb      	ldrb	r3, [r7, #30]
 800f4d8:	4a28      	ldr	r2, [pc, #160]	@ (800f57c <dhcp_rebind+0x124>)
 800f4da:	5cd3      	ldrb	r3, [r2, r3]
 800f4dc:	461a      	mov	r2, r3
 800f4de:	f000 f9f1 	bl	800f8c4 <dhcp_option_byte>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4e6:	7fbb      	ldrb	r3, [r7, #30]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	77bb      	strb	r3, [r7, #30]
 800f4ec:	7fbb      	ldrb	r3, [r7, #30]
 800f4ee:	2b03      	cmp	r3, #3
 800f4f0:	d9ed      	bls.n	800f4ce <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f4f2:	89b8      	ldrh	r0, [r7, #12]
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	33f0      	adds	r3, #240	@ 0xf0
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	f000 ff26 	bl	801034c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f500:	4b1f      	ldr	r3, [pc, #124]	@ (800f580 <dhcp_rebind+0x128>)
 800f502:	6818      	ldr	r0, [r3, #0]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	2343      	movs	r3, #67	@ 0x43
 800f50a:	4a1e      	ldr	r2, [pc, #120]	@ (800f584 <dhcp_rebind+0x12c>)
 800f50c:	6979      	ldr	r1, [r7, #20]
 800f50e:	f7fe fd81 	bl	800e014 <udp_sendto_if>
 800f512:	4603      	mov	r3, r0
 800f514:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f516:	6978      	ldr	r0, [r7, #20]
 800f518:	f7f8 fca2 	bl	8007e60 <pbuf_free>
 800f51c:	e001      	b.n	800f522 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f51e:	23ff      	movs	r3, #255	@ 0xff
 800f520:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	799b      	ldrb	r3, [r3, #6]
 800f526:	2bff      	cmp	r3, #255	@ 0xff
 800f528:	d005      	beq.n	800f536 <dhcp_rebind+0xde>
    dhcp->tries++;
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	799b      	ldrb	r3, [r3, #6]
 800f52e:	3301      	adds	r3, #1
 800f530:	b2da      	uxtb	r2, r3
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	799b      	ldrb	r3, [r3, #6]
 800f53a:	2b09      	cmp	r3, #9
 800f53c:	d809      	bhi.n	800f552 <dhcp_rebind+0xfa>
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	799b      	ldrb	r3, [r3, #6]
 800f542:	461a      	mov	r2, r3
 800f544:	0152      	lsls	r2, r2, #5
 800f546:	1ad2      	subs	r2, r2, r3
 800f548:	0092      	lsls	r2, r2, #2
 800f54a:	4413      	add	r3, r2
 800f54c:	00db      	lsls	r3, r3, #3
 800f54e:	b29b      	uxth	r3, r3
 800f550:	e001      	b.n	800f556 <dhcp_rebind+0xfe>
 800f552:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f556:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f558:	89fb      	ldrh	r3, [r7, #14]
 800f55a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f55e:	4a0a      	ldr	r2, [pc, #40]	@ (800f588 <dhcp_rebind+0x130>)
 800f560:	fb82 1203 	smull	r1, r2, r2, r3
 800f564:	1152      	asrs	r2, r2, #5
 800f566:	17db      	asrs	r3, r3, #31
 800f568:	1ad3      	subs	r3, r2, r3
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f570:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3720      	adds	r7, #32
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	2000002c 	.word	0x2000002c
 800f580:	20008944 	.word	0x20008944
 800f584:	08016a70 	.word	0x08016a70
 800f588:	10624dd3 	.word	0x10624dd3

0800f58c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f58c:	b5b0      	push	{r4, r5, r7, lr}
 800f58e:	b08a      	sub	sp, #40	@ 0x28
 800f590:	af02      	add	r7, sp, #8
 800f592:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f598:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f59a:	2103      	movs	r1, #3
 800f59c:	69b8      	ldr	r0, [r7, #24]
 800f59e:	f000 f943 	bl	800f828 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f5a2:	f107 030c 	add.w	r3, r7, #12
 800f5a6:	2203      	movs	r2, #3
 800f5a8:	69b9      	ldr	r1, [r7, #24]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fdf8 	bl	80101a0 <dhcp_create_msg>
 800f5b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d066      	beq.n	800f686 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f5be:	89b8      	ldrh	r0, [r7, #12]
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	2239      	movs	r2, #57	@ 0x39
 800f5ca:	f000 f947 	bl	800f85c <dhcp_option>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f5d2:	89b8      	ldrh	r0, [r7, #12]
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	33f0      	adds	r3, #240	@ 0xf0
 800f5d8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f5dc:	4619      	mov	r1, r3
 800f5de:	f000 f997 	bl	800f910 <dhcp_option_short>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f5e6:	89b8      	ldrh	r0, [r7, #12]
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f5ee:	2304      	movs	r3, #4
 800f5f0:	2232      	movs	r2, #50	@ 0x32
 800f5f2:	f000 f933 	bl	800f85c <dhcp_option>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f5fa:	89bc      	ldrh	r4, [r7, #12]
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	4618      	mov	r0, r3
 800f608:	f7f6 fca1 	bl	8005f4e <lwip_htonl>
 800f60c:	4603      	mov	r3, r0
 800f60e:	461a      	mov	r2, r3
 800f610:	4629      	mov	r1, r5
 800f612:	4620      	mov	r0, r4
 800f614:	f000 f9ae 	bl	800f974 <dhcp_option_long>
 800f618:	4603      	mov	r3, r0
 800f61a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f61c:	89b8      	ldrh	r0, [r7, #12]
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f624:	2304      	movs	r3, #4
 800f626:	2237      	movs	r2, #55	@ 0x37
 800f628:	f000 f918 	bl	800f85c <dhcp_option>
 800f62c:	4603      	mov	r3, r0
 800f62e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f630:	2300      	movs	r3, #0
 800f632:	77bb      	strb	r3, [r7, #30]
 800f634:	e00e      	b.n	800f654 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f636:	89b8      	ldrh	r0, [r7, #12]
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f63e:	7fbb      	ldrb	r3, [r7, #30]
 800f640:	4a28      	ldr	r2, [pc, #160]	@ (800f6e4 <dhcp_reboot+0x158>)
 800f642:	5cd3      	ldrb	r3, [r2, r3]
 800f644:	461a      	mov	r2, r3
 800f646:	f000 f93d 	bl	800f8c4 <dhcp_option_byte>
 800f64a:	4603      	mov	r3, r0
 800f64c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f64e:	7fbb      	ldrb	r3, [r7, #30]
 800f650:	3301      	adds	r3, #1
 800f652:	77bb      	strb	r3, [r7, #30]
 800f654:	7fbb      	ldrb	r3, [r7, #30]
 800f656:	2b03      	cmp	r3, #3
 800f658:	d9ed      	bls.n	800f636 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f65a:	89b8      	ldrh	r0, [r7, #12]
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	33f0      	adds	r3, #240	@ 0xf0
 800f660:	697a      	ldr	r2, [r7, #20]
 800f662:	4619      	mov	r1, r3
 800f664:	f000 fe72 	bl	801034c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f668:	4b1f      	ldr	r3, [pc, #124]	@ (800f6e8 <dhcp_reboot+0x15c>)
 800f66a:	6818      	ldr	r0, [r3, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	2343      	movs	r3, #67	@ 0x43
 800f672:	4a1e      	ldr	r2, [pc, #120]	@ (800f6ec <dhcp_reboot+0x160>)
 800f674:	6979      	ldr	r1, [r7, #20]
 800f676:	f7fe fccd 	bl	800e014 <udp_sendto_if>
 800f67a:	4603      	mov	r3, r0
 800f67c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f67e:	6978      	ldr	r0, [r7, #20]
 800f680:	f7f8 fbee 	bl	8007e60 <pbuf_free>
 800f684:	e001      	b.n	800f68a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f686:	23ff      	movs	r3, #255	@ 0xff
 800f688:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	799b      	ldrb	r3, [r3, #6]
 800f68e:	2bff      	cmp	r3, #255	@ 0xff
 800f690:	d005      	beq.n	800f69e <dhcp_reboot+0x112>
    dhcp->tries++;
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	799b      	ldrb	r3, [r3, #6]
 800f696:	3301      	adds	r3, #1
 800f698:	b2da      	uxtb	r2, r3
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	799b      	ldrb	r3, [r3, #6]
 800f6a2:	2b09      	cmp	r3, #9
 800f6a4:	d809      	bhi.n	800f6ba <dhcp_reboot+0x12e>
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	799b      	ldrb	r3, [r3, #6]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	0152      	lsls	r2, r2, #5
 800f6ae:	1ad2      	subs	r2, r2, r3
 800f6b0:	0092      	lsls	r2, r2, #2
 800f6b2:	4413      	add	r3, r2
 800f6b4:	00db      	lsls	r3, r3, #3
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	e001      	b.n	800f6be <dhcp_reboot+0x132>
 800f6ba:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f6be:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f6c0:	89fb      	ldrh	r3, [r7, #14]
 800f6c2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f6c6:	4a0a      	ldr	r2, [pc, #40]	@ (800f6f0 <dhcp_reboot+0x164>)
 800f6c8:	fb82 1203 	smull	r1, r2, r2, r3
 800f6cc:	1152      	asrs	r2, r2, #5
 800f6ce:	17db      	asrs	r3, r3, #31
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	b29a      	uxth	r2, r3
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f6d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3720      	adds	r7, #32
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bdb0      	pop	{r4, r5, r7, pc}
 800f6e4:	2000002c 	.word	0x2000002c
 800f6e8:	20008944 	.word	0x20008944
 800f6ec:	08016a70 	.word	0x08016a70
 800f6f0:	10624dd3 	.word	0x10624dd3

0800f6f4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f6f4:	b5b0      	push	{r4, r5, r7, lr}
 800f6f6:	b08a      	sub	sp, #40	@ 0x28
 800f6f8:	af02      	add	r7, sp, #8
 800f6fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f700:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	2b00      	cmp	r3, #0
 800f706:	f000 8084 	beq.w	800f812 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	795b      	ldrb	r3, [r3, #5]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 8081 	beq.w	800f816 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	699b      	ldr	r3, [r3, #24]
 800f718:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	2200      	movs	r2, #0
 800f71e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	2200      	movs	r2, #0
 800f724:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	2200      	movs	r2, #0
 800f72a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2200      	movs	r2, #0
 800f730:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	2200      	movs	r2, #0
 800f736:	631a      	str	r2, [r3, #48]	@ 0x30
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	2200      	movs	r2, #0
 800f74c:	829a      	strh	r2, [r3, #20]
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	8a9a      	ldrh	r2, [r3, #20]
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	825a      	strh	r2, [r3, #18]
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	8a5a      	ldrh	r2, [r3, #18]
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	821a      	strh	r2, [r3, #16]
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	8a1a      	ldrh	r2, [r3, #16]
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 fe1e 	bl	80103a8 <dhcp_supplied_address>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d03b      	beq.n	800f7ea <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f772:	f107 030e 	add.w	r3, r7, #14
 800f776:	2207      	movs	r2, #7
 800f778:	69f9      	ldr	r1, [r7, #28]
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 fd10 	bl	80101a0 <dhcp_create_msg>
 800f780:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d030      	beq.n	800f7ea <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f78e:	89f8      	ldrh	r0, [r7, #14]
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f796:	2304      	movs	r3, #4
 800f798:	2236      	movs	r2, #54	@ 0x36
 800f79a:	f000 f85f 	bl	800f85c <dhcp_option>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f7a2:	89fc      	ldrh	r4, [r7, #14]
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7f6 fbce 	bl	8005f4e <lwip_htonl>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f000 f8db 	bl	800f974 <dhcp_option_long>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f7c2:	89f8      	ldrh	r0, [r7, #14]
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	33f0      	adds	r3, #240	@ 0xf0
 800f7c8:	69ba      	ldr	r2, [r7, #24]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	f000 fdbe 	bl	801034c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f7d0:	4b13      	ldr	r3, [pc, #76]	@ (800f820 <dhcp_release_and_stop+0x12c>)
 800f7d2:	6818      	ldr	r0, [r3, #0]
 800f7d4:	f107 0210 	add.w	r2, r7, #16
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	2343      	movs	r3, #67	@ 0x43
 800f7de:	69b9      	ldr	r1, [r7, #24]
 800f7e0:	f7fe fc18 	bl	800e014 <udp_sendto_if>
      pbuf_free(p_out);
 800f7e4:	69b8      	ldr	r0, [r7, #24]
 800f7e6:	f7f8 fb3b 	bl	8007e60 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f824 <dhcp_release_and_stop+0x130>)
 800f7ec:	4a0d      	ldr	r2, [pc, #52]	@ (800f824 <dhcp_release_and_stop+0x130>)
 800f7ee:	490d      	ldr	r1, [pc, #52]	@ (800f824 <dhcp_release_and_stop+0x130>)
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7f7 fe45 	bl	8007480 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	69f8      	ldr	r0, [r7, #28]
 800f7fa:	f000 f815 	bl	800f828 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	791b      	ldrb	r3, [r3, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d008      	beq.n	800f818 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f806:	f7fe ff6b 	bl	800e6e0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	2200      	movs	r2, #0
 800f80e:	711a      	strb	r2, [r3, #4]
 800f810:	e002      	b.n	800f818 <dhcp_release_and_stop+0x124>
    return;
 800f812:	bf00      	nop
 800f814:	e000      	b.n	800f818 <dhcp_release_and_stop+0x124>
    return;
 800f816:	bf00      	nop
  }
}
 800f818:	3720      	adds	r7, #32
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bdb0      	pop	{r4, r5, r7, pc}
 800f81e:	bf00      	nop
 800f820:	20008944 	.word	0x20008944
 800f824:	08016a6c 	.word	0x08016a6c

0800f828 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	460b      	mov	r3, r1
 800f832:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	795b      	ldrb	r3, [r3, #5]
 800f838:	78fa      	ldrb	r2, [r7, #3]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d008      	beq.n	800f850 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	78fa      	ldrb	r2, [r7, #3]
 800f842:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2200      	movs	r2, #0
 800f848:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2200      	movs	r2, #0
 800f84e:	811a      	strh	r2, [r3, #8]
  }
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6039      	str	r1, [r7, #0]
 800f864:	4611      	mov	r1, r2
 800f866:	461a      	mov	r2, r3
 800f868:	4603      	mov	r3, r0
 800f86a:	80fb      	strh	r3, [r7, #6]
 800f86c:	460b      	mov	r3, r1
 800f86e:	717b      	strb	r3, [r7, #5]
 800f870:	4613      	mov	r3, r2
 800f872:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f874:	88fa      	ldrh	r2, [r7, #6]
 800f876:	793b      	ldrb	r3, [r7, #4]
 800f878:	4413      	add	r3, r2
 800f87a:	3302      	adds	r3, #2
 800f87c:	2b44      	cmp	r3, #68	@ 0x44
 800f87e:	d906      	bls.n	800f88e <dhcp_option+0x32>
 800f880:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b8 <dhcp_option+0x5c>)
 800f882:	f240 529a 	movw	r2, #1434	@ 0x59a
 800f886:	490d      	ldr	r1, [pc, #52]	@ (800f8bc <dhcp_option+0x60>)
 800f888:	480d      	ldr	r0, [pc, #52]	@ (800f8c0 <dhcp_option+0x64>)
 800f88a:	f003 fa35 	bl	8012cf8 <iprintf>
  options[options_out_len++] = option_type;
 800f88e:	88fb      	ldrh	r3, [r7, #6]
 800f890:	1c5a      	adds	r2, r3, #1
 800f892:	80fa      	strh	r2, [r7, #6]
 800f894:	461a      	mov	r2, r3
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	4413      	add	r3, r2
 800f89a:	797a      	ldrb	r2, [r7, #5]
 800f89c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f89e:	88fb      	ldrh	r3, [r7, #6]
 800f8a0:	1c5a      	adds	r2, r3, #1
 800f8a2:	80fa      	strh	r2, [r7, #6]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	793a      	ldrb	r2, [r7, #4]
 800f8ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f8ae:	88fb      	ldrh	r3, [r7, #6]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	08015eec 	.word	0x08015eec
 800f8bc:	08016080 	.word	0x08016080
 800f8c0:	08015f4c 	.word	0x08015f4c

0800f8c4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	6039      	str	r1, [r7, #0]
 800f8ce:	80fb      	strh	r3, [r7, #6]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f8d4:	88fb      	ldrh	r3, [r7, #6]
 800f8d6:	2b43      	cmp	r3, #67	@ 0x43
 800f8d8:	d906      	bls.n	800f8e8 <dhcp_option_byte+0x24>
 800f8da:	4b0a      	ldr	r3, [pc, #40]	@ (800f904 <dhcp_option_byte+0x40>)
 800f8dc:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800f8e0:	4909      	ldr	r1, [pc, #36]	@ (800f908 <dhcp_option_byte+0x44>)
 800f8e2:	480a      	ldr	r0, [pc, #40]	@ (800f90c <dhcp_option_byte+0x48>)
 800f8e4:	f003 fa08 	bl	8012cf8 <iprintf>
  options[options_out_len++] = value;
 800f8e8:	88fb      	ldrh	r3, [r7, #6]
 800f8ea:	1c5a      	adds	r2, r3, #1
 800f8ec:	80fa      	strh	r2, [r7, #6]
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	797a      	ldrb	r2, [r7, #5]
 800f8f6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f8f8:	88fb      	ldrh	r3, [r7, #6]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3708      	adds	r7, #8
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	08015eec 	.word	0x08015eec
 800f908:	080160c4 	.word	0x080160c4
 800f90c:	08015f4c 	.word	0x08015f4c

0800f910 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	4603      	mov	r3, r0
 800f918:	6039      	str	r1, [r7, #0]
 800f91a:	80fb      	strh	r3, [r7, #6]
 800f91c:	4613      	mov	r3, r2
 800f91e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f920:	88fb      	ldrh	r3, [r7, #6]
 800f922:	3302      	adds	r3, #2
 800f924:	2b44      	cmp	r3, #68	@ 0x44
 800f926:	d906      	bls.n	800f936 <dhcp_option_short+0x26>
 800f928:	4b0f      	ldr	r3, [pc, #60]	@ (800f968 <dhcp_option_short+0x58>)
 800f92a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800f92e:	490f      	ldr	r1, [pc, #60]	@ (800f96c <dhcp_option_short+0x5c>)
 800f930:	480f      	ldr	r0, [pc, #60]	@ (800f970 <dhcp_option_short+0x60>)
 800f932:	f003 f9e1 	bl	8012cf8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f936:	88bb      	ldrh	r3, [r7, #4]
 800f938:	0a1b      	lsrs	r3, r3, #8
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	88fb      	ldrh	r3, [r7, #6]
 800f93e:	1c59      	adds	r1, r3, #1
 800f940:	80f9      	strh	r1, [r7, #6]
 800f942:	4619      	mov	r1, r3
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	440b      	add	r3, r1
 800f948:	b2d2      	uxtb	r2, r2
 800f94a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f94c:	88fb      	ldrh	r3, [r7, #6]
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	80fa      	strh	r2, [r7, #6]
 800f952:	461a      	mov	r2, r3
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	4413      	add	r3, r2
 800f958:	88ba      	ldrh	r2, [r7, #4]
 800f95a:	b2d2      	uxtb	r2, r2
 800f95c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f95e:	88fb      	ldrh	r3, [r7, #6]
}
 800f960:	4618      	mov	r0, r3
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	08015eec 	.word	0x08015eec
 800f96c:	080160fc 	.word	0x080160fc
 800f970:	08015f4c 	.word	0x08015f4c

0800f974 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	4603      	mov	r3, r0
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f982:	89fb      	ldrh	r3, [r7, #14]
 800f984:	3304      	adds	r3, #4
 800f986:	2b44      	cmp	r3, #68	@ 0x44
 800f988:	d906      	bls.n	800f998 <dhcp_option_long+0x24>
 800f98a:	4b19      	ldr	r3, [pc, #100]	@ (800f9f0 <dhcp_option_long+0x7c>)
 800f98c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800f990:	4918      	ldr	r1, [pc, #96]	@ (800f9f4 <dhcp_option_long+0x80>)
 800f992:	4819      	ldr	r0, [pc, #100]	@ (800f9f8 <dhcp_option_long+0x84>)
 800f994:	f003 f9b0 	bl	8012cf8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	0e1a      	lsrs	r2, r3, #24
 800f99c:	89fb      	ldrh	r3, [r7, #14]
 800f99e:	1c59      	adds	r1, r3, #1
 800f9a0:	81f9      	strh	r1, [r7, #14]
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	440b      	add	r3, r1
 800f9a8:	b2d2      	uxtb	r2, r2
 800f9aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	0c1a      	lsrs	r2, r3, #16
 800f9b0:	89fb      	ldrh	r3, [r7, #14]
 800f9b2:	1c59      	adds	r1, r3, #1
 800f9b4:	81f9      	strh	r1, [r7, #14]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	440b      	add	r3, r1
 800f9bc:	b2d2      	uxtb	r2, r2
 800f9be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	0a1a      	lsrs	r2, r3, #8
 800f9c4:	89fb      	ldrh	r3, [r7, #14]
 800f9c6:	1c59      	adds	r1, r3, #1
 800f9c8:	81f9      	strh	r1, [r7, #14]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	440b      	add	r3, r1
 800f9d0:	b2d2      	uxtb	r2, r2
 800f9d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f9d4:	89fb      	ldrh	r3, [r7, #14]
 800f9d6:	1c5a      	adds	r2, r3, #1
 800f9d8:	81fa      	strh	r2, [r7, #14]
 800f9da:	461a      	mov	r2, r3
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	4413      	add	r3, r2
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	b2d2      	uxtb	r2, r2
 800f9e4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f9e6:	89fb      	ldrh	r3, [r7, #14]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	08015eec 	.word	0x08015eec
 800f9f4:	08016138 	.word	0x08016138
 800f9f8:	08015f4c 	.word	0x08015f4c

0800f9fc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b090      	sub	sp, #64	@ 0x40
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800fa0e:	220a      	movs	r2, #10
 800fa10:	2100      	movs	r1, #0
 800fa12:	48ba      	ldr	r0, [pc, #744]	@ (800fcfc <dhcp_parse_reply+0x300>)
 800fa14:	f003 f9d5 	bl	8012dc2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	895b      	ldrh	r3, [r3, #10]
 800fa1c:	2b2b      	cmp	r3, #43	@ 0x2b
 800fa1e:	d802      	bhi.n	800fa26 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800fa20:	f06f 0301 	mvn.w	r3, #1
 800fa24:	e2ea      	b.n	800fffc <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800fa2c:	23f0      	movs	r3, #240	@ 0xf0
 800fa2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	891b      	ldrh	r3, [r3, #8]
 800fa34:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fa3a:	e00c      	b.n	800fa56 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3e:	895b      	ldrh	r3, [r3, #10]
 800fa40:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800fa46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa48:	895b      	ldrh	r3, [r3, #10]
 800fa4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800fa4c:	1ad3      	subs	r3, r2, r3
 800fa4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800fa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d004      	beq.n	800fa66 <dhcp_parse_reply+0x6a>
 800fa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5e:	895b      	ldrh	r3, [r3, #10]
 800fa60:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d2ea      	bcs.n	800fa3c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800fa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d102      	bne.n	800fa72 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800fa6c:	f06f 0301 	mvn.w	r3, #1
 800fa70:	e2c4      	b.n	800fffc <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 800fa72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fa74:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800fa76:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fa78:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fa80:	e267      	b.n	800ff52 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 800fa82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fa84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fa86:	4413      	add	r3, r2
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800fa92:	f04f 33ff 	mov.w	r3, #4294967295
 800fa96:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800fa98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fa9a:	3302      	adds	r3, #2
 800fa9c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800fa9e:	8bfa      	ldrh	r2, [r7, #30]
 800faa0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d202      	bcs.n	800faac <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800faa6:	f06f 0301 	mvn.w	r3, #1
 800faaa:	e2a7      	b.n	800fffc <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800faac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800faae:	3301      	adds	r3, #1
 800fab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fab2:	8952      	ldrh	r2, [r2, #10]
 800fab4:	4293      	cmp	r3, r2
 800fab6:	da07      	bge.n	800fac8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800fab8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800faba:	3301      	adds	r3, #1
 800fabc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fabe:	4413      	add	r3, r2
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fac6:	e00b      	b.n	800fae0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800fac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d004      	beq.n	800fada <dhcp_parse_reply+0xde>
 800fad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	e000      	b.n	800fadc <dhcp_parse_reply+0xe0>
 800fada:	2300      	movs	r3, #0
 800fadc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800fae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fae4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800fae8:	7dfb      	ldrb	r3, [r7, #23]
 800faea:	2b3b      	cmp	r3, #59	@ 0x3b
 800faec:	f200 815a 	bhi.w	800fda4 <dhcp_parse_reply+0x3a8>
 800faf0:	a201      	add	r2, pc, #4	@ (adr r2, 800faf8 <dhcp_parse_reply+0xfc>)
 800faf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf6:	bf00      	nop
 800faf8:	0800fbe9 	.word	0x0800fbe9
 800fafc:	0800fbf9 	.word	0x0800fbf9
 800fb00:	0800fda5 	.word	0x0800fda5
 800fb04:	0800fc1b 	.word	0x0800fc1b
 800fb08:	0800fda5 	.word	0x0800fda5
 800fb0c:	0800fda5 	.word	0x0800fda5
 800fb10:	0800fc47 	.word	0x0800fc47
 800fb14:	0800fda5 	.word	0x0800fda5
 800fb18:	0800fda5 	.word	0x0800fda5
 800fb1c:	0800fda5 	.word	0x0800fda5
 800fb20:	0800fda5 	.word	0x0800fda5
 800fb24:	0800fda5 	.word	0x0800fda5
 800fb28:	0800fda5 	.word	0x0800fda5
 800fb2c:	0800fda5 	.word	0x0800fda5
 800fb30:	0800fda5 	.word	0x0800fda5
 800fb34:	0800fda5 	.word	0x0800fda5
 800fb38:	0800fda5 	.word	0x0800fda5
 800fb3c:	0800fda5 	.word	0x0800fda5
 800fb40:	0800fda5 	.word	0x0800fda5
 800fb44:	0800fda5 	.word	0x0800fda5
 800fb48:	0800fda5 	.word	0x0800fda5
 800fb4c:	0800fda5 	.word	0x0800fda5
 800fb50:	0800fda5 	.word	0x0800fda5
 800fb54:	0800fda5 	.word	0x0800fda5
 800fb58:	0800fda5 	.word	0x0800fda5
 800fb5c:	0800fda5 	.word	0x0800fda5
 800fb60:	0800fda5 	.word	0x0800fda5
 800fb64:	0800fda5 	.word	0x0800fda5
 800fb68:	0800fda5 	.word	0x0800fda5
 800fb6c:	0800fda5 	.word	0x0800fda5
 800fb70:	0800fda5 	.word	0x0800fda5
 800fb74:	0800fda5 	.word	0x0800fda5
 800fb78:	0800fda5 	.word	0x0800fda5
 800fb7c:	0800fda5 	.word	0x0800fda5
 800fb80:	0800fda5 	.word	0x0800fda5
 800fb84:	0800fda5 	.word	0x0800fda5
 800fb88:	0800fda5 	.word	0x0800fda5
 800fb8c:	0800fda5 	.word	0x0800fda5
 800fb90:	0800fda5 	.word	0x0800fda5
 800fb94:	0800fda5 	.word	0x0800fda5
 800fb98:	0800fda5 	.word	0x0800fda5
 800fb9c:	0800fda5 	.word	0x0800fda5
 800fba0:	0800fda5 	.word	0x0800fda5
 800fba4:	0800fda5 	.word	0x0800fda5
 800fba8:	0800fda5 	.word	0x0800fda5
 800fbac:	0800fda5 	.word	0x0800fda5
 800fbb0:	0800fda5 	.word	0x0800fda5
 800fbb4:	0800fda5 	.word	0x0800fda5
 800fbb8:	0800fda5 	.word	0x0800fda5
 800fbbc:	0800fda5 	.word	0x0800fda5
 800fbc0:	0800fda5 	.word	0x0800fda5
 800fbc4:	0800fc9d 	.word	0x0800fc9d
 800fbc8:	0800fcbf 	.word	0x0800fcbf
 800fbcc:	0800fd1d 	.word	0x0800fd1d
 800fbd0:	0800fd3f 	.word	0x0800fd3f
 800fbd4:	0800fda5 	.word	0x0800fda5
 800fbd8:	0800fda5 	.word	0x0800fda5
 800fbdc:	0800fda5 	.word	0x0800fda5
 800fbe0:	0800fd61 	.word	0x0800fd61
 800fbe4:	0800fd83 	.word	0x0800fd83
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fbee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbf2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800fbf6:	e0d9      	b.n	800fdac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbfc:	2b04      	cmp	r3, #4
 800fbfe:	d009      	beq.n	800fc14 <dhcp_parse_reply+0x218>
 800fc00:	4b3f      	ldr	r3, [pc, #252]	@ (800fd00 <dhcp_parse_reply+0x304>)
 800fc02:	f240 622e 	movw	r2, #1582	@ 0x62e
 800fc06:	493f      	ldr	r1, [pc, #252]	@ (800fd04 <dhcp_parse_reply+0x308>)
 800fc08:	483f      	ldr	r0, [pc, #252]	@ (800fd08 <dhcp_parse_reply+0x30c>)
 800fc0a:	f003 f875 	bl	8012cf8 <iprintf>
 800fc0e:	f06f 0305 	mvn.w	r3, #5
 800fc12:	e1f3      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800fc14:	2306      	movs	r3, #6
 800fc16:	623b      	str	r3, [r7, #32]
        break;
 800fc18:	e0c8      	b.n	800fdac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800fc1a:	2304      	movs	r3, #4
 800fc1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800fc20:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fc24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d209      	bcs.n	800fc40 <dhcp_parse_reply+0x244>
 800fc2c:	4b34      	ldr	r3, [pc, #208]	@ (800fd00 <dhcp_parse_reply+0x304>)
 800fc2e:	f240 6233 	movw	r2, #1587	@ 0x633
 800fc32:	4936      	ldr	r1, [pc, #216]	@ (800fd0c <dhcp_parse_reply+0x310>)
 800fc34:	4834      	ldr	r0, [pc, #208]	@ (800fd08 <dhcp_parse_reply+0x30c>)
 800fc36:	f003 f85f 	bl	8012cf8 <iprintf>
 800fc3a:	f06f 0305 	mvn.w	r3, #5
 800fc3e:	e1dd      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800fc40:	2307      	movs	r3, #7
 800fc42:	623b      	str	r3, [r7, #32]
        break;
 800fc44:	e0b2      	b.n	800fdac <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800fc46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc4a:	f003 0303 	and.w	r3, r3, #3
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d009      	beq.n	800fc68 <dhcp_parse_reply+0x26c>
 800fc54:	4b2a      	ldr	r3, [pc, #168]	@ (800fd00 <dhcp_parse_reply+0x304>)
 800fc56:	f240 6239 	movw	r2, #1593	@ 0x639
 800fc5a:	492d      	ldr	r1, [pc, #180]	@ (800fd10 <dhcp_parse_reply+0x314>)
 800fc5c:	482a      	ldr	r0, [pc, #168]	@ (800fd08 <dhcp_parse_reply+0x30c>)
 800fc5e:	f003 f84b 	bl	8012cf8 <iprintf>
 800fc62:	f06f 0305 	mvn.w	r3, #5
 800fc66:	e1c9      	b.n	800fffc <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800fc68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc6c:	2b08      	cmp	r3, #8
 800fc6e:	bf28      	it	cs
 800fc70:	2308      	movcs	r3, #8
 800fc72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800fc76:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fc7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d209      	bcs.n	800fc96 <dhcp_parse_reply+0x29a>
 800fc82:	4b1f      	ldr	r3, [pc, #124]	@ (800fd00 <dhcp_parse_reply+0x304>)
 800fc84:	f240 623c 	movw	r2, #1596	@ 0x63c
 800fc88:	4920      	ldr	r1, [pc, #128]	@ (800fd0c <dhcp_parse_reply+0x310>)
 800fc8a:	481f      	ldr	r0, [pc, #124]	@ (800fd08 <dhcp_parse_reply+0x30c>)
 800fc8c:	f003 f834 	bl	8012cf8 <iprintf>
 800fc90:	f06f 0305 	mvn.w	r3, #5
 800fc94:	e1b2      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800fc96:	2308      	movs	r3, #8
 800fc98:	623b      	str	r3, [r7, #32]
        break;
 800fc9a:	e087      	b.n	800fdac <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fca0:	2b04      	cmp	r3, #4
 800fca2:	d009      	beq.n	800fcb8 <dhcp_parse_reply+0x2bc>
 800fca4:	4b16      	ldr	r3, [pc, #88]	@ (800fd00 <dhcp_parse_reply+0x304>)
 800fca6:	f240 6241 	movw	r2, #1601	@ 0x641
 800fcaa:	4916      	ldr	r1, [pc, #88]	@ (800fd04 <dhcp_parse_reply+0x308>)
 800fcac:	4816      	ldr	r0, [pc, #88]	@ (800fd08 <dhcp_parse_reply+0x30c>)
 800fcae:	f003 f823 	bl	8012cf8 <iprintf>
 800fcb2:	f06f 0305 	mvn.w	r3, #5
 800fcb6:	e1a1      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800fcb8:	2303      	movs	r3, #3
 800fcba:	623b      	str	r3, [r7, #32]
        break;
 800fcbc:	e076      	b.n	800fdac <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800fcbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d009      	beq.n	800fcda <dhcp_parse_reply+0x2de>
 800fcc6:	4b0e      	ldr	r3, [pc, #56]	@ (800fd00 <dhcp_parse_reply+0x304>)
 800fcc8:	f240 624f 	movw	r2, #1615	@ 0x64f
 800fccc:	4911      	ldr	r1, [pc, #68]	@ (800fd14 <dhcp_parse_reply+0x318>)
 800fcce:	480e      	ldr	r0, [pc, #56]	@ (800fd08 <dhcp_parse_reply+0x30c>)
 800fcd0:	f003 f812 	bl	8012cf8 <iprintf>
 800fcd4:	f06f 0305 	mvn.w	r3, #5
 800fcd8:	e190      	b.n	800fffc <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800fcda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fcdc:	2bf0      	cmp	r3, #240	@ 0xf0
 800fcde:	d009      	beq.n	800fcf4 <dhcp_parse_reply+0x2f8>
 800fce0:	4b07      	ldr	r3, [pc, #28]	@ (800fd00 <dhcp_parse_reply+0x304>)
 800fce2:	f240 6251 	movw	r2, #1617	@ 0x651
 800fce6:	490c      	ldr	r1, [pc, #48]	@ (800fd18 <dhcp_parse_reply+0x31c>)
 800fce8:	4807      	ldr	r0, [pc, #28]	@ (800fd08 <dhcp_parse_reply+0x30c>)
 800fcea:	f003 f805 	bl	8012cf8 <iprintf>
 800fcee:	f06f 0305 	mvn.w	r3, #5
 800fcf2:	e183      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	623b      	str	r3, [r7, #32]
        break;
 800fcf8:	e058      	b.n	800fdac <dhcp_parse_reply+0x3b0>
 800fcfa:	bf00      	nop
 800fcfc:	20008938 	.word	0x20008938
 800fd00:	08015eec 	.word	0x08015eec
 800fd04:	08016174 	.word	0x08016174
 800fd08:	08015f4c 	.word	0x08015f4c
 800fd0c:	08016180 	.word	0x08016180
 800fd10:	08016194 	.word	0x08016194
 800fd14:	080161a4 	.word	0x080161a4
 800fd18:	080161b0 	.word	0x080161b0
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800fd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d009      	beq.n	800fd38 <dhcp_parse_reply+0x33c>
 800fd24:	4b9d      	ldr	r3, [pc, #628]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800fd26:	f240 6255 	movw	r2, #1621	@ 0x655
 800fd2a:	499d      	ldr	r1, [pc, #628]	@ (800ffa0 <dhcp_parse_reply+0x5a4>)
 800fd2c:	489d      	ldr	r0, [pc, #628]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800fd2e:	f002 ffe3 	bl	8012cf8 <iprintf>
 800fd32:	f06f 0305 	mvn.w	r3, #5
 800fd36:	e161      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	623b      	str	r3, [r7, #32]
        break;
 800fd3c:	e036      	b.n	800fdac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fd3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd42:	2b04      	cmp	r3, #4
 800fd44:	d009      	beq.n	800fd5a <dhcp_parse_reply+0x35e>
 800fd46:	4b95      	ldr	r3, [pc, #596]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800fd48:	f240 6259 	movw	r2, #1625	@ 0x659
 800fd4c:	4996      	ldr	r1, [pc, #600]	@ (800ffa8 <dhcp_parse_reply+0x5ac>)
 800fd4e:	4895      	ldr	r0, [pc, #596]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800fd50:	f002 ffd2 	bl	8012cf8 <iprintf>
 800fd54:	f06f 0305 	mvn.w	r3, #5
 800fd58:	e150      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800fd5a:	2302      	movs	r3, #2
 800fd5c:	623b      	str	r3, [r7, #32]
        break;
 800fd5e:	e025      	b.n	800fdac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fd60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd64:	2b04      	cmp	r3, #4
 800fd66:	d009      	beq.n	800fd7c <dhcp_parse_reply+0x380>
 800fd68:	4b8c      	ldr	r3, [pc, #560]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800fd6a:	f240 625d 	movw	r2, #1629	@ 0x65d
 800fd6e:	498e      	ldr	r1, [pc, #568]	@ (800ffa8 <dhcp_parse_reply+0x5ac>)
 800fd70:	488c      	ldr	r0, [pc, #560]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800fd72:	f002 ffc1 	bl	8012cf8 <iprintf>
 800fd76:	f06f 0305 	mvn.w	r3, #5
 800fd7a:	e13f      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 800fd7c:	2304      	movs	r3, #4
 800fd7e:	623b      	str	r3, [r7, #32]
        break;
 800fd80:	e014      	b.n	800fdac <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fd82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd86:	2b04      	cmp	r3, #4
 800fd88:	d009      	beq.n	800fd9e <dhcp_parse_reply+0x3a2>
 800fd8a:	4b84      	ldr	r3, [pc, #528]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800fd8c:	f240 6261 	movw	r2, #1633	@ 0x661
 800fd90:	4985      	ldr	r1, [pc, #532]	@ (800ffa8 <dhcp_parse_reply+0x5ac>)
 800fd92:	4884      	ldr	r0, [pc, #528]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800fd94:	f002 ffb0 	bl	8012cf8 <iprintf>
 800fd98:	f06f 0305 	mvn.w	r3, #5
 800fd9c:	e12e      	b.n	800fffc <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 800fd9e:	2305      	movs	r3, #5
 800fda0:	623b      	str	r3, [r7, #32]
        break;
 800fda2:	e003      	b.n	800fdac <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 800fda4:	2300      	movs	r3, #0
 800fda6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800fdaa:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d103      	bne.n	800fdba <dhcp_parse_reply+0x3be>
      offset++;
 800fdb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800fdb8:	e0a1      	b.n	800fefe <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800fdba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800fdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdc0:	4413      	add	r3, r2
 800fdc2:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	dd02      	ble.n	800fdd0 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 800fdca:	f06f 0301 	mvn.w	r3, #1
 800fdce:	e115      	b.n	800fffc <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 800fdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdd8:	4413      	add	r3, r2
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	3302      	adds	r3, #2
 800fdde:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 800fde0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f000 808a 	beq.w	800fefe <dhcp_parse_reply+0x502>
        u32_t value = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	db02      	blt.n	800fdfa <dhcp_parse_reply+0x3fe>
 800fdf4:	6a3b      	ldr	r3, [r7, #32]
 800fdf6:	2b09      	cmp	r3, #9
 800fdf8:	dd06      	ble.n	800fe08 <dhcp_parse_reply+0x40c>
 800fdfa:	4b68      	ldr	r3, [pc, #416]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800fdfc:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800fe00:	496a      	ldr	r1, [pc, #424]	@ (800ffac <dhcp_parse_reply+0x5b0>)
 800fe02:	4868      	ldr	r0, [pc, #416]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800fe04:	f002 ff78 	bl	8012cf8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800fe08:	4a69      	ldr	r2, [pc, #420]	@ (800ffb0 <dhcp_parse_reply+0x5b4>)
 800fe0a:	6a3b      	ldr	r3, [r7, #32]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d174      	bne.n	800fefe <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 800fe14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe18:	2b04      	cmp	r3, #4
 800fe1a:	bf28      	it	cs
 800fe1c:	2304      	movcs	r3, #4
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800fe22:	8bfb      	ldrh	r3, [r7, #30]
 800fe24:	8aba      	ldrh	r2, [r7, #20]
 800fe26:	f107 0108 	add.w	r1, r7, #8
 800fe2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe2c:	f7f8 fa12 	bl	8008254 <pbuf_copy_partial>
 800fe30:	4603      	mov	r3, r0
 800fe32:	461a      	mov	r2, r3
 800fe34:	8abb      	ldrh	r3, [r7, #20]
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d002      	beq.n	800fe40 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 800fe3a:	f06f 0301 	mvn.w	r3, #1
 800fe3e:	e0dd      	b.n	800fffc <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 800fe40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe44:	2b04      	cmp	r3, #4
 800fe46:	d933      	bls.n	800feb0 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800fe48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe4c:	f003 0303 	and.w	r3, r3, #3
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d009      	beq.n	800fe6a <dhcp_parse_reply+0x46e>
 800fe56:	4b51      	ldr	r3, [pc, #324]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800fe58:	f240 6281 	movw	r2, #1665	@ 0x681
 800fe5c:	4955      	ldr	r1, [pc, #340]	@ (800ffb4 <dhcp_parse_reply+0x5b8>)
 800fe5e:	4851      	ldr	r0, [pc, #324]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800fe60:	f002 ff4a 	bl	8012cf8 <iprintf>
 800fe64:	f06f 0305 	mvn.w	r3, #5
 800fe68:	e0c8      	b.n	800fffc <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 800fe6a:	4a51      	ldr	r2, [pc, #324]	@ (800ffb0 <dhcp_parse_reply+0x5b4>)
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	4413      	add	r3, r2
 800fe70:	2201      	movs	r2, #1
 800fe72:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7f6 f869 	bl	8005f4e <lwip_htonl>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	494e      	ldr	r1, [pc, #312]	@ (800ffb8 <dhcp_parse_reply+0x5bc>)
 800fe80:	6a3b      	ldr	r3, [r7, #32]
 800fe82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800fe86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe8a:	3b04      	subs	r3, #4
 800fe8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800fe90:	8bfb      	ldrh	r3, [r7, #30]
 800fe92:	3304      	adds	r3, #4
 800fe94:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800fe96:	8a7a      	ldrh	r2, [r7, #18]
 800fe98:	8bfb      	ldrh	r3, [r7, #30]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d202      	bcs.n	800fea4 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 800fe9e:	f06f 0301 	mvn.w	r3, #1
 800fea2:	e0ab      	b.n	800fffc <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 800fea4:	8a7b      	ldrh	r3, [r7, #18]
 800fea6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800fea8:	6a3b      	ldr	r3, [r7, #32]
 800feaa:	3301      	adds	r3, #1
 800feac:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800feae:	e79e      	b.n	800fdee <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 800feb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800feb4:	2b04      	cmp	r3, #4
 800feb6:	d106      	bne.n	800fec6 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	4618      	mov	r0, r3
 800febc:	f7f6 f847 	bl	8005f4e <lwip_htonl>
 800fec0:	4603      	mov	r3, r0
 800fec2:	60bb      	str	r3, [r7, #8]
 800fec4:	e011      	b.n	800feea <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800fec6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d009      	beq.n	800fee2 <dhcp_parse_reply+0x4e6>
 800fece:	4b33      	ldr	r3, [pc, #204]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800fed0:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800fed4:	4939      	ldr	r1, [pc, #228]	@ (800ffbc <dhcp_parse_reply+0x5c0>)
 800fed6:	4833      	ldr	r0, [pc, #204]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800fed8:	f002 ff0e 	bl	8012cf8 <iprintf>
 800fedc:	f06f 0305 	mvn.w	r3, #5
 800fee0:	e08c      	b.n	800fffc <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 800fee2:	f107 0308 	add.w	r3, r7, #8
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800feea:	4a31      	ldr	r2, [pc, #196]	@ (800ffb0 <dhcp_parse_reply+0x5b4>)
 800feec:	6a3b      	ldr	r3, [r7, #32]
 800feee:	4413      	add	r3, r2
 800fef0:	2201      	movs	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800fef4:	68ba      	ldr	r2, [r7, #8]
 800fef6:	4930      	ldr	r1, [pc, #192]	@ (800ffb8 <dhcp_parse_reply+0x5bc>)
 800fef8:	6a3b      	ldr	r3, [r7, #32]
 800fefa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800fefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff00:	895b      	ldrh	r3, [r3, #10]
 800ff02:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d324      	bcc.n	800ff52 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 800ff08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff0a:	895b      	ldrh	r3, [r3, #10]
 800ff0c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ff0e:	1ad3      	subs	r3, r2, r3
 800ff10:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ff12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff14:	895b      	ldrh	r3, [r3, #10]
 800ff16:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 800ff1c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ff1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d213      	bcs.n	800ff4c <dhcp_parse_reply+0x550>
        q = q->next;
 800ff24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d109      	bne.n	800ff44 <dhcp_parse_reply+0x548>
 800ff30:	4b1a      	ldr	r3, [pc, #104]	@ (800ff9c <dhcp_parse_reply+0x5a0>)
 800ff32:	f240 629d 	movw	r2, #1693	@ 0x69d
 800ff36:	4922      	ldr	r1, [pc, #136]	@ (800ffc0 <dhcp_parse_reply+0x5c4>)
 800ff38:	481a      	ldr	r0, [pc, #104]	@ (800ffa4 <dhcp_parse_reply+0x5a8>)
 800ff3a:	f002 fedd 	bl	8012cf8 <iprintf>
 800ff3e:	f06f 0305 	mvn.w	r3, #5
 800ff42:	e05b      	b.n	800fffc <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 800ff44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff4a:	e002      	b.n	800ff52 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800ff4c:	f06f 0301 	mvn.w	r3, #1
 800ff50:	e054      	b.n	800fffc <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ff52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00a      	beq.n	800ff6e <dhcp_parse_reply+0x572>
 800ff58:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ff5a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d206      	bcs.n	800ff6e <dhcp_parse_reply+0x572>
 800ff60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ff62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ff64:	4413      	add	r3, r2
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	2bff      	cmp	r3, #255	@ 0xff
 800ff6a:	f47f ad8a 	bne.w	800fa82 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ff6e:	4b10      	ldr	r3, [pc, #64]	@ (800ffb0 <dhcp_parse_reply+0x5b4>)
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d02d      	beq.n	800ffd2 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ff76:	4b10      	ldr	r3, [pc, #64]	@ (800ffb8 <dhcp_parse_reply+0x5bc>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ff7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ffb0 <dhcp_parse_reply+0x5b4>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d102      	bne.n	800ff8e <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff8c:	e021      	b.n	800ffd2 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2b02      	cmp	r3, #2
 800ff92:	d117      	bne.n	800ffc4 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 800ff94:	2301      	movs	r3, #1
 800ff96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff98:	e01b      	b.n	800ffd2 <dhcp_parse_reply+0x5d6>
 800ff9a:	bf00      	nop
 800ff9c:	08015eec 	.word	0x08015eec
 800ffa0:	080161a4 	.word	0x080161a4
 800ffa4:	08015f4c 	.word	0x08015f4c
 800ffa8:	08016174 	.word	0x08016174
 800ffac:	080161c8 	.word	0x080161c8
 800ffb0:	20008938 	.word	0x20008938
 800ffb4:	080161dc 	.word	0x080161dc
 800ffb8:	20008910 	.word	0x20008910
 800ffbc:	080161f4 	.word	0x080161f4
 800ffc0:	08016208 	.word	0x08016208
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2b03      	cmp	r3, #3
 800ffc8:	d103      	bne.n	800ffd2 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800ffd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d006      	beq.n	800ffe6 <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 800ffdc:	236c      	movs	r3, #108	@ 0x6c
 800ffde:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ffe0:	23ec      	movs	r3, #236	@ 0xec
 800ffe2:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800ffe4:	e527      	b.n	800fa36 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800ffe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d006      	beq.n	800fffa <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 800fff0:	232c      	movs	r3, #44	@ 0x2c
 800fff2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800fff4:	236c      	movs	r3, #108	@ 0x6c
 800fff6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 800fff8:	e51d      	b.n	800fa36 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3740      	adds	r7, #64	@ 0x40
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08a      	sub	sp, #40	@ 0x28
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
 8010010:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8010012:	4b60      	ldr	r3, [pc, #384]	@ (8010194 <dhcp_recv+0x190>)
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010018:	6a3b      	ldr	r3, [r7, #32]
 801001a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801001c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	2b00      	cmp	r3, #0
 8010028:	f000 809d 	beq.w	8010166 <dhcp_recv+0x162>
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	791b      	ldrb	r3, [r3, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 8098 	beq.w	8010166 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	895b      	ldrh	r3, [r3, #10]
 801003a:	2b2b      	cmp	r3, #43	@ 0x2b
 801003c:	f240 8095 	bls.w	801016a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	2b02      	cmp	r3, #2
 8010046:	f040 8092 	bne.w	801016e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801004a:	2300      	movs	r3, #0
 801004c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010050:	e012      	b.n	8010078 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010056:	6a3a      	ldr	r2, [r7, #32]
 8010058:	4413      	add	r3, r2
 801005a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801005e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010062:	69b9      	ldr	r1, [r7, #24]
 8010064:	440b      	add	r3, r1
 8010066:	7f1b      	ldrb	r3, [r3, #28]
 8010068:	429a      	cmp	r2, r3
 801006a:	f040 8082 	bne.w	8010172 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801006e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010072:	3301      	adds	r3, #1
 8010074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801007e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010082:	429a      	cmp	r2, r3
 8010084:	d203      	bcs.n	801008e <dhcp_recv+0x8a>
 8010086:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801008a:	2b05      	cmp	r3, #5
 801008c:	d9e1      	bls.n	8010052 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	4618      	mov	r0, r3
 8010094:	f7f5 ff5b 	bl	8005f4e <lwip_htonl>
 8010098:	4602      	mov	r2, r0
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d169      	bne.n	8010176 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80100a2:	69f9      	ldr	r1, [r7, #28]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff fca9 	bl	800f9fc <dhcp_parse_reply>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d164      	bne.n	801017a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80100b0:	4b39      	ldr	r3, [pc, #228]	@ (8010198 <dhcp_recv+0x194>)
 80100b2:	785b      	ldrb	r3, [r3, #1]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d062      	beq.n	801017e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80100be:	4b37      	ldr	r3, [pc, #220]	@ (801019c <dhcp_recv+0x198>)
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80100c4:	7cfb      	ldrb	r3, [r7, #19]
 80100c6:	2b05      	cmp	r3, #5
 80100c8:	d12a      	bne.n	8010120 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	795b      	ldrb	r3, [r3, #5]
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d112      	bne.n	80100f8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80100d2:	6979      	ldr	r1, [r7, #20]
 80100d4:	6a38      	ldr	r0, [r7, #32]
 80100d6:	f7fe fdcd 	bl	800ec74 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80100da:	6a3b      	ldr	r3, [r7, #32]
 80100dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80100e0:	f003 0308 	and.w	r3, r3, #8
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d003      	beq.n	80100f0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80100e8:	6a38      	ldr	r0, [r7, #32]
 80100ea:	f7fe fb3d 	bl	800e768 <dhcp_check>
 80100ee:	e049      	b.n	8010184 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80100f0:	6a38      	ldr	r0, [r7, #32]
 80100f2:	f7ff f83d 	bl	800f170 <dhcp_bind>
 80100f6:	e045      	b.n	8010184 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	795b      	ldrb	r3, [r3, #5]
 80100fc:	2b03      	cmp	r3, #3
 80100fe:	d007      	beq.n	8010110 <dhcp_recv+0x10c>
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	795b      	ldrb	r3, [r3, #5]
 8010104:	2b04      	cmp	r3, #4
 8010106:	d003      	beq.n	8010110 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801010c:	2b05      	cmp	r3, #5
 801010e:	d139      	bne.n	8010184 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8010110:	6979      	ldr	r1, [r7, #20]
 8010112:	6a38      	ldr	r0, [r7, #32]
 8010114:	f7fe fdae 	bl	800ec74 <dhcp_handle_ack>
      dhcp_bind(netif);
 8010118:	6a38      	ldr	r0, [r7, #32]
 801011a:	f7ff f829 	bl	800f170 <dhcp_bind>
 801011e:	e031      	b.n	8010184 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8010120:	7cfb      	ldrb	r3, [r7, #19]
 8010122:	2b06      	cmp	r3, #6
 8010124:	d113      	bne.n	801014e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801012a:	2b03      	cmp	r3, #3
 801012c:	d00b      	beq.n	8010146 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	795b      	ldrb	r3, [r3, #5]
 8010132:	2b01      	cmp	r3, #1
 8010134:	d007      	beq.n	8010146 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801013a:	2b04      	cmp	r3, #4
 801013c:	d003      	beq.n	8010146 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	795b      	ldrb	r3, [r3, #5]
 8010142:	2b05      	cmp	r3, #5
 8010144:	d103      	bne.n	801014e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8010146:	6a38      	ldr	r0, [r7, #32]
 8010148:	f7fe faf4 	bl	800e734 <dhcp_handle_nak>
 801014c:	e01a      	b.n	8010184 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801014e:	7cfb      	ldrb	r3, [r7, #19]
 8010150:	2b02      	cmp	r3, #2
 8010152:	d116      	bne.n	8010182 <dhcp_recv+0x17e>
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	795b      	ldrb	r3, [r3, #5]
 8010158:	2b06      	cmp	r3, #6
 801015a:	d112      	bne.n	8010182 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801015c:	6979      	ldr	r1, [r7, #20]
 801015e:	6a38      	ldr	r0, [r7, #32]
 8010160:	f7fe fb36 	bl	800e7d0 <dhcp_handle_offer>
 8010164:	e00e      	b.n	8010184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010166:	bf00      	nop
 8010168:	e00c      	b.n	8010184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801016a:	bf00      	nop
 801016c:	e00a      	b.n	8010184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801016e:	bf00      	nop
 8010170:	e008      	b.n	8010184 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8010172:	bf00      	nop
 8010174:	e006      	b.n	8010184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010176:	bf00      	nop
 8010178:	e004      	b.n	8010184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801017a:	bf00      	nop
 801017c:	e002      	b.n	8010184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801017e:	bf00      	nop
 8010180:	e000      	b.n	8010184 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8010182:	bf00      	nop
  pbuf_free(p);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7f7 fe6b 	bl	8007e60 <pbuf_free>
}
 801018a:	bf00      	nop
 801018c:	3728      	adds	r7, #40	@ 0x28
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	20005310 	.word	0x20005310
 8010198:	20008938 	.word	0x20008938
 801019c:	20008910 	.word	0x20008910

080101a0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b088      	sub	sp, #32
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	603b      	str	r3, [r7, #0]
 80101ac:	4613      	mov	r3, r2
 80101ae:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d108      	bne.n	80101c8 <dhcp_create_msg+0x28>
 80101b6:	4b5f      	ldr	r3, [pc, #380]	@ (8010334 <dhcp_create_msg+0x194>)
 80101b8:	f240 7269 	movw	r2, #1897	@ 0x769
 80101bc:	495e      	ldr	r1, [pc, #376]	@ (8010338 <dhcp_create_msg+0x198>)
 80101be:	485f      	ldr	r0, [pc, #380]	@ (801033c <dhcp_create_msg+0x19c>)
 80101c0:	f002 fd9a 	bl	8012cf8 <iprintf>
 80101c4:	2300      	movs	r3, #0
 80101c6:	e0b1      	b.n	801032c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d108      	bne.n	80101e0 <dhcp_create_msg+0x40>
 80101ce:	4b59      	ldr	r3, [pc, #356]	@ (8010334 <dhcp_create_msg+0x194>)
 80101d0:	f240 726a 	movw	r2, #1898	@ 0x76a
 80101d4:	495a      	ldr	r1, [pc, #360]	@ (8010340 <dhcp_create_msg+0x1a0>)
 80101d6:	4859      	ldr	r0, [pc, #356]	@ (801033c <dhcp_create_msg+0x19c>)
 80101d8:	f002 fd8e 	bl	8012cf8 <iprintf>
 80101dc:	2300      	movs	r3, #0
 80101de:	e0a5      	b.n	801032c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80101e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80101e4:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80101e8:	2036      	movs	r0, #54	@ 0x36
 80101ea:	f7f7 fb55 	bl	8007898 <pbuf_alloc>
 80101ee:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d101      	bne.n	80101fa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	e098      	b.n	801032c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	895b      	ldrh	r3, [r3, #10]
 80101fe:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8010202:	d206      	bcs.n	8010212 <dhcp_create_msg+0x72>
 8010204:	4b4b      	ldr	r3, [pc, #300]	@ (8010334 <dhcp_create_msg+0x194>)
 8010206:	f240 7271 	movw	r2, #1905	@ 0x771
 801020a:	494e      	ldr	r1, [pc, #312]	@ (8010344 <dhcp_create_msg+0x1a4>)
 801020c:	484b      	ldr	r0, [pc, #300]	@ (801033c <dhcp_create_msg+0x19c>)
 801020e:	f002 fd73 	bl	8012cf8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8010212:	79fb      	ldrb	r3, [r7, #7]
 8010214:	2b03      	cmp	r3, #3
 8010216:	d103      	bne.n	8010220 <dhcp_create_msg+0x80>
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	795b      	ldrb	r3, [r3, #5]
 801021c:	2b03      	cmp	r3, #3
 801021e:	d10d      	bne.n	801023c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	799b      	ldrb	r3, [r3, #6]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d105      	bne.n	8010234 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010228:	f002 fc66 	bl	8012af8 <rand>
 801022c:	4603      	mov	r3, r0
 801022e:	461a      	mov	r2, r3
 8010230:	4b45      	ldr	r3, [pc, #276]	@ (8010348 <dhcp_create_msg+0x1a8>)
 8010232:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8010234:	4b44      	ldr	r3, [pc, #272]	@ (8010348 <dhcp_create_msg+0x1a8>)
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8010242:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8010246:	2100      	movs	r1, #0
 8010248:	6978      	ldr	r0, [r7, #20]
 801024a:	f002 fdba 	bl	8012dc2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	2201      	movs	r2, #1
 8010252:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	2201      	movs	r2, #1
 8010258:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4618      	mov	r0, r3
 801026a:	f7f5 fe70 	bl	8005f4e <lwip_htonl>
 801026e:	4602      	mov	r2, r0
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010274:	79fb      	ldrb	r3, [r7, #7]
 8010276:	2b08      	cmp	r3, #8
 8010278:	d010      	beq.n	801029c <dhcp_create_msg+0xfc>
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	2b04      	cmp	r3, #4
 801027e:	d00d      	beq.n	801029c <dhcp_create_msg+0xfc>
 8010280:	79fb      	ldrb	r3, [r7, #7]
 8010282:	2b07      	cmp	r3, #7
 8010284:	d00a      	beq.n	801029c <dhcp_create_msg+0xfc>
 8010286:	79fb      	ldrb	r3, [r7, #7]
 8010288:	2b03      	cmp	r3, #3
 801028a:	d10c      	bne.n	80102a6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010290:	2b05      	cmp	r3, #5
 8010292:	d003      	beq.n	801029c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	795b      	ldrb	r3, [r3, #5]
 8010298:	2b04      	cmp	r3, #4
 801029a:	d104      	bne.n	80102a6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	3304      	adds	r3, #4
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80102a6:	2300      	movs	r3, #0
 80102a8:	83fb      	strh	r3, [r7, #30]
 80102aa:	e00c      	b.n	80102c6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80102ac:	8bfa      	ldrh	r2, [r7, #30]
 80102ae:	8bfb      	ldrh	r3, [r7, #30]
 80102b0:	68f9      	ldr	r1, [r7, #12]
 80102b2:	440a      	add	r2, r1
 80102b4:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 80102b8:	697a      	ldr	r2, [r7, #20]
 80102ba:	4413      	add	r3, r2
 80102bc:	460a      	mov	r2, r1
 80102be:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80102c0:	8bfb      	ldrh	r3, [r7, #30]
 80102c2:	3301      	adds	r3, #1
 80102c4:	83fb      	strh	r3, [r7, #30]
 80102c6:	8bfb      	ldrh	r3, [r7, #30]
 80102c8:	2b05      	cmp	r3, #5
 80102ca:	d9ef      	bls.n	80102ac <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80102d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80102d8:	2200      	movs	r2, #0
 80102da:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80102de:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80102e2:	2200      	movs	r2, #0
 80102e4:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80102e8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80102ec:	2200      	movs	r2, #0
 80102ee:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80102f2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80102fc:	2301      	movs	r3, #1
 80102fe:	2235      	movs	r2, #53	@ 0x35
 8010300:	2000      	movs	r0, #0
 8010302:	f7ff faab 	bl	800f85c <dhcp_option>
 8010306:	4603      	mov	r3, r0
 8010308:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010310:	79fa      	ldrb	r2, [r7, #7]
 8010312:	8a7b      	ldrh	r3, [r7, #18]
 8010314:	4618      	mov	r0, r3
 8010316:	f7ff fad5 	bl	800f8c4 <dhcp_option_byte>
 801031a:	4603      	mov	r3, r0
 801031c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	8a7a      	ldrh	r2, [r7, #18]
 8010328:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801032a:	69bb      	ldr	r3, [r7, #24]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3720      	adds	r7, #32
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	08015eec 	.word	0x08015eec
 8010338:	0801621c 	.word	0x0801621c
 801033c:	08015f4c 	.word	0x08015f4c
 8010340:	0801623c 	.word	0x0801623c
 8010344:	0801625c 	.word	0x0801625c
 8010348:	2000894c 	.word	0x2000894c

0801034c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
 8010358:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801035a:	89fb      	ldrh	r3, [r7, #14]
 801035c:	1c5a      	adds	r2, r3, #1
 801035e:	81fa      	strh	r2, [r7, #14]
 8010360:	461a      	mov	r2, r3
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	4413      	add	r3, r2
 8010366:	22ff      	movs	r2, #255	@ 0xff
 8010368:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801036a:	e007      	b.n	801037c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801036c:	89fb      	ldrh	r3, [r7, #14]
 801036e:	1c5a      	adds	r2, r3, #1
 8010370:	81fa      	strh	r2, [r7, #14]
 8010372:	461a      	mov	r2, r3
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	4413      	add	r3, r2
 8010378:	2200      	movs	r2, #0
 801037a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801037c:	89fb      	ldrh	r3, [r7, #14]
 801037e:	2b43      	cmp	r3, #67	@ 0x43
 8010380:	d904      	bls.n	801038c <dhcp_option_trailer+0x40>
 8010382:	89fb      	ldrh	r3, [r7, #14]
 8010384:	f003 0303 	and.w	r3, r3, #3
 8010388:	2b00      	cmp	r3, #0
 801038a:	d002      	beq.n	8010392 <dhcp_option_trailer+0x46>
 801038c:	89fb      	ldrh	r3, [r7, #14]
 801038e:	2b43      	cmp	r3, #67	@ 0x43
 8010390:	d9ec      	bls.n	801036c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010392:	89fb      	ldrh	r3, [r7, #14]
 8010394:	33f0      	adds	r3, #240	@ 0xf0
 8010396:	b29b      	uxth	r3, r3
 8010398:	4619      	mov	r1, r3
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7f7 fbda 	bl	8007b54 <pbuf_realloc>
}
 80103a0:	bf00      	nop
 80103a2:	3710      	adds	r7, #16
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b085      	sub	sp, #20
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d017      	beq.n	80103e6 <dhcp_supplied_address+0x3e>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d013      	beq.n	80103e6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103c2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	795b      	ldrb	r3, [r3, #5]
 80103c8:	2b0a      	cmp	r3, #10
 80103ca:	d007      	beq.n	80103dc <dhcp_supplied_address+0x34>
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	795b      	ldrb	r3, [r3, #5]
 80103d0:	2b05      	cmp	r3, #5
 80103d2:	d003      	beq.n	80103dc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80103d8:	2b04      	cmp	r3, #4
 80103da:	d101      	bne.n	80103e0 <dhcp_supplied_address+0x38>
 80103dc:	2301      	movs	r3, #1
 80103de:	e000      	b.n	80103e2 <dhcp_supplied_address+0x3a>
 80103e0:	2300      	movs	r3, #0
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	e000      	b.n	80103e8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3714      	adds	r7, #20
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80103fc:	4915      	ldr	r1, [pc, #84]	@ (8010454 <etharp_free_entry+0x60>)
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	4613      	mov	r3, r2
 8010402:	005b      	lsls	r3, r3, #1
 8010404:	4413      	add	r3, r2
 8010406:	00db      	lsls	r3, r3, #3
 8010408:	440b      	add	r3, r1
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d013      	beq.n	8010438 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010410:	4910      	ldr	r1, [pc, #64]	@ (8010454 <etharp_free_entry+0x60>)
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	4613      	mov	r3, r2
 8010416:	005b      	lsls	r3, r3, #1
 8010418:	4413      	add	r3, r2
 801041a:	00db      	lsls	r3, r3, #3
 801041c:	440b      	add	r3, r1
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4618      	mov	r0, r3
 8010422:	f7f7 fd1d 	bl	8007e60 <pbuf_free>
    arp_table[i].q = NULL;
 8010426:	490b      	ldr	r1, [pc, #44]	@ (8010454 <etharp_free_entry+0x60>)
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	4613      	mov	r3, r2
 801042c:	005b      	lsls	r3, r3, #1
 801042e:	4413      	add	r3, r2
 8010430:	00db      	lsls	r3, r3, #3
 8010432:	440b      	add	r3, r1
 8010434:	2200      	movs	r2, #0
 8010436:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010438:	4906      	ldr	r1, [pc, #24]	@ (8010454 <etharp_free_entry+0x60>)
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	4613      	mov	r3, r2
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	4413      	add	r3, r2
 8010442:	00db      	lsls	r3, r3, #3
 8010444:	440b      	add	r3, r1
 8010446:	3314      	adds	r3, #20
 8010448:	2200      	movs	r2, #0
 801044a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801044c:	bf00      	nop
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	20008950 	.word	0x20008950

08010458 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801045e:	2300      	movs	r3, #0
 8010460:	607b      	str	r3, [r7, #4]
 8010462:	e096      	b.n	8010592 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010464:	494f      	ldr	r1, [pc, #316]	@ (80105a4 <etharp_tmr+0x14c>)
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	4613      	mov	r3, r2
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	4413      	add	r3, r2
 801046e:	00db      	lsls	r3, r3, #3
 8010470:	440b      	add	r3, r1
 8010472:	3314      	adds	r3, #20
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010478:	78fb      	ldrb	r3, [r7, #3]
 801047a:	2b00      	cmp	r3, #0
 801047c:	f000 8086 	beq.w	801058c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010480:	4948      	ldr	r1, [pc, #288]	@ (80105a4 <etharp_tmr+0x14c>)
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	4613      	mov	r3, r2
 8010486:	005b      	lsls	r3, r3, #1
 8010488:	4413      	add	r3, r2
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	440b      	add	r3, r1
 801048e:	3312      	adds	r3, #18
 8010490:	881b      	ldrh	r3, [r3, #0]
 8010492:	3301      	adds	r3, #1
 8010494:	b298      	uxth	r0, r3
 8010496:	4943      	ldr	r1, [pc, #268]	@ (80105a4 <etharp_tmr+0x14c>)
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	4613      	mov	r3, r2
 801049c:	005b      	lsls	r3, r3, #1
 801049e:	4413      	add	r3, r2
 80104a0:	00db      	lsls	r3, r3, #3
 80104a2:	440b      	add	r3, r1
 80104a4:	3312      	adds	r3, #18
 80104a6:	4602      	mov	r2, r0
 80104a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80104aa:	493e      	ldr	r1, [pc, #248]	@ (80105a4 <etharp_tmr+0x14c>)
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	4613      	mov	r3, r2
 80104b0:	005b      	lsls	r3, r3, #1
 80104b2:	4413      	add	r3, r2
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	440b      	add	r3, r1
 80104b8:	3312      	adds	r3, #18
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80104c0:	d215      	bcs.n	80104ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80104c2:	4938      	ldr	r1, [pc, #224]	@ (80105a4 <etharp_tmr+0x14c>)
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	4613      	mov	r3, r2
 80104c8:	005b      	lsls	r3, r3, #1
 80104ca:	4413      	add	r3, r2
 80104cc:	00db      	lsls	r3, r3, #3
 80104ce:	440b      	add	r3, r1
 80104d0:	3314      	adds	r3, #20
 80104d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d10e      	bne.n	80104f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80104d8:	4932      	ldr	r1, [pc, #200]	@ (80105a4 <etharp_tmr+0x14c>)
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	4613      	mov	r3, r2
 80104de:	005b      	lsls	r3, r3, #1
 80104e0:	4413      	add	r3, r2
 80104e2:	00db      	lsls	r3, r3, #3
 80104e4:	440b      	add	r3, r1
 80104e6:	3312      	adds	r3, #18
 80104e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80104ea:	2b04      	cmp	r3, #4
 80104ec:	d903      	bls.n	80104f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff ff80 	bl	80103f4 <etharp_free_entry>
 80104f4:	e04a      	b.n	801058c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80104f6:	492b      	ldr	r1, [pc, #172]	@ (80105a4 <etharp_tmr+0x14c>)
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	4613      	mov	r3, r2
 80104fc:	005b      	lsls	r3, r3, #1
 80104fe:	4413      	add	r3, r2
 8010500:	00db      	lsls	r3, r3, #3
 8010502:	440b      	add	r3, r1
 8010504:	3314      	adds	r3, #20
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	2b03      	cmp	r3, #3
 801050a:	d10a      	bne.n	8010522 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801050c:	4925      	ldr	r1, [pc, #148]	@ (80105a4 <etharp_tmr+0x14c>)
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	4613      	mov	r3, r2
 8010512:	005b      	lsls	r3, r3, #1
 8010514:	4413      	add	r3, r2
 8010516:	00db      	lsls	r3, r3, #3
 8010518:	440b      	add	r3, r1
 801051a:	3314      	adds	r3, #20
 801051c:	2204      	movs	r2, #4
 801051e:	701a      	strb	r2, [r3, #0]
 8010520:	e034      	b.n	801058c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010522:	4920      	ldr	r1, [pc, #128]	@ (80105a4 <etharp_tmr+0x14c>)
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	4613      	mov	r3, r2
 8010528:	005b      	lsls	r3, r3, #1
 801052a:	4413      	add	r3, r2
 801052c:	00db      	lsls	r3, r3, #3
 801052e:	440b      	add	r3, r1
 8010530:	3314      	adds	r3, #20
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	2b04      	cmp	r3, #4
 8010536:	d10a      	bne.n	801054e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010538:	491a      	ldr	r1, [pc, #104]	@ (80105a4 <etharp_tmr+0x14c>)
 801053a:	687a      	ldr	r2, [r7, #4]
 801053c:	4613      	mov	r3, r2
 801053e:	005b      	lsls	r3, r3, #1
 8010540:	4413      	add	r3, r2
 8010542:	00db      	lsls	r3, r3, #3
 8010544:	440b      	add	r3, r1
 8010546:	3314      	adds	r3, #20
 8010548:	2202      	movs	r2, #2
 801054a:	701a      	strb	r2, [r3, #0]
 801054c:	e01e      	b.n	801058c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801054e:	4915      	ldr	r1, [pc, #84]	@ (80105a4 <etharp_tmr+0x14c>)
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	4613      	mov	r3, r2
 8010554:	005b      	lsls	r3, r3, #1
 8010556:	4413      	add	r3, r2
 8010558:	00db      	lsls	r3, r3, #3
 801055a:	440b      	add	r3, r1
 801055c:	3314      	adds	r3, #20
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d113      	bne.n	801058c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010564:	490f      	ldr	r1, [pc, #60]	@ (80105a4 <etharp_tmr+0x14c>)
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	4613      	mov	r3, r2
 801056a:	005b      	lsls	r3, r3, #1
 801056c:	4413      	add	r3, r2
 801056e:	00db      	lsls	r3, r3, #3
 8010570:	440b      	add	r3, r1
 8010572:	3308      	adds	r3, #8
 8010574:	6818      	ldr	r0, [r3, #0]
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	4613      	mov	r3, r2
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4413      	add	r3, r2
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	4a08      	ldr	r2, [pc, #32]	@ (80105a4 <etharp_tmr+0x14c>)
 8010582:	4413      	add	r3, r2
 8010584:	3304      	adds	r3, #4
 8010586:	4619      	mov	r1, r3
 8010588:	f000 fe72 	bl	8011270 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	3301      	adds	r3, #1
 8010590:	607b      	str	r3, [r7, #4]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b09      	cmp	r3, #9
 8010596:	f77f af65 	ble.w	8010464 <etharp_tmr+0xc>
      }
    }
  }
}
 801059a:	bf00      	nop
 801059c:	bf00      	nop
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	20008950 	.word	0x20008950

080105a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b08a      	sub	sp, #40	@ 0x28
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	60f8      	str	r0, [r7, #12]
 80105b0:	460b      	mov	r3, r1
 80105b2:	607a      	str	r2, [r7, #4]
 80105b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80105b6:	230a      	movs	r3, #10
 80105b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80105ba:	230a      	movs	r3, #10
 80105bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80105be:	230a      	movs	r3, #10
 80105c0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80105c6:	230a      	movs	r3, #10
 80105c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	83bb      	strh	r3, [r7, #28]
 80105ce:	2300      	movs	r3, #0
 80105d0:	837b      	strh	r3, [r7, #26]
 80105d2:	2300      	movs	r3, #0
 80105d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105d6:	2300      	movs	r3, #0
 80105d8:	843b      	strh	r3, [r7, #32]
 80105da:	e0ae      	b.n	801073a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80105dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105e0:	49a6      	ldr	r1, [pc, #664]	@ (801087c <etharp_find_entry+0x2d4>)
 80105e2:	4613      	mov	r3, r2
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	4413      	add	r3, r2
 80105e8:	00db      	lsls	r3, r3, #3
 80105ea:	440b      	add	r3, r1
 80105ec:	3314      	adds	r3, #20
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80105f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80105f6:	2b0a      	cmp	r3, #10
 80105f8:	d105      	bne.n	8010606 <etharp_find_entry+0x5e>
 80105fa:	7dfb      	ldrb	r3, [r7, #23]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010600:	8c3b      	ldrh	r3, [r7, #32]
 8010602:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010604:	e095      	b.n	8010732 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010606:	7dfb      	ldrb	r3, [r7, #23]
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 8092 	beq.w	8010732 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801060e:	7dfb      	ldrb	r3, [r7, #23]
 8010610:	2b01      	cmp	r3, #1
 8010612:	d009      	beq.n	8010628 <etharp_find_entry+0x80>
 8010614:	7dfb      	ldrb	r3, [r7, #23]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d806      	bhi.n	8010628 <etharp_find_entry+0x80>
 801061a:	4b99      	ldr	r3, [pc, #612]	@ (8010880 <etharp_find_entry+0x2d8>)
 801061c:	f240 1223 	movw	r2, #291	@ 0x123
 8010620:	4998      	ldr	r1, [pc, #608]	@ (8010884 <etharp_find_entry+0x2dc>)
 8010622:	4899      	ldr	r0, [pc, #612]	@ (8010888 <etharp_find_entry+0x2e0>)
 8010624:	f002 fb68 	bl	8012cf8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d020      	beq.n	8010670 <etharp_find_entry+0xc8>
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6819      	ldr	r1, [r3, #0]
 8010632:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010636:	4891      	ldr	r0, [pc, #580]	@ (801087c <etharp_find_entry+0x2d4>)
 8010638:	4613      	mov	r3, r2
 801063a:	005b      	lsls	r3, r3, #1
 801063c:	4413      	add	r3, r2
 801063e:	00db      	lsls	r3, r3, #3
 8010640:	4403      	add	r3, r0
 8010642:	3304      	adds	r3, #4
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4299      	cmp	r1, r3
 8010648:	d112      	bne.n	8010670 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00c      	beq.n	801066a <etharp_find_entry+0xc2>
 8010650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010654:	4989      	ldr	r1, [pc, #548]	@ (801087c <etharp_find_entry+0x2d4>)
 8010656:	4613      	mov	r3, r2
 8010658:	005b      	lsls	r3, r3, #1
 801065a:	4413      	add	r3, r2
 801065c:	00db      	lsls	r3, r3, #3
 801065e:	440b      	add	r3, r1
 8010660:	3308      	adds	r3, #8
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	429a      	cmp	r2, r3
 8010668:	d102      	bne.n	8010670 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801066a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801066e:	e100      	b.n	8010872 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010670:	7dfb      	ldrb	r3, [r7, #23]
 8010672:	2b01      	cmp	r3, #1
 8010674:	d140      	bne.n	80106f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801067a:	4980      	ldr	r1, [pc, #512]	@ (801087c <etharp_find_entry+0x2d4>)
 801067c:	4613      	mov	r3, r2
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	4413      	add	r3, r2
 8010682:	00db      	lsls	r3, r3, #3
 8010684:	440b      	add	r3, r1
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d01a      	beq.n	80106c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801068c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010690:	497a      	ldr	r1, [pc, #488]	@ (801087c <etharp_find_entry+0x2d4>)
 8010692:	4613      	mov	r3, r2
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	4413      	add	r3, r2
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	440b      	add	r3, r1
 801069c:	3312      	adds	r3, #18
 801069e:	881b      	ldrh	r3, [r3, #0]
 80106a0:	8bba      	ldrh	r2, [r7, #28]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d845      	bhi.n	8010732 <etharp_find_entry+0x18a>
            old_queue = i;
 80106a6:	8c3b      	ldrh	r3, [r7, #32]
 80106a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80106aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106ae:	4973      	ldr	r1, [pc, #460]	@ (801087c <etharp_find_entry+0x2d4>)
 80106b0:	4613      	mov	r3, r2
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	4413      	add	r3, r2
 80106b6:	00db      	lsls	r3, r3, #3
 80106b8:	440b      	add	r3, r1
 80106ba:	3312      	adds	r3, #18
 80106bc:	881b      	ldrh	r3, [r3, #0]
 80106be:	83bb      	strh	r3, [r7, #28]
 80106c0:	e037      	b.n	8010732 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80106c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106c6:	496d      	ldr	r1, [pc, #436]	@ (801087c <etharp_find_entry+0x2d4>)
 80106c8:	4613      	mov	r3, r2
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	4413      	add	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	440b      	add	r3, r1
 80106d2:	3312      	adds	r3, #18
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	8b7a      	ldrh	r2, [r7, #26]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d82a      	bhi.n	8010732 <etharp_find_entry+0x18a>
            old_pending = i;
 80106dc:	8c3b      	ldrh	r3, [r7, #32]
 80106de:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80106e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106e4:	4965      	ldr	r1, [pc, #404]	@ (801087c <etharp_find_entry+0x2d4>)
 80106e6:	4613      	mov	r3, r2
 80106e8:	005b      	lsls	r3, r3, #1
 80106ea:	4413      	add	r3, r2
 80106ec:	00db      	lsls	r3, r3, #3
 80106ee:	440b      	add	r3, r1
 80106f0:	3312      	adds	r3, #18
 80106f2:	881b      	ldrh	r3, [r3, #0]
 80106f4:	837b      	strh	r3, [r7, #26]
 80106f6:	e01c      	b.n	8010732 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80106f8:	7dfb      	ldrb	r3, [r7, #23]
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d919      	bls.n	8010732 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80106fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010702:	495e      	ldr	r1, [pc, #376]	@ (801087c <etharp_find_entry+0x2d4>)
 8010704:	4613      	mov	r3, r2
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	4413      	add	r3, r2
 801070a:	00db      	lsls	r3, r3, #3
 801070c:	440b      	add	r3, r1
 801070e:	3312      	adds	r3, #18
 8010710:	881b      	ldrh	r3, [r3, #0]
 8010712:	8b3a      	ldrh	r2, [r7, #24]
 8010714:	429a      	cmp	r2, r3
 8010716:	d80c      	bhi.n	8010732 <etharp_find_entry+0x18a>
            old_stable = i;
 8010718:	8c3b      	ldrh	r3, [r7, #32]
 801071a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801071c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010720:	4956      	ldr	r1, [pc, #344]	@ (801087c <etharp_find_entry+0x2d4>)
 8010722:	4613      	mov	r3, r2
 8010724:	005b      	lsls	r3, r3, #1
 8010726:	4413      	add	r3, r2
 8010728:	00db      	lsls	r3, r3, #3
 801072a:	440b      	add	r3, r1
 801072c:	3312      	adds	r3, #18
 801072e:	881b      	ldrh	r3, [r3, #0]
 8010730:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010732:	8c3b      	ldrh	r3, [r7, #32]
 8010734:	3301      	adds	r3, #1
 8010736:	b29b      	uxth	r3, r3
 8010738:	843b      	strh	r3, [r7, #32]
 801073a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801073e:	2b09      	cmp	r3, #9
 8010740:	f77f af4c 	ble.w	80105dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010744:	7afb      	ldrb	r3, [r7, #11]
 8010746:	f003 0302 	and.w	r3, r3, #2
 801074a:	2b00      	cmp	r3, #0
 801074c:	d108      	bne.n	8010760 <etharp_find_entry+0x1b8>
 801074e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010752:	2b0a      	cmp	r3, #10
 8010754:	d107      	bne.n	8010766 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010756:	7afb      	ldrb	r3, [r7, #11]
 8010758:	f003 0301 	and.w	r3, r3, #1
 801075c:	2b00      	cmp	r3, #0
 801075e:	d102      	bne.n	8010766 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010760:	f04f 33ff 	mov.w	r3, #4294967295
 8010764:	e085      	b.n	8010872 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010766:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801076a:	2b09      	cmp	r3, #9
 801076c:	dc02      	bgt.n	8010774 <etharp_find_entry+0x1cc>
    i = empty;
 801076e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010770:	843b      	strh	r3, [r7, #32]
 8010772:	e039      	b.n	80107e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010774:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010778:	2b09      	cmp	r3, #9
 801077a:	dc14      	bgt.n	80107a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801077c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801077e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010780:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010784:	493d      	ldr	r1, [pc, #244]	@ (801087c <etharp_find_entry+0x2d4>)
 8010786:	4613      	mov	r3, r2
 8010788:	005b      	lsls	r3, r3, #1
 801078a:	4413      	add	r3, r2
 801078c:	00db      	lsls	r3, r3, #3
 801078e:	440b      	add	r3, r1
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d018      	beq.n	80107c8 <etharp_find_entry+0x220>
 8010796:	4b3a      	ldr	r3, [pc, #232]	@ (8010880 <etharp_find_entry+0x2d8>)
 8010798:	f240 126d 	movw	r2, #365	@ 0x16d
 801079c:	493b      	ldr	r1, [pc, #236]	@ (801088c <etharp_find_entry+0x2e4>)
 801079e:	483a      	ldr	r0, [pc, #232]	@ (8010888 <etharp_find_entry+0x2e0>)
 80107a0:	f002 faaa 	bl	8012cf8 <iprintf>
 80107a4:	e010      	b.n	80107c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80107a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80107aa:	2b09      	cmp	r3, #9
 80107ac:	dc02      	bgt.n	80107b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80107ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80107b0:	843b      	strh	r3, [r7, #32]
 80107b2:	e009      	b.n	80107c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80107b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80107b8:	2b09      	cmp	r3, #9
 80107ba:	dc02      	bgt.n	80107c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80107bc:	8bfb      	ldrh	r3, [r7, #30]
 80107be:	843b      	strh	r3, [r7, #32]
 80107c0:	e002      	b.n	80107c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80107c2:	f04f 33ff 	mov.w	r3, #4294967295
 80107c6:	e054      	b.n	8010872 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80107c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80107cc:	2b09      	cmp	r3, #9
 80107ce:	dd06      	ble.n	80107de <etharp_find_entry+0x236>
 80107d0:	4b2b      	ldr	r3, [pc, #172]	@ (8010880 <etharp_find_entry+0x2d8>)
 80107d2:	f240 127f 	movw	r2, #383	@ 0x17f
 80107d6:	492e      	ldr	r1, [pc, #184]	@ (8010890 <etharp_find_entry+0x2e8>)
 80107d8:	482b      	ldr	r0, [pc, #172]	@ (8010888 <etharp_find_entry+0x2e0>)
 80107da:	f002 fa8d 	bl	8012cf8 <iprintf>
    etharp_free_entry(i);
 80107de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7ff fe06 	bl	80103f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80107e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80107ec:	2b09      	cmp	r3, #9
 80107ee:	dd06      	ble.n	80107fe <etharp_find_entry+0x256>
 80107f0:	4b23      	ldr	r3, [pc, #140]	@ (8010880 <etharp_find_entry+0x2d8>)
 80107f2:	f240 1283 	movw	r2, #387	@ 0x183
 80107f6:	4926      	ldr	r1, [pc, #152]	@ (8010890 <etharp_find_entry+0x2e8>)
 80107f8:	4823      	ldr	r0, [pc, #140]	@ (8010888 <etharp_find_entry+0x2e0>)
 80107fa:	f002 fa7d 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80107fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010802:	491e      	ldr	r1, [pc, #120]	@ (801087c <etharp_find_entry+0x2d4>)
 8010804:	4613      	mov	r3, r2
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	4413      	add	r3, r2
 801080a:	00db      	lsls	r3, r3, #3
 801080c:	440b      	add	r3, r1
 801080e:	3314      	adds	r3, #20
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d006      	beq.n	8010824 <etharp_find_entry+0x27c>
 8010816:	4b1a      	ldr	r3, [pc, #104]	@ (8010880 <etharp_find_entry+0x2d8>)
 8010818:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801081c:	491d      	ldr	r1, [pc, #116]	@ (8010894 <etharp_find_entry+0x2ec>)
 801081e:	481a      	ldr	r0, [pc, #104]	@ (8010888 <etharp_find_entry+0x2e0>)
 8010820:	f002 fa6a 	bl	8012cf8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00b      	beq.n	8010842 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801082a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6819      	ldr	r1, [r3, #0]
 8010832:	4812      	ldr	r0, [pc, #72]	@ (801087c <etharp_find_entry+0x2d4>)
 8010834:	4613      	mov	r3, r2
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	4413      	add	r3, r2
 801083a:	00db      	lsls	r3, r3, #3
 801083c:	4403      	add	r3, r0
 801083e:	3304      	adds	r3, #4
 8010840:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010846:	490d      	ldr	r1, [pc, #52]	@ (801087c <etharp_find_entry+0x2d4>)
 8010848:	4613      	mov	r3, r2
 801084a:	005b      	lsls	r3, r3, #1
 801084c:	4413      	add	r3, r2
 801084e:	00db      	lsls	r3, r3, #3
 8010850:	440b      	add	r3, r1
 8010852:	3312      	adds	r3, #18
 8010854:	2200      	movs	r2, #0
 8010856:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801085c:	4907      	ldr	r1, [pc, #28]	@ (801087c <etharp_find_entry+0x2d4>)
 801085e:	4613      	mov	r3, r2
 8010860:	005b      	lsls	r3, r3, #1
 8010862:	4413      	add	r3, r2
 8010864:	00db      	lsls	r3, r3, #3
 8010866:	440b      	add	r3, r1
 8010868:	3308      	adds	r3, #8
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801086e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3728      	adds	r7, #40	@ 0x28
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	20008950 	.word	0x20008950
 8010880:	0801629c 	.word	0x0801629c
 8010884:	080162d4 	.word	0x080162d4
 8010888:	08016314 	.word	0x08016314
 801088c:	0801633c 	.word	0x0801633c
 8010890:	08016354 	.word	0x08016354
 8010894:	08016368 	.word	0x08016368

08010898 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b088      	sub	sp, #32
 801089c:	af02      	add	r7, sp, #8
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
 80108a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80108ac:	2b06      	cmp	r3, #6
 80108ae:	d006      	beq.n	80108be <etharp_update_arp_entry+0x26>
 80108b0:	4b48      	ldr	r3, [pc, #288]	@ (80109d4 <etharp_update_arp_entry+0x13c>)
 80108b2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80108b6:	4948      	ldr	r1, [pc, #288]	@ (80109d8 <etharp_update_arp_entry+0x140>)
 80108b8:	4848      	ldr	r0, [pc, #288]	@ (80109dc <etharp_update_arp_entry+0x144>)
 80108ba:	f002 fa1d 	bl	8012cf8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d012      	beq.n	80108ea <etharp_update_arp_entry+0x52>
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00e      	beq.n	80108ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	68f9      	ldr	r1, [r7, #12]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f001 f9aa 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 80108d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d105      	bne.n	80108ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80108e6:	2be0      	cmp	r3, #224	@ 0xe0
 80108e8:	d102      	bne.n	80108f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80108ea:	f06f 030f 	mvn.w	r3, #15
 80108ee:	e06c      	b.n	80109ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80108f0:	78fb      	ldrb	r3, [r7, #3]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	4619      	mov	r1, r3
 80108f6:	68b8      	ldr	r0, [r7, #8]
 80108f8:	f7ff fe56 	bl	80105a8 <etharp_find_entry>
 80108fc:	4603      	mov	r3, r0
 80108fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010900:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010904:	2b00      	cmp	r3, #0
 8010906:	da02      	bge.n	801090e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010908:	8afb      	ldrh	r3, [r7, #22]
 801090a:	b25b      	sxtb	r3, r3
 801090c:	e05d      	b.n	80109ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801090e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010912:	4933      	ldr	r1, [pc, #204]	@ (80109e0 <etharp_update_arp_entry+0x148>)
 8010914:	4613      	mov	r3, r2
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	4413      	add	r3, r2
 801091a:	00db      	lsls	r3, r3, #3
 801091c:	440b      	add	r3, r1
 801091e:	3314      	adds	r3, #20
 8010920:	2202      	movs	r2, #2
 8010922:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010924:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010928:	492d      	ldr	r1, [pc, #180]	@ (80109e0 <etharp_update_arp_entry+0x148>)
 801092a:	4613      	mov	r3, r2
 801092c:	005b      	lsls	r3, r3, #1
 801092e:	4413      	add	r3, r2
 8010930:	00db      	lsls	r3, r3, #3
 8010932:	440b      	add	r3, r1
 8010934:	3308      	adds	r3, #8
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801093a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801093e:	4613      	mov	r3, r2
 8010940:	005b      	lsls	r3, r3, #1
 8010942:	4413      	add	r3, r2
 8010944:	00db      	lsls	r3, r3, #3
 8010946:	3308      	adds	r3, #8
 8010948:	4a25      	ldr	r2, [pc, #148]	@ (80109e0 <etharp_update_arp_entry+0x148>)
 801094a:	4413      	add	r3, r2
 801094c:	3304      	adds	r3, #4
 801094e:	2206      	movs	r2, #6
 8010950:	6879      	ldr	r1, [r7, #4]
 8010952:	4618      	mov	r0, r3
 8010954:	f002 faab 	bl	8012eae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010958:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801095c:	4920      	ldr	r1, [pc, #128]	@ (80109e0 <etharp_update_arp_entry+0x148>)
 801095e:	4613      	mov	r3, r2
 8010960:	005b      	lsls	r3, r3, #1
 8010962:	4413      	add	r3, r2
 8010964:	00db      	lsls	r3, r3, #3
 8010966:	440b      	add	r3, r1
 8010968:	3312      	adds	r3, #18
 801096a:	2200      	movs	r2, #0
 801096c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801096e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010972:	491b      	ldr	r1, [pc, #108]	@ (80109e0 <etharp_update_arp_entry+0x148>)
 8010974:	4613      	mov	r3, r2
 8010976:	005b      	lsls	r3, r3, #1
 8010978:	4413      	add	r3, r2
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	440b      	add	r3, r1
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d021      	beq.n	80109c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010984:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010988:	4915      	ldr	r1, [pc, #84]	@ (80109e0 <etharp_update_arp_entry+0x148>)
 801098a:	4613      	mov	r3, r2
 801098c:	005b      	lsls	r3, r3, #1
 801098e:	4413      	add	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	440b      	add	r3, r1
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010998:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801099c:	4910      	ldr	r1, [pc, #64]	@ (80109e0 <etharp_update_arp_entry+0x148>)
 801099e:	4613      	mov	r3, r2
 80109a0:	005b      	lsls	r3, r3, #1
 80109a2:	4413      	add	r3, r2
 80109a4:	00db      	lsls	r3, r3, #3
 80109a6:	440b      	add	r3, r1
 80109a8:	2200      	movs	r2, #0
 80109aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 80109b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6939      	ldr	r1, [r7, #16]
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f002 f853 	bl	8012a68 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80109c2:	6938      	ldr	r0, [r7, #16]
 80109c4:	f7f7 fa4c 	bl	8007e60 <pbuf_free>
  }
  return ERR_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3718      	adds	r7, #24
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	0801629c 	.word	0x0801629c
 80109d8:	08016394 	.word	0x08016394
 80109dc:	08016314 	.word	0x08016314
 80109e0:	20008950 	.word	0x20008950

080109e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80109ec:	2300      	movs	r3, #0
 80109ee:	60fb      	str	r3, [r7, #12]
 80109f0:	e01e      	b.n	8010a30 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80109f2:	4913      	ldr	r1, [pc, #76]	@ (8010a40 <etharp_cleanup_netif+0x5c>)
 80109f4:	68fa      	ldr	r2, [r7, #12]
 80109f6:	4613      	mov	r3, r2
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	4413      	add	r3, r2
 80109fc:	00db      	lsls	r3, r3, #3
 80109fe:	440b      	add	r3, r1
 8010a00:	3314      	adds	r3, #20
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010a06:	7afb      	ldrb	r3, [r7, #11]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00e      	beq.n	8010a2a <etharp_cleanup_netif+0x46>
 8010a0c:	490c      	ldr	r1, [pc, #48]	@ (8010a40 <etharp_cleanup_netif+0x5c>)
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	4613      	mov	r3, r2
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	4413      	add	r3, r2
 8010a16:	00db      	lsls	r3, r3, #3
 8010a18:	440b      	add	r3, r1
 8010a1a:	3308      	adds	r3, #8
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d102      	bne.n	8010a2a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f7ff fce5 	bl	80103f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	60fb      	str	r3, [r7, #12]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2b09      	cmp	r3, #9
 8010a34:	dddd      	ble.n	80109f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010a36:	bf00      	nop
 8010a38:	bf00      	nop
 8010a3a:	3710      	adds	r7, #16
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	20008950 	.word	0x20008950

08010a44 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010a44:	b5b0      	push	{r4, r5, r7, lr}
 8010a46:	b08a      	sub	sp, #40	@ 0x28
 8010a48:	af04      	add	r7, sp, #16
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d107      	bne.n	8010a64 <etharp_input+0x20>
 8010a54:	4b3f      	ldr	r3, [pc, #252]	@ (8010b54 <etharp_input+0x110>)
 8010a56:	f240 228a 	movw	r2, #650	@ 0x28a
 8010a5a:	493f      	ldr	r1, [pc, #252]	@ (8010b58 <etharp_input+0x114>)
 8010a5c:	483f      	ldr	r0, [pc, #252]	@ (8010b5c <etharp_input+0x118>)
 8010a5e:	f002 f94b 	bl	8012cf8 <iprintf>
 8010a62:	e074      	b.n	8010b4e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a74:	d10c      	bne.n	8010a90 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010a7a:	2b06      	cmp	r3, #6
 8010a7c:	d108      	bne.n	8010a90 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010a82:	2b04      	cmp	r3, #4
 8010a84:	d104      	bne.n	8010a90 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	885b      	ldrh	r3, [r3, #2]
 8010a8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010a8c:	2b08      	cmp	r3, #8
 8010a8e:	d003      	beq.n	8010a98 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7f7 f9e5 	bl	8007e60 <pbuf_free>
    return;
 8010a96:	e05a      	b.n	8010b4e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	330e      	adds	r3, #14
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	3318      	adds	r3, #24
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	3304      	adds	r3, #4
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d102      	bne.n	8010ab8 <etharp_input+0x74>
    for_us = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	75fb      	strb	r3, [r7, #23]
 8010ab6:	e009      	b.n	8010acc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010ab8:	68ba      	ldr	r2, [r7, #8]
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	3304      	adds	r3, #4
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	bf0c      	ite	eq
 8010ac4:	2301      	moveq	r3, #1
 8010ac6:	2300      	movne	r3, #0
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	f103 0208 	add.w	r2, r3, #8
 8010ad2:	7dfb      	ldrb	r3, [r7, #23]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <etharp_input+0x98>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e000      	b.n	8010ade <etharp_input+0x9a>
 8010adc:	2302      	movs	r3, #2
 8010ade:	f107 010c 	add.w	r1, r7, #12
 8010ae2:	6838      	ldr	r0, [r7, #0]
 8010ae4:	f7ff fed8 	bl	8010898 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	88db      	ldrh	r3, [r3, #6]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010af2:	d003      	beq.n	8010afc <etharp_input+0xb8>
 8010af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010af8:	d01e      	beq.n	8010b38 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010afa:	e025      	b.n	8010b48 <etharp_input+0x104>
      if (for_us) {
 8010afc:	7dfb      	ldrb	r3, [r7, #23]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d021      	beq.n	8010b46 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010b18:	693a      	ldr	r2, [r7, #16]
 8010b1a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010b1c:	2102      	movs	r1, #2
 8010b1e:	9103      	str	r1, [sp, #12]
 8010b20:	f107 010c 	add.w	r1, r7, #12
 8010b24:	9102      	str	r1, [sp, #8]
 8010b26:	9201      	str	r2, [sp, #4]
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	462b      	mov	r3, r5
 8010b2c:	4622      	mov	r2, r4
 8010b2e:	4601      	mov	r1, r0
 8010b30:	6838      	ldr	r0, [r7, #0]
 8010b32:	f000 faef 	bl	8011114 <etharp_raw>
      break;
 8010b36:	e006      	b.n	8010b46 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010b38:	f107 030c 	add.w	r3, r7, #12
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	6838      	ldr	r0, [r7, #0]
 8010b40:	f7fe f9d2 	bl	800eee8 <dhcp_arp_reply>
      break;
 8010b44:	e000      	b.n	8010b48 <etharp_input+0x104>
      break;
 8010b46:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7f7 f989 	bl	8007e60 <pbuf_free>
}
 8010b4e:	3718      	adds	r7, #24
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bdb0      	pop	{r4, r5, r7, pc}
 8010b54:	0801629c 	.word	0x0801629c
 8010b58:	080163ec 	.word	0x080163ec
 8010b5c:	08016314 	.word	0x08016314

08010b60 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b086      	sub	sp, #24
 8010b64:	af02      	add	r7, sp, #8
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010b6e:	79fa      	ldrb	r2, [r7, #7]
 8010b70:	4944      	ldr	r1, [pc, #272]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010b72:	4613      	mov	r3, r2
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	4413      	add	r3, r2
 8010b78:	00db      	lsls	r3, r3, #3
 8010b7a:	440b      	add	r3, r1
 8010b7c:	3314      	adds	r3, #20
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d806      	bhi.n	8010b92 <etharp_output_to_arp_index+0x32>
 8010b84:	4b40      	ldr	r3, [pc, #256]	@ (8010c88 <etharp_output_to_arp_index+0x128>)
 8010b86:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010b8a:	4940      	ldr	r1, [pc, #256]	@ (8010c8c <etharp_output_to_arp_index+0x12c>)
 8010b8c:	4840      	ldr	r0, [pc, #256]	@ (8010c90 <etharp_output_to_arp_index+0x130>)
 8010b8e:	f002 f8b3 	bl	8012cf8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010b92:	79fa      	ldrb	r2, [r7, #7]
 8010b94:	493b      	ldr	r1, [pc, #236]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	440b      	add	r3, r1
 8010ba0:	3314      	adds	r3, #20
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d153      	bne.n	8010c50 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010ba8:	79fa      	ldrb	r2, [r7, #7]
 8010baa:	4936      	ldr	r1, [pc, #216]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	3312      	adds	r3, #18
 8010bb8:	881b      	ldrh	r3, [r3, #0]
 8010bba:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010bbe:	d919      	bls.n	8010bf4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010bc0:	79fa      	ldrb	r2, [r7, #7]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4413      	add	r3, r2
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	4a2e      	ldr	r2, [pc, #184]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010bcc:	4413      	add	r3, r2
 8010bce:	3304      	adds	r3, #4
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f000 fb4c 	bl	8011270 <etharp_request>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d138      	bne.n	8010c50 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010bde:	79fa      	ldrb	r2, [r7, #7]
 8010be0:	4928      	ldr	r1, [pc, #160]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010be2:	4613      	mov	r3, r2
 8010be4:	005b      	lsls	r3, r3, #1
 8010be6:	4413      	add	r3, r2
 8010be8:	00db      	lsls	r3, r3, #3
 8010bea:	440b      	add	r3, r1
 8010bec:	3314      	adds	r3, #20
 8010bee:	2203      	movs	r2, #3
 8010bf0:	701a      	strb	r2, [r3, #0]
 8010bf2:	e02d      	b.n	8010c50 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010bf4:	79fa      	ldrb	r2, [r7, #7]
 8010bf6:	4923      	ldr	r1, [pc, #140]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	005b      	lsls	r3, r3, #1
 8010bfc:	4413      	add	r3, r2
 8010bfe:	00db      	lsls	r3, r3, #3
 8010c00:	440b      	add	r3, r1
 8010c02:	3312      	adds	r3, #18
 8010c04:	881b      	ldrh	r3, [r3, #0]
 8010c06:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8010c0a:	d321      	bcc.n	8010c50 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010c0c:	79fa      	ldrb	r2, [r7, #7]
 8010c0e:	4613      	mov	r3, r2
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	4413      	add	r3, r2
 8010c14:	00db      	lsls	r3, r3, #3
 8010c16:	4a1b      	ldr	r2, [pc, #108]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010c18:	4413      	add	r3, r2
 8010c1a:	1d19      	adds	r1, r3, #4
 8010c1c:	79fa      	ldrb	r2, [r7, #7]
 8010c1e:	4613      	mov	r3, r2
 8010c20:	005b      	lsls	r3, r3, #1
 8010c22:	4413      	add	r3, r2
 8010c24:	00db      	lsls	r3, r3, #3
 8010c26:	3308      	adds	r3, #8
 8010c28:	4a16      	ldr	r2, [pc, #88]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010c2a:	4413      	add	r3, r2
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	461a      	mov	r2, r3
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f000 fafb 	bl	801122c <etharp_request_dst>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d109      	bne.n	8010c50 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010c3c:	79fa      	ldrb	r2, [r7, #7]
 8010c3e:	4911      	ldr	r1, [pc, #68]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010c40:	4613      	mov	r3, r2
 8010c42:	005b      	lsls	r3, r3, #1
 8010c44:	4413      	add	r3, r2
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	440b      	add	r3, r1
 8010c4a:	3314      	adds	r3, #20
 8010c4c:	2203      	movs	r2, #3
 8010c4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8010c56:	79fa      	ldrb	r2, [r7, #7]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	005b      	lsls	r3, r3, #1
 8010c5c:	4413      	add	r3, r2
 8010c5e:	00db      	lsls	r3, r3, #3
 8010c60:	3308      	adds	r3, #8
 8010c62:	4a08      	ldr	r2, [pc, #32]	@ (8010c84 <etharp_output_to_arp_index+0x124>)
 8010c64:	4413      	add	r3, r2
 8010c66:	3304      	adds	r3, #4
 8010c68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c6c:	9200      	str	r2, [sp, #0]
 8010c6e:	460a      	mov	r2, r1
 8010c70:	68b9      	ldr	r1, [r7, #8]
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f001 fef8 	bl	8012a68 <ethernet_output>
 8010c78:	4603      	mov	r3, r0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	20008950 	.word	0x20008950
 8010c88:	0801629c 	.word	0x0801629c
 8010c8c:	0801640c 	.word	0x0801640c
 8010c90:	08016314 	.word	0x08016314

08010c94 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08a      	sub	sp, #40	@ 0x28
 8010c98:	af02      	add	r7, sp, #8
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d106      	bne.n	8010cb8 <etharp_output+0x24>
 8010caa:	4b73      	ldr	r3, [pc, #460]	@ (8010e78 <etharp_output+0x1e4>)
 8010cac:	f240 321e 	movw	r2, #798	@ 0x31e
 8010cb0:	4972      	ldr	r1, [pc, #456]	@ (8010e7c <etharp_output+0x1e8>)
 8010cb2:	4873      	ldr	r0, [pc, #460]	@ (8010e80 <etharp_output+0x1ec>)
 8010cb4:	f002 f820 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d106      	bne.n	8010ccc <etharp_output+0x38>
 8010cbe:	4b6e      	ldr	r3, [pc, #440]	@ (8010e78 <etharp_output+0x1e4>)
 8010cc0:	f240 321f 	movw	r2, #799	@ 0x31f
 8010cc4:	496f      	ldr	r1, [pc, #444]	@ (8010e84 <etharp_output+0x1f0>)
 8010cc6:	486e      	ldr	r0, [pc, #440]	@ (8010e80 <etharp_output+0x1ec>)
 8010cc8:	f002 f816 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d106      	bne.n	8010ce0 <etharp_output+0x4c>
 8010cd2:	4b69      	ldr	r3, [pc, #420]	@ (8010e78 <etharp_output+0x1e4>)
 8010cd4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010cd8:	496b      	ldr	r1, [pc, #428]	@ (8010e88 <etharp_output+0x1f4>)
 8010cda:	4869      	ldr	r0, [pc, #420]	@ (8010e80 <etharp_output+0x1ec>)
 8010cdc:	f002 f80c 	bl	8012cf8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	68f9      	ldr	r1, [r7, #12]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f000 ffa0 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d002      	beq.n	8010cf8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010cf2:	4b66      	ldr	r3, [pc, #408]	@ (8010e8c <etharp_output+0x1f8>)
 8010cf4:	61fb      	str	r3, [r7, #28]
 8010cf6:	e0af      	b.n	8010e58 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010d00:	2be0      	cmp	r3, #224	@ 0xe0
 8010d02:	d118      	bne.n	8010d36 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010d04:	2301      	movs	r3, #1
 8010d06:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010d0c:	235e      	movs	r3, #94	@ 0x5e
 8010d0e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	3301      	adds	r3, #1
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	3302      	adds	r3, #2
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3303      	adds	r3, #3
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010d2e:	f107 0310 	add.w	r3, r7, #16
 8010d32:	61fb      	str	r3, [r7, #28]
 8010d34:	e090      	b.n	8010e58 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	3304      	adds	r3, #4
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	405a      	eors	r2, r3
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3308      	adds	r3, #8
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4013      	ands	r3, r2
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d012      	beq.n	8010d74 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010d54:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d00b      	beq.n	8010d74 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	330c      	adds	r3, #12
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d003      	beq.n	8010d6e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	330c      	adds	r3, #12
 8010d6a:	61bb      	str	r3, [r7, #24]
 8010d6c:	e002      	b.n	8010d74 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010d6e:	f06f 0303 	mvn.w	r3, #3
 8010d72:	e07d      	b.n	8010e70 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010d74:	4b46      	ldr	r3, [pc, #280]	@ (8010e90 <etharp_output+0x1fc>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	4619      	mov	r1, r3
 8010d7a:	4a46      	ldr	r2, [pc, #280]	@ (8010e94 <etharp_output+0x200>)
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	440b      	add	r3, r1
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	4413      	add	r3, r2
 8010d86:	3314      	adds	r3, #20
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d925      	bls.n	8010dda <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010d8e:	4b40      	ldr	r3, [pc, #256]	@ (8010e90 <etharp_output+0x1fc>)
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	4619      	mov	r1, r3
 8010d94:	4a3f      	ldr	r2, [pc, #252]	@ (8010e94 <etharp_output+0x200>)
 8010d96:	460b      	mov	r3, r1
 8010d98:	005b      	lsls	r3, r3, #1
 8010d9a:	440b      	add	r3, r1
 8010d9c:	00db      	lsls	r3, r3, #3
 8010d9e:	4413      	add	r3, r2
 8010da0:	3308      	adds	r3, #8
 8010da2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d117      	bne.n	8010dda <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	4b38      	ldr	r3, [pc, #224]	@ (8010e90 <etharp_output+0x1fc>)
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	4618      	mov	r0, r3
 8010db4:	4937      	ldr	r1, [pc, #220]	@ (8010e94 <etharp_output+0x200>)
 8010db6:	4603      	mov	r3, r0
 8010db8:	005b      	lsls	r3, r3, #1
 8010dba:	4403      	add	r3, r0
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	440b      	add	r3, r1
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d108      	bne.n	8010dda <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010dc8:	4b31      	ldr	r3, [pc, #196]	@ (8010e90 <etharp_output+0x1fc>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	461a      	mov	r2, r3
 8010dce:	68b9      	ldr	r1, [r7, #8]
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f7ff fec5 	bl	8010b60 <etharp_output_to_arp_index>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	e04a      	b.n	8010e70 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010dda:	2300      	movs	r3, #0
 8010ddc:	75fb      	strb	r3, [r7, #23]
 8010dde:	e031      	b.n	8010e44 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010de0:	7dfa      	ldrb	r2, [r7, #23]
 8010de2:	492c      	ldr	r1, [pc, #176]	@ (8010e94 <etharp_output+0x200>)
 8010de4:	4613      	mov	r3, r2
 8010de6:	005b      	lsls	r3, r3, #1
 8010de8:	4413      	add	r3, r2
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	440b      	add	r3, r1
 8010dee:	3314      	adds	r3, #20
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d923      	bls.n	8010e3e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010df6:	7dfa      	ldrb	r2, [r7, #23]
 8010df8:	4926      	ldr	r1, [pc, #152]	@ (8010e94 <etharp_output+0x200>)
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	4413      	add	r3, r2
 8010e00:	00db      	lsls	r3, r3, #3
 8010e02:	440b      	add	r3, r1
 8010e04:	3308      	adds	r3, #8
 8010e06:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010e08:	68fa      	ldr	r2, [r7, #12]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d117      	bne.n	8010e3e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	6819      	ldr	r1, [r3, #0]
 8010e12:	7dfa      	ldrb	r2, [r7, #23]
 8010e14:	481f      	ldr	r0, [pc, #124]	@ (8010e94 <etharp_output+0x200>)
 8010e16:	4613      	mov	r3, r2
 8010e18:	005b      	lsls	r3, r3, #1
 8010e1a:	4413      	add	r3, r2
 8010e1c:	00db      	lsls	r3, r3, #3
 8010e1e:	4403      	add	r3, r0
 8010e20:	3304      	adds	r3, #4
 8010e22:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010e24:	4299      	cmp	r1, r3
 8010e26:	d10a      	bne.n	8010e3e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010e28:	4a19      	ldr	r2, [pc, #100]	@ (8010e90 <etharp_output+0x1fc>)
 8010e2a:	7dfb      	ldrb	r3, [r7, #23]
 8010e2c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010e2e:	7dfb      	ldrb	r3, [r7, #23]
 8010e30:	461a      	mov	r2, r3
 8010e32:	68b9      	ldr	r1, [r7, #8]
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f7ff fe93 	bl	8010b60 <etharp_output_to_arp_index>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	e018      	b.n	8010e70 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010e3e:	7dfb      	ldrb	r3, [r7, #23]
 8010e40:	3301      	adds	r3, #1
 8010e42:	75fb      	strb	r3, [r7, #23]
 8010e44:	7dfb      	ldrb	r3, [r7, #23]
 8010e46:	2b09      	cmp	r3, #9
 8010e48:	d9ca      	bls.n	8010de0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	69b9      	ldr	r1, [r7, #24]
 8010e4e:	68f8      	ldr	r0, [r7, #12]
 8010e50:	f000 f822 	bl	8010e98 <etharp_query>
 8010e54:	4603      	mov	r3, r0
 8010e56:	e00b      	b.n	8010e70 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8010e5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010e62:	9300      	str	r3, [sp, #0]
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	68b9      	ldr	r1, [r7, #8]
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	f001 fdfd 	bl	8012a68 <ethernet_output>
 8010e6e:	4603      	mov	r3, r0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3720      	adds	r7, #32
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	0801629c 	.word	0x0801629c
 8010e7c:	080163ec 	.word	0x080163ec
 8010e80:	08016314 	.word	0x08016314
 8010e84:	0801643c 	.word	0x0801643c
 8010e88:	080163dc 	.word	0x080163dc
 8010e8c:	08016a74 	.word	0x08016a74
 8010e90:	20008a40 	.word	0x20008a40
 8010e94:	20008950 	.word	0x20008950

08010e98 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b08c      	sub	sp, #48	@ 0x30
 8010e9c:	af02      	add	r7, sp, #8
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	332e      	adds	r3, #46	@ 0x2e
 8010ea8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010eaa:	23ff      	movs	r3, #255	@ 0xff
 8010eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68f9      	ldr	r1, [r7, #12]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f000 feb6 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10c      	bne.n	8010ee0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ece:	2be0      	cmp	r3, #224	@ 0xe0
 8010ed0:	d006      	beq.n	8010ee0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d102      	bne.n	8010ee6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010ee0:	f06f 030f 	mvn.w	r3, #15
 8010ee4:	e101      	b.n	80110ea <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	2101      	movs	r1, #1
 8010eea:	68b8      	ldr	r0, [r7, #8]
 8010eec:	f7ff fb5c 	bl	80105a8 <etharp_find_entry>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	da02      	bge.n	8010f02 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010efc:	8a7b      	ldrh	r3, [r7, #18]
 8010efe:	b25b      	sxtb	r3, r3
 8010f00:	e0f3      	b.n	80110ea <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010f02:	8a7b      	ldrh	r3, [r7, #18]
 8010f04:	2b7e      	cmp	r3, #126	@ 0x7e
 8010f06:	d906      	bls.n	8010f16 <etharp_query+0x7e>
 8010f08:	4b7a      	ldr	r3, [pc, #488]	@ (80110f4 <etharp_query+0x25c>)
 8010f0a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8010f0e:	497a      	ldr	r1, [pc, #488]	@ (80110f8 <etharp_query+0x260>)
 8010f10:	487a      	ldr	r0, [pc, #488]	@ (80110fc <etharp_query+0x264>)
 8010f12:	f001 fef1 	bl	8012cf8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010f16:	8a7b      	ldrh	r3, [r7, #18]
 8010f18:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010f1a:	7c7a      	ldrb	r2, [r7, #17]
 8010f1c:	4978      	ldr	r1, [pc, #480]	@ (8011100 <etharp_query+0x268>)
 8010f1e:	4613      	mov	r3, r2
 8010f20:	005b      	lsls	r3, r3, #1
 8010f22:	4413      	add	r3, r2
 8010f24:	00db      	lsls	r3, r3, #3
 8010f26:	440b      	add	r3, r1
 8010f28:	3314      	adds	r3, #20
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d115      	bne.n	8010f5c <etharp_query+0xc4>
    is_new_entry = 1;
 8010f30:	2301      	movs	r3, #1
 8010f32:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010f34:	7c7a      	ldrb	r2, [r7, #17]
 8010f36:	4972      	ldr	r1, [pc, #456]	@ (8011100 <etharp_query+0x268>)
 8010f38:	4613      	mov	r3, r2
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	4413      	add	r3, r2
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	440b      	add	r3, r1
 8010f42:	3314      	adds	r3, #20
 8010f44:	2201      	movs	r2, #1
 8010f46:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010f48:	7c7a      	ldrb	r2, [r7, #17]
 8010f4a:	496d      	ldr	r1, [pc, #436]	@ (8011100 <etharp_query+0x268>)
 8010f4c:	4613      	mov	r3, r2
 8010f4e:	005b      	lsls	r3, r3, #1
 8010f50:	4413      	add	r3, r2
 8010f52:	00db      	lsls	r3, r3, #3
 8010f54:	440b      	add	r3, r1
 8010f56:	3308      	adds	r3, #8
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010f5c:	7c7a      	ldrb	r2, [r7, #17]
 8010f5e:	4968      	ldr	r1, [pc, #416]	@ (8011100 <etharp_query+0x268>)
 8010f60:	4613      	mov	r3, r2
 8010f62:	005b      	lsls	r3, r3, #1
 8010f64:	4413      	add	r3, r2
 8010f66:	00db      	lsls	r3, r3, #3
 8010f68:	440b      	add	r3, r1
 8010f6a:	3314      	adds	r3, #20
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d011      	beq.n	8010f96 <etharp_query+0xfe>
 8010f72:	7c7a      	ldrb	r2, [r7, #17]
 8010f74:	4962      	ldr	r1, [pc, #392]	@ (8011100 <etharp_query+0x268>)
 8010f76:	4613      	mov	r3, r2
 8010f78:	005b      	lsls	r3, r3, #1
 8010f7a:	4413      	add	r3, r2
 8010f7c:	00db      	lsls	r3, r3, #3
 8010f7e:	440b      	add	r3, r1
 8010f80:	3314      	adds	r3, #20
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d806      	bhi.n	8010f96 <etharp_query+0xfe>
 8010f88:	4b5a      	ldr	r3, [pc, #360]	@ (80110f4 <etharp_query+0x25c>)
 8010f8a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8010f8e:	495d      	ldr	r1, [pc, #372]	@ (8011104 <etharp_query+0x26c>)
 8010f90:	485a      	ldr	r0, [pc, #360]	@ (80110fc <etharp_query+0x264>)
 8010f92:	f001 feb1 	bl	8012cf8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010f96:	6a3b      	ldr	r3, [r7, #32]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d102      	bne.n	8010fa2 <etharp_query+0x10a>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10c      	bne.n	8010fbc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010fa2:	68b9      	ldr	r1, [r7, #8]
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f000 f963 	bl	8011270 <etharp_request>
 8010faa:	4603      	mov	r3, r0
 8010fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d102      	bne.n	8010fbc <etharp_query+0x124>
      return result;
 8010fb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010fba:	e096      	b.n	80110ea <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d106      	bne.n	8010fd0 <etharp_query+0x138>
 8010fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80110f4 <etharp_query+0x25c>)
 8010fc4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8010fc8:	494f      	ldr	r1, [pc, #316]	@ (8011108 <etharp_query+0x270>)
 8010fca:	484c      	ldr	r0, [pc, #304]	@ (80110fc <etharp_query+0x264>)
 8010fcc:	f001 fe94 	bl	8012cf8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010fd0:	7c7a      	ldrb	r2, [r7, #17]
 8010fd2:	494b      	ldr	r1, [pc, #300]	@ (8011100 <etharp_query+0x268>)
 8010fd4:	4613      	mov	r3, r2
 8010fd6:	005b      	lsls	r3, r3, #1
 8010fd8:	4413      	add	r3, r2
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	440b      	add	r3, r1
 8010fde:	3314      	adds	r3, #20
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d917      	bls.n	8011016 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010fe6:	4a49      	ldr	r2, [pc, #292]	@ (801110c <etharp_query+0x274>)
 8010fe8:	7c7b      	ldrb	r3, [r7, #17]
 8010fea:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010fec:	7c7a      	ldrb	r2, [r7, #17]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	4413      	add	r3, r2
 8010ff4:	00db      	lsls	r3, r3, #3
 8010ff6:	3308      	adds	r3, #8
 8010ff8:	4a41      	ldr	r2, [pc, #260]	@ (8011100 <etharp_query+0x268>)
 8010ffa:	4413      	add	r3, r2
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011002:	9200      	str	r2, [sp, #0]
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	6879      	ldr	r1, [r7, #4]
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	f001 fd2d 	bl	8012a68 <ethernet_output>
 801100e:	4603      	mov	r3, r0
 8011010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011014:	e067      	b.n	80110e6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011016:	7c7a      	ldrb	r2, [r7, #17]
 8011018:	4939      	ldr	r1, [pc, #228]	@ (8011100 <etharp_query+0x268>)
 801101a:	4613      	mov	r3, r2
 801101c:	005b      	lsls	r3, r3, #1
 801101e:	4413      	add	r3, r2
 8011020:	00db      	lsls	r3, r3, #3
 8011022:	440b      	add	r3, r1
 8011024:	3314      	adds	r3, #20
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d15c      	bne.n	80110e6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801102c:	2300      	movs	r3, #0
 801102e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011034:	e01c      	b.n	8011070 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	895a      	ldrh	r2, [r3, #10]
 801103a:	69fb      	ldr	r3, [r7, #28]
 801103c:	891b      	ldrh	r3, [r3, #8]
 801103e:	429a      	cmp	r2, r3
 8011040:	d10a      	bne.n	8011058 <etharp_query+0x1c0>
 8011042:	69fb      	ldr	r3, [r7, #28]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d006      	beq.n	8011058 <etharp_query+0x1c0>
 801104a:	4b2a      	ldr	r3, [pc, #168]	@ (80110f4 <etharp_query+0x25c>)
 801104c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8011050:	492f      	ldr	r1, [pc, #188]	@ (8011110 <etharp_query+0x278>)
 8011052:	482a      	ldr	r0, [pc, #168]	@ (80110fc <etharp_query+0x264>)
 8011054:	f001 fe50 	bl	8012cf8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	7b1b      	ldrb	r3, [r3, #12]
 801105c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <etharp_query+0x1d2>
        copy_needed = 1;
 8011064:	2301      	movs	r3, #1
 8011066:	61bb      	str	r3, [r7, #24]
        break;
 8011068:	e005      	b.n	8011076 <etharp_query+0x1de>
      }
      p = p->next;
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1df      	bne.n	8011036 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d007      	beq.n	801108c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8011082:	200e      	movs	r0, #14
 8011084:	f7f7 fa90 	bl	80085a8 <pbuf_clone>
 8011088:	61f8      	str	r0, [r7, #28]
 801108a:	e004      	b.n	8011096 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011090:	69f8      	ldr	r0, [r7, #28]
 8011092:	f7f6 ff85 	bl	8007fa0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d021      	beq.n	80110e0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801109c:	7c7a      	ldrb	r2, [r7, #17]
 801109e:	4918      	ldr	r1, [pc, #96]	@ (8011100 <etharp_query+0x268>)
 80110a0:	4613      	mov	r3, r2
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	4413      	add	r3, r2
 80110a6:	00db      	lsls	r3, r3, #3
 80110a8:	440b      	add	r3, r1
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d00a      	beq.n	80110c6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80110b0:	7c7a      	ldrb	r2, [r7, #17]
 80110b2:	4913      	ldr	r1, [pc, #76]	@ (8011100 <etharp_query+0x268>)
 80110b4:	4613      	mov	r3, r2
 80110b6:	005b      	lsls	r3, r3, #1
 80110b8:	4413      	add	r3, r2
 80110ba:	00db      	lsls	r3, r3, #3
 80110bc:	440b      	add	r3, r1
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7f6 fecd 	bl	8007e60 <pbuf_free>
      }
      arp_table[i].q = p;
 80110c6:	7c7a      	ldrb	r2, [r7, #17]
 80110c8:	490d      	ldr	r1, [pc, #52]	@ (8011100 <etharp_query+0x268>)
 80110ca:	4613      	mov	r3, r2
 80110cc:	005b      	lsls	r3, r3, #1
 80110ce:	4413      	add	r3, r2
 80110d0:	00db      	lsls	r3, r3, #3
 80110d2:	440b      	add	r3, r1
 80110d4:	69fa      	ldr	r2, [r7, #28]
 80110d6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80110d8:	2300      	movs	r3, #0
 80110da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80110de:	e002      	b.n	80110e6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80110e0:	23ff      	movs	r3, #255	@ 0xff
 80110e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80110e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3728      	adds	r7, #40	@ 0x28
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	0801629c 	.word	0x0801629c
 80110f8:	08016448 	.word	0x08016448
 80110fc:	08016314 	.word	0x08016314
 8011100:	20008950 	.word	0x20008950
 8011104:	08016458 	.word	0x08016458
 8011108:	0801643c 	.word	0x0801643c
 801110c:	20008a40 	.word	0x20008a40
 8011110:	08016480 	.word	0x08016480

08011114 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b08a      	sub	sp, #40	@ 0x28
 8011118:	af02      	add	r7, sp, #8
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
 8011120:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011122:	2300      	movs	r3, #0
 8011124:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d106      	bne.n	801113a <etharp_raw+0x26>
 801112c:	4b3a      	ldr	r3, [pc, #232]	@ (8011218 <etharp_raw+0x104>)
 801112e:	f240 4257 	movw	r2, #1111	@ 0x457
 8011132:	493a      	ldr	r1, [pc, #232]	@ (801121c <etharp_raw+0x108>)
 8011134:	483a      	ldr	r0, [pc, #232]	@ (8011220 <etharp_raw+0x10c>)
 8011136:	f001 fddf 	bl	8012cf8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801113a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801113e:	211c      	movs	r1, #28
 8011140:	200e      	movs	r0, #14
 8011142:	f7f6 fba9 	bl	8007898 <pbuf_alloc>
 8011146:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011148:	69bb      	ldr	r3, [r7, #24]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d102      	bne.n	8011154 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801114e:	f04f 33ff 	mov.w	r3, #4294967295
 8011152:	e05d      	b.n	8011210 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	895b      	ldrh	r3, [r3, #10]
 8011158:	2b1b      	cmp	r3, #27
 801115a:	d806      	bhi.n	801116a <etharp_raw+0x56>
 801115c:	4b2e      	ldr	r3, [pc, #184]	@ (8011218 <etharp_raw+0x104>)
 801115e:	f240 4262 	movw	r2, #1122	@ 0x462
 8011162:	4930      	ldr	r1, [pc, #192]	@ (8011224 <etharp_raw+0x110>)
 8011164:	482e      	ldr	r0, [pc, #184]	@ (8011220 <etharp_raw+0x10c>)
 8011166:	f001 fdc7 	bl	8012cf8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801116a:	69bb      	ldr	r3, [r7, #24]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011170:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011172:	4618      	mov	r0, r3
 8011174:	f7f4 fed6 	bl	8005f24 <lwip_htons>
 8011178:	4603      	mov	r3, r0
 801117a:	461a      	mov	r2, r3
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011186:	2b06      	cmp	r3, #6
 8011188:	d006      	beq.n	8011198 <etharp_raw+0x84>
 801118a:	4b23      	ldr	r3, [pc, #140]	@ (8011218 <etharp_raw+0x104>)
 801118c:	f240 4269 	movw	r2, #1129	@ 0x469
 8011190:	4925      	ldr	r1, [pc, #148]	@ (8011228 <etharp_raw+0x114>)
 8011192:	4823      	ldr	r0, [pc, #140]	@ (8011220 <etharp_raw+0x10c>)
 8011194:	f001 fdb0 	bl	8012cf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	3308      	adds	r3, #8
 801119c:	2206      	movs	r2, #6
 801119e:	6839      	ldr	r1, [r7, #0]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f001 fe84 	bl	8012eae <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	3312      	adds	r3, #18
 80111aa:	2206      	movs	r2, #6
 80111ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80111ae:	4618      	mov	r0, r3
 80111b0:	f001 fe7d 	bl	8012eae <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	330e      	adds	r3, #14
 80111b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111ba:	6812      	ldr	r2, [r2, #0]
 80111bc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	3318      	adds	r3, #24
 80111c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111c4:	6812      	ldr	r2, [r2, #0]
 80111c6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	2200      	movs	r2, #0
 80111cc:	701a      	strb	r2, [r3, #0]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f042 0201 	orr.w	r2, r2, #1
 80111d4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	2200      	movs	r2, #0
 80111da:	f042 0208 	orr.w	r2, r2, #8
 80111de:	709a      	strb	r2, [r3, #2]
 80111e0:	2200      	movs	r2, #0
 80111e2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	2206      	movs	r2, #6
 80111e8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	2204      	movs	r2, #4
 80111ee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80111f0:	f640 0306 	movw	r3, #2054	@ 0x806
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	68ba      	ldr	r2, [r7, #8]
 80111fa:	69b9      	ldr	r1, [r7, #24]
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f001 fc33 	bl	8012a68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011202:	69b8      	ldr	r0, [r7, #24]
 8011204:	f7f6 fe2c 	bl	8007e60 <pbuf_free>
  p = NULL;
 8011208:	2300      	movs	r3, #0
 801120a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801120c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3720      	adds	r7, #32
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	0801629c 	.word	0x0801629c
 801121c:	080163ec 	.word	0x080163ec
 8011220:	08016314 	.word	0x08016314
 8011224:	0801649c 	.word	0x0801649c
 8011228:	080164d0 	.word	0x080164d0

0801122c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b088      	sub	sp, #32
 8011230:	af04      	add	r7, sp, #16
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011248:	2201      	movs	r2, #1
 801124a:	9203      	str	r2, [sp, #12]
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	9202      	str	r2, [sp, #8]
 8011250:	4a06      	ldr	r2, [pc, #24]	@ (801126c <etharp_request_dst+0x40>)
 8011252:	9201      	str	r2, [sp, #4]
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	4603      	mov	r3, r0
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	f7ff ff5a 	bl	8011114 <etharp_raw>
 8011260:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	08016a7c 	.word	0x08016a7c

08011270 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801127a:	4a05      	ldr	r2, [pc, #20]	@ (8011290 <etharp_request+0x20>)
 801127c:	6839      	ldr	r1, [r7, #0]
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7ff ffd4 	bl	801122c <etharp_request_dst>
 8011284:	4603      	mov	r3, r0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3708      	adds	r7, #8
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	08016a74 	.word	0x08016a74

08011294 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b08e      	sub	sp, #56	@ 0x38
 8011298:	af04      	add	r7, sp, #16
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801129e:	4b86      	ldr	r3, [pc, #536]	@ (80114b8 <icmp_input+0x224>)
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80112a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	f003 030f 	and.w	r3, r3, #15
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80112b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80112b6:	2b13      	cmp	r3, #19
 80112b8:	f240 80e7 	bls.w	801148a <icmp_input+0x1f6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	895b      	ldrh	r3, [r3, #10]
 80112c0:	2b03      	cmp	r3, #3
 80112c2:	f240 80e4 	bls.w	801148e <icmp_input+0x1fa>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80112d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	f000 80d1 	beq.w	801147c <icmp_input+0x1e8>
 80112da:	2b08      	cmp	r3, #8
 80112dc:	f040 80d1 	bne.w	8011482 <icmp_input+0x1ee>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80112e0:	4b76      	ldr	r3, [pc, #472]	@ (80114bc <icmp_input+0x228>)
 80112e2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80112e4:	4b74      	ldr	r3, [pc, #464]	@ (80114b8 <icmp_input+0x224>)
 80112e6:	695b      	ldr	r3, [r3, #20]
 80112e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80112ec:	2be0      	cmp	r3, #224	@ 0xe0
 80112ee:	f000 80d5 	beq.w	801149c <icmp_input+0x208>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80112f2:	4b71      	ldr	r3, [pc, #452]	@ (80114b8 <icmp_input+0x224>)
 80112f4:	695b      	ldr	r3, [r3, #20]
 80112f6:	4a70      	ldr	r2, [pc, #448]	@ (80114b8 <icmp_input+0x224>)
 80112f8:	6812      	ldr	r2, [r2, #0]
 80112fa:	4611      	mov	r1, r2
 80112fc:	4618      	mov	r0, r3
 80112fe:	f000 fc95 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	f040 80cb 	bne.w	80114a0 <icmp_input+0x20c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	891b      	ldrh	r3, [r3, #8]
 801130e:	2b07      	cmp	r3, #7
 8011310:	f240 80bf 	bls.w	8011492 <icmp_input+0x1fe>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011314:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011316:	330e      	adds	r3, #14
 8011318:	4619      	mov	r1, r3
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7f6 fd0a 	bl	8007d34 <pbuf_add_header>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d04b      	beq.n	80113be <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	891a      	ldrh	r2, [r3, #8]
 801132a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801132c:	4413      	add	r3, r2
 801132e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	891b      	ldrh	r3, [r3, #8]
 8011334:	8b7a      	ldrh	r2, [r7, #26]
 8011336:	429a      	cmp	r2, r3
 8011338:	f0c0 80b4 	bcc.w	80114a4 <icmp_input+0x210>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801133c:	8b7b      	ldrh	r3, [r7, #26]
 801133e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011342:	4619      	mov	r1, r3
 8011344:	200e      	movs	r0, #14
 8011346:	f7f6 faa7 	bl	8007898 <pbuf_alloc>
 801134a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	2b00      	cmp	r3, #0
 8011350:	f000 80aa 	beq.w	80114a8 <icmp_input+0x214>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	895b      	ldrh	r3, [r3, #10]
 8011358:	461a      	mov	r2, r3
 801135a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801135c:	3308      	adds	r3, #8
 801135e:	429a      	cmp	r2, r3
 8011360:	d203      	bcs.n	801136a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011362:	6978      	ldr	r0, [r7, #20]
 8011364:	f7f6 fd7c 	bl	8007e60 <pbuf_free>
          goto icmperr;
 8011368:	e09f      	b.n	80114aa <icmp_input+0x216>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011372:	4618      	mov	r0, r3
 8011374:	f001 fd9b 	bl	8012eae <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011378:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801137a:	4619      	mov	r1, r3
 801137c:	6978      	ldr	r0, [r7, #20]
 801137e:	f7f6 fce9 	bl	8007d54 <pbuf_remove_header>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d009      	beq.n	801139c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011388:	4b4d      	ldr	r3, [pc, #308]	@ (80114c0 <icmp_input+0x22c>)
 801138a:	22b6      	movs	r2, #182	@ 0xb6
 801138c:	494d      	ldr	r1, [pc, #308]	@ (80114c4 <icmp_input+0x230>)
 801138e:	484e      	ldr	r0, [pc, #312]	@ (80114c8 <icmp_input+0x234>)
 8011390:	f001 fcb2 	bl	8012cf8 <iprintf>
          pbuf_free(r);
 8011394:	6978      	ldr	r0, [r7, #20]
 8011396:	f7f6 fd63 	bl	8007e60 <pbuf_free>
          goto icmperr;
 801139a:	e086      	b.n	80114aa <icmp_input+0x216>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801139c:	6879      	ldr	r1, [r7, #4]
 801139e:	6978      	ldr	r0, [r7, #20]
 80113a0:	f7f6 fe86 	bl	80080b0 <pbuf_copy>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d003      	beq.n	80113b2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80113aa:	6978      	ldr	r0, [r7, #20]
 80113ac:	f7f6 fd58 	bl	8007e60 <pbuf_free>
          goto icmperr;
 80113b0:	e07b      	b.n	80114aa <icmp_input+0x216>
        }
        /* free the original p */
        pbuf_free(p);
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f7f6 fd54 	bl	8007e60 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	607b      	str	r3, [r7, #4]
 80113bc:	e00f      	b.n	80113de <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80113be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80113c0:	330e      	adds	r3, #14
 80113c2:	4619      	mov	r1, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7f6 fcc5 	bl	8007d54 <pbuf_remove_header>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d006      	beq.n	80113de <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80113d0:	4b3b      	ldr	r3, [pc, #236]	@ (80114c0 <icmp_input+0x22c>)
 80113d2:	22c7      	movs	r2, #199	@ 0xc7
 80113d4:	493d      	ldr	r1, [pc, #244]	@ (80114cc <icmp_input+0x238>)
 80113d6:	483c      	ldr	r0, [pc, #240]	@ (80114c8 <icmp_input+0x234>)
 80113d8:	f001 fc8e 	bl	8012cf8 <iprintf>
          goto icmperr;
 80113dc:	e065      	b.n	80114aa <icmp_input+0x216>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80113e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80113e6:	4619      	mov	r1, r3
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f7f6 fca3 	bl	8007d34 <pbuf_add_header>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d145      	bne.n	8011480 <icmp_input+0x1ec>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011402:	4b2d      	ldr	r3, [pc, #180]	@ (80114b8 <icmp_input+0x224>)
 8011404:	691a      	ldr	r2, [r3, #16]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	2200      	movs	r2, #0
 801140e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	885b      	ldrh	r3, [r3, #2]
 8011414:	b29b      	uxth	r3, r3
 8011416:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801141a:	4293      	cmp	r3, r2
 801141c:	d907      	bls.n	801142e <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	885b      	ldrh	r3, [r3, #2]
 8011422:	b29b      	uxth	r3, r3
 8011424:	3309      	adds	r3, #9
 8011426:	b29a      	uxth	r2, r3
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	805a      	strh	r2, [r3, #2]
 801142c:	e006      	b.n	801143c <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	885b      	ldrh	r3, [r3, #2]
 8011432:	b29b      	uxth	r3, r3
 8011434:	3308      	adds	r3, #8
 8011436:	b29a      	uxth	r2, r3
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	22ff      	movs	r2, #255	@ 0xff
 8011440:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2200      	movs	r2, #0
 8011446:	729a      	strb	r2, [r3, #10]
 8011448:	2200      	movs	r2, #0
 801144a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801144c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801144e:	4619      	mov	r1, r3
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f7f5 f99c 	bl	800678e <inet_chksum>
 8011456:	4603      	mov	r3, r0
 8011458:	461a      	mov	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	9302      	str	r3, [sp, #8]
 8011462:	2301      	movs	r3, #1
 8011464:	9301      	str	r3, [sp, #4]
 8011466:	2300      	movs	r3, #0
 8011468:	9300      	str	r3, [sp, #0]
 801146a:	23ff      	movs	r3, #255	@ 0xff
 801146c:	2200      	movs	r2, #0
 801146e:	69f9      	ldr	r1, [r7, #28]
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f000 fa9d 	bl	80119b0 <ip4_output_if>
 8011476:	4603      	mov	r3, r0
 8011478:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801147a:	e001      	b.n	8011480 <icmp_input+0x1ec>
      break;
 801147c:	bf00      	nop
 801147e:	e000      	b.n	8011482 <icmp_input+0x1ee>
      break;
 8011480:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7f6 fcec 	bl	8007e60 <pbuf_free>
  return;
 8011488:	e013      	b.n	80114b2 <icmp_input+0x21e>
    goto lenerr;
 801148a:	bf00      	nop
 801148c:	e002      	b.n	8011494 <icmp_input+0x200>
    goto lenerr;
 801148e:	bf00      	nop
 8011490:	e000      	b.n	8011494 <icmp_input+0x200>
        goto lenerr;
 8011492:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f7f6 fce3 	bl	8007e60 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801149a:	e00a      	b.n	80114b2 <icmp_input+0x21e>
        goto icmperr;
 801149c:	bf00      	nop
 801149e:	e004      	b.n	80114aa <icmp_input+0x216>
        goto icmperr;
 80114a0:	bf00      	nop
 80114a2:	e002      	b.n	80114aa <icmp_input+0x216>
          goto icmperr;
 80114a4:	bf00      	nop
 80114a6:	e000      	b.n	80114aa <icmp_input+0x216>
          goto icmperr;
 80114a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7f6 fcd8 	bl	8007e60 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80114b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80114b2:	3728      	adds	r7, #40	@ 0x28
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	20005310 	.word	0x20005310
 80114bc:	20005324 	.word	0x20005324
 80114c0:	08016514 	.word	0x08016514
 80114c4:	0801654c 	.word	0x0801654c
 80114c8:	08016584 	.word	0x08016584
 80114cc:	080165ac 	.word	0x080165ac

080114d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	460b      	mov	r3, r1
 80114da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80114dc:	78fb      	ldrb	r3, [r7, #3]
 80114de:	461a      	mov	r2, r3
 80114e0:	2103      	movs	r1, #3
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f814 	bl	8011510 <icmp_send_response>
}
 80114e8:	bf00      	nop
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	460b      	mov	r3, r1
 80114fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80114fc:	78fb      	ldrb	r3, [r7, #3]
 80114fe:	461a      	mov	r2, r3
 8011500:	210b      	movs	r1, #11
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 f804 	bl	8011510 <icmp_send_response>
}
 8011508:	bf00      	nop
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b08c      	sub	sp, #48	@ 0x30
 8011514:	af04      	add	r7, sp, #16
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	460b      	mov	r3, r1
 801151a:	70fb      	strb	r3, [r7, #3]
 801151c:	4613      	mov	r3, r2
 801151e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011520:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011524:	2124      	movs	r1, #36	@ 0x24
 8011526:	2022      	movs	r0, #34	@ 0x22
 8011528:	f7f6 f9b6 	bl	8007898 <pbuf_alloc>
 801152c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801152e:	69fb      	ldr	r3, [r7, #28]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d056      	beq.n	80115e2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	895b      	ldrh	r3, [r3, #10]
 8011538:	2b23      	cmp	r3, #35	@ 0x23
 801153a:	d806      	bhi.n	801154a <icmp_send_response+0x3a>
 801153c:	4b2b      	ldr	r3, [pc, #172]	@ (80115ec <icmp_send_response+0xdc>)
 801153e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8011542:	492b      	ldr	r1, [pc, #172]	@ (80115f0 <icmp_send_response+0xe0>)
 8011544:	482b      	ldr	r0, [pc, #172]	@ (80115f4 <icmp_send_response+0xe4>)
 8011546:	f001 fbd7 	bl	8012cf8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	78fa      	ldrb	r2, [r7, #3]
 801155a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	78ba      	ldrb	r2, [r7, #2]
 8011560:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	2200      	movs	r2, #0
 8011566:	711a      	strb	r2, [r3, #4]
 8011568:	2200      	movs	r2, #0
 801156a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	2200      	movs	r2, #0
 8011570:	719a      	strb	r2, [r3, #6]
 8011572:	2200      	movs	r2, #0
 8011574:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	f103 0008 	add.w	r0, r3, #8
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	221c      	movs	r2, #28
 8011584:	4619      	mov	r1, r3
 8011586:	f001 fc92 	bl	8012eae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011590:	f107 030c 	add.w	r3, r7, #12
 8011594:	4618      	mov	r0, r3
 8011596:	f000 f82f 	bl	80115f8 <ip4_route>
 801159a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d01b      	beq.n	80115da <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	2200      	movs	r2, #0
 80115a6:	709a      	strb	r2, [r3, #2]
 80115a8:	2200      	movs	r2, #0
 80115aa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	895b      	ldrh	r3, [r3, #10]
 80115b0:	4619      	mov	r1, r3
 80115b2:	6978      	ldr	r0, [r7, #20]
 80115b4:	f7f5 f8eb 	bl	800678e <inet_chksum>
 80115b8:	4603      	mov	r3, r0
 80115ba:	461a      	mov	r2, r3
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80115c0:	f107 020c 	add.w	r2, r7, #12
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	9302      	str	r3, [sp, #8]
 80115c8:	2301      	movs	r3, #1
 80115ca:	9301      	str	r3, [sp, #4]
 80115cc:	2300      	movs	r3, #0
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	23ff      	movs	r3, #255	@ 0xff
 80115d2:	2100      	movs	r1, #0
 80115d4:	69f8      	ldr	r0, [r7, #28]
 80115d6:	f000 f9eb 	bl	80119b0 <ip4_output_if>
  }
  pbuf_free(q);
 80115da:	69f8      	ldr	r0, [r7, #28]
 80115dc:	f7f6 fc40 	bl	8007e60 <pbuf_free>
 80115e0:	e000      	b.n	80115e4 <icmp_send_response+0xd4>
    return;
 80115e2:	bf00      	nop
}
 80115e4:	3720      	adds	r7, #32
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	08016514 	.word	0x08016514
 80115f0:	080165e0 	.word	0x080165e0
 80115f4:	08016584 	.word	0x08016584

080115f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011600:	4b33      	ldr	r3, [pc, #204]	@ (80116d0 <ip4_route+0xd8>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	60fb      	str	r3, [r7, #12]
 8011606:	e036      	b.n	8011676 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801160e:	f003 0301 	and.w	r3, r3, #1
 8011612:	b2db      	uxtb	r3, r3
 8011614:	2b00      	cmp	r3, #0
 8011616:	d02b      	beq.n	8011670 <ip4_route+0x78>
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801161e:	089b      	lsrs	r3, r3, #2
 8011620:	f003 0301 	and.w	r3, r3, #1
 8011624:	b2db      	uxtb	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d022      	beq.n	8011670 <ip4_route+0x78>
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	3304      	adds	r3, #4
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d01d      	beq.n	8011670 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	3304      	adds	r3, #4
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	405a      	eors	r2, r3
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	3308      	adds	r3, #8
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4013      	ands	r3, r2
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	e038      	b.n	80116c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011656:	f003 0302 	and.w	r3, r3, #2
 801165a:	2b00      	cmp	r3, #0
 801165c:	d108      	bne.n	8011670 <ip4_route+0x78>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	330c      	adds	r3, #12
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	429a      	cmp	r2, r3
 801166a:	d101      	bne.n	8011670 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	e028      	b.n	80116c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	60fb      	str	r3, [r7, #12]
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1c5      	bne.n	8011608 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801167c:	4b15      	ldr	r3, [pc, #84]	@ (80116d4 <ip4_route+0xdc>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d01a      	beq.n	80116ba <ip4_route+0xc2>
 8011684:	4b13      	ldr	r3, [pc, #76]	@ (80116d4 <ip4_route+0xdc>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801168c:	f003 0301 	and.w	r3, r3, #1
 8011690:	2b00      	cmp	r3, #0
 8011692:	d012      	beq.n	80116ba <ip4_route+0xc2>
 8011694:	4b0f      	ldr	r3, [pc, #60]	@ (80116d4 <ip4_route+0xdc>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801169c:	f003 0304 	and.w	r3, r3, #4
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d00a      	beq.n	80116ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80116a4:	4b0b      	ldr	r3, [pc, #44]	@ (80116d4 <ip4_route+0xdc>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	3304      	adds	r3, #4
 80116aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d004      	beq.n	80116ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80116b8:	d101      	bne.n	80116be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80116ba:	2300      	movs	r3, #0
 80116bc:	e001      	b.n	80116c2 <ip4_route+0xca>
  }

  return netif_default;
 80116be:	4b05      	ldr	r3, [pc, #20]	@ (80116d4 <ip4_route+0xdc>)
 80116c0:	681b      	ldr	r3, [r3, #0]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3714      	adds	r7, #20
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr
 80116ce:	bf00      	nop
 80116d0:	200088a4 	.word	0x200088a4
 80116d4:	200088a8 	.word	0x200088a8

080116d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80116e6:	f003 0301 	and.w	r3, r3, #1
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d016      	beq.n	801171e <ip4_input_accept+0x46>
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3304      	adds	r3, #4
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d011      	beq.n	801171e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80116fa:	4b0b      	ldr	r3, [pc, #44]	@ (8011728 <ip4_input_accept+0x50>)
 80116fc:	695a      	ldr	r2, [r3, #20]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	3304      	adds	r3, #4
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	429a      	cmp	r2, r3
 8011706:	d008      	beq.n	801171a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011708:	4b07      	ldr	r3, [pc, #28]	@ (8011728 <ip4_input_accept+0x50>)
 801170a:	695b      	ldr	r3, [r3, #20]
 801170c:	6879      	ldr	r1, [r7, #4]
 801170e:	4618      	mov	r0, r3
 8011710:	f000 fa8c 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 8011714:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011716:	2b00      	cmp	r3, #0
 8011718:	d001      	beq.n	801171e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801171a:	2301      	movs	r3, #1
 801171c:	e000      	b.n	8011720 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	20005310 	.word	0x20005310

0801172c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b088      	sub	sp, #32
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011736:	2301      	movs	r3, #1
 8011738:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	091b      	lsrs	r3, r3, #4
 8011746:	b2db      	uxtb	r3, r3
 8011748:	2b04      	cmp	r3, #4
 801174a:	d004      	beq.n	8011756 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7f6 fb87 	bl	8007e60 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011752:	2300      	movs	r3, #0
 8011754:	e123      	b.n	801199e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011756:	69fb      	ldr	r3, [r7, #28]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	f003 030f 	and.w	r3, r3, #15
 801175e:	b2db      	uxtb	r3, r3
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	b2db      	uxtb	r3, r3
 8011764:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	885b      	ldrh	r3, [r3, #2]
 801176a:	b29b      	uxth	r3, r3
 801176c:	4618      	mov	r0, r3
 801176e:	f7f4 fbd9 	bl	8005f24 <lwip_htons>
 8011772:	4603      	mov	r3, r0
 8011774:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	891b      	ldrh	r3, [r3, #8]
 801177a:	8a3a      	ldrh	r2, [r7, #16]
 801177c:	429a      	cmp	r2, r3
 801177e:	d204      	bcs.n	801178a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8011780:	8a3b      	ldrh	r3, [r7, #16]
 8011782:	4619      	mov	r1, r3
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f7f6 f9e5 	bl	8007b54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	895b      	ldrh	r3, [r3, #10]
 801178e:	8a7a      	ldrh	r2, [r7, #18]
 8011790:	429a      	cmp	r2, r3
 8011792:	d807      	bhi.n	80117a4 <ip4_input+0x78>
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	891b      	ldrh	r3, [r3, #8]
 8011798:	8a3a      	ldrh	r2, [r7, #16]
 801179a:	429a      	cmp	r2, r3
 801179c:	d802      	bhi.n	80117a4 <ip4_input+0x78>
 801179e:	8a7b      	ldrh	r3, [r7, #18]
 80117a0:	2b13      	cmp	r3, #19
 80117a2:	d804      	bhi.n	80117ae <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7f6 fb5b 	bl	8007e60 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80117aa:	2300      	movs	r3, #0
 80117ac:	e0f7      	b.n	801199e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	4a7d      	ldr	r2, [pc, #500]	@ (80119a8 <ip4_input+0x27c>)
 80117b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	4a7b      	ldr	r2, [pc, #492]	@ (80119a8 <ip4_input+0x27c>)
 80117bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80117be:	4b7a      	ldr	r3, [pc, #488]	@ (80119a8 <ip4_input+0x27c>)
 80117c0:	695b      	ldr	r3, [r3, #20]
 80117c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80117c6:	2be0      	cmp	r3, #224	@ 0xe0
 80117c8:	d112      	bne.n	80117f0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80117d0:	f003 0301 	and.w	r3, r3, #1
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d007      	beq.n	80117ea <ip4_input+0xbe>
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	3304      	adds	r3, #4
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d002      	beq.n	80117ea <ip4_input+0xbe>
      netif = inp;
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	61bb      	str	r3, [r7, #24]
 80117e8:	e02a      	b.n	8011840 <ip4_input+0x114>
    } else {
      netif = NULL;
 80117ea:	2300      	movs	r3, #0
 80117ec:	61bb      	str	r3, [r7, #24]
 80117ee:	e027      	b.n	8011840 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80117f0:	6838      	ldr	r0, [r7, #0]
 80117f2:	f7ff ff71 	bl	80116d8 <ip4_input_accept>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d002      	beq.n	8011802 <ip4_input+0xd6>
      netif = inp;
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	61bb      	str	r3, [r7, #24]
 8011800:	e01e      	b.n	8011840 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011802:	2300      	movs	r3, #0
 8011804:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011806:	4b68      	ldr	r3, [pc, #416]	@ (80119a8 <ip4_input+0x27c>)
 8011808:	695b      	ldr	r3, [r3, #20]
 801180a:	b2db      	uxtb	r3, r3
 801180c:	2b7f      	cmp	r3, #127	@ 0x7f
 801180e:	d017      	beq.n	8011840 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011810:	4b66      	ldr	r3, [pc, #408]	@ (80119ac <ip4_input+0x280>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	61bb      	str	r3, [r7, #24]
 8011816:	e00e      	b.n	8011836 <ip4_input+0x10a>
          if (netif == inp) {
 8011818:	69ba      	ldr	r2, [r7, #24]
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	429a      	cmp	r2, r3
 801181e:	d006      	beq.n	801182e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011820:	69b8      	ldr	r0, [r7, #24]
 8011822:	f7ff ff59 	bl	80116d8 <ip4_input_accept>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d108      	bne.n	801183e <ip4_input+0x112>
 801182c:	e000      	b.n	8011830 <ip4_input+0x104>
            continue;
 801182e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	61bb      	str	r3, [r7, #24]
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1ed      	bne.n	8011818 <ip4_input+0xec>
 801183c:	e000      	b.n	8011840 <ip4_input+0x114>
            break;
 801183e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d111      	bne.n	801186a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	7a5b      	ldrb	r3, [r3, #9]
 801184a:	2b11      	cmp	r3, #17
 801184c:	d10d      	bne.n	801186a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801184e:	8a7b      	ldrh	r3, [r7, #18]
 8011850:	69fa      	ldr	r2, [r7, #28]
 8011852:	4413      	add	r3, r2
 8011854:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	885b      	ldrh	r3, [r3, #2]
 801185a:	b29b      	uxth	r3, r3
 801185c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8011860:	d103      	bne.n	801186a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011866:	2300      	movs	r3, #0
 8011868:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d017      	beq.n	80118a0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011870:	4b4d      	ldr	r3, [pc, #308]	@ (80119a8 <ip4_input+0x27c>)
 8011872:	691b      	ldr	r3, [r3, #16]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d013      	beq.n	80118a0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011878:	4b4b      	ldr	r3, [pc, #300]	@ (80119a8 <ip4_input+0x27c>)
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	6839      	ldr	r1, [r7, #0]
 801187e:	4618      	mov	r0, r3
 8011880:	f000 f9d4 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d105      	bne.n	8011896 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801188a:	4b47      	ldr	r3, [pc, #284]	@ (80119a8 <ip4_input+0x27c>)
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011892:	2be0      	cmp	r3, #224	@ 0xe0
 8011894:	d104      	bne.n	80118a0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f7f6 fae2 	bl	8007e60 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	e07e      	b.n	801199e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d104      	bne.n	80118b0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7f6 fada 	bl	8007e60 <pbuf_free>
    return ERR_OK;
 80118ac:	2300      	movs	r3, #0
 80118ae:	e076      	b.n	801199e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	88db      	ldrh	r3, [r3, #6]
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	461a      	mov	r2, r3
 80118b8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80118bc:	4013      	ands	r3, r2
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00b      	beq.n	80118da <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fcf8 	bl	80122b8 <ip4_reass>
 80118c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d101      	bne.n	80118d4 <ip4_input+0x1a8>
      return ERR_OK;
 80118d0:	2300      	movs	r3, #0
 80118d2:	e064      	b.n	801199e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80118da:	4a33      	ldr	r2, [pc, #204]	@ (80119a8 <ip4_input+0x27c>)
 80118dc:	69bb      	ldr	r3, [r7, #24]
 80118de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80118e0:	4a31      	ldr	r2, [pc, #196]	@ (80119a8 <ip4_input+0x27c>)
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80118e6:	4a30      	ldr	r2, [pc, #192]	@ (80119a8 <ip4_input+0x27c>)
 80118e8:	69fb      	ldr	r3, [r7, #28]
 80118ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	f003 030f 	and.w	r3, r3, #15
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	009b      	lsls	r3, r3, #2
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	461a      	mov	r2, r3
 80118fc:	4b2a      	ldr	r3, [pc, #168]	@ (80119a8 <ip4_input+0x27c>)
 80118fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011900:	8a7b      	ldrh	r3, [r7, #18]
 8011902:	4619      	mov	r1, r3
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7f6 fa25 	bl	8007d54 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	7a5b      	ldrb	r3, [r3, #9]
 801190e:	2b11      	cmp	r3, #17
 8011910:	d006      	beq.n	8011920 <ip4_input+0x1f4>
 8011912:	2b11      	cmp	r3, #17
 8011914:	dc13      	bgt.n	801193e <ip4_input+0x212>
 8011916:	2b01      	cmp	r3, #1
 8011918:	d00c      	beq.n	8011934 <ip4_input+0x208>
 801191a:	2b06      	cmp	r3, #6
 801191c:	d005      	beq.n	801192a <ip4_input+0x1fe>
 801191e:	e00e      	b.n	801193e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011920:	6839      	ldr	r1, [r7, #0]
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f7fc fa06 	bl	800dd34 <udp_input>
        break;
 8011928:	e026      	b.n	8011978 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801192a:	6839      	ldr	r1, [r7, #0]
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7f8 fa2b 	bl	8009d88 <tcp_input>
        break;
 8011932:	e021      	b.n	8011978 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011934:	6839      	ldr	r1, [r7, #0]
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7ff fcac 	bl	8011294 <icmp_input>
        break;
 801193c:	e01c      	b.n	8011978 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801193e:	4b1a      	ldr	r3, [pc, #104]	@ (80119a8 <ip4_input+0x27c>)
 8011940:	695b      	ldr	r3, [r3, #20]
 8011942:	69b9      	ldr	r1, [r7, #24]
 8011944:	4618      	mov	r0, r3
 8011946:	f000 f971 	bl	8011c2c <ip4_addr_isbroadcast_u32>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d10f      	bne.n	8011970 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011950:	4b15      	ldr	r3, [pc, #84]	@ (80119a8 <ip4_input+0x27c>)
 8011952:	695b      	ldr	r3, [r3, #20]
 8011954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011958:	2be0      	cmp	r3, #224	@ 0xe0
 801195a:	d009      	beq.n	8011970 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801195c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011960:	4619      	mov	r1, r3
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f7f6 fa69 	bl	8007e3a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011968:	2102      	movs	r1, #2
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7ff fdb0 	bl	80114d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f7f6 fa75 	bl	8007e60 <pbuf_free>
        break;
 8011976:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011978:	4b0b      	ldr	r3, [pc, #44]	@ (80119a8 <ip4_input+0x27c>)
 801197a:	2200      	movs	r2, #0
 801197c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801197e:	4b0a      	ldr	r3, [pc, #40]	@ (80119a8 <ip4_input+0x27c>)
 8011980:	2200      	movs	r2, #0
 8011982:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011984:	4b08      	ldr	r3, [pc, #32]	@ (80119a8 <ip4_input+0x27c>)
 8011986:	2200      	movs	r2, #0
 8011988:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801198a:	4b07      	ldr	r3, [pc, #28]	@ (80119a8 <ip4_input+0x27c>)
 801198c:	2200      	movs	r2, #0
 801198e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011990:	4b05      	ldr	r3, [pc, #20]	@ (80119a8 <ip4_input+0x27c>)
 8011992:	2200      	movs	r2, #0
 8011994:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011996:	4b04      	ldr	r3, [pc, #16]	@ (80119a8 <ip4_input+0x27c>)
 8011998:	2200      	movs	r2, #0
 801199a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801199c:	2300      	movs	r3, #0
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3720      	adds	r7, #32
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	20005310 	.word	0x20005310
 80119ac:	200088a4 	.word	0x200088a4

080119b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b08a      	sub	sp, #40	@ 0x28
 80119b4:	af04      	add	r7, sp, #16
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
 80119bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d009      	beq.n	80119dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d003      	beq.n	80119d6 <ip4_output_if+0x26>
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d102      	bne.n	80119dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80119d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d8:	3304      	adds	r3, #4
 80119da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80119dc:	78fa      	ldrb	r2, [r7, #3]
 80119de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e0:	9302      	str	r3, [sp, #8]
 80119e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80119e6:	9301      	str	r3, [sp, #4]
 80119e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80119ec:	9300      	str	r3, [sp, #0]
 80119ee:	4613      	mov	r3, r2
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	6979      	ldr	r1, [r7, #20]
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f000 f805 	bl	8011a04 <ip4_output_if_src>
 80119fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3718      	adds	r7, #24
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b088      	sub	sp, #32
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	607a      	str	r2, [r7, #4]
 8011a10:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	7b9b      	ldrb	r3, [r3, #14]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d006      	beq.n	8011a2c <ip4_output_if_src+0x28>
 8011a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8011c14 <ip4_output_if_src+0x210>)
 8011a20:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8011a24:	497c      	ldr	r1, [pc, #496]	@ (8011c18 <ip4_output_if_src+0x214>)
 8011a26:	487d      	ldr	r0, [pc, #500]	@ (8011c1c <ip4_output_if_src+0x218>)
 8011a28:	f001 f966 	bl	8012cf8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	f000 80c4 	beq.w	8011bbc <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8011a34:	2314      	movs	r3, #20
 8011a36:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011a38:	2114      	movs	r1, #20
 8011a3a:	68f8      	ldr	r0, [r7, #12]
 8011a3c:	f7f6 f97a 	bl	8007d34 <pbuf_add_header>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d002      	beq.n	8011a4c <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011a46:	f06f 0301 	mvn.w	r3, #1
 8011a4a:	e0df      	b.n	8011c0c <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	895b      	ldrh	r3, [r3, #10]
 8011a56:	2b13      	cmp	r3, #19
 8011a58:	d806      	bhi.n	8011a68 <ip4_output_if_src+0x64>
 8011a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8011c14 <ip4_output_if_src+0x210>)
 8011a5c:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8011a60:	496f      	ldr	r1, [pc, #444]	@ (8011c20 <ip4_output_if_src+0x21c>)
 8011a62:	486e      	ldr	r0, [pc, #440]	@ (8011c1c <ip4_output_if_src+0x218>)
 8011a64:	f001 f948 	bl	8012cf8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	78fa      	ldrb	r2, [r7, #3]
 8011a6c:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011a74:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8011a76:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011a7a:	78fb      	ldrb	r3, [r7, #3]
 8011a7c:	021b      	lsls	r3, r3, #8
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	021b      	lsls	r3, r3, #8
 8011a82:	b21a      	sxth	r2, r3
 8011a84:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8011a88:	78fb      	ldrb	r3, [r7, #3]
 8011a8a:	021b      	lsls	r3, r3, #8
 8011a8c:	430b      	orrs	r3, r1
 8011a8e:	121b      	asrs	r3, r3, #8
 8011a90:	b21b      	sxth	r3, r3
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	b21b      	sxth	r3, r3
 8011a96:	4313      	orrs	r3, r2
 8011a98:	b21b      	sxth	r3, r3
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	69bb      	ldr	r3, [r7, #24]
 8011aaa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	69fa      	ldr	r2, [r7, #28]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	0c1b      	lsrs	r3, r3, #16
 8011abe:	69fa      	ldr	r2, [r7, #28]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011ac4:	8afb      	ldrh	r3, [r7, #22]
 8011ac6:	089b      	lsrs	r3, r3, #2
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	b2db      	uxtb	r3, r3
 8011acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011adc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8011ade:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	021b      	lsls	r3, r3, #8
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	021b      	lsls	r3, r3, #8
 8011aec:	b21a      	sxth	r2, r3
 8011aee:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	021b      	lsls	r3, r3, #8
 8011af8:	430b      	orrs	r3, r1
 8011afa:	121b      	asrs	r3, r3, #8
 8011afc:	b21b      	sxth	r3, r3
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	b21b      	sxth	r3, r3
 8011b02:	4313      	orrs	r3, r2
 8011b04:	b21b      	sxth	r3, r3
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	461a      	mov	r2, r3
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	891b      	ldrh	r3, [r3, #8]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7f4 fa05 	bl	8005f24 <lwip_htons>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	885b      	ldrh	r3, [r3, #2]
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	461a      	mov	r2, r3
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	4413      	add	r3, r2
 8011b2e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	2200      	movs	r2, #0
 8011b34:	719a      	strb	r2, [r3, #6]
 8011b36:	2200      	movs	r2, #0
 8011b38:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8011c24 <ip4_output_if_src+0x220>)
 8011b3c:	881b      	ldrh	r3, [r3, #0]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7f4 f9f0 	bl	8005f24 <lwip_htons>
 8011b44:	4603      	mov	r3, r0
 8011b46:	461a      	mov	r2, r3
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	889b      	ldrh	r3, [r3, #4]
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	461a      	mov	r2, r3
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	4413      	add	r3, r2
 8011b58:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011b5a:	4b32      	ldr	r3, [pc, #200]	@ (8011c24 <ip4_output_if_src+0x220>)
 8011b5c:	881b      	ldrh	r3, [r3, #0]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	4b30      	ldr	r3, [pc, #192]	@ (8011c24 <ip4_output_if_src+0x220>)
 8011b64:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d104      	bne.n	8011b76 <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8011c28 <ip4_output_if_src+0x224>)
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	69bb      	ldr	r3, [r7, #24]
 8011b72:	60da      	str	r2, [r3, #12]
 8011b74:	e003      	b.n	8011b7e <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8011b7e:	69bb      	ldr	r3, [r7, #24]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	69fa      	ldr	r2, [r7, #28]
 8011b86:	4413      	add	r3, r2
 8011b88:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	0c1b      	lsrs	r3, r3, #16
 8011b90:	69fa      	ldr	r2, [r7, #28]
 8011b92:	4413      	add	r3, r2
 8011b94:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	0c1a      	lsrs	r2, r3, #16
 8011b9a:	69fb      	ldr	r3, [r7, #28]
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	4413      	add	r3, r2
 8011ba0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8011ba2:	69fb      	ldr	r3, [r7, #28]
 8011ba4:	0c1b      	lsrs	r3, r3, #16
 8011ba6:	69fa      	ldr	r2, [r7, #28]
 8011ba8:	4413      	add	r3, r2
 8011baa:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	43db      	mvns	r3, r3
 8011bb0:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8011bb2:	69fb      	ldr	r3, [r7, #28]
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	815a      	strh	r2, [r3, #10]
 8011bba:	e00f      	b.n	8011bdc <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	895b      	ldrh	r3, [r3, #10]
 8011bc0:	2b13      	cmp	r3, #19
 8011bc2:	d802      	bhi.n	8011bca <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011bc4:	f06f 0301 	mvn.w	r3, #1
 8011bc8:	e020      	b.n	8011c0c <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011bd0:	69bb      	ldr	r3, [r7, #24]
 8011bd2:	691b      	ldr	r3, [r3, #16]
 8011bd4:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8011bd6:	f107 0310 	add.w	r3, r7, #16
 8011bda:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d00c      	beq.n	8011bfe <ip4_output_if_src+0x1fa>
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	891a      	ldrh	r2, [r3, #8]
 8011be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d906      	bls.n	8011bfe <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8011bf0:	687a      	ldr	r2, [r7, #4]
 8011bf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f000 fd5b 	bl	80126b0 <ip4_frag>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	e006      	b.n	8011c0c <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c00:	695b      	ldr	r3, [r3, #20]
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	68f9      	ldr	r1, [r7, #12]
 8011c06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c08:	4798      	blx	r3
 8011c0a:	4603      	mov	r3, r0
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3720      	adds	r7, #32
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	0801660c 	.word	0x0801660c
 8011c18:	08016640 	.word	0x08016640
 8011c1c:	0801664c 	.word	0x0801664c
 8011c20:	08016674 	.word	0x08016674
 8011c24:	20008a42 	.word	0x20008a42
 8011c28:	08016a6c 	.word	0x08016a6c

08011c2c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b085      	sub	sp, #20
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c40:	d002      	beq.n	8011c48 <ip4_addr_isbroadcast_u32+0x1c>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d101      	bne.n	8011c4c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e02a      	b.n	8011ca2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011c52:	f003 0302 	and.w	r3, r3, #2
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d101      	bne.n	8011c5e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e021      	b.n	8011ca2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	3304      	adds	r3, #4
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	687a      	ldr	r2, [r7, #4]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d101      	bne.n	8011c6e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	e019      	b.n	8011ca2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	3304      	adds	r3, #4
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	405a      	eors	r2, r3
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	3308      	adds	r3, #8
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4013      	ands	r3, r2
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d10d      	bne.n	8011ca0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	3308      	adds	r3, #8
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	43da      	mvns	r2, r3
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	3308      	adds	r3, #8
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d101      	bne.n	8011ca0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	e000      	b.n	8011ca2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011ca0:	2300      	movs	r3, #0
  }
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3714      	adds	r7, #20
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
	...

08011cb0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011cba:	4b12      	ldr	r3, [pc, #72]	@ (8011d04 <ip_reass_tmr+0x54>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011cc0:	e018      	b.n	8011cf4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	7fdb      	ldrb	r3, [r3, #31]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d00b      	beq.n	8011ce2 <ip_reass_tmr+0x32>
      r->timer--;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	7fdb      	ldrb	r3, [r3, #31]
 8011cce:	3b01      	subs	r3, #1
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	60fb      	str	r3, [r7, #12]
 8011ce0:	e008      	b.n	8011cf4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011cec:	68b9      	ldr	r1, [r7, #8]
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 f80a 	bl	8011d08 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d1e3      	bne.n	8011cc2 <ip_reass_tmr+0x12>
    }
  }
}
 8011cfa:	bf00      	nop
 8011cfc:	bf00      	nop
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	20008a44 	.word	0x20008a44

08011d08 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b088      	sub	sp, #32
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011d16:	683a      	ldr	r2, [r7, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d105      	bne.n	8011d2a <ip_reass_free_complete_datagram+0x22>
 8011d1e:	4b45      	ldr	r3, [pc, #276]	@ (8011e34 <ip_reass_free_complete_datagram+0x12c>)
 8011d20:	22ab      	movs	r2, #171	@ 0xab
 8011d22:	4945      	ldr	r1, [pc, #276]	@ (8011e38 <ip_reass_free_complete_datagram+0x130>)
 8011d24:	4845      	ldr	r0, [pc, #276]	@ (8011e3c <ip_reass_free_complete_datagram+0x134>)
 8011d26:	f000 ffe7 	bl	8012cf8 <iprintf>
  if (prev != NULL) {
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00a      	beq.n	8011d46 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d005      	beq.n	8011d46 <ip_reass_free_complete_datagram+0x3e>
 8011d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e34 <ip_reass_free_complete_datagram+0x12c>)
 8011d3c:	22ad      	movs	r2, #173	@ 0xad
 8011d3e:	4940      	ldr	r1, [pc, #256]	@ (8011e40 <ip_reass_free_complete_datagram+0x138>)
 8011d40:	483e      	ldr	r0, [pc, #248]	@ (8011e3c <ip_reass_free_complete_datagram+0x134>)
 8011d42:	f000 ffd9 	bl	8012cf8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	889b      	ldrh	r3, [r3, #4]
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d12a      	bne.n	8011dae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	6858      	ldr	r0, [r3, #4]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	2214      	movs	r2, #20
 8011d70:	4619      	mov	r1, r3
 8011d72:	f001 f89c 	bl	8012eae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011d76:	2101      	movs	r1, #1
 8011d78:	69b8      	ldr	r0, [r7, #24]
 8011d7a:	f7ff fbb9 	bl	80114f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011d7e:	69b8      	ldr	r0, [r7, #24]
 8011d80:	f7f6 f8f6 	bl	8007f70 <pbuf_clen>
 8011d84:	4603      	mov	r3, r0
 8011d86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011d88:	8bfa      	ldrh	r2, [r7, #30]
 8011d8a:	8a7b      	ldrh	r3, [r7, #18]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d92:	db05      	blt.n	8011da0 <ip_reass_free_complete_datagram+0x98>
 8011d94:	4b27      	ldr	r3, [pc, #156]	@ (8011e34 <ip_reass_free_complete_datagram+0x12c>)
 8011d96:	22bc      	movs	r2, #188	@ 0xbc
 8011d98:	492a      	ldr	r1, [pc, #168]	@ (8011e44 <ip_reass_free_complete_datagram+0x13c>)
 8011d9a:	4828      	ldr	r0, [pc, #160]	@ (8011e3c <ip_reass_free_complete_datagram+0x134>)
 8011d9c:	f000 ffac 	bl	8012cf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011da0:	8bfa      	ldrh	r2, [r7, #30]
 8011da2:	8a7b      	ldrh	r3, [r7, #18]
 8011da4:	4413      	add	r3, r2
 8011da6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011da8:	69b8      	ldr	r0, [r7, #24]
 8011daa:	f7f6 f859 	bl	8007e60 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011db4:	e01f      	b.n	8011df6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	f7f6 f8d2 	bl	8007f70 <pbuf_clen>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011dd0:	8bfa      	ldrh	r2, [r7, #30]
 8011dd2:	8a7b      	ldrh	r3, [r7, #18]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011dda:	db05      	blt.n	8011de8 <ip_reass_free_complete_datagram+0xe0>
 8011ddc:	4b15      	ldr	r3, [pc, #84]	@ (8011e34 <ip_reass_free_complete_datagram+0x12c>)
 8011dde:	22cc      	movs	r2, #204	@ 0xcc
 8011de0:	4918      	ldr	r1, [pc, #96]	@ (8011e44 <ip_reass_free_complete_datagram+0x13c>)
 8011de2:	4816      	ldr	r0, [pc, #88]	@ (8011e3c <ip_reass_free_complete_datagram+0x134>)
 8011de4:	f000 ff88 	bl	8012cf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011de8:	8bfa      	ldrh	r2, [r7, #30]
 8011dea:	8a7b      	ldrh	r3, [r7, #18]
 8011dec:	4413      	add	r3, r2
 8011dee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	f7f6 f835 	bl	8007e60 <pbuf_free>
  while (p != NULL) {
 8011df6:	69bb      	ldr	r3, [r7, #24]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d1dc      	bne.n	8011db6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011dfc:	6839      	ldr	r1, [r7, #0]
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 f8c2 	bl	8011f88 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011e04:	4b10      	ldr	r3, [pc, #64]	@ (8011e48 <ip_reass_free_complete_datagram+0x140>)
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	8bfa      	ldrh	r2, [r7, #30]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d905      	bls.n	8011e1a <ip_reass_free_complete_datagram+0x112>
 8011e0e:	4b09      	ldr	r3, [pc, #36]	@ (8011e34 <ip_reass_free_complete_datagram+0x12c>)
 8011e10:	22d2      	movs	r2, #210	@ 0xd2
 8011e12:	490e      	ldr	r1, [pc, #56]	@ (8011e4c <ip_reass_free_complete_datagram+0x144>)
 8011e14:	4809      	ldr	r0, [pc, #36]	@ (8011e3c <ip_reass_free_complete_datagram+0x134>)
 8011e16:	f000 ff6f 	bl	8012cf8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8011e48 <ip_reass_free_complete_datagram+0x140>)
 8011e1c:	881a      	ldrh	r2, [r3, #0]
 8011e1e:	8bfb      	ldrh	r3, [r7, #30]
 8011e20:	1ad3      	subs	r3, r2, r3
 8011e22:	b29a      	uxth	r2, r3
 8011e24:	4b08      	ldr	r3, [pc, #32]	@ (8011e48 <ip_reass_free_complete_datagram+0x140>)
 8011e26:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011e28:	8bfb      	ldrh	r3, [r7, #30]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3720      	adds	r7, #32
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	080166a4 	.word	0x080166a4
 8011e38:	080166e0 	.word	0x080166e0
 8011e3c:	080166ec 	.word	0x080166ec
 8011e40:	08016714 	.word	0x08016714
 8011e44:	08016728 	.word	0x08016728
 8011e48:	20008a48 	.word	0x20008a48
 8011e4c:	08016748 	.word	0x08016748

08011e50 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b08a      	sub	sp, #40	@ 0x28
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011e62:	2300      	movs	r3, #0
 8011e64:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011e66:	2300      	movs	r3, #0
 8011e68:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011e6e:	4b28      	ldr	r3, [pc, #160]	@ (8011f10 <ip_reass_remove_oldest_datagram+0xc0>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011e74:	e030      	b.n	8011ed8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e78:	695a      	ldr	r2, [r3, #20]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d10c      	bne.n	8011e9c <ip_reass_remove_oldest_datagram+0x4c>
 8011e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e84:	699a      	ldr	r2, [r3, #24]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	691b      	ldr	r3, [r3, #16]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d106      	bne.n	8011e9c <ip_reass_remove_oldest_datagram+0x4c>
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e90:	899a      	ldrh	r2, [r3, #12]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	889b      	ldrh	r3, [r3, #4]
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d014      	beq.n	8011ec6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011ea2:	6a3b      	ldr	r3, [r7, #32]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d104      	bne.n	8011eb2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eaa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	61bb      	str	r3, [r7, #24]
 8011eb0:	e009      	b.n	8011ec6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb4:	7fda      	ldrb	r2, [r3, #31]
 8011eb6:	6a3b      	ldr	r3, [r7, #32]
 8011eb8:	7fdb      	ldrb	r3, [r3, #31]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d803      	bhi.n	8011ec6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d1cb      	bne.n	8011e76 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011ede:	6a3b      	ldr	r3, [r7, #32]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d008      	beq.n	8011ef6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011ee4:	69b9      	ldr	r1, [r7, #24]
 8011ee6:	6a38      	ldr	r0, [r7, #32]
 8011ee8:	f7ff ff0e 	bl	8011d08 <ip_reass_free_complete_datagram>
 8011eec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011eee:	697a      	ldr	r2, [r7, #20]
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011ef6:	697a      	ldr	r2, [r7, #20]
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	da02      	bge.n	8011f04 <ip_reass_remove_oldest_datagram+0xb4>
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	dcac      	bgt.n	8011e5e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011f04:	697b      	ldr	r3, [r7, #20]
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3728      	adds	r7, #40	@ 0x28
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	20008a44 	.word	0x20008a44

08011f14 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f1e:	2004      	movs	r0, #4
 8011f20:	f7f5 f892 	bl	8007048 <memp_malloc>
 8011f24:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d110      	bne.n	8011f4e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011f2c:	6839      	ldr	r1, [r7, #0]
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ff ff8e 	bl	8011e50 <ip_reass_remove_oldest_datagram>
 8011f34:	4602      	mov	r2, r0
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	4293      	cmp	r3, r2
 8011f3a:	dc03      	bgt.n	8011f44 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f3c:	2004      	movs	r0, #4
 8011f3e:	f7f5 f883 	bl	8007048 <memp_malloc>
 8011f42:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d101      	bne.n	8011f4e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	e016      	b.n	8011f7c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011f4e:	2220      	movs	r2, #32
 8011f50:	2100      	movs	r1, #0
 8011f52:	68f8      	ldr	r0, [r7, #12]
 8011f54:	f000 ff35 	bl	8012dc2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	220f      	movs	r2, #15
 8011f5c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011f5e:	4b09      	ldr	r3, [pc, #36]	@ (8011f84 <ip_reass_enqueue_new_datagram+0x70>)
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011f66:	4a07      	ldr	r2, [pc, #28]	@ (8011f84 <ip_reass_enqueue_new_datagram+0x70>)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	3308      	adds	r3, #8
 8011f70:	2214      	movs	r2, #20
 8011f72:	6879      	ldr	r1, [r7, #4]
 8011f74:	4618      	mov	r0, r3
 8011f76:	f000 ff9a 	bl	8012eae <memcpy>
  return ipr;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3710      	adds	r7, #16
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	20008a44 	.word	0x20008a44

08011f88 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011f92:	4b10      	ldr	r3, [pc, #64]	@ (8011fd4 <ip_reass_dequeue_datagram+0x4c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d104      	bne.n	8011fa6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8011fd4 <ip_reass_dequeue_datagram+0x4c>)
 8011fa2:	6013      	str	r3, [r2, #0]
 8011fa4:	e00d      	b.n	8011fc2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d106      	bne.n	8011fba <ip_reass_dequeue_datagram+0x32>
 8011fac:	4b0a      	ldr	r3, [pc, #40]	@ (8011fd8 <ip_reass_dequeue_datagram+0x50>)
 8011fae:	f240 1245 	movw	r2, #325	@ 0x145
 8011fb2:	490a      	ldr	r1, [pc, #40]	@ (8011fdc <ip_reass_dequeue_datagram+0x54>)
 8011fb4:	480a      	ldr	r0, [pc, #40]	@ (8011fe0 <ip_reass_dequeue_datagram+0x58>)
 8011fb6:	f000 fe9f 	bl	8012cf8 <iprintf>
    prev->next = ipr->next;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011fc2:	6879      	ldr	r1, [r7, #4]
 8011fc4:	2004      	movs	r0, #4
 8011fc6:	f7f5 f8af 	bl	8007128 <memp_free>
}
 8011fca:	bf00      	nop
 8011fcc:	3708      	adds	r7, #8
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	20008a44 	.word	0x20008a44
 8011fd8:	080166a4 	.word	0x080166a4
 8011fdc:	0801676c 	.word	0x0801676c
 8011fe0:	080166ec 	.word	0x080166ec

08011fe4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b08c      	sub	sp, #48	@ 0x30
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	885b      	ldrh	r3, [r3, #2]
 8012002:	b29b      	uxth	r3, r3
 8012004:	4618      	mov	r0, r3
 8012006:	f7f3 ff8d 	bl	8005f24 <lwip_htons>
 801200a:	4603      	mov	r3, r0
 801200c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801200e:	69fb      	ldr	r3, [r7, #28]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	f003 030f 	and.w	r3, r3, #15
 8012016:	b2db      	uxtb	r3, r3
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801201c:	7e7b      	ldrb	r3, [r7, #25]
 801201e:	b29b      	uxth	r3, r3
 8012020:	8b7a      	ldrh	r2, [r7, #26]
 8012022:	429a      	cmp	r2, r3
 8012024:	d202      	bcs.n	801202c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012026:	f04f 33ff 	mov.w	r3, #4294967295
 801202a:	e135      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801202c:	7e7b      	ldrb	r3, [r7, #25]
 801202e:	b29b      	uxth	r3, r3
 8012030:	8b7a      	ldrh	r2, [r7, #26]
 8012032:	1ad3      	subs	r3, r2, r3
 8012034:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	88db      	ldrh	r3, [r3, #6]
 801203a:	b29b      	uxth	r3, r3
 801203c:	4618      	mov	r0, r3
 801203e:	f7f3 ff71 	bl	8005f24 <lwip_htons>
 8012042:	4603      	mov	r3, r0
 8012044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012048:	b29b      	uxth	r3, r3
 801204a:	00db      	lsls	r3, r3, #3
 801204c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8012054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012056:	2200      	movs	r2, #0
 8012058:	701a      	strb	r2, [r3, #0]
 801205a:	2200      	movs	r2, #0
 801205c:	705a      	strb	r2, [r3, #1]
 801205e:	2200      	movs	r2, #0
 8012060:	709a      	strb	r2, [r3, #2]
 8012062:	2200      	movs	r2, #0
 8012064:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012068:	8afa      	ldrh	r2, [r7, #22]
 801206a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801206c:	8afa      	ldrh	r2, [r7, #22]
 801206e:	8b7b      	ldrh	r3, [r7, #26]
 8012070:	4413      	add	r3, r2
 8012072:	b29a      	uxth	r2, r3
 8012074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012076:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801207a:	88db      	ldrh	r3, [r3, #6]
 801207c:	b29b      	uxth	r3, r3
 801207e:	8afa      	ldrh	r2, [r7, #22]
 8012080:	429a      	cmp	r2, r3
 8012082:	d902      	bls.n	801208a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012084:	f04f 33ff 	mov.w	r3, #4294967295
 8012088:	e106      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012090:	e068      	b.n	8012164 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801209a:	889b      	ldrh	r3, [r3, #4]
 801209c:	b29a      	uxth	r2, r3
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	889b      	ldrh	r3, [r3, #4]
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d235      	bcs.n	8012114 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80120a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80120ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d020      	beq.n	80120f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80120b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b6:	889b      	ldrh	r3, [r3, #4]
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120bc:	88db      	ldrh	r3, [r3, #6]
 80120be:	b29b      	uxth	r3, r3
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d307      	bcc.n	80120d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80120c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120c6:	88db      	ldrh	r3, [r3, #6]
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	889b      	ldrh	r3, [r3, #4]
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d902      	bls.n	80120da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120d4:	f04f 33ff 	mov.w	r3, #4294967295
 80120d8:	e0de      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80120da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120dc:	68ba      	ldr	r2, [r7, #8]
 80120de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80120e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e2:	88db      	ldrh	r3, [r3, #6]
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120e8:	889b      	ldrh	r3, [r3, #4]
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d03d      	beq.n	801216c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80120f0:	2300      	movs	r3, #0
 80120f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80120f4:	e03a      	b.n	801216c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80120f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f8:	88db      	ldrh	r3, [r3, #6]
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	889b      	ldrh	r3, [r3, #4]
 8012100:	b29b      	uxth	r3, r3
 8012102:	429a      	cmp	r2, r3
 8012104:	d902      	bls.n	801210c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012106:	f04f 33ff 	mov.w	r3, #4294967295
 801210a:	e0c5      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	68ba      	ldr	r2, [r7, #8]
 8012110:	605a      	str	r2, [r3, #4]
      break;
 8012112:	e02b      	b.n	801216c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012116:	889b      	ldrh	r3, [r3, #4]
 8012118:	b29a      	uxth	r2, r3
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	889b      	ldrh	r3, [r3, #4]
 801211e:	b29b      	uxth	r3, r3
 8012120:	429a      	cmp	r2, r3
 8012122:	d102      	bne.n	801212a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012124:	f04f 33ff 	mov.w	r3, #4294967295
 8012128:	e0b6      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801212a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801212c:	889b      	ldrh	r3, [r3, #4]
 801212e:	b29a      	uxth	r2, r3
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	88db      	ldrh	r3, [r3, #6]
 8012134:	b29b      	uxth	r3, r3
 8012136:	429a      	cmp	r2, r3
 8012138:	d202      	bcs.n	8012140 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801213a:	f04f 33ff 	mov.w	r3, #4294967295
 801213e:	e0ab      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012142:	2b00      	cmp	r3, #0
 8012144:	d009      	beq.n	801215a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012148:	88db      	ldrh	r3, [r3, #6]
 801214a:	b29a      	uxth	r2, r3
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	889b      	ldrh	r3, [r3, #4]
 8012150:	b29b      	uxth	r3, r3
 8012152:	429a      	cmp	r2, r3
 8012154:	d001      	beq.n	801215a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012156:	2300      	movs	r3, #0
 8012158:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8012164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012166:	2b00      	cmp	r3, #0
 8012168:	d193      	bne.n	8012092 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801216a:	e000      	b.n	801216e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801216c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012170:	2b00      	cmp	r3, #0
 8012172:	d12d      	bne.n	80121d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012176:	2b00      	cmp	r3, #0
 8012178:	d01c      	beq.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801217c:	88db      	ldrh	r3, [r3, #6]
 801217e:	b29a      	uxth	r2, r3
 8012180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012182:	889b      	ldrh	r3, [r3, #4]
 8012184:	b29b      	uxth	r3, r3
 8012186:	429a      	cmp	r2, r3
 8012188:	d906      	bls.n	8012198 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801218a:	4b45      	ldr	r3, [pc, #276]	@ (80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801218c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8012190:	4944      	ldr	r1, [pc, #272]	@ (80122a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012192:	4845      	ldr	r0, [pc, #276]	@ (80122a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012194:	f000 fdb0 	bl	8012cf8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801219a:	68ba      	ldr	r2, [r7, #8]
 801219c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a0:	88db      	ldrh	r3, [r3, #6]
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121a6:	889b      	ldrh	r3, [r3, #4]
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d010      	beq.n	80121d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80121ae:	2300      	movs	r3, #0
 80121b0:	623b      	str	r3, [r7, #32]
 80121b2:	e00d      	b.n	80121d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d006      	beq.n	80121ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80121bc:	4b38      	ldr	r3, [pc, #224]	@ (80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121be:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80121c2:	493a      	ldr	r1, [pc, #232]	@ (80122ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80121c4:	4838      	ldr	r0, [pc, #224]	@ (80122a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121c6:	f000 fd97 	bl	8012cf8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	68ba      	ldr	r2, [r7, #8]
 80121ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d105      	bne.n	80121e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	7f9b      	ldrb	r3, [r3, #30]
 80121da:	f003 0301 	and.w	r3, r3, #1
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d059      	beq.n	8012296 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80121e2:	6a3b      	ldr	r3, [r7, #32]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d04f      	beq.n	8012288 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d006      	beq.n	80121fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	889b      	ldrh	r3, [r3, #4]
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d002      	beq.n	8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	623b      	str	r3, [r7, #32]
 8012202:	e041      	b.n	8012288 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012206:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8012208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801220e:	e012      	b.n	8012236 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8012216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012218:	88db      	ldrh	r3, [r3, #6]
 801221a:	b29a      	uxth	r2, r3
 801221c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801221e:	889b      	ldrh	r3, [r3, #4]
 8012220:	b29b      	uxth	r3, r3
 8012222:	429a      	cmp	r2, r3
 8012224:	d002      	beq.n	801222c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012226:	2300      	movs	r3, #0
 8012228:	623b      	str	r3, [r7, #32]
            break;
 801222a:	e007      	b.n	801223c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8012230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8012236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012238:	2b00      	cmp	r3, #0
 801223a:	d1e9      	bne.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801223c:	6a3b      	ldr	r3, [r7, #32]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d022      	beq.n	8012288 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d106      	bne.n	8012258 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801224a:	4b15      	ldr	r3, [pc, #84]	@ (80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801224c:	f240 12df 	movw	r2, #479	@ 0x1df
 8012250:	4917      	ldr	r1, [pc, #92]	@ (80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012252:	4815      	ldr	r0, [pc, #84]	@ (80122a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012254:	f000 fd50 	bl	8012cf8 <iprintf>
          LWIP_ASSERT("sanity check",
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012260:	429a      	cmp	r2, r3
 8012262:	d106      	bne.n	8012272 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012264:	4b0e      	ldr	r3, [pc, #56]	@ (80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012266:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801226a:	4911      	ldr	r1, [pc, #68]	@ (80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801226c:	480e      	ldr	r0, [pc, #56]	@ (80122a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801226e:	f000 fd43 	bl	8012cf8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d006      	beq.n	8012288 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801227a:	4b09      	ldr	r3, [pc, #36]	@ (80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801227c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8012280:	490c      	ldr	r1, [pc, #48]	@ (80122b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012282:	4809      	ldr	r0, [pc, #36]	@ (80122a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012284:	f000 fd38 	bl	8012cf8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012288:	6a3b      	ldr	r3, [r7, #32]
 801228a:	2b00      	cmp	r3, #0
 801228c:	bf14      	ite	ne
 801228e:	2301      	movne	r3, #1
 8012290:	2300      	moveq	r3, #0
 8012292:	b2db      	uxtb	r3, r3
 8012294:	e000      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012296:	2300      	movs	r3, #0
}
 8012298:	4618      	mov	r0, r3
 801229a:	3730      	adds	r7, #48	@ 0x30
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	080166a4 	.word	0x080166a4
 80122a4:	08016788 	.word	0x08016788
 80122a8:	080166ec 	.word	0x080166ec
 80122ac:	080167a8 	.word	0x080167a8
 80122b0:	080167e0 	.word	0x080167e0
 80122b4:	080167f0 	.word	0x080167f0

080122b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b08e      	sub	sp, #56	@ 0x38
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80122c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	f003 030f 	and.w	r3, r3, #15
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	2b14      	cmp	r3, #20
 80122d6:	f040 8179 	bne.w	80125cc <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80122da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122dc:	88db      	ldrh	r3, [r3, #6]
 80122de:	b29b      	uxth	r3, r3
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7f3 fe1f 	bl	8005f24 <lwip_htons>
 80122e6:	4603      	mov	r3, r0
 80122e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	00db      	lsls	r3, r3, #3
 80122f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80122f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f4:	885b      	ldrh	r3, [r3, #2]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7f3 fe13 	bl	8005f24 <lwip_htons>
 80122fe:	4603      	mov	r3, r0
 8012300:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	f003 030f 	and.w	r3, r3, #15
 801230a:	b2db      	uxtb	r3, r3
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8012312:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012316:	b29b      	uxth	r3, r3
 8012318:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801231a:	429a      	cmp	r2, r3
 801231c:	f0c0 8158 	bcc.w	80125d0 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012320:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012324:	b29b      	uxth	r3, r3
 8012326:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f7f5 fe1f 	bl	8007f70 <pbuf_clen>
 8012332:	4603      	mov	r3, r0
 8012334:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012336:	4b90      	ldr	r3, [pc, #576]	@ (8012578 <ip4_reass+0x2c0>)
 8012338:	881b      	ldrh	r3, [r3, #0]
 801233a:	461a      	mov	r2, r3
 801233c:	8c3b      	ldrh	r3, [r7, #32]
 801233e:	4413      	add	r3, r2
 8012340:	2b0a      	cmp	r3, #10
 8012342:	dd10      	ble.n	8012366 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012344:	8c3b      	ldrh	r3, [r7, #32]
 8012346:	4619      	mov	r1, r3
 8012348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801234a:	f7ff fd81 	bl	8011e50 <ip_reass_remove_oldest_datagram>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	f000 813f 	beq.w	80125d4 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012356:	4b88      	ldr	r3, [pc, #544]	@ (8012578 <ip4_reass+0x2c0>)
 8012358:	881b      	ldrh	r3, [r3, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	8c3b      	ldrh	r3, [r7, #32]
 801235e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012360:	2b0a      	cmp	r3, #10
 8012362:	f300 8137 	bgt.w	80125d4 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012366:	4b85      	ldr	r3, [pc, #532]	@ (801257c <ip4_reass+0x2c4>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	633b      	str	r3, [r7, #48]	@ 0x30
 801236c:	e015      	b.n	801239a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012370:	695a      	ldr	r2, [r3, #20]
 8012372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	429a      	cmp	r2, r3
 8012378:	d10c      	bne.n	8012394 <ip4_reass+0xdc>
 801237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801237c:	699a      	ldr	r2, [r3, #24]
 801237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012380:	691b      	ldr	r3, [r3, #16]
 8012382:	429a      	cmp	r2, r3
 8012384:	d106      	bne.n	8012394 <ip4_reass+0xdc>
 8012386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012388:	899a      	ldrh	r2, [r3, #12]
 801238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801238c:	889b      	ldrh	r3, [r3, #4]
 801238e:	b29b      	uxth	r3, r3
 8012390:	429a      	cmp	r2, r3
 8012392:	d006      	beq.n	80123a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	633b      	str	r3, [r7, #48]	@ 0x30
 801239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1e6      	bne.n	801236e <ip4_reass+0xb6>
 80123a0:	e000      	b.n	80123a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80123a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80123a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d109      	bne.n	80123be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80123aa:	8c3b      	ldrh	r3, [r7, #32]
 80123ac:	4619      	mov	r1, r3
 80123ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123b0:	f7ff fdb0 	bl	8011f14 <ip_reass_enqueue_new_datagram>
 80123b4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80123b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d11c      	bne.n	80123f6 <ip4_reass+0x13e>
      goto nullreturn;
 80123bc:	e10d      	b.n	80125da <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c0:	88db      	ldrh	r3, [r3, #6]
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7f3 fdad 	bl	8005f24 <lwip_htons>
 80123ca:	4603      	mov	r3, r0
 80123cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d110      	bne.n	80123f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80123d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d6:	89db      	ldrh	r3, [r3, #14]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f3 fda3 	bl	8005f24 <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d006      	beq.n	80123f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80123e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ea:	3308      	adds	r3, #8
 80123ec:	2214      	movs	r2, #20
 80123ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80123f0:	4618      	mov	r0, r3
 80123f2:	f000 fd5c 	bl	8012eae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80123f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f8:	88db      	ldrh	r3, [r3, #6]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	f003 0320 	and.w	r3, r3, #32
 8012400:	2b00      	cmp	r3, #0
 8012402:	bf0c      	ite	eq
 8012404:	2301      	moveq	r3, #1
 8012406:	2300      	movne	r3, #0
 8012408:	b2db      	uxtb	r3, r3
 801240a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d00e      	beq.n	8012430 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012412:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012416:	4413      	add	r3, r2
 8012418:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801241a:	8b7a      	ldrh	r2, [r7, #26]
 801241c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801241e:	429a      	cmp	r2, r3
 8012420:	f0c0 80a8 	bcc.w	8012574 <ip4_reass+0x2bc>
 8012424:	8b7b      	ldrh	r3, [r7, #26]
 8012426:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801242a:	4293      	cmp	r3, r2
 801242c:	f200 80a2 	bhi.w	8012574 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012430:	69fa      	ldr	r2, [r7, #28]
 8012432:	6879      	ldr	r1, [r7, #4]
 8012434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012436:	f7ff fdd5 	bl	8011fe4 <ip_reass_chain_frag_into_datagram_and_validate>
 801243a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012442:	f000 80a3 	beq.w	801258c <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012446:	4b4c      	ldr	r3, [pc, #304]	@ (8012578 <ip4_reass+0x2c0>)
 8012448:	881a      	ldrh	r2, [r3, #0]
 801244a:	8c3b      	ldrh	r3, [r7, #32]
 801244c:	4413      	add	r3, r2
 801244e:	b29a      	uxth	r2, r3
 8012450:	4b49      	ldr	r3, [pc, #292]	@ (8012578 <ip4_reass+0x2c0>)
 8012452:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00d      	beq.n	8012476 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801245a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801245c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801245e:	4413      	add	r3, r2
 8012460:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012464:	8a7a      	ldrh	r2, [r7, #18]
 8012466:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801246a:	7f9b      	ldrb	r3, [r3, #30]
 801246c:	f043 0301 	orr.w	r3, r3, #1
 8012470:	b2da      	uxtb	r2, r3
 8012472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012474:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	2b01      	cmp	r3, #1
 801247a:	d179      	bne.n	8012570 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801247e:	8b9b      	ldrh	r3, [r3, #28]
 8012480:	3314      	adds	r3, #20
 8012482:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801248e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012498:	3308      	adds	r3, #8
 801249a:	2214      	movs	r2, #20
 801249c:	4619      	mov	r1, r3
 801249e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80124a0:	f000 fd05 	bl	8012eae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80124a4:	8a3b      	ldrh	r3, [r7, #16]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7f3 fd3c 	bl	8005f24 <lwip_htons>
 80124ac:	4603      	mov	r3, r0
 80124ae:	461a      	mov	r2, r3
 80124b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80124b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124b6:	2200      	movs	r2, #0
 80124b8:	719a      	strb	r2, [r3, #6]
 80124ba:	2200      	movs	r2, #0
 80124bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80124be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124c0:	2200      	movs	r2, #0
 80124c2:	729a      	strb	r2, [r3, #10]
 80124c4:	2200      	movs	r2, #0
 80124c6:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80124c8:	2114      	movs	r1, #20
 80124ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80124cc:	f7f4 f95f 	bl	800678e <inet_chksum>
 80124d0:	4603      	mov	r3, r0
 80124d2:	461a      	mov	r2, r3
 80124d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124d6:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80124d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80124de:	e00d      	b.n	80124fc <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 80124e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80124e6:	2114      	movs	r1, #20
 80124e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80124ea:	f7f5 fc33 	bl	8007d54 <pbuf_remove_header>
      pbuf_cat(p, r);
 80124ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f7f5 fd77 	bl	8007fe4 <pbuf_cat>
      r = iprh->next_pbuf;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80124fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d1ee      	bne.n	80124e0 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012502:	4b1e      	ldr	r3, [pc, #120]	@ (801257c <ip4_reass+0x2c4>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012508:	429a      	cmp	r2, r3
 801250a:	d102      	bne.n	8012512 <ip4_reass+0x25a>
      ipr_prev = NULL;
 801250c:	2300      	movs	r3, #0
 801250e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012510:	e010      	b.n	8012534 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012512:	4b1a      	ldr	r3, [pc, #104]	@ (801257c <ip4_reass+0x2c4>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012518:	e007      	b.n	801252a <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 801251a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012520:	429a      	cmp	r2, r3
 8012522:	d006      	beq.n	8012532 <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801252a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801252c:	2b00      	cmp	r3, #0
 801252e:	d1f4      	bne.n	801251a <ip4_reass+0x262>
 8012530:	e000      	b.n	8012534 <ip4_reass+0x27c>
          break;
 8012532:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012534:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012538:	f7ff fd26 	bl	8011f88 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f7f5 fd17 	bl	8007f70 <pbuf_clen>
 8012542:	4603      	mov	r3, r0
 8012544:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012546:	4b0c      	ldr	r3, [pc, #48]	@ (8012578 <ip4_reass+0x2c0>)
 8012548:	881b      	ldrh	r3, [r3, #0]
 801254a:	8c3a      	ldrh	r2, [r7, #32]
 801254c:	429a      	cmp	r2, r3
 801254e:	d906      	bls.n	801255e <ip4_reass+0x2a6>
 8012550:	4b0b      	ldr	r3, [pc, #44]	@ (8012580 <ip4_reass+0x2c8>)
 8012552:	f240 229b 	movw	r2, #667	@ 0x29b
 8012556:	490b      	ldr	r1, [pc, #44]	@ (8012584 <ip4_reass+0x2cc>)
 8012558:	480b      	ldr	r0, [pc, #44]	@ (8012588 <ip4_reass+0x2d0>)
 801255a:	f000 fbcd 	bl	8012cf8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801255e:	4b06      	ldr	r3, [pc, #24]	@ (8012578 <ip4_reass+0x2c0>)
 8012560:	881a      	ldrh	r2, [r3, #0]
 8012562:	8c3b      	ldrh	r3, [r7, #32]
 8012564:	1ad3      	subs	r3, r2, r3
 8012566:	b29a      	uxth	r2, r3
 8012568:	4b03      	ldr	r3, [pc, #12]	@ (8012578 <ip4_reass+0x2c0>)
 801256a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	e038      	b.n	80125e2 <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012570:	2300      	movs	r3, #0
 8012572:	e036      	b.n	80125e2 <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8012574:	bf00      	nop
 8012576:	e00a      	b.n	801258e <ip4_reass+0x2d6>
 8012578:	20008a48 	.word	0x20008a48
 801257c:	20008a44 	.word	0x20008a44
 8012580:	080166a4 	.word	0x080166a4
 8012584:	08016814 	.word	0x08016814
 8012588:	080166ec 	.word	0x080166ec
    goto nullreturn_ipr;
 801258c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012590:	2b00      	cmp	r3, #0
 8012592:	d106      	bne.n	80125a2 <ip4_reass+0x2ea>
 8012594:	4b15      	ldr	r3, [pc, #84]	@ (80125ec <ip4_reass+0x334>)
 8012596:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801259a:	4915      	ldr	r1, [pc, #84]	@ (80125f0 <ip4_reass+0x338>)
 801259c:	4815      	ldr	r0, [pc, #84]	@ (80125f4 <ip4_reass+0x33c>)
 801259e:	f000 fbab 	bl	8012cf8 <iprintf>
  if (ipr->p == NULL) {
 80125a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d116      	bne.n	80125d8 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80125aa:	4b13      	ldr	r3, [pc, #76]	@ (80125f8 <ip4_reass+0x340>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d006      	beq.n	80125c2 <ip4_reass+0x30a>
 80125b4:	4b0d      	ldr	r3, [pc, #52]	@ (80125ec <ip4_reass+0x334>)
 80125b6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80125ba:	4910      	ldr	r1, [pc, #64]	@ (80125fc <ip4_reass+0x344>)
 80125bc:	480d      	ldr	r0, [pc, #52]	@ (80125f4 <ip4_reass+0x33c>)
 80125be:	f000 fb9b 	bl	8012cf8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80125c2:	2100      	movs	r1, #0
 80125c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80125c6:	f7ff fcdf 	bl	8011f88 <ip_reass_dequeue_datagram>
 80125ca:	e006      	b.n	80125da <ip4_reass+0x322>
    goto nullreturn;
 80125cc:	bf00      	nop
 80125ce:	e004      	b.n	80125da <ip4_reass+0x322>
    goto nullreturn;
 80125d0:	bf00      	nop
 80125d2:	e002      	b.n	80125da <ip4_reass+0x322>
      goto nullreturn;
 80125d4:	bf00      	nop
 80125d6:	e000      	b.n	80125da <ip4_reass+0x322>
  }

nullreturn:
 80125d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7f5 fc40 	bl	8007e60 <pbuf_free>
  return NULL;
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3738      	adds	r7, #56	@ 0x38
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	080166a4 	.word	0x080166a4
 80125f0:	08016830 	.word	0x08016830
 80125f4:	080166ec 	.word	0x080166ec
 80125f8:	20008a44 	.word	0x20008a44
 80125fc:	0801683c 	.word	0x0801683c

08012600 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012604:	2005      	movs	r0, #5
 8012606:	f7f4 fd1f 	bl	8007048 <memp_malloc>
 801260a:	4603      	mov	r3, r0
}
 801260c:	4618      	mov	r0, r3
 801260e:	bd80      	pop	{r7, pc}

08012610 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d106      	bne.n	801262c <ip_frag_free_pbuf_custom_ref+0x1c>
 801261e:	4b07      	ldr	r3, [pc, #28]	@ (801263c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012620:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012624:	4906      	ldr	r1, [pc, #24]	@ (8012640 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012626:	4807      	ldr	r0, [pc, #28]	@ (8012644 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012628:	f000 fb66 	bl	8012cf8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801262c:	6879      	ldr	r1, [r7, #4]
 801262e:	2005      	movs	r0, #5
 8012630:	f7f4 fd7a 	bl	8007128 <memp_free>
}
 8012634:	bf00      	nop
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	080166a4 	.word	0x080166a4
 8012640:	0801685c 	.word	0x0801685c
 8012644:	080166ec 	.word	0x080166ec

08012648 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <ipfrag_free_pbuf_custom+0x20>
 801265a:	4b11      	ldr	r3, [pc, #68]	@ (80126a0 <ipfrag_free_pbuf_custom+0x58>)
 801265c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012660:	4910      	ldr	r1, [pc, #64]	@ (80126a4 <ipfrag_free_pbuf_custom+0x5c>)
 8012662:	4811      	ldr	r0, [pc, #68]	@ (80126a8 <ipfrag_free_pbuf_custom+0x60>)
 8012664:	f000 fb48 	bl	8012cf8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012668:	68fa      	ldr	r2, [r7, #12]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	429a      	cmp	r2, r3
 801266e:	d006      	beq.n	801267e <ipfrag_free_pbuf_custom+0x36>
 8012670:	4b0b      	ldr	r3, [pc, #44]	@ (80126a0 <ipfrag_free_pbuf_custom+0x58>)
 8012672:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8012676:	490d      	ldr	r1, [pc, #52]	@ (80126ac <ipfrag_free_pbuf_custom+0x64>)
 8012678:	480b      	ldr	r0, [pc, #44]	@ (80126a8 <ipfrag_free_pbuf_custom+0x60>)
 801267a:	f000 fb3d 	bl	8012cf8 <iprintf>
  if (pcr->original != NULL) {
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	695b      	ldr	r3, [r3, #20]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d004      	beq.n	8012690 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	695b      	ldr	r3, [r3, #20]
 801268a:	4618      	mov	r0, r3
 801268c:	f7f5 fbe8 	bl	8007e60 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f7ff ffbd 	bl	8012610 <ip_frag_free_pbuf_custom_ref>
}
 8012696:	bf00      	nop
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	080166a4 	.word	0x080166a4
 80126a4:	08016868 	.word	0x08016868
 80126a8:	080166ec 	.word	0x080166ec
 80126ac:	08016874 	.word	0x08016874

080126b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b094      	sub	sp, #80	@ 0x50
 80126b4:	af02      	add	r7, sp, #8
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80126c6:	3b14      	subs	r3, #20
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	da00      	bge.n	80126ce <ip4_frag+0x1e>
 80126cc:	3307      	adds	r3, #7
 80126ce:	10db      	asrs	r3, r3, #3
 80126d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80126d2:	2314      	movs	r3, #20
 80126d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80126dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126de:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80126e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	f003 030f 	and.w	r3, r3, #15
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	2b14      	cmp	r3, #20
 80126f0:	d002      	beq.n	80126f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80126f2:	f06f 0305 	mvn.w	r3, #5
 80126f6:	e118      	b.n	801292a <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	895b      	ldrh	r3, [r3, #10]
 80126fc:	2b13      	cmp	r3, #19
 80126fe:	d809      	bhi.n	8012714 <ip4_frag+0x64>
 8012700:	4b8c      	ldr	r3, [pc, #560]	@ (8012934 <ip4_frag+0x284>)
 8012702:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012706:	498c      	ldr	r1, [pc, #560]	@ (8012938 <ip4_frag+0x288>)
 8012708:	488c      	ldr	r0, [pc, #560]	@ (801293c <ip4_frag+0x28c>)
 801270a:	f000 faf5 	bl	8012cf8 <iprintf>
 801270e:	f06f 0305 	mvn.w	r3, #5
 8012712:	e10a      	b.n	801292a <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012716:	88db      	ldrh	r3, [r3, #6]
 8012718:	b29b      	uxth	r3, r3
 801271a:	4618      	mov	r0, r3
 801271c:	f7f3 fc02 	bl	8005f24 <lwip_htons>
 8012720:	4603      	mov	r3, r0
 8012722:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012724:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012726:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801272a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801272e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012734:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	891b      	ldrh	r3, [r3, #8]
 801273a:	3b14      	subs	r3, #20
 801273c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012740:	e0e9      	b.n	8012916 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012742:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	b29b      	uxth	r3, r3
 8012748:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801274c:	4293      	cmp	r3, r2
 801274e:	bf28      	it	cs
 8012750:	4613      	movcs	r3, r2
 8012752:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012754:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012758:	2114      	movs	r1, #20
 801275a:	200e      	movs	r0, #14
 801275c:	f7f5 f89c 	bl	8007898 <pbuf_alloc>
 8012760:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012764:	2b00      	cmp	r3, #0
 8012766:	f000 80dd 	beq.w	8012924 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276c:	895b      	ldrh	r3, [r3, #10]
 801276e:	2b13      	cmp	r3, #19
 8012770:	d806      	bhi.n	8012780 <ip4_frag+0xd0>
 8012772:	4b70      	ldr	r3, [pc, #448]	@ (8012934 <ip4_frag+0x284>)
 8012774:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012778:	4971      	ldr	r1, [pc, #452]	@ (8012940 <ip4_frag+0x290>)
 801277a:	4870      	ldr	r0, [pc, #448]	@ (801293c <ip4_frag+0x28c>)
 801277c:	f000 fabc 	bl	8012cf8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	2214      	movs	r2, #20
 8012786:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012788:	4618      	mov	r0, r3
 801278a:	f000 fb90 	bl	8012eae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012794:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012796:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801279a:	e064      	b.n	8012866 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	895a      	ldrh	r2, [r3, #10]
 80127a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80127a2:	1ad3      	subs	r3, r2, r3
 80127a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	895b      	ldrh	r3, [r3, #10]
 80127aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d906      	bls.n	80127be <ip4_frag+0x10e>
 80127b0:	4b60      	ldr	r3, [pc, #384]	@ (8012934 <ip4_frag+0x284>)
 80127b2:	f240 322d 	movw	r2, #813	@ 0x32d
 80127b6:	4963      	ldr	r1, [pc, #396]	@ (8012944 <ip4_frag+0x294>)
 80127b8:	4860      	ldr	r0, [pc, #384]	@ (801293c <ip4_frag+0x28c>)
 80127ba:	f000 fa9d 	bl	8012cf8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80127be:	8bfa      	ldrh	r2, [r7, #30]
 80127c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80127c4:	4293      	cmp	r3, r2
 80127c6:	bf28      	it	cs
 80127c8:	4613      	movcs	r3, r2
 80127ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80127ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d105      	bne.n	80127e2 <ip4_frag+0x132>
        poff = 0;
 80127d6:	2300      	movs	r3, #0
 80127d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	60fb      	str	r3, [r7, #12]
        continue;
 80127e0:	e041      	b.n	8012866 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80127e2:	f7ff ff0d 	bl	8012600 <ip_frag_alloc_pbuf_custom_ref>
 80127e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d103      	bne.n	80127f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80127ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80127f0:	f7f5 fb36 	bl	8007e60 <pbuf_free>
        goto memerr;
 80127f4:	e097      	b.n	8012926 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80127fe:	4413      	add	r3, r2
 8012800:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012804:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012808:	9201      	str	r2, [sp, #4]
 801280a:	9300      	str	r3, [sp, #0]
 801280c:	4603      	mov	r3, r0
 801280e:	2241      	movs	r2, #65	@ 0x41
 8012810:	2000      	movs	r0, #0
 8012812:	f7f5 f96b 	bl	8007aec <pbuf_alloced_custom>
 8012816:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d106      	bne.n	801282c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801281e:	69b8      	ldr	r0, [r7, #24]
 8012820:	f7ff fef6 	bl	8012610 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012824:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012826:	f7f5 fb1b 	bl	8007e60 <pbuf_free>
        goto memerr;
 801282a:	e07c      	b.n	8012926 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f7f5 fbb7 	bl	8007fa0 <pbuf_ref>
      pcr->original = p;
 8012832:	69bb      	ldr	r3, [r7, #24]
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	4a43      	ldr	r2, [pc, #268]	@ (8012948 <ip4_frag+0x298>)
 801283c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801283e:	6979      	ldr	r1, [r7, #20]
 8012840:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012842:	f7f5 fbcf 	bl	8007fe4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012846:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801284a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012854:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012858:	2b00      	cmp	r3, #0
 801285a:	d004      	beq.n	8012866 <ip4_frag+0x1b6>
        poff = 0;
 801285c:	2300      	movs	r3, #0
 801285e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012866:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801286a:	2b00      	cmp	r3, #0
 801286c:	d196      	bne.n	801279c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801286e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012874:	4413      	add	r3, r2
 8012876:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801287c:	f1a3 0213 	sub.w	r2, r3, #19
 8012880:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012884:	429a      	cmp	r2, r3
 8012886:	bfcc      	ite	gt
 8012888:	2301      	movgt	r3, #1
 801288a:	2300      	movle	r3, #0
 801288c:	b2db      	uxtb	r3, r3
 801288e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012898:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801289a:	6a3b      	ldr	r3, [r7, #32]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d002      	beq.n	80128a6 <ip4_frag+0x1f6>
 80128a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d003      	beq.n	80128ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80128a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80128a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80128ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80128ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7f3 fb37 	bl	8005f24 <lwip_htons>
 80128b6:	4603      	mov	r3, r0
 80128b8:	461a      	mov	r2, r3
 80128ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80128be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80128c0:	3314      	adds	r3, #20
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7f3 fb2d 	bl	8005f24 <lwip_htons>
 80128ca:	4603      	mov	r3, r0
 80128cc:	461a      	mov	r2, r3
 80128ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80128d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128d4:	2200      	movs	r2, #0
 80128d6:	729a      	strb	r2, [r3, #10]
 80128d8:	2200      	movs	r2, #0
 80128da:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80128dc:	2114      	movs	r1, #20
 80128de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80128e0:	f7f3 ff55 	bl	800678e <inet_chksum>
 80128e4:	4603      	mov	r3, r0
 80128e6:	461a      	mov	r2, r3
 80128e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ea:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	695b      	ldr	r3, [r3, #20]
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80128f4:	68b8      	ldr	r0, [r7, #8]
 80128f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80128f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80128fa:	f7f5 fab1 	bl	8007e60 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80128fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012902:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012904:	1ad3      	subs	r3, r2, r3
 8012906:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801290a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801290e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012910:	4413      	add	r3, r2
 8012912:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012916:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801291a:	2b00      	cmp	r3, #0
 801291c:	f47f af11 	bne.w	8012742 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012920:	2300      	movs	r3, #0
 8012922:	e002      	b.n	801292a <ip4_frag+0x27a>
      goto memerr;
 8012924:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012926:	f04f 33ff 	mov.w	r3, #4294967295
}
 801292a:	4618      	mov	r0, r3
 801292c:	3748      	adds	r7, #72	@ 0x48
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	080166a4 	.word	0x080166a4
 8012938:	08016880 	.word	0x08016880
 801293c:	080166ec 	.word	0x080166ec
 8012940:	0801689c 	.word	0x0801689c
 8012944:	080168bc 	.word	0x080168bc
 8012948:	08012649 	.word	0x08012649

0801294c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b086      	sub	sp, #24
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012956:	230e      	movs	r3, #14
 8012958:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	895b      	ldrh	r3, [r3, #10]
 801295e:	2b0e      	cmp	r3, #14
 8012960:	d96e      	bls.n	8012a40 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	7bdb      	ldrb	r3, [r3, #15]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d106      	bne.n	8012978 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012970:	3301      	adds	r3, #1
 8012972:	b2da      	uxtb	r2, r3
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	7b1a      	ldrb	r2, [r3, #12]
 8012982:	7b5b      	ldrb	r3, [r3, #13]
 8012984:	021b      	lsls	r3, r3, #8
 8012986:	4313      	orrs	r3, r2
 8012988:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	f003 0301 	and.w	r3, r3, #1
 8012992:	2b00      	cmp	r3, #0
 8012994:	d023      	beq.n	80129de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	2b01      	cmp	r3, #1
 801299c:	d10f      	bne.n	80129be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	785b      	ldrb	r3, [r3, #1]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d11b      	bne.n	80129de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80129aa:	2b5e      	cmp	r3, #94	@ 0x5e
 80129ac:	d117      	bne.n	80129de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	7b5b      	ldrb	r3, [r3, #13]
 80129b2:	f043 0310 	orr.w	r3, r3, #16
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	735a      	strb	r2, [r3, #13]
 80129bc:	e00f      	b.n	80129de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	2206      	movs	r2, #6
 80129c2:	4928      	ldr	r1, [pc, #160]	@ (8012a64 <ethernet_input+0x118>)
 80129c4:	4618      	mov	r0, r3
 80129c6:	f000 f9ec 	bl	8012da2 <memcmp>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d106      	bne.n	80129de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	7b5b      	ldrb	r3, [r3, #13]
 80129d4:	f043 0308 	orr.w	r3, r3, #8
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80129de:	89fb      	ldrh	r3, [r7, #14]
 80129e0:	2b08      	cmp	r3, #8
 80129e2:	d003      	beq.n	80129ec <ethernet_input+0xa0>
 80129e4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80129e8:	d014      	beq.n	8012a14 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80129ea:	e032      	b.n	8012a52 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80129f2:	f003 0308 	and.w	r3, r3, #8
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d024      	beq.n	8012a44 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80129fa:	8afb      	ldrh	r3, [r7, #22]
 80129fc:	4619      	mov	r1, r3
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7f5 f9a8 	bl	8007d54 <pbuf_remove_header>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d11e      	bne.n	8012a48 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7fe fe8d 	bl	801172c <ip4_input>
      break;
 8012a12:	e013      	b.n	8012a3c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012a1a:	f003 0308 	and.w	r3, r3, #8
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d014      	beq.n	8012a4c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a22:	8afb      	ldrh	r3, [r7, #22]
 8012a24:	4619      	mov	r1, r3
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f7f5 f994 	bl	8007d54 <pbuf_remove_header>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d10e      	bne.n	8012a50 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012a32:	6839      	ldr	r1, [r7, #0]
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7fe f805 	bl	8010a44 <etharp_input>
      break;
 8012a3a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	e00c      	b.n	8012a5a <ethernet_input+0x10e>
    goto free_and_return;
 8012a40:	bf00      	nop
 8012a42:	e006      	b.n	8012a52 <ethernet_input+0x106>
        goto free_and_return;
 8012a44:	bf00      	nop
 8012a46:	e004      	b.n	8012a52 <ethernet_input+0x106>
        goto free_and_return;
 8012a48:	bf00      	nop
 8012a4a:	e002      	b.n	8012a52 <ethernet_input+0x106>
        goto free_and_return;
 8012a4c:	bf00      	nop
 8012a4e:	e000      	b.n	8012a52 <ethernet_input+0x106>
        goto free_and_return;
 8012a50:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f7f5 fa04 	bl	8007e60 <pbuf_free>
  return ERR_OK;
 8012a58:	2300      	movs	r3, #0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3718      	adds	r7, #24
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	08016a74 	.word	0x08016a74

08012a68 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b086      	sub	sp, #24
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
 8012a74:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a76:	8c3b      	ldrh	r3, [r7, #32]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7f3 fa53 	bl	8005f24 <lwip_htons>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012a82:	210e      	movs	r1, #14
 8012a84:	68b8      	ldr	r0, [r7, #8]
 8012a86:	f7f5 f955 	bl	8007d34 <pbuf_add_header>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d125      	bne.n	8012adc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	8afa      	ldrh	r2, [r7, #22]
 8012a9a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	2206      	movs	r2, #6
 8012aa0:	6839      	ldr	r1, [r7, #0]
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f000 fa03 	bl	8012eae <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	3306      	adds	r3, #6
 8012aac:	2206      	movs	r2, #6
 8012aae:	6879      	ldr	r1, [r7, #4]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 f9fc 	bl	8012eae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012abc:	2b06      	cmp	r3, #6
 8012abe:	d006      	beq.n	8012ace <ethernet_output+0x66>
 8012ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8012aec <ethernet_output+0x84>)
 8012ac2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8012ac6:	490a      	ldr	r1, [pc, #40]	@ (8012af0 <ethernet_output+0x88>)
 8012ac8:	480a      	ldr	r0, [pc, #40]	@ (8012af4 <ethernet_output+0x8c>)
 8012aca:	f000 f915 	bl	8012cf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	699b      	ldr	r3, [r3, #24]
 8012ad2:	68b9      	ldr	r1, [r7, #8]
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	4798      	blx	r3
 8012ad8:	4603      	mov	r3, r0
 8012ada:	e002      	b.n	8012ae2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012adc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012ade:	f06f 0301 	mvn.w	r3, #1
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3718      	adds	r7, #24
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	080168cc 	.word	0x080168cc
 8012af0:	08016904 	.word	0x08016904
 8012af4:	08016938 	.word	0x08016938

08012af8 <rand>:
 8012af8:	4b16      	ldr	r3, [pc, #88]	@ (8012b54 <rand+0x5c>)
 8012afa:	b510      	push	{r4, lr}
 8012afc:	681c      	ldr	r4, [r3, #0]
 8012afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b00:	b9b3      	cbnz	r3, 8012b30 <rand+0x38>
 8012b02:	2018      	movs	r0, #24
 8012b04:	f000 fa4a 	bl	8012f9c <malloc>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	6320      	str	r0, [r4, #48]	@ 0x30
 8012b0c:	b920      	cbnz	r0, 8012b18 <rand+0x20>
 8012b0e:	4b12      	ldr	r3, [pc, #72]	@ (8012b58 <rand+0x60>)
 8012b10:	4812      	ldr	r0, [pc, #72]	@ (8012b5c <rand+0x64>)
 8012b12:	2152      	movs	r1, #82	@ 0x52
 8012b14:	f000 f9da 	bl	8012ecc <__assert_func>
 8012b18:	4911      	ldr	r1, [pc, #68]	@ (8012b60 <rand+0x68>)
 8012b1a:	4b12      	ldr	r3, [pc, #72]	@ (8012b64 <rand+0x6c>)
 8012b1c:	e9c0 1300 	strd	r1, r3, [r0]
 8012b20:	4b11      	ldr	r3, [pc, #68]	@ (8012b68 <rand+0x70>)
 8012b22:	6083      	str	r3, [r0, #8]
 8012b24:	230b      	movs	r3, #11
 8012b26:	8183      	strh	r3, [r0, #12]
 8012b28:	2100      	movs	r1, #0
 8012b2a:	2001      	movs	r0, #1
 8012b2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012b30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012b32:	480e      	ldr	r0, [pc, #56]	@ (8012b6c <rand+0x74>)
 8012b34:	690b      	ldr	r3, [r1, #16]
 8012b36:	694c      	ldr	r4, [r1, #20]
 8012b38:	4a0d      	ldr	r2, [pc, #52]	@ (8012b70 <rand+0x78>)
 8012b3a:	4358      	muls	r0, r3
 8012b3c:	fb02 0004 	mla	r0, r2, r4, r0
 8012b40:	fba3 3202 	umull	r3, r2, r3, r2
 8012b44:	3301      	adds	r3, #1
 8012b46:	eb40 0002 	adc.w	r0, r0, r2
 8012b4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012b4e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012b52:	bd10      	pop	{r4, pc}
 8012b54:	2000003c 	.word	0x2000003c
 8012b58:	08016a82 	.word	0x08016a82
 8012b5c:	08016a99 	.word	0x08016a99
 8012b60:	abcd330e 	.word	0xabcd330e
 8012b64:	e66d1234 	.word	0xe66d1234
 8012b68:	0005deec 	.word	0x0005deec
 8012b6c:	5851f42d 	.word	0x5851f42d
 8012b70:	4c957f2d 	.word	0x4c957f2d

08012b74 <std>:
 8012b74:	2300      	movs	r3, #0
 8012b76:	b510      	push	{r4, lr}
 8012b78:	4604      	mov	r4, r0
 8012b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8012b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b82:	6083      	str	r3, [r0, #8]
 8012b84:	8181      	strh	r1, [r0, #12]
 8012b86:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b88:	81c2      	strh	r2, [r0, #14]
 8012b8a:	6183      	str	r3, [r0, #24]
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	2208      	movs	r2, #8
 8012b90:	305c      	adds	r0, #92	@ 0x5c
 8012b92:	f000 f916 	bl	8012dc2 <memset>
 8012b96:	4b0d      	ldr	r3, [pc, #52]	@ (8012bcc <std+0x58>)
 8012b98:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd0 <std+0x5c>)
 8012b9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd4 <std+0x60>)
 8012ba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd8 <std+0x64>)
 8012ba4:	6323      	str	r3, [r4, #48]	@ 0x30
 8012ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8012bdc <std+0x68>)
 8012ba8:	6224      	str	r4, [r4, #32]
 8012baa:	429c      	cmp	r4, r3
 8012bac:	d006      	beq.n	8012bbc <std+0x48>
 8012bae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012bb2:	4294      	cmp	r4, r2
 8012bb4:	d002      	beq.n	8012bbc <std+0x48>
 8012bb6:	33d0      	adds	r3, #208	@ 0xd0
 8012bb8:	429c      	cmp	r4, r3
 8012bba:	d105      	bne.n	8012bc8 <std+0x54>
 8012bbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bc4:	f000 b970 	b.w	8012ea8 <__retarget_lock_init_recursive>
 8012bc8:	bd10      	pop	{r4, pc}
 8012bca:	bf00      	nop
 8012bcc:	08012d1d 	.word	0x08012d1d
 8012bd0:	08012d3f 	.word	0x08012d3f
 8012bd4:	08012d77 	.word	0x08012d77
 8012bd8:	08012d9b 	.word	0x08012d9b
 8012bdc:	20008a4c 	.word	0x20008a4c

08012be0 <stdio_exit_handler>:
 8012be0:	4a02      	ldr	r2, [pc, #8]	@ (8012bec <stdio_exit_handler+0xc>)
 8012be2:	4903      	ldr	r1, [pc, #12]	@ (8012bf0 <stdio_exit_handler+0x10>)
 8012be4:	4803      	ldr	r0, [pc, #12]	@ (8012bf4 <stdio_exit_handler+0x14>)
 8012be6:	f000 b869 	b.w	8012cbc <_fwalk_sglue>
 8012bea:	bf00      	nop
 8012bec:	20000030 	.word	0x20000030
 8012bf0:	080137b1 	.word	0x080137b1
 8012bf4:	20000040 	.word	0x20000040

08012bf8 <cleanup_stdio>:
 8012bf8:	6841      	ldr	r1, [r0, #4]
 8012bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8012c2c <cleanup_stdio+0x34>)
 8012bfc:	4299      	cmp	r1, r3
 8012bfe:	b510      	push	{r4, lr}
 8012c00:	4604      	mov	r4, r0
 8012c02:	d001      	beq.n	8012c08 <cleanup_stdio+0x10>
 8012c04:	f000 fdd4 	bl	80137b0 <_fflush_r>
 8012c08:	68a1      	ldr	r1, [r4, #8]
 8012c0a:	4b09      	ldr	r3, [pc, #36]	@ (8012c30 <cleanup_stdio+0x38>)
 8012c0c:	4299      	cmp	r1, r3
 8012c0e:	d002      	beq.n	8012c16 <cleanup_stdio+0x1e>
 8012c10:	4620      	mov	r0, r4
 8012c12:	f000 fdcd 	bl	80137b0 <_fflush_r>
 8012c16:	68e1      	ldr	r1, [r4, #12]
 8012c18:	4b06      	ldr	r3, [pc, #24]	@ (8012c34 <cleanup_stdio+0x3c>)
 8012c1a:	4299      	cmp	r1, r3
 8012c1c:	d004      	beq.n	8012c28 <cleanup_stdio+0x30>
 8012c1e:	4620      	mov	r0, r4
 8012c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c24:	f000 bdc4 	b.w	80137b0 <_fflush_r>
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	bf00      	nop
 8012c2c:	20008a4c 	.word	0x20008a4c
 8012c30:	20008ab4 	.word	0x20008ab4
 8012c34:	20008b1c 	.word	0x20008b1c

08012c38 <global_stdio_init.part.0>:
 8012c38:	b510      	push	{r4, lr}
 8012c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8012c68 <global_stdio_init.part.0+0x30>)
 8012c3c:	4c0b      	ldr	r4, [pc, #44]	@ (8012c6c <global_stdio_init.part.0+0x34>)
 8012c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8012c70 <global_stdio_init.part.0+0x38>)
 8012c40:	601a      	str	r2, [r3, #0]
 8012c42:	4620      	mov	r0, r4
 8012c44:	2200      	movs	r2, #0
 8012c46:	2104      	movs	r1, #4
 8012c48:	f7ff ff94 	bl	8012b74 <std>
 8012c4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012c50:	2201      	movs	r2, #1
 8012c52:	2109      	movs	r1, #9
 8012c54:	f7ff ff8e 	bl	8012b74 <std>
 8012c58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012c5c:	2202      	movs	r2, #2
 8012c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c62:	2112      	movs	r1, #18
 8012c64:	f7ff bf86 	b.w	8012b74 <std>
 8012c68:	20008b84 	.word	0x20008b84
 8012c6c:	20008a4c 	.word	0x20008a4c
 8012c70:	08012be1 	.word	0x08012be1

08012c74 <__sfp_lock_acquire>:
 8012c74:	4801      	ldr	r0, [pc, #4]	@ (8012c7c <__sfp_lock_acquire+0x8>)
 8012c76:	f000 b918 	b.w	8012eaa <__retarget_lock_acquire_recursive>
 8012c7a:	bf00      	nop
 8012c7c:	20008b8d 	.word	0x20008b8d

08012c80 <__sfp_lock_release>:
 8012c80:	4801      	ldr	r0, [pc, #4]	@ (8012c88 <__sfp_lock_release+0x8>)
 8012c82:	f000 b913 	b.w	8012eac <__retarget_lock_release_recursive>
 8012c86:	bf00      	nop
 8012c88:	20008b8d 	.word	0x20008b8d

08012c8c <__sinit>:
 8012c8c:	b510      	push	{r4, lr}
 8012c8e:	4604      	mov	r4, r0
 8012c90:	f7ff fff0 	bl	8012c74 <__sfp_lock_acquire>
 8012c94:	6a23      	ldr	r3, [r4, #32]
 8012c96:	b11b      	cbz	r3, 8012ca0 <__sinit+0x14>
 8012c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c9c:	f7ff bff0 	b.w	8012c80 <__sfp_lock_release>
 8012ca0:	4b04      	ldr	r3, [pc, #16]	@ (8012cb4 <__sinit+0x28>)
 8012ca2:	6223      	str	r3, [r4, #32]
 8012ca4:	4b04      	ldr	r3, [pc, #16]	@ (8012cb8 <__sinit+0x2c>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d1f5      	bne.n	8012c98 <__sinit+0xc>
 8012cac:	f7ff ffc4 	bl	8012c38 <global_stdio_init.part.0>
 8012cb0:	e7f2      	b.n	8012c98 <__sinit+0xc>
 8012cb2:	bf00      	nop
 8012cb4:	08012bf9 	.word	0x08012bf9
 8012cb8:	20008b84 	.word	0x20008b84

08012cbc <_fwalk_sglue>:
 8012cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cc0:	4607      	mov	r7, r0
 8012cc2:	4688      	mov	r8, r1
 8012cc4:	4614      	mov	r4, r2
 8012cc6:	2600      	movs	r6, #0
 8012cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8012cd0:	d505      	bpl.n	8012cde <_fwalk_sglue+0x22>
 8012cd2:	6824      	ldr	r4, [r4, #0]
 8012cd4:	2c00      	cmp	r4, #0
 8012cd6:	d1f7      	bne.n	8012cc8 <_fwalk_sglue+0xc>
 8012cd8:	4630      	mov	r0, r6
 8012cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cde:	89ab      	ldrh	r3, [r5, #12]
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d907      	bls.n	8012cf4 <_fwalk_sglue+0x38>
 8012ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ce8:	3301      	adds	r3, #1
 8012cea:	d003      	beq.n	8012cf4 <_fwalk_sglue+0x38>
 8012cec:	4629      	mov	r1, r5
 8012cee:	4638      	mov	r0, r7
 8012cf0:	47c0      	blx	r8
 8012cf2:	4306      	orrs	r6, r0
 8012cf4:	3568      	adds	r5, #104	@ 0x68
 8012cf6:	e7e9      	b.n	8012ccc <_fwalk_sglue+0x10>

08012cf8 <iprintf>:
 8012cf8:	b40f      	push	{r0, r1, r2, r3}
 8012cfa:	b507      	push	{r0, r1, r2, lr}
 8012cfc:	4906      	ldr	r1, [pc, #24]	@ (8012d18 <iprintf+0x20>)
 8012cfe:	ab04      	add	r3, sp, #16
 8012d00:	6808      	ldr	r0, [r1, #0]
 8012d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d06:	6881      	ldr	r1, [r0, #8]
 8012d08:	9301      	str	r3, [sp, #4]
 8012d0a:	f000 fa27 	bl	801315c <_vfiprintf_r>
 8012d0e:	b003      	add	sp, #12
 8012d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d14:	b004      	add	sp, #16
 8012d16:	4770      	bx	lr
 8012d18:	2000003c 	.word	0x2000003c

08012d1c <__sread>:
 8012d1c:	b510      	push	{r4, lr}
 8012d1e:	460c      	mov	r4, r1
 8012d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d24:	f000 f878 	bl	8012e18 <_read_r>
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	bfab      	itete	ge
 8012d2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8012d30:	181b      	addge	r3, r3, r0
 8012d32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012d36:	bfac      	ite	ge
 8012d38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012d3a:	81a3      	strhlt	r3, [r4, #12]
 8012d3c:	bd10      	pop	{r4, pc}

08012d3e <__swrite>:
 8012d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d42:	461f      	mov	r7, r3
 8012d44:	898b      	ldrh	r3, [r1, #12]
 8012d46:	05db      	lsls	r3, r3, #23
 8012d48:	4605      	mov	r5, r0
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	4616      	mov	r6, r2
 8012d4e:	d505      	bpl.n	8012d5c <__swrite+0x1e>
 8012d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d54:	2302      	movs	r3, #2
 8012d56:	2200      	movs	r2, #0
 8012d58:	f000 f84c 	bl	8012df4 <_lseek_r>
 8012d5c:	89a3      	ldrh	r3, [r4, #12]
 8012d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d66:	81a3      	strh	r3, [r4, #12]
 8012d68:	4632      	mov	r2, r6
 8012d6a:	463b      	mov	r3, r7
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d72:	f000 b863 	b.w	8012e3c <_write_r>

08012d76 <__sseek>:
 8012d76:	b510      	push	{r4, lr}
 8012d78:	460c      	mov	r4, r1
 8012d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d7e:	f000 f839 	bl	8012df4 <_lseek_r>
 8012d82:	1c43      	adds	r3, r0, #1
 8012d84:	89a3      	ldrh	r3, [r4, #12]
 8012d86:	bf15      	itete	ne
 8012d88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012d8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d92:	81a3      	strheq	r3, [r4, #12]
 8012d94:	bf18      	it	ne
 8012d96:	81a3      	strhne	r3, [r4, #12]
 8012d98:	bd10      	pop	{r4, pc}

08012d9a <__sclose>:
 8012d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d9e:	f000 b819 	b.w	8012dd4 <_close_r>

08012da2 <memcmp>:
 8012da2:	b510      	push	{r4, lr}
 8012da4:	3901      	subs	r1, #1
 8012da6:	4402      	add	r2, r0
 8012da8:	4290      	cmp	r0, r2
 8012daa:	d101      	bne.n	8012db0 <memcmp+0xe>
 8012dac:	2000      	movs	r0, #0
 8012dae:	e005      	b.n	8012dbc <memcmp+0x1a>
 8012db0:	7803      	ldrb	r3, [r0, #0]
 8012db2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012db6:	42a3      	cmp	r3, r4
 8012db8:	d001      	beq.n	8012dbe <memcmp+0x1c>
 8012dba:	1b18      	subs	r0, r3, r4
 8012dbc:	bd10      	pop	{r4, pc}
 8012dbe:	3001      	adds	r0, #1
 8012dc0:	e7f2      	b.n	8012da8 <memcmp+0x6>

08012dc2 <memset>:
 8012dc2:	4402      	add	r2, r0
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d100      	bne.n	8012dcc <memset+0xa>
 8012dca:	4770      	bx	lr
 8012dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8012dd0:	e7f9      	b.n	8012dc6 <memset+0x4>
	...

08012dd4 <_close_r>:
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4d06      	ldr	r5, [pc, #24]	@ (8012df0 <_close_r+0x1c>)
 8012dd8:	2300      	movs	r3, #0
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4608      	mov	r0, r1
 8012dde:	602b      	str	r3, [r5, #0]
 8012de0:	f7ee f946 	bl	8001070 <_close>
 8012de4:	1c43      	adds	r3, r0, #1
 8012de6:	d102      	bne.n	8012dee <_close_r+0x1a>
 8012de8:	682b      	ldr	r3, [r5, #0]
 8012dea:	b103      	cbz	r3, 8012dee <_close_r+0x1a>
 8012dec:	6023      	str	r3, [r4, #0]
 8012dee:	bd38      	pop	{r3, r4, r5, pc}
 8012df0:	20008b88 	.word	0x20008b88

08012df4 <_lseek_r>:
 8012df4:	b538      	push	{r3, r4, r5, lr}
 8012df6:	4d07      	ldr	r5, [pc, #28]	@ (8012e14 <_lseek_r+0x20>)
 8012df8:	4604      	mov	r4, r0
 8012dfa:	4608      	mov	r0, r1
 8012dfc:	4611      	mov	r1, r2
 8012dfe:	2200      	movs	r2, #0
 8012e00:	602a      	str	r2, [r5, #0]
 8012e02:	461a      	mov	r2, r3
 8012e04:	f7ee f95b 	bl	80010be <_lseek>
 8012e08:	1c43      	adds	r3, r0, #1
 8012e0a:	d102      	bne.n	8012e12 <_lseek_r+0x1e>
 8012e0c:	682b      	ldr	r3, [r5, #0]
 8012e0e:	b103      	cbz	r3, 8012e12 <_lseek_r+0x1e>
 8012e10:	6023      	str	r3, [r4, #0]
 8012e12:	bd38      	pop	{r3, r4, r5, pc}
 8012e14:	20008b88 	.word	0x20008b88

08012e18 <_read_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d07      	ldr	r5, [pc, #28]	@ (8012e38 <_read_r+0x20>)
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	4608      	mov	r0, r1
 8012e20:	4611      	mov	r1, r2
 8012e22:	2200      	movs	r2, #0
 8012e24:	602a      	str	r2, [r5, #0]
 8012e26:	461a      	mov	r2, r3
 8012e28:	f7ee f8e9 	bl	8000ffe <_read>
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d102      	bne.n	8012e36 <_read_r+0x1e>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	b103      	cbz	r3, 8012e36 <_read_r+0x1e>
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	bd38      	pop	{r3, r4, r5, pc}
 8012e38:	20008b88 	.word	0x20008b88

08012e3c <_write_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4d07      	ldr	r5, [pc, #28]	@ (8012e5c <_write_r+0x20>)
 8012e40:	4604      	mov	r4, r0
 8012e42:	4608      	mov	r0, r1
 8012e44:	4611      	mov	r1, r2
 8012e46:	2200      	movs	r2, #0
 8012e48:	602a      	str	r2, [r5, #0]
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	f7ee f8f4 	bl	8001038 <_write>
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	d102      	bne.n	8012e5a <_write_r+0x1e>
 8012e54:	682b      	ldr	r3, [r5, #0]
 8012e56:	b103      	cbz	r3, 8012e5a <_write_r+0x1e>
 8012e58:	6023      	str	r3, [r4, #0]
 8012e5a:	bd38      	pop	{r3, r4, r5, pc}
 8012e5c:	20008b88 	.word	0x20008b88

08012e60 <__libc_init_array>:
 8012e60:	b570      	push	{r4, r5, r6, lr}
 8012e62:	4d0d      	ldr	r5, [pc, #52]	@ (8012e98 <__libc_init_array+0x38>)
 8012e64:	4c0d      	ldr	r4, [pc, #52]	@ (8012e9c <__libc_init_array+0x3c>)
 8012e66:	1b64      	subs	r4, r4, r5
 8012e68:	10a4      	asrs	r4, r4, #2
 8012e6a:	2600      	movs	r6, #0
 8012e6c:	42a6      	cmp	r6, r4
 8012e6e:	d109      	bne.n	8012e84 <__libc_init_array+0x24>
 8012e70:	4d0b      	ldr	r5, [pc, #44]	@ (8012ea0 <__libc_init_array+0x40>)
 8012e72:	4c0c      	ldr	r4, [pc, #48]	@ (8012ea4 <__libc_init_array+0x44>)
 8012e74:	f000 fe4a 	bl	8013b0c <_init>
 8012e78:	1b64      	subs	r4, r4, r5
 8012e7a:	10a4      	asrs	r4, r4, #2
 8012e7c:	2600      	movs	r6, #0
 8012e7e:	42a6      	cmp	r6, r4
 8012e80:	d105      	bne.n	8012e8e <__libc_init_array+0x2e>
 8012e82:	bd70      	pop	{r4, r5, r6, pc}
 8012e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e88:	4798      	blx	r3
 8012e8a:	3601      	adds	r6, #1
 8012e8c:	e7ee      	b.n	8012e6c <__libc_init_array+0xc>
 8012e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e92:	4798      	blx	r3
 8012e94:	3601      	adds	r6, #1
 8012e96:	e7f2      	b.n	8012e7e <__libc_init_array+0x1e>
 8012e98:	08016b68 	.word	0x08016b68
 8012e9c:	08016b68 	.word	0x08016b68
 8012ea0:	08016b68 	.word	0x08016b68
 8012ea4:	08016b6c 	.word	0x08016b6c

08012ea8 <__retarget_lock_init_recursive>:
 8012ea8:	4770      	bx	lr

08012eaa <__retarget_lock_acquire_recursive>:
 8012eaa:	4770      	bx	lr

08012eac <__retarget_lock_release_recursive>:
 8012eac:	4770      	bx	lr

08012eae <memcpy>:
 8012eae:	440a      	add	r2, r1
 8012eb0:	4291      	cmp	r1, r2
 8012eb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8012eb6:	d100      	bne.n	8012eba <memcpy+0xc>
 8012eb8:	4770      	bx	lr
 8012eba:	b510      	push	{r4, lr}
 8012ebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ec4:	4291      	cmp	r1, r2
 8012ec6:	d1f9      	bne.n	8012ebc <memcpy+0xe>
 8012ec8:	bd10      	pop	{r4, pc}
	...

08012ecc <__assert_func>:
 8012ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ece:	4614      	mov	r4, r2
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	4b09      	ldr	r3, [pc, #36]	@ (8012ef8 <__assert_func+0x2c>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4605      	mov	r5, r0
 8012ed8:	68d8      	ldr	r0, [r3, #12]
 8012eda:	b954      	cbnz	r4, 8012ef2 <__assert_func+0x26>
 8012edc:	4b07      	ldr	r3, [pc, #28]	@ (8012efc <__assert_func+0x30>)
 8012ede:	461c      	mov	r4, r3
 8012ee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ee4:	9100      	str	r1, [sp, #0]
 8012ee6:	462b      	mov	r3, r5
 8012ee8:	4905      	ldr	r1, [pc, #20]	@ (8012f00 <__assert_func+0x34>)
 8012eea:	f000 fc89 	bl	8013800 <fiprintf>
 8012eee:	f000 fd3d 	bl	801396c <abort>
 8012ef2:	4b04      	ldr	r3, [pc, #16]	@ (8012f04 <__assert_func+0x38>)
 8012ef4:	e7f4      	b.n	8012ee0 <__assert_func+0x14>
 8012ef6:	bf00      	nop
 8012ef8:	2000003c 	.word	0x2000003c
 8012efc:	08016b2c 	.word	0x08016b2c
 8012f00:	08016afe 	.word	0x08016afe
 8012f04:	08016af1 	.word	0x08016af1

08012f08 <_free_r>:
 8012f08:	b538      	push	{r3, r4, r5, lr}
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	2900      	cmp	r1, #0
 8012f0e:	d041      	beq.n	8012f94 <_free_r+0x8c>
 8012f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f14:	1f0c      	subs	r4, r1, #4
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	bfb8      	it	lt
 8012f1a:	18e4      	addlt	r4, r4, r3
 8012f1c:	f000 f8e8 	bl	80130f0 <__malloc_lock>
 8012f20:	4a1d      	ldr	r2, [pc, #116]	@ (8012f98 <_free_r+0x90>)
 8012f22:	6813      	ldr	r3, [r2, #0]
 8012f24:	b933      	cbnz	r3, 8012f34 <_free_r+0x2c>
 8012f26:	6063      	str	r3, [r4, #4]
 8012f28:	6014      	str	r4, [r2, #0]
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f30:	f000 b8e4 	b.w	80130fc <__malloc_unlock>
 8012f34:	42a3      	cmp	r3, r4
 8012f36:	d908      	bls.n	8012f4a <_free_r+0x42>
 8012f38:	6820      	ldr	r0, [r4, #0]
 8012f3a:	1821      	adds	r1, r4, r0
 8012f3c:	428b      	cmp	r3, r1
 8012f3e:	bf01      	itttt	eq
 8012f40:	6819      	ldreq	r1, [r3, #0]
 8012f42:	685b      	ldreq	r3, [r3, #4]
 8012f44:	1809      	addeq	r1, r1, r0
 8012f46:	6021      	streq	r1, [r4, #0]
 8012f48:	e7ed      	b.n	8012f26 <_free_r+0x1e>
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	b10b      	cbz	r3, 8012f54 <_free_r+0x4c>
 8012f50:	42a3      	cmp	r3, r4
 8012f52:	d9fa      	bls.n	8012f4a <_free_r+0x42>
 8012f54:	6811      	ldr	r1, [r2, #0]
 8012f56:	1850      	adds	r0, r2, r1
 8012f58:	42a0      	cmp	r0, r4
 8012f5a:	d10b      	bne.n	8012f74 <_free_r+0x6c>
 8012f5c:	6820      	ldr	r0, [r4, #0]
 8012f5e:	4401      	add	r1, r0
 8012f60:	1850      	adds	r0, r2, r1
 8012f62:	4283      	cmp	r3, r0
 8012f64:	6011      	str	r1, [r2, #0]
 8012f66:	d1e0      	bne.n	8012f2a <_free_r+0x22>
 8012f68:	6818      	ldr	r0, [r3, #0]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	6053      	str	r3, [r2, #4]
 8012f6e:	4408      	add	r0, r1
 8012f70:	6010      	str	r0, [r2, #0]
 8012f72:	e7da      	b.n	8012f2a <_free_r+0x22>
 8012f74:	d902      	bls.n	8012f7c <_free_r+0x74>
 8012f76:	230c      	movs	r3, #12
 8012f78:	602b      	str	r3, [r5, #0]
 8012f7a:	e7d6      	b.n	8012f2a <_free_r+0x22>
 8012f7c:	6820      	ldr	r0, [r4, #0]
 8012f7e:	1821      	adds	r1, r4, r0
 8012f80:	428b      	cmp	r3, r1
 8012f82:	bf04      	itt	eq
 8012f84:	6819      	ldreq	r1, [r3, #0]
 8012f86:	685b      	ldreq	r3, [r3, #4]
 8012f88:	6063      	str	r3, [r4, #4]
 8012f8a:	bf04      	itt	eq
 8012f8c:	1809      	addeq	r1, r1, r0
 8012f8e:	6021      	streq	r1, [r4, #0]
 8012f90:	6054      	str	r4, [r2, #4]
 8012f92:	e7ca      	b.n	8012f2a <_free_r+0x22>
 8012f94:	bd38      	pop	{r3, r4, r5, pc}
 8012f96:	bf00      	nop
 8012f98:	20008b94 	.word	0x20008b94

08012f9c <malloc>:
 8012f9c:	4b02      	ldr	r3, [pc, #8]	@ (8012fa8 <malloc+0xc>)
 8012f9e:	4601      	mov	r1, r0
 8012fa0:	6818      	ldr	r0, [r3, #0]
 8012fa2:	f000 b825 	b.w	8012ff0 <_malloc_r>
 8012fa6:	bf00      	nop
 8012fa8:	2000003c 	.word	0x2000003c

08012fac <sbrk_aligned>:
 8012fac:	b570      	push	{r4, r5, r6, lr}
 8012fae:	4e0f      	ldr	r6, [pc, #60]	@ (8012fec <sbrk_aligned+0x40>)
 8012fb0:	460c      	mov	r4, r1
 8012fb2:	6831      	ldr	r1, [r6, #0]
 8012fb4:	4605      	mov	r5, r0
 8012fb6:	b911      	cbnz	r1, 8012fbe <sbrk_aligned+0x12>
 8012fb8:	f000 fcc8 	bl	801394c <_sbrk_r>
 8012fbc:	6030      	str	r0, [r6, #0]
 8012fbe:	4621      	mov	r1, r4
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	f000 fcc3 	bl	801394c <_sbrk_r>
 8012fc6:	1c43      	adds	r3, r0, #1
 8012fc8:	d103      	bne.n	8012fd2 <sbrk_aligned+0x26>
 8012fca:	f04f 34ff 	mov.w	r4, #4294967295
 8012fce:	4620      	mov	r0, r4
 8012fd0:	bd70      	pop	{r4, r5, r6, pc}
 8012fd2:	1cc4      	adds	r4, r0, #3
 8012fd4:	f024 0403 	bic.w	r4, r4, #3
 8012fd8:	42a0      	cmp	r0, r4
 8012fda:	d0f8      	beq.n	8012fce <sbrk_aligned+0x22>
 8012fdc:	1a21      	subs	r1, r4, r0
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f000 fcb4 	bl	801394c <_sbrk_r>
 8012fe4:	3001      	adds	r0, #1
 8012fe6:	d1f2      	bne.n	8012fce <sbrk_aligned+0x22>
 8012fe8:	e7ef      	b.n	8012fca <sbrk_aligned+0x1e>
 8012fea:	bf00      	nop
 8012fec:	20008b90 	.word	0x20008b90

08012ff0 <_malloc_r>:
 8012ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ff4:	1ccd      	adds	r5, r1, #3
 8012ff6:	f025 0503 	bic.w	r5, r5, #3
 8012ffa:	3508      	adds	r5, #8
 8012ffc:	2d0c      	cmp	r5, #12
 8012ffe:	bf38      	it	cc
 8013000:	250c      	movcc	r5, #12
 8013002:	2d00      	cmp	r5, #0
 8013004:	4606      	mov	r6, r0
 8013006:	db01      	blt.n	801300c <_malloc_r+0x1c>
 8013008:	42a9      	cmp	r1, r5
 801300a:	d904      	bls.n	8013016 <_malloc_r+0x26>
 801300c:	230c      	movs	r3, #12
 801300e:	6033      	str	r3, [r6, #0]
 8013010:	2000      	movs	r0, #0
 8013012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80130ec <_malloc_r+0xfc>
 801301a:	f000 f869 	bl	80130f0 <__malloc_lock>
 801301e:	f8d8 3000 	ldr.w	r3, [r8]
 8013022:	461c      	mov	r4, r3
 8013024:	bb44      	cbnz	r4, 8013078 <_malloc_r+0x88>
 8013026:	4629      	mov	r1, r5
 8013028:	4630      	mov	r0, r6
 801302a:	f7ff ffbf 	bl	8012fac <sbrk_aligned>
 801302e:	1c43      	adds	r3, r0, #1
 8013030:	4604      	mov	r4, r0
 8013032:	d158      	bne.n	80130e6 <_malloc_r+0xf6>
 8013034:	f8d8 4000 	ldr.w	r4, [r8]
 8013038:	4627      	mov	r7, r4
 801303a:	2f00      	cmp	r7, #0
 801303c:	d143      	bne.n	80130c6 <_malloc_r+0xd6>
 801303e:	2c00      	cmp	r4, #0
 8013040:	d04b      	beq.n	80130da <_malloc_r+0xea>
 8013042:	6823      	ldr	r3, [r4, #0]
 8013044:	4639      	mov	r1, r7
 8013046:	4630      	mov	r0, r6
 8013048:	eb04 0903 	add.w	r9, r4, r3
 801304c:	f000 fc7e 	bl	801394c <_sbrk_r>
 8013050:	4581      	cmp	r9, r0
 8013052:	d142      	bne.n	80130da <_malloc_r+0xea>
 8013054:	6821      	ldr	r1, [r4, #0]
 8013056:	1a6d      	subs	r5, r5, r1
 8013058:	4629      	mov	r1, r5
 801305a:	4630      	mov	r0, r6
 801305c:	f7ff ffa6 	bl	8012fac <sbrk_aligned>
 8013060:	3001      	adds	r0, #1
 8013062:	d03a      	beq.n	80130da <_malloc_r+0xea>
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	442b      	add	r3, r5
 8013068:	6023      	str	r3, [r4, #0]
 801306a:	f8d8 3000 	ldr.w	r3, [r8]
 801306e:	685a      	ldr	r2, [r3, #4]
 8013070:	bb62      	cbnz	r2, 80130cc <_malloc_r+0xdc>
 8013072:	f8c8 7000 	str.w	r7, [r8]
 8013076:	e00f      	b.n	8013098 <_malloc_r+0xa8>
 8013078:	6822      	ldr	r2, [r4, #0]
 801307a:	1b52      	subs	r2, r2, r5
 801307c:	d420      	bmi.n	80130c0 <_malloc_r+0xd0>
 801307e:	2a0b      	cmp	r2, #11
 8013080:	d917      	bls.n	80130b2 <_malloc_r+0xc2>
 8013082:	1961      	adds	r1, r4, r5
 8013084:	42a3      	cmp	r3, r4
 8013086:	6025      	str	r5, [r4, #0]
 8013088:	bf18      	it	ne
 801308a:	6059      	strne	r1, [r3, #4]
 801308c:	6863      	ldr	r3, [r4, #4]
 801308e:	bf08      	it	eq
 8013090:	f8c8 1000 	streq.w	r1, [r8]
 8013094:	5162      	str	r2, [r4, r5]
 8013096:	604b      	str	r3, [r1, #4]
 8013098:	4630      	mov	r0, r6
 801309a:	f000 f82f 	bl	80130fc <__malloc_unlock>
 801309e:	f104 000b 	add.w	r0, r4, #11
 80130a2:	1d23      	adds	r3, r4, #4
 80130a4:	f020 0007 	bic.w	r0, r0, #7
 80130a8:	1ac2      	subs	r2, r0, r3
 80130aa:	bf1c      	itt	ne
 80130ac:	1a1b      	subne	r3, r3, r0
 80130ae:	50a3      	strne	r3, [r4, r2]
 80130b0:	e7af      	b.n	8013012 <_malloc_r+0x22>
 80130b2:	6862      	ldr	r2, [r4, #4]
 80130b4:	42a3      	cmp	r3, r4
 80130b6:	bf0c      	ite	eq
 80130b8:	f8c8 2000 	streq.w	r2, [r8]
 80130bc:	605a      	strne	r2, [r3, #4]
 80130be:	e7eb      	b.n	8013098 <_malloc_r+0xa8>
 80130c0:	4623      	mov	r3, r4
 80130c2:	6864      	ldr	r4, [r4, #4]
 80130c4:	e7ae      	b.n	8013024 <_malloc_r+0x34>
 80130c6:	463c      	mov	r4, r7
 80130c8:	687f      	ldr	r7, [r7, #4]
 80130ca:	e7b6      	b.n	801303a <_malloc_r+0x4a>
 80130cc:	461a      	mov	r2, r3
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	42a3      	cmp	r3, r4
 80130d2:	d1fb      	bne.n	80130cc <_malloc_r+0xdc>
 80130d4:	2300      	movs	r3, #0
 80130d6:	6053      	str	r3, [r2, #4]
 80130d8:	e7de      	b.n	8013098 <_malloc_r+0xa8>
 80130da:	230c      	movs	r3, #12
 80130dc:	6033      	str	r3, [r6, #0]
 80130de:	4630      	mov	r0, r6
 80130e0:	f000 f80c 	bl	80130fc <__malloc_unlock>
 80130e4:	e794      	b.n	8013010 <_malloc_r+0x20>
 80130e6:	6005      	str	r5, [r0, #0]
 80130e8:	e7d6      	b.n	8013098 <_malloc_r+0xa8>
 80130ea:	bf00      	nop
 80130ec:	20008b94 	.word	0x20008b94

080130f0 <__malloc_lock>:
 80130f0:	4801      	ldr	r0, [pc, #4]	@ (80130f8 <__malloc_lock+0x8>)
 80130f2:	f7ff beda 	b.w	8012eaa <__retarget_lock_acquire_recursive>
 80130f6:	bf00      	nop
 80130f8:	20008b8c 	.word	0x20008b8c

080130fc <__malloc_unlock>:
 80130fc:	4801      	ldr	r0, [pc, #4]	@ (8013104 <__malloc_unlock+0x8>)
 80130fe:	f7ff bed5 	b.w	8012eac <__retarget_lock_release_recursive>
 8013102:	bf00      	nop
 8013104:	20008b8c 	.word	0x20008b8c

08013108 <__sfputc_r>:
 8013108:	6893      	ldr	r3, [r2, #8]
 801310a:	3b01      	subs	r3, #1
 801310c:	2b00      	cmp	r3, #0
 801310e:	b410      	push	{r4}
 8013110:	6093      	str	r3, [r2, #8]
 8013112:	da08      	bge.n	8013126 <__sfputc_r+0x1e>
 8013114:	6994      	ldr	r4, [r2, #24]
 8013116:	42a3      	cmp	r3, r4
 8013118:	db01      	blt.n	801311e <__sfputc_r+0x16>
 801311a:	290a      	cmp	r1, #10
 801311c:	d103      	bne.n	8013126 <__sfputc_r+0x1e>
 801311e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013122:	f000 bb7f 	b.w	8013824 <__swbuf_r>
 8013126:	6813      	ldr	r3, [r2, #0]
 8013128:	1c58      	adds	r0, r3, #1
 801312a:	6010      	str	r0, [r2, #0]
 801312c:	7019      	strb	r1, [r3, #0]
 801312e:	4608      	mov	r0, r1
 8013130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013134:	4770      	bx	lr

08013136 <__sfputs_r>:
 8013136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013138:	4606      	mov	r6, r0
 801313a:	460f      	mov	r7, r1
 801313c:	4614      	mov	r4, r2
 801313e:	18d5      	adds	r5, r2, r3
 8013140:	42ac      	cmp	r4, r5
 8013142:	d101      	bne.n	8013148 <__sfputs_r+0x12>
 8013144:	2000      	movs	r0, #0
 8013146:	e007      	b.n	8013158 <__sfputs_r+0x22>
 8013148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801314c:	463a      	mov	r2, r7
 801314e:	4630      	mov	r0, r6
 8013150:	f7ff ffda 	bl	8013108 <__sfputc_r>
 8013154:	1c43      	adds	r3, r0, #1
 8013156:	d1f3      	bne.n	8013140 <__sfputs_r+0xa>
 8013158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801315c <_vfiprintf_r>:
 801315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013160:	460d      	mov	r5, r1
 8013162:	b09d      	sub	sp, #116	@ 0x74
 8013164:	4614      	mov	r4, r2
 8013166:	4698      	mov	r8, r3
 8013168:	4606      	mov	r6, r0
 801316a:	b118      	cbz	r0, 8013174 <_vfiprintf_r+0x18>
 801316c:	6a03      	ldr	r3, [r0, #32]
 801316e:	b90b      	cbnz	r3, 8013174 <_vfiprintf_r+0x18>
 8013170:	f7ff fd8c 	bl	8012c8c <__sinit>
 8013174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013176:	07d9      	lsls	r1, r3, #31
 8013178:	d405      	bmi.n	8013186 <_vfiprintf_r+0x2a>
 801317a:	89ab      	ldrh	r3, [r5, #12]
 801317c:	059a      	lsls	r2, r3, #22
 801317e:	d402      	bmi.n	8013186 <_vfiprintf_r+0x2a>
 8013180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013182:	f7ff fe92 	bl	8012eaa <__retarget_lock_acquire_recursive>
 8013186:	89ab      	ldrh	r3, [r5, #12]
 8013188:	071b      	lsls	r3, r3, #28
 801318a:	d501      	bpl.n	8013190 <_vfiprintf_r+0x34>
 801318c:	692b      	ldr	r3, [r5, #16]
 801318e:	b99b      	cbnz	r3, 80131b8 <_vfiprintf_r+0x5c>
 8013190:	4629      	mov	r1, r5
 8013192:	4630      	mov	r0, r6
 8013194:	f000 fb84 	bl	80138a0 <__swsetup_r>
 8013198:	b170      	cbz	r0, 80131b8 <_vfiprintf_r+0x5c>
 801319a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801319c:	07dc      	lsls	r4, r3, #31
 801319e:	d504      	bpl.n	80131aa <_vfiprintf_r+0x4e>
 80131a0:	f04f 30ff 	mov.w	r0, #4294967295
 80131a4:	b01d      	add	sp, #116	@ 0x74
 80131a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131aa:	89ab      	ldrh	r3, [r5, #12]
 80131ac:	0598      	lsls	r0, r3, #22
 80131ae:	d4f7      	bmi.n	80131a0 <_vfiprintf_r+0x44>
 80131b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131b2:	f7ff fe7b 	bl	8012eac <__retarget_lock_release_recursive>
 80131b6:	e7f3      	b.n	80131a0 <_vfiprintf_r+0x44>
 80131b8:	2300      	movs	r3, #0
 80131ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80131bc:	2320      	movs	r3, #32
 80131be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80131c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80131c6:	2330      	movs	r3, #48	@ 0x30
 80131c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013378 <_vfiprintf_r+0x21c>
 80131cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80131d0:	f04f 0901 	mov.w	r9, #1
 80131d4:	4623      	mov	r3, r4
 80131d6:	469a      	mov	sl, r3
 80131d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131dc:	b10a      	cbz	r2, 80131e2 <_vfiprintf_r+0x86>
 80131de:	2a25      	cmp	r2, #37	@ 0x25
 80131e0:	d1f9      	bne.n	80131d6 <_vfiprintf_r+0x7a>
 80131e2:	ebba 0b04 	subs.w	fp, sl, r4
 80131e6:	d00b      	beq.n	8013200 <_vfiprintf_r+0xa4>
 80131e8:	465b      	mov	r3, fp
 80131ea:	4622      	mov	r2, r4
 80131ec:	4629      	mov	r1, r5
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7ff ffa1 	bl	8013136 <__sfputs_r>
 80131f4:	3001      	adds	r0, #1
 80131f6:	f000 80a7 	beq.w	8013348 <_vfiprintf_r+0x1ec>
 80131fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80131fc:	445a      	add	r2, fp
 80131fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8013200:	f89a 3000 	ldrb.w	r3, [sl]
 8013204:	2b00      	cmp	r3, #0
 8013206:	f000 809f 	beq.w	8013348 <_vfiprintf_r+0x1ec>
 801320a:	2300      	movs	r3, #0
 801320c:	f04f 32ff 	mov.w	r2, #4294967295
 8013210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013214:	f10a 0a01 	add.w	sl, sl, #1
 8013218:	9304      	str	r3, [sp, #16]
 801321a:	9307      	str	r3, [sp, #28]
 801321c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013220:	931a      	str	r3, [sp, #104]	@ 0x68
 8013222:	4654      	mov	r4, sl
 8013224:	2205      	movs	r2, #5
 8013226:	f814 1b01 	ldrb.w	r1, [r4], #1
 801322a:	4853      	ldr	r0, [pc, #332]	@ (8013378 <_vfiprintf_r+0x21c>)
 801322c:	f7ec ffd8 	bl	80001e0 <memchr>
 8013230:	9a04      	ldr	r2, [sp, #16]
 8013232:	b9d8      	cbnz	r0, 801326c <_vfiprintf_r+0x110>
 8013234:	06d1      	lsls	r1, r2, #27
 8013236:	bf44      	itt	mi
 8013238:	2320      	movmi	r3, #32
 801323a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801323e:	0713      	lsls	r3, r2, #28
 8013240:	bf44      	itt	mi
 8013242:	232b      	movmi	r3, #43	@ 0x2b
 8013244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013248:	f89a 3000 	ldrb.w	r3, [sl]
 801324c:	2b2a      	cmp	r3, #42	@ 0x2a
 801324e:	d015      	beq.n	801327c <_vfiprintf_r+0x120>
 8013250:	9a07      	ldr	r2, [sp, #28]
 8013252:	4654      	mov	r4, sl
 8013254:	2000      	movs	r0, #0
 8013256:	f04f 0c0a 	mov.w	ip, #10
 801325a:	4621      	mov	r1, r4
 801325c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013260:	3b30      	subs	r3, #48	@ 0x30
 8013262:	2b09      	cmp	r3, #9
 8013264:	d94b      	bls.n	80132fe <_vfiprintf_r+0x1a2>
 8013266:	b1b0      	cbz	r0, 8013296 <_vfiprintf_r+0x13a>
 8013268:	9207      	str	r2, [sp, #28]
 801326a:	e014      	b.n	8013296 <_vfiprintf_r+0x13a>
 801326c:	eba0 0308 	sub.w	r3, r0, r8
 8013270:	fa09 f303 	lsl.w	r3, r9, r3
 8013274:	4313      	orrs	r3, r2
 8013276:	9304      	str	r3, [sp, #16]
 8013278:	46a2      	mov	sl, r4
 801327a:	e7d2      	b.n	8013222 <_vfiprintf_r+0xc6>
 801327c:	9b03      	ldr	r3, [sp, #12]
 801327e:	1d19      	adds	r1, r3, #4
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	9103      	str	r1, [sp, #12]
 8013284:	2b00      	cmp	r3, #0
 8013286:	bfbb      	ittet	lt
 8013288:	425b      	neglt	r3, r3
 801328a:	f042 0202 	orrlt.w	r2, r2, #2
 801328e:	9307      	strge	r3, [sp, #28]
 8013290:	9307      	strlt	r3, [sp, #28]
 8013292:	bfb8      	it	lt
 8013294:	9204      	strlt	r2, [sp, #16]
 8013296:	7823      	ldrb	r3, [r4, #0]
 8013298:	2b2e      	cmp	r3, #46	@ 0x2e
 801329a:	d10a      	bne.n	80132b2 <_vfiprintf_r+0x156>
 801329c:	7863      	ldrb	r3, [r4, #1]
 801329e:	2b2a      	cmp	r3, #42	@ 0x2a
 80132a0:	d132      	bne.n	8013308 <_vfiprintf_r+0x1ac>
 80132a2:	9b03      	ldr	r3, [sp, #12]
 80132a4:	1d1a      	adds	r2, r3, #4
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	9203      	str	r2, [sp, #12]
 80132aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80132ae:	3402      	adds	r4, #2
 80132b0:	9305      	str	r3, [sp, #20]
 80132b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013388 <_vfiprintf_r+0x22c>
 80132b6:	7821      	ldrb	r1, [r4, #0]
 80132b8:	2203      	movs	r2, #3
 80132ba:	4650      	mov	r0, sl
 80132bc:	f7ec ff90 	bl	80001e0 <memchr>
 80132c0:	b138      	cbz	r0, 80132d2 <_vfiprintf_r+0x176>
 80132c2:	9b04      	ldr	r3, [sp, #16]
 80132c4:	eba0 000a 	sub.w	r0, r0, sl
 80132c8:	2240      	movs	r2, #64	@ 0x40
 80132ca:	4082      	lsls	r2, r0
 80132cc:	4313      	orrs	r3, r2
 80132ce:	3401      	adds	r4, #1
 80132d0:	9304      	str	r3, [sp, #16]
 80132d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132d6:	4829      	ldr	r0, [pc, #164]	@ (801337c <_vfiprintf_r+0x220>)
 80132d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80132dc:	2206      	movs	r2, #6
 80132de:	f7ec ff7f 	bl	80001e0 <memchr>
 80132e2:	2800      	cmp	r0, #0
 80132e4:	d03f      	beq.n	8013366 <_vfiprintf_r+0x20a>
 80132e6:	4b26      	ldr	r3, [pc, #152]	@ (8013380 <_vfiprintf_r+0x224>)
 80132e8:	bb1b      	cbnz	r3, 8013332 <_vfiprintf_r+0x1d6>
 80132ea:	9b03      	ldr	r3, [sp, #12]
 80132ec:	3307      	adds	r3, #7
 80132ee:	f023 0307 	bic.w	r3, r3, #7
 80132f2:	3308      	adds	r3, #8
 80132f4:	9303      	str	r3, [sp, #12]
 80132f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132f8:	443b      	add	r3, r7
 80132fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80132fc:	e76a      	b.n	80131d4 <_vfiprintf_r+0x78>
 80132fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8013302:	460c      	mov	r4, r1
 8013304:	2001      	movs	r0, #1
 8013306:	e7a8      	b.n	801325a <_vfiprintf_r+0xfe>
 8013308:	2300      	movs	r3, #0
 801330a:	3401      	adds	r4, #1
 801330c:	9305      	str	r3, [sp, #20]
 801330e:	4619      	mov	r1, r3
 8013310:	f04f 0c0a 	mov.w	ip, #10
 8013314:	4620      	mov	r0, r4
 8013316:	f810 2b01 	ldrb.w	r2, [r0], #1
 801331a:	3a30      	subs	r2, #48	@ 0x30
 801331c:	2a09      	cmp	r2, #9
 801331e:	d903      	bls.n	8013328 <_vfiprintf_r+0x1cc>
 8013320:	2b00      	cmp	r3, #0
 8013322:	d0c6      	beq.n	80132b2 <_vfiprintf_r+0x156>
 8013324:	9105      	str	r1, [sp, #20]
 8013326:	e7c4      	b.n	80132b2 <_vfiprintf_r+0x156>
 8013328:	fb0c 2101 	mla	r1, ip, r1, r2
 801332c:	4604      	mov	r4, r0
 801332e:	2301      	movs	r3, #1
 8013330:	e7f0      	b.n	8013314 <_vfiprintf_r+0x1b8>
 8013332:	ab03      	add	r3, sp, #12
 8013334:	9300      	str	r3, [sp, #0]
 8013336:	462a      	mov	r2, r5
 8013338:	4b12      	ldr	r3, [pc, #72]	@ (8013384 <_vfiprintf_r+0x228>)
 801333a:	a904      	add	r1, sp, #16
 801333c:	4630      	mov	r0, r6
 801333e:	f3af 8000 	nop.w
 8013342:	4607      	mov	r7, r0
 8013344:	1c78      	adds	r0, r7, #1
 8013346:	d1d6      	bne.n	80132f6 <_vfiprintf_r+0x19a>
 8013348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801334a:	07d9      	lsls	r1, r3, #31
 801334c:	d405      	bmi.n	801335a <_vfiprintf_r+0x1fe>
 801334e:	89ab      	ldrh	r3, [r5, #12]
 8013350:	059a      	lsls	r2, r3, #22
 8013352:	d402      	bmi.n	801335a <_vfiprintf_r+0x1fe>
 8013354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013356:	f7ff fda9 	bl	8012eac <__retarget_lock_release_recursive>
 801335a:	89ab      	ldrh	r3, [r5, #12]
 801335c:	065b      	lsls	r3, r3, #25
 801335e:	f53f af1f 	bmi.w	80131a0 <_vfiprintf_r+0x44>
 8013362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013364:	e71e      	b.n	80131a4 <_vfiprintf_r+0x48>
 8013366:	ab03      	add	r3, sp, #12
 8013368:	9300      	str	r3, [sp, #0]
 801336a:	462a      	mov	r2, r5
 801336c:	4b05      	ldr	r3, [pc, #20]	@ (8013384 <_vfiprintf_r+0x228>)
 801336e:	a904      	add	r1, sp, #16
 8013370:	4630      	mov	r0, r6
 8013372:	f000 f879 	bl	8013468 <_printf_i>
 8013376:	e7e4      	b.n	8013342 <_vfiprintf_r+0x1e6>
 8013378:	08016b2d 	.word	0x08016b2d
 801337c:	08016b37 	.word	0x08016b37
 8013380:	00000000 	.word	0x00000000
 8013384:	08013137 	.word	0x08013137
 8013388:	08016b33 	.word	0x08016b33

0801338c <_printf_common>:
 801338c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013390:	4616      	mov	r6, r2
 8013392:	4698      	mov	r8, r3
 8013394:	688a      	ldr	r2, [r1, #8]
 8013396:	690b      	ldr	r3, [r1, #16]
 8013398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801339c:	4293      	cmp	r3, r2
 801339e:	bfb8      	it	lt
 80133a0:	4613      	movlt	r3, r2
 80133a2:	6033      	str	r3, [r6, #0]
 80133a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80133a8:	4607      	mov	r7, r0
 80133aa:	460c      	mov	r4, r1
 80133ac:	b10a      	cbz	r2, 80133b2 <_printf_common+0x26>
 80133ae:	3301      	adds	r3, #1
 80133b0:	6033      	str	r3, [r6, #0]
 80133b2:	6823      	ldr	r3, [r4, #0]
 80133b4:	0699      	lsls	r1, r3, #26
 80133b6:	bf42      	ittt	mi
 80133b8:	6833      	ldrmi	r3, [r6, #0]
 80133ba:	3302      	addmi	r3, #2
 80133bc:	6033      	strmi	r3, [r6, #0]
 80133be:	6825      	ldr	r5, [r4, #0]
 80133c0:	f015 0506 	ands.w	r5, r5, #6
 80133c4:	d106      	bne.n	80133d4 <_printf_common+0x48>
 80133c6:	f104 0a19 	add.w	sl, r4, #25
 80133ca:	68e3      	ldr	r3, [r4, #12]
 80133cc:	6832      	ldr	r2, [r6, #0]
 80133ce:	1a9b      	subs	r3, r3, r2
 80133d0:	42ab      	cmp	r3, r5
 80133d2:	dc26      	bgt.n	8013422 <_printf_common+0x96>
 80133d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80133d8:	6822      	ldr	r2, [r4, #0]
 80133da:	3b00      	subs	r3, #0
 80133dc:	bf18      	it	ne
 80133de:	2301      	movne	r3, #1
 80133e0:	0692      	lsls	r2, r2, #26
 80133e2:	d42b      	bmi.n	801343c <_printf_common+0xb0>
 80133e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80133e8:	4641      	mov	r1, r8
 80133ea:	4638      	mov	r0, r7
 80133ec:	47c8      	blx	r9
 80133ee:	3001      	adds	r0, #1
 80133f0:	d01e      	beq.n	8013430 <_printf_common+0xa4>
 80133f2:	6823      	ldr	r3, [r4, #0]
 80133f4:	6922      	ldr	r2, [r4, #16]
 80133f6:	f003 0306 	and.w	r3, r3, #6
 80133fa:	2b04      	cmp	r3, #4
 80133fc:	bf02      	ittt	eq
 80133fe:	68e5      	ldreq	r5, [r4, #12]
 8013400:	6833      	ldreq	r3, [r6, #0]
 8013402:	1aed      	subeq	r5, r5, r3
 8013404:	68a3      	ldr	r3, [r4, #8]
 8013406:	bf0c      	ite	eq
 8013408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801340c:	2500      	movne	r5, #0
 801340e:	4293      	cmp	r3, r2
 8013410:	bfc4      	itt	gt
 8013412:	1a9b      	subgt	r3, r3, r2
 8013414:	18ed      	addgt	r5, r5, r3
 8013416:	2600      	movs	r6, #0
 8013418:	341a      	adds	r4, #26
 801341a:	42b5      	cmp	r5, r6
 801341c:	d11a      	bne.n	8013454 <_printf_common+0xc8>
 801341e:	2000      	movs	r0, #0
 8013420:	e008      	b.n	8013434 <_printf_common+0xa8>
 8013422:	2301      	movs	r3, #1
 8013424:	4652      	mov	r2, sl
 8013426:	4641      	mov	r1, r8
 8013428:	4638      	mov	r0, r7
 801342a:	47c8      	blx	r9
 801342c:	3001      	adds	r0, #1
 801342e:	d103      	bne.n	8013438 <_printf_common+0xac>
 8013430:	f04f 30ff 	mov.w	r0, #4294967295
 8013434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013438:	3501      	adds	r5, #1
 801343a:	e7c6      	b.n	80133ca <_printf_common+0x3e>
 801343c:	18e1      	adds	r1, r4, r3
 801343e:	1c5a      	adds	r2, r3, #1
 8013440:	2030      	movs	r0, #48	@ 0x30
 8013442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013446:	4422      	add	r2, r4
 8013448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801344c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013450:	3302      	adds	r3, #2
 8013452:	e7c7      	b.n	80133e4 <_printf_common+0x58>
 8013454:	2301      	movs	r3, #1
 8013456:	4622      	mov	r2, r4
 8013458:	4641      	mov	r1, r8
 801345a:	4638      	mov	r0, r7
 801345c:	47c8      	blx	r9
 801345e:	3001      	adds	r0, #1
 8013460:	d0e6      	beq.n	8013430 <_printf_common+0xa4>
 8013462:	3601      	adds	r6, #1
 8013464:	e7d9      	b.n	801341a <_printf_common+0x8e>
	...

08013468 <_printf_i>:
 8013468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801346c:	7e0f      	ldrb	r7, [r1, #24]
 801346e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013470:	2f78      	cmp	r7, #120	@ 0x78
 8013472:	4691      	mov	r9, r2
 8013474:	4680      	mov	r8, r0
 8013476:	460c      	mov	r4, r1
 8013478:	469a      	mov	sl, r3
 801347a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801347e:	d807      	bhi.n	8013490 <_printf_i+0x28>
 8013480:	2f62      	cmp	r7, #98	@ 0x62
 8013482:	d80a      	bhi.n	801349a <_printf_i+0x32>
 8013484:	2f00      	cmp	r7, #0
 8013486:	f000 80d2 	beq.w	801362e <_printf_i+0x1c6>
 801348a:	2f58      	cmp	r7, #88	@ 0x58
 801348c:	f000 80b9 	beq.w	8013602 <_printf_i+0x19a>
 8013490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013498:	e03a      	b.n	8013510 <_printf_i+0xa8>
 801349a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801349e:	2b15      	cmp	r3, #21
 80134a0:	d8f6      	bhi.n	8013490 <_printf_i+0x28>
 80134a2:	a101      	add	r1, pc, #4	@ (adr r1, 80134a8 <_printf_i+0x40>)
 80134a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134a8:	08013501 	.word	0x08013501
 80134ac:	08013515 	.word	0x08013515
 80134b0:	08013491 	.word	0x08013491
 80134b4:	08013491 	.word	0x08013491
 80134b8:	08013491 	.word	0x08013491
 80134bc:	08013491 	.word	0x08013491
 80134c0:	08013515 	.word	0x08013515
 80134c4:	08013491 	.word	0x08013491
 80134c8:	08013491 	.word	0x08013491
 80134cc:	08013491 	.word	0x08013491
 80134d0:	08013491 	.word	0x08013491
 80134d4:	08013615 	.word	0x08013615
 80134d8:	0801353f 	.word	0x0801353f
 80134dc:	080135cf 	.word	0x080135cf
 80134e0:	08013491 	.word	0x08013491
 80134e4:	08013491 	.word	0x08013491
 80134e8:	08013637 	.word	0x08013637
 80134ec:	08013491 	.word	0x08013491
 80134f0:	0801353f 	.word	0x0801353f
 80134f4:	08013491 	.word	0x08013491
 80134f8:	08013491 	.word	0x08013491
 80134fc:	080135d7 	.word	0x080135d7
 8013500:	6833      	ldr	r3, [r6, #0]
 8013502:	1d1a      	adds	r2, r3, #4
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	6032      	str	r2, [r6, #0]
 8013508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801350c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013510:	2301      	movs	r3, #1
 8013512:	e09d      	b.n	8013650 <_printf_i+0x1e8>
 8013514:	6833      	ldr	r3, [r6, #0]
 8013516:	6820      	ldr	r0, [r4, #0]
 8013518:	1d19      	adds	r1, r3, #4
 801351a:	6031      	str	r1, [r6, #0]
 801351c:	0606      	lsls	r6, r0, #24
 801351e:	d501      	bpl.n	8013524 <_printf_i+0xbc>
 8013520:	681d      	ldr	r5, [r3, #0]
 8013522:	e003      	b.n	801352c <_printf_i+0xc4>
 8013524:	0645      	lsls	r5, r0, #25
 8013526:	d5fb      	bpl.n	8013520 <_printf_i+0xb8>
 8013528:	f9b3 5000 	ldrsh.w	r5, [r3]
 801352c:	2d00      	cmp	r5, #0
 801352e:	da03      	bge.n	8013538 <_printf_i+0xd0>
 8013530:	232d      	movs	r3, #45	@ 0x2d
 8013532:	426d      	negs	r5, r5
 8013534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013538:	4859      	ldr	r0, [pc, #356]	@ (80136a0 <_printf_i+0x238>)
 801353a:	230a      	movs	r3, #10
 801353c:	e011      	b.n	8013562 <_printf_i+0xfa>
 801353e:	6821      	ldr	r1, [r4, #0]
 8013540:	6833      	ldr	r3, [r6, #0]
 8013542:	0608      	lsls	r0, r1, #24
 8013544:	f853 5b04 	ldr.w	r5, [r3], #4
 8013548:	d402      	bmi.n	8013550 <_printf_i+0xe8>
 801354a:	0649      	lsls	r1, r1, #25
 801354c:	bf48      	it	mi
 801354e:	b2ad      	uxthmi	r5, r5
 8013550:	2f6f      	cmp	r7, #111	@ 0x6f
 8013552:	4853      	ldr	r0, [pc, #332]	@ (80136a0 <_printf_i+0x238>)
 8013554:	6033      	str	r3, [r6, #0]
 8013556:	bf14      	ite	ne
 8013558:	230a      	movne	r3, #10
 801355a:	2308      	moveq	r3, #8
 801355c:	2100      	movs	r1, #0
 801355e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013562:	6866      	ldr	r6, [r4, #4]
 8013564:	60a6      	str	r6, [r4, #8]
 8013566:	2e00      	cmp	r6, #0
 8013568:	bfa2      	ittt	ge
 801356a:	6821      	ldrge	r1, [r4, #0]
 801356c:	f021 0104 	bicge.w	r1, r1, #4
 8013570:	6021      	strge	r1, [r4, #0]
 8013572:	b90d      	cbnz	r5, 8013578 <_printf_i+0x110>
 8013574:	2e00      	cmp	r6, #0
 8013576:	d04b      	beq.n	8013610 <_printf_i+0x1a8>
 8013578:	4616      	mov	r6, r2
 801357a:	fbb5 f1f3 	udiv	r1, r5, r3
 801357e:	fb03 5711 	mls	r7, r3, r1, r5
 8013582:	5dc7      	ldrb	r7, [r0, r7]
 8013584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013588:	462f      	mov	r7, r5
 801358a:	42bb      	cmp	r3, r7
 801358c:	460d      	mov	r5, r1
 801358e:	d9f4      	bls.n	801357a <_printf_i+0x112>
 8013590:	2b08      	cmp	r3, #8
 8013592:	d10b      	bne.n	80135ac <_printf_i+0x144>
 8013594:	6823      	ldr	r3, [r4, #0]
 8013596:	07df      	lsls	r7, r3, #31
 8013598:	d508      	bpl.n	80135ac <_printf_i+0x144>
 801359a:	6923      	ldr	r3, [r4, #16]
 801359c:	6861      	ldr	r1, [r4, #4]
 801359e:	4299      	cmp	r1, r3
 80135a0:	bfde      	ittt	le
 80135a2:	2330      	movle	r3, #48	@ 0x30
 80135a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80135a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80135ac:	1b92      	subs	r2, r2, r6
 80135ae:	6122      	str	r2, [r4, #16]
 80135b0:	f8cd a000 	str.w	sl, [sp]
 80135b4:	464b      	mov	r3, r9
 80135b6:	aa03      	add	r2, sp, #12
 80135b8:	4621      	mov	r1, r4
 80135ba:	4640      	mov	r0, r8
 80135bc:	f7ff fee6 	bl	801338c <_printf_common>
 80135c0:	3001      	adds	r0, #1
 80135c2:	d14a      	bne.n	801365a <_printf_i+0x1f2>
 80135c4:	f04f 30ff 	mov.w	r0, #4294967295
 80135c8:	b004      	add	sp, #16
 80135ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	f043 0320 	orr.w	r3, r3, #32
 80135d4:	6023      	str	r3, [r4, #0]
 80135d6:	4833      	ldr	r0, [pc, #204]	@ (80136a4 <_printf_i+0x23c>)
 80135d8:	2778      	movs	r7, #120	@ 0x78
 80135da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80135de:	6823      	ldr	r3, [r4, #0]
 80135e0:	6831      	ldr	r1, [r6, #0]
 80135e2:	061f      	lsls	r7, r3, #24
 80135e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80135e8:	d402      	bmi.n	80135f0 <_printf_i+0x188>
 80135ea:	065f      	lsls	r7, r3, #25
 80135ec:	bf48      	it	mi
 80135ee:	b2ad      	uxthmi	r5, r5
 80135f0:	6031      	str	r1, [r6, #0]
 80135f2:	07d9      	lsls	r1, r3, #31
 80135f4:	bf44      	itt	mi
 80135f6:	f043 0320 	orrmi.w	r3, r3, #32
 80135fa:	6023      	strmi	r3, [r4, #0]
 80135fc:	b11d      	cbz	r5, 8013606 <_printf_i+0x19e>
 80135fe:	2310      	movs	r3, #16
 8013600:	e7ac      	b.n	801355c <_printf_i+0xf4>
 8013602:	4827      	ldr	r0, [pc, #156]	@ (80136a0 <_printf_i+0x238>)
 8013604:	e7e9      	b.n	80135da <_printf_i+0x172>
 8013606:	6823      	ldr	r3, [r4, #0]
 8013608:	f023 0320 	bic.w	r3, r3, #32
 801360c:	6023      	str	r3, [r4, #0]
 801360e:	e7f6      	b.n	80135fe <_printf_i+0x196>
 8013610:	4616      	mov	r6, r2
 8013612:	e7bd      	b.n	8013590 <_printf_i+0x128>
 8013614:	6833      	ldr	r3, [r6, #0]
 8013616:	6825      	ldr	r5, [r4, #0]
 8013618:	6961      	ldr	r1, [r4, #20]
 801361a:	1d18      	adds	r0, r3, #4
 801361c:	6030      	str	r0, [r6, #0]
 801361e:	062e      	lsls	r6, r5, #24
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	d501      	bpl.n	8013628 <_printf_i+0x1c0>
 8013624:	6019      	str	r1, [r3, #0]
 8013626:	e002      	b.n	801362e <_printf_i+0x1c6>
 8013628:	0668      	lsls	r0, r5, #25
 801362a:	d5fb      	bpl.n	8013624 <_printf_i+0x1bc>
 801362c:	8019      	strh	r1, [r3, #0]
 801362e:	2300      	movs	r3, #0
 8013630:	6123      	str	r3, [r4, #16]
 8013632:	4616      	mov	r6, r2
 8013634:	e7bc      	b.n	80135b0 <_printf_i+0x148>
 8013636:	6833      	ldr	r3, [r6, #0]
 8013638:	1d1a      	adds	r2, r3, #4
 801363a:	6032      	str	r2, [r6, #0]
 801363c:	681e      	ldr	r6, [r3, #0]
 801363e:	6862      	ldr	r2, [r4, #4]
 8013640:	2100      	movs	r1, #0
 8013642:	4630      	mov	r0, r6
 8013644:	f7ec fdcc 	bl	80001e0 <memchr>
 8013648:	b108      	cbz	r0, 801364e <_printf_i+0x1e6>
 801364a:	1b80      	subs	r0, r0, r6
 801364c:	6060      	str	r0, [r4, #4]
 801364e:	6863      	ldr	r3, [r4, #4]
 8013650:	6123      	str	r3, [r4, #16]
 8013652:	2300      	movs	r3, #0
 8013654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013658:	e7aa      	b.n	80135b0 <_printf_i+0x148>
 801365a:	6923      	ldr	r3, [r4, #16]
 801365c:	4632      	mov	r2, r6
 801365e:	4649      	mov	r1, r9
 8013660:	4640      	mov	r0, r8
 8013662:	47d0      	blx	sl
 8013664:	3001      	adds	r0, #1
 8013666:	d0ad      	beq.n	80135c4 <_printf_i+0x15c>
 8013668:	6823      	ldr	r3, [r4, #0]
 801366a:	079b      	lsls	r3, r3, #30
 801366c:	d413      	bmi.n	8013696 <_printf_i+0x22e>
 801366e:	68e0      	ldr	r0, [r4, #12]
 8013670:	9b03      	ldr	r3, [sp, #12]
 8013672:	4298      	cmp	r0, r3
 8013674:	bfb8      	it	lt
 8013676:	4618      	movlt	r0, r3
 8013678:	e7a6      	b.n	80135c8 <_printf_i+0x160>
 801367a:	2301      	movs	r3, #1
 801367c:	4632      	mov	r2, r6
 801367e:	4649      	mov	r1, r9
 8013680:	4640      	mov	r0, r8
 8013682:	47d0      	blx	sl
 8013684:	3001      	adds	r0, #1
 8013686:	d09d      	beq.n	80135c4 <_printf_i+0x15c>
 8013688:	3501      	adds	r5, #1
 801368a:	68e3      	ldr	r3, [r4, #12]
 801368c:	9903      	ldr	r1, [sp, #12]
 801368e:	1a5b      	subs	r3, r3, r1
 8013690:	42ab      	cmp	r3, r5
 8013692:	dcf2      	bgt.n	801367a <_printf_i+0x212>
 8013694:	e7eb      	b.n	801366e <_printf_i+0x206>
 8013696:	2500      	movs	r5, #0
 8013698:	f104 0619 	add.w	r6, r4, #25
 801369c:	e7f5      	b.n	801368a <_printf_i+0x222>
 801369e:	bf00      	nop
 80136a0:	08016b3e 	.word	0x08016b3e
 80136a4:	08016b4f 	.word	0x08016b4f

080136a8 <__sflush_r>:
 80136a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80136ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b0:	0716      	lsls	r6, r2, #28
 80136b2:	4605      	mov	r5, r0
 80136b4:	460c      	mov	r4, r1
 80136b6:	d454      	bmi.n	8013762 <__sflush_r+0xba>
 80136b8:	684b      	ldr	r3, [r1, #4]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	dc02      	bgt.n	80136c4 <__sflush_r+0x1c>
 80136be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	dd48      	ble.n	8013756 <__sflush_r+0xae>
 80136c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136c6:	2e00      	cmp	r6, #0
 80136c8:	d045      	beq.n	8013756 <__sflush_r+0xae>
 80136ca:	2300      	movs	r3, #0
 80136cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80136d0:	682f      	ldr	r7, [r5, #0]
 80136d2:	6a21      	ldr	r1, [r4, #32]
 80136d4:	602b      	str	r3, [r5, #0]
 80136d6:	d030      	beq.n	801373a <__sflush_r+0x92>
 80136d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80136da:	89a3      	ldrh	r3, [r4, #12]
 80136dc:	0759      	lsls	r1, r3, #29
 80136de:	d505      	bpl.n	80136ec <__sflush_r+0x44>
 80136e0:	6863      	ldr	r3, [r4, #4]
 80136e2:	1ad2      	subs	r2, r2, r3
 80136e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80136e6:	b10b      	cbz	r3, 80136ec <__sflush_r+0x44>
 80136e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80136ea:	1ad2      	subs	r2, r2, r3
 80136ec:	2300      	movs	r3, #0
 80136ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136f0:	6a21      	ldr	r1, [r4, #32]
 80136f2:	4628      	mov	r0, r5
 80136f4:	47b0      	blx	r6
 80136f6:	1c43      	adds	r3, r0, #1
 80136f8:	89a3      	ldrh	r3, [r4, #12]
 80136fa:	d106      	bne.n	801370a <__sflush_r+0x62>
 80136fc:	6829      	ldr	r1, [r5, #0]
 80136fe:	291d      	cmp	r1, #29
 8013700:	d82b      	bhi.n	801375a <__sflush_r+0xb2>
 8013702:	4a2a      	ldr	r2, [pc, #168]	@ (80137ac <__sflush_r+0x104>)
 8013704:	410a      	asrs	r2, r1
 8013706:	07d6      	lsls	r6, r2, #31
 8013708:	d427      	bmi.n	801375a <__sflush_r+0xb2>
 801370a:	2200      	movs	r2, #0
 801370c:	6062      	str	r2, [r4, #4]
 801370e:	04d9      	lsls	r1, r3, #19
 8013710:	6922      	ldr	r2, [r4, #16]
 8013712:	6022      	str	r2, [r4, #0]
 8013714:	d504      	bpl.n	8013720 <__sflush_r+0x78>
 8013716:	1c42      	adds	r2, r0, #1
 8013718:	d101      	bne.n	801371e <__sflush_r+0x76>
 801371a:	682b      	ldr	r3, [r5, #0]
 801371c:	b903      	cbnz	r3, 8013720 <__sflush_r+0x78>
 801371e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013722:	602f      	str	r7, [r5, #0]
 8013724:	b1b9      	cbz	r1, 8013756 <__sflush_r+0xae>
 8013726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801372a:	4299      	cmp	r1, r3
 801372c:	d002      	beq.n	8013734 <__sflush_r+0x8c>
 801372e:	4628      	mov	r0, r5
 8013730:	f7ff fbea 	bl	8012f08 <_free_r>
 8013734:	2300      	movs	r3, #0
 8013736:	6363      	str	r3, [r4, #52]	@ 0x34
 8013738:	e00d      	b.n	8013756 <__sflush_r+0xae>
 801373a:	2301      	movs	r3, #1
 801373c:	4628      	mov	r0, r5
 801373e:	47b0      	blx	r6
 8013740:	4602      	mov	r2, r0
 8013742:	1c50      	adds	r0, r2, #1
 8013744:	d1c9      	bne.n	80136da <__sflush_r+0x32>
 8013746:	682b      	ldr	r3, [r5, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d0c6      	beq.n	80136da <__sflush_r+0x32>
 801374c:	2b1d      	cmp	r3, #29
 801374e:	d001      	beq.n	8013754 <__sflush_r+0xac>
 8013750:	2b16      	cmp	r3, #22
 8013752:	d11e      	bne.n	8013792 <__sflush_r+0xea>
 8013754:	602f      	str	r7, [r5, #0]
 8013756:	2000      	movs	r0, #0
 8013758:	e022      	b.n	80137a0 <__sflush_r+0xf8>
 801375a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801375e:	b21b      	sxth	r3, r3
 8013760:	e01b      	b.n	801379a <__sflush_r+0xf2>
 8013762:	690f      	ldr	r7, [r1, #16]
 8013764:	2f00      	cmp	r7, #0
 8013766:	d0f6      	beq.n	8013756 <__sflush_r+0xae>
 8013768:	0793      	lsls	r3, r2, #30
 801376a:	680e      	ldr	r6, [r1, #0]
 801376c:	bf08      	it	eq
 801376e:	694b      	ldreq	r3, [r1, #20]
 8013770:	600f      	str	r7, [r1, #0]
 8013772:	bf18      	it	ne
 8013774:	2300      	movne	r3, #0
 8013776:	eba6 0807 	sub.w	r8, r6, r7
 801377a:	608b      	str	r3, [r1, #8]
 801377c:	f1b8 0f00 	cmp.w	r8, #0
 8013780:	dde9      	ble.n	8013756 <__sflush_r+0xae>
 8013782:	6a21      	ldr	r1, [r4, #32]
 8013784:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013786:	4643      	mov	r3, r8
 8013788:	463a      	mov	r2, r7
 801378a:	4628      	mov	r0, r5
 801378c:	47b0      	blx	r6
 801378e:	2800      	cmp	r0, #0
 8013790:	dc08      	bgt.n	80137a4 <__sflush_r+0xfc>
 8013792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801379a:	81a3      	strh	r3, [r4, #12]
 801379c:	f04f 30ff 	mov.w	r0, #4294967295
 80137a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137a4:	4407      	add	r7, r0
 80137a6:	eba8 0800 	sub.w	r8, r8, r0
 80137aa:	e7e7      	b.n	801377c <__sflush_r+0xd4>
 80137ac:	dfbffffe 	.word	0xdfbffffe

080137b0 <_fflush_r>:
 80137b0:	b538      	push	{r3, r4, r5, lr}
 80137b2:	690b      	ldr	r3, [r1, #16]
 80137b4:	4605      	mov	r5, r0
 80137b6:	460c      	mov	r4, r1
 80137b8:	b913      	cbnz	r3, 80137c0 <_fflush_r+0x10>
 80137ba:	2500      	movs	r5, #0
 80137bc:	4628      	mov	r0, r5
 80137be:	bd38      	pop	{r3, r4, r5, pc}
 80137c0:	b118      	cbz	r0, 80137ca <_fflush_r+0x1a>
 80137c2:	6a03      	ldr	r3, [r0, #32]
 80137c4:	b90b      	cbnz	r3, 80137ca <_fflush_r+0x1a>
 80137c6:	f7ff fa61 	bl	8012c8c <__sinit>
 80137ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d0f3      	beq.n	80137ba <_fflush_r+0xa>
 80137d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80137d4:	07d0      	lsls	r0, r2, #31
 80137d6:	d404      	bmi.n	80137e2 <_fflush_r+0x32>
 80137d8:	0599      	lsls	r1, r3, #22
 80137da:	d402      	bmi.n	80137e2 <_fflush_r+0x32>
 80137dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137de:	f7ff fb64 	bl	8012eaa <__retarget_lock_acquire_recursive>
 80137e2:	4628      	mov	r0, r5
 80137e4:	4621      	mov	r1, r4
 80137e6:	f7ff ff5f 	bl	80136a8 <__sflush_r>
 80137ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137ec:	07da      	lsls	r2, r3, #31
 80137ee:	4605      	mov	r5, r0
 80137f0:	d4e4      	bmi.n	80137bc <_fflush_r+0xc>
 80137f2:	89a3      	ldrh	r3, [r4, #12]
 80137f4:	059b      	lsls	r3, r3, #22
 80137f6:	d4e1      	bmi.n	80137bc <_fflush_r+0xc>
 80137f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137fa:	f7ff fb57 	bl	8012eac <__retarget_lock_release_recursive>
 80137fe:	e7dd      	b.n	80137bc <_fflush_r+0xc>

08013800 <fiprintf>:
 8013800:	b40e      	push	{r1, r2, r3}
 8013802:	b503      	push	{r0, r1, lr}
 8013804:	4601      	mov	r1, r0
 8013806:	ab03      	add	r3, sp, #12
 8013808:	4805      	ldr	r0, [pc, #20]	@ (8013820 <fiprintf+0x20>)
 801380a:	f853 2b04 	ldr.w	r2, [r3], #4
 801380e:	6800      	ldr	r0, [r0, #0]
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	f7ff fca3 	bl	801315c <_vfiprintf_r>
 8013816:	b002      	add	sp, #8
 8013818:	f85d eb04 	ldr.w	lr, [sp], #4
 801381c:	b003      	add	sp, #12
 801381e:	4770      	bx	lr
 8013820:	2000003c 	.word	0x2000003c

08013824 <__swbuf_r>:
 8013824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013826:	460e      	mov	r6, r1
 8013828:	4614      	mov	r4, r2
 801382a:	4605      	mov	r5, r0
 801382c:	b118      	cbz	r0, 8013836 <__swbuf_r+0x12>
 801382e:	6a03      	ldr	r3, [r0, #32]
 8013830:	b90b      	cbnz	r3, 8013836 <__swbuf_r+0x12>
 8013832:	f7ff fa2b 	bl	8012c8c <__sinit>
 8013836:	69a3      	ldr	r3, [r4, #24]
 8013838:	60a3      	str	r3, [r4, #8]
 801383a:	89a3      	ldrh	r3, [r4, #12]
 801383c:	071a      	lsls	r2, r3, #28
 801383e:	d501      	bpl.n	8013844 <__swbuf_r+0x20>
 8013840:	6923      	ldr	r3, [r4, #16]
 8013842:	b943      	cbnz	r3, 8013856 <__swbuf_r+0x32>
 8013844:	4621      	mov	r1, r4
 8013846:	4628      	mov	r0, r5
 8013848:	f000 f82a 	bl	80138a0 <__swsetup_r>
 801384c:	b118      	cbz	r0, 8013856 <__swbuf_r+0x32>
 801384e:	f04f 37ff 	mov.w	r7, #4294967295
 8013852:	4638      	mov	r0, r7
 8013854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013856:	6823      	ldr	r3, [r4, #0]
 8013858:	6922      	ldr	r2, [r4, #16]
 801385a:	1a98      	subs	r0, r3, r2
 801385c:	6963      	ldr	r3, [r4, #20]
 801385e:	b2f6      	uxtb	r6, r6
 8013860:	4283      	cmp	r3, r0
 8013862:	4637      	mov	r7, r6
 8013864:	dc05      	bgt.n	8013872 <__swbuf_r+0x4e>
 8013866:	4621      	mov	r1, r4
 8013868:	4628      	mov	r0, r5
 801386a:	f7ff ffa1 	bl	80137b0 <_fflush_r>
 801386e:	2800      	cmp	r0, #0
 8013870:	d1ed      	bne.n	801384e <__swbuf_r+0x2a>
 8013872:	68a3      	ldr	r3, [r4, #8]
 8013874:	3b01      	subs	r3, #1
 8013876:	60a3      	str	r3, [r4, #8]
 8013878:	6823      	ldr	r3, [r4, #0]
 801387a:	1c5a      	adds	r2, r3, #1
 801387c:	6022      	str	r2, [r4, #0]
 801387e:	701e      	strb	r6, [r3, #0]
 8013880:	6962      	ldr	r2, [r4, #20]
 8013882:	1c43      	adds	r3, r0, #1
 8013884:	429a      	cmp	r2, r3
 8013886:	d004      	beq.n	8013892 <__swbuf_r+0x6e>
 8013888:	89a3      	ldrh	r3, [r4, #12]
 801388a:	07db      	lsls	r3, r3, #31
 801388c:	d5e1      	bpl.n	8013852 <__swbuf_r+0x2e>
 801388e:	2e0a      	cmp	r6, #10
 8013890:	d1df      	bne.n	8013852 <__swbuf_r+0x2e>
 8013892:	4621      	mov	r1, r4
 8013894:	4628      	mov	r0, r5
 8013896:	f7ff ff8b 	bl	80137b0 <_fflush_r>
 801389a:	2800      	cmp	r0, #0
 801389c:	d0d9      	beq.n	8013852 <__swbuf_r+0x2e>
 801389e:	e7d6      	b.n	801384e <__swbuf_r+0x2a>

080138a0 <__swsetup_r>:
 80138a0:	b538      	push	{r3, r4, r5, lr}
 80138a2:	4b29      	ldr	r3, [pc, #164]	@ (8013948 <__swsetup_r+0xa8>)
 80138a4:	4605      	mov	r5, r0
 80138a6:	6818      	ldr	r0, [r3, #0]
 80138a8:	460c      	mov	r4, r1
 80138aa:	b118      	cbz	r0, 80138b4 <__swsetup_r+0x14>
 80138ac:	6a03      	ldr	r3, [r0, #32]
 80138ae:	b90b      	cbnz	r3, 80138b4 <__swsetup_r+0x14>
 80138b0:	f7ff f9ec 	bl	8012c8c <__sinit>
 80138b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138b8:	0719      	lsls	r1, r3, #28
 80138ba:	d422      	bmi.n	8013902 <__swsetup_r+0x62>
 80138bc:	06da      	lsls	r2, r3, #27
 80138be:	d407      	bmi.n	80138d0 <__swsetup_r+0x30>
 80138c0:	2209      	movs	r2, #9
 80138c2:	602a      	str	r2, [r5, #0]
 80138c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138c8:	81a3      	strh	r3, [r4, #12]
 80138ca:	f04f 30ff 	mov.w	r0, #4294967295
 80138ce:	e033      	b.n	8013938 <__swsetup_r+0x98>
 80138d0:	0758      	lsls	r0, r3, #29
 80138d2:	d512      	bpl.n	80138fa <__swsetup_r+0x5a>
 80138d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80138d6:	b141      	cbz	r1, 80138ea <__swsetup_r+0x4a>
 80138d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80138dc:	4299      	cmp	r1, r3
 80138de:	d002      	beq.n	80138e6 <__swsetup_r+0x46>
 80138e0:	4628      	mov	r0, r5
 80138e2:	f7ff fb11 	bl	8012f08 <_free_r>
 80138e6:	2300      	movs	r3, #0
 80138e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80138ea:	89a3      	ldrh	r3, [r4, #12]
 80138ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80138f0:	81a3      	strh	r3, [r4, #12]
 80138f2:	2300      	movs	r3, #0
 80138f4:	6063      	str	r3, [r4, #4]
 80138f6:	6923      	ldr	r3, [r4, #16]
 80138f8:	6023      	str	r3, [r4, #0]
 80138fa:	89a3      	ldrh	r3, [r4, #12]
 80138fc:	f043 0308 	orr.w	r3, r3, #8
 8013900:	81a3      	strh	r3, [r4, #12]
 8013902:	6923      	ldr	r3, [r4, #16]
 8013904:	b94b      	cbnz	r3, 801391a <__swsetup_r+0x7a>
 8013906:	89a3      	ldrh	r3, [r4, #12]
 8013908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801390c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013910:	d003      	beq.n	801391a <__swsetup_r+0x7a>
 8013912:	4621      	mov	r1, r4
 8013914:	4628      	mov	r0, r5
 8013916:	f000 f856 	bl	80139c6 <__smakebuf_r>
 801391a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801391e:	f013 0201 	ands.w	r2, r3, #1
 8013922:	d00a      	beq.n	801393a <__swsetup_r+0x9a>
 8013924:	2200      	movs	r2, #0
 8013926:	60a2      	str	r2, [r4, #8]
 8013928:	6962      	ldr	r2, [r4, #20]
 801392a:	4252      	negs	r2, r2
 801392c:	61a2      	str	r2, [r4, #24]
 801392e:	6922      	ldr	r2, [r4, #16]
 8013930:	b942      	cbnz	r2, 8013944 <__swsetup_r+0xa4>
 8013932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013936:	d1c5      	bne.n	80138c4 <__swsetup_r+0x24>
 8013938:	bd38      	pop	{r3, r4, r5, pc}
 801393a:	0799      	lsls	r1, r3, #30
 801393c:	bf58      	it	pl
 801393e:	6962      	ldrpl	r2, [r4, #20]
 8013940:	60a2      	str	r2, [r4, #8]
 8013942:	e7f4      	b.n	801392e <__swsetup_r+0x8e>
 8013944:	2000      	movs	r0, #0
 8013946:	e7f7      	b.n	8013938 <__swsetup_r+0x98>
 8013948:	2000003c 	.word	0x2000003c

0801394c <_sbrk_r>:
 801394c:	b538      	push	{r3, r4, r5, lr}
 801394e:	4d06      	ldr	r5, [pc, #24]	@ (8013968 <_sbrk_r+0x1c>)
 8013950:	2300      	movs	r3, #0
 8013952:	4604      	mov	r4, r0
 8013954:	4608      	mov	r0, r1
 8013956:	602b      	str	r3, [r5, #0]
 8013958:	f7ed fbbe 	bl	80010d8 <_sbrk>
 801395c:	1c43      	adds	r3, r0, #1
 801395e:	d102      	bne.n	8013966 <_sbrk_r+0x1a>
 8013960:	682b      	ldr	r3, [r5, #0]
 8013962:	b103      	cbz	r3, 8013966 <_sbrk_r+0x1a>
 8013964:	6023      	str	r3, [r4, #0]
 8013966:	bd38      	pop	{r3, r4, r5, pc}
 8013968:	20008b88 	.word	0x20008b88

0801396c <abort>:
 801396c:	b508      	push	{r3, lr}
 801396e:	2006      	movs	r0, #6
 8013970:	f000 f88e 	bl	8013a90 <raise>
 8013974:	2001      	movs	r0, #1
 8013976:	f7ed fb37 	bl	8000fe8 <_exit>

0801397a <__swhatbuf_r>:
 801397a:	b570      	push	{r4, r5, r6, lr}
 801397c:	460c      	mov	r4, r1
 801397e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013982:	2900      	cmp	r1, #0
 8013984:	b096      	sub	sp, #88	@ 0x58
 8013986:	4615      	mov	r5, r2
 8013988:	461e      	mov	r6, r3
 801398a:	da0d      	bge.n	80139a8 <__swhatbuf_r+0x2e>
 801398c:	89a3      	ldrh	r3, [r4, #12]
 801398e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013992:	f04f 0100 	mov.w	r1, #0
 8013996:	bf14      	ite	ne
 8013998:	2340      	movne	r3, #64	@ 0x40
 801399a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801399e:	2000      	movs	r0, #0
 80139a0:	6031      	str	r1, [r6, #0]
 80139a2:	602b      	str	r3, [r5, #0]
 80139a4:	b016      	add	sp, #88	@ 0x58
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	466a      	mov	r2, sp
 80139aa:	f000 f879 	bl	8013aa0 <_fstat_r>
 80139ae:	2800      	cmp	r0, #0
 80139b0:	dbec      	blt.n	801398c <__swhatbuf_r+0x12>
 80139b2:	9901      	ldr	r1, [sp, #4]
 80139b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80139b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80139bc:	4259      	negs	r1, r3
 80139be:	4159      	adcs	r1, r3
 80139c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139c4:	e7eb      	b.n	801399e <__swhatbuf_r+0x24>

080139c6 <__smakebuf_r>:
 80139c6:	898b      	ldrh	r3, [r1, #12]
 80139c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139ca:	079d      	lsls	r5, r3, #30
 80139cc:	4606      	mov	r6, r0
 80139ce:	460c      	mov	r4, r1
 80139d0:	d507      	bpl.n	80139e2 <__smakebuf_r+0x1c>
 80139d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80139d6:	6023      	str	r3, [r4, #0]
 80139d8:	6123      	str	r3, [r4, #16]
 80139da:	2301      	movs	r3, #1
 80139dc:	6163      	str	r3, [r4, #20]
 80139de:	b003      	add	sp, #12
 80139e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139e2:	ab01      	add	r3, sp, #4
 80139e4:	466a      	mov	r2, sp
 80139e6:	f7ff ffc8 	bl	801397a <__swhatbuf_r>
 80139ea:	9f00      	ldr	r7, [sp, #0]
 80139ec:	4605      	mov	r5, r0
 80139ee:	4639      	mov	r1, r7
 80139f0:	4630      	mov	r0, r6
 80139f2:	f7ff fafd 	bl	8012ff0 <_malloc_r>
 80139f6:	b948      	cbnz	r0, 8013a0c <__smakebuf_r+0x46>
 80139f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139fc:	059a      	lsls	r2, r3, #22
 80139fe:	d4ee      	bmi.n	80139de <__smakebuf_r+0x18>
 8013a00:	f023 0303 	bic.w	r3, r3, #3
 8013a04:	f043 0302 	orr.w	r3, r3, #2
 8013a08:	81a3      	strh	r3, [r4, #12]
 8013a0a:	e7e2      	b.n	80139d2 <__smakebuf_r+0xc>
 8013a0c:	89a3      	ldrh	r3, [r4, #12]
 8013a0e:	6020      	str	r0, [r4, #0]
 8013a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a14:	81a3      	strh	r3, [r4, #12]
 8013a16:	9b01      	ldr	r3, [sp, #4]
 8013a18:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013a1c:	b15b      	cbz	r3, 8013a36 <__smakebuf_r+0x70>
 8013a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a22:	4630      	mov	r0, r6
 8013a24:	f000 f84e 	bl	8013ac4 <_isatty_r>
 8013a28:	b128      	cbz	r0, 8013a36 <__smakebuf_r+0x70>
 8013a2a:	89a3      	ldrh	r3, [r4, #12]
 8013a2c:	f023 0303 	bic.w	r3, r3, #3
 8013a30:	f043 0301 	orr.w	r3, r3, #1
 8013a34:	81a3      	strh	r3, [r4, #12]
 8013a36:	89a3      	ldrh	r3, [r4, #12]
 8013a38:	431d      	orrs	r5, r3
 8013a3a:	81a5      	strh	r5, [r4, #12]
 8013a3c:	e7cf      	b.n	80139de <__smakebuf_r+0x18>

08013a3e <_raise_r>:
 8013a3e:	291f      	cmp	r1, #31
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	4605      	mov	r5, r0
 8013a44:	460c      	mov	r4, r1
 8013a46:	d904      	bls.n	8013a52 <_raise_r+0x14>
 8013a48:	2316      	movs	r3, #22
 8013a4a:	6003      	str	r3, [r0, #0]
 8013a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a50:	bd38      	pop	{r3, r4, r5, pc}
 8013a52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013a54:	b112      	cbz	r2, 8013a5c <_raise_r+0x1e>
 8013a56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a5a:	b94b      	cbnz	r3, 8013a70 <_raise_r+0x32>
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	f000 f853 	bl	8013b08 <_getpid_r>
 8013a62:	4622      	mov	r2, r4
 8013a64:	4601      	mov	r1, r0
 8013a66:	4628      	mov	r0, r5
 8013a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a6c:	f000 b83a 	b.w	8013ae4 <_kill_r>
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d00a      	beq.n	8013a8a <_raise_r+0x4c>
 8013a74:	1c59      	adds	r1, r3, #1
 8013a76:	d103      	bne.n	8013a80 <_raise_r+0x42>
 8013a78:	2316      	movs	r3, #22
 8013a7a:	6003      	str	r3, [r0, #0]
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	e7e7      	b.n	8013a50 <_raise_r+0x12>
 8013a80:	2100      	movs	r1, #0
 8013a82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013a86:	4620      	mov	r0, r4
 8013a88:	4798      	blx	r3
 8013a8a:	2000      	movs	r0, #0
 8013a8c:	e7e0      	b.n	8013a50 <_raise_r+0x12>
	...

08013a90 <raise>:
 8013a90:	4b02      	ldr	r3, [pc, #8]	@ (8013a9c <raise+0xc>)
 8013a92:	4601      	mov	r1, r0
 8013a94:	6818      	ldr	r0, [r3, #0]
 8013a96:	f7ff bfd2 	b.w	8013a3e <_raise_r>
 8013a9a:	bf00      	nop
 8013a9c:	2000003c 	.word	0x2000003c

08013aa0 <_fstat_r>:
 8013aa0:	b538      	push	{r3, r4, r5, lr}
 8013aa2:	4d07      	ldr	r5, [pc, #28]	@ (8013ac0 <_fstat_r+0x20>)
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	4608      	mov	r0, r1
 8013aaa:	4611      	mov	r1, r2
 8013aac:	602b      	str	r3, [r5, #0]
 8013aae:	f7ed faeb 	bl	8001088 <_fstat>
 8013ab2:	1c43      	adds	r3, r0, #1
 8013ab4:	d102      	bne.n	8013abc <_fstat_r+0x1c>
 8013ab6:	682b      	ldr	r3, [r5, #0]
 8013ab8:	b103      	cbz	r3, 8013abc <_fstat_r+0x1c>
 8013aba:	6023      	str	r3, [r4, #0]
 8013abc:	bd38      	pop	{r3, r4, r5, pc}
 8013abe:	bf00      	nop
 8013ac0:	20008b88 	.word	0x20008b88

08013ac4 <_isatty_r>:
 8013ac4:	b538      	push	{r3, r4, r5, lr}
 8013ac6:	4d06      	ldr	r5, [pc, #24]	@ (8013ae0 <_isatty_r+0x1c>)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	4604      	mov	r4, r0
 8013acc:	4608      	mov	r0, r1
 8013ace:	602b      	str	r3, [r5, #0]
 8013ad0:	f7ed faea 	bl	80010a8 <_isatty>
 8013ad4:	1c43      	adds	r3, r0, #1
 8013ad6:	d102      	bne.n	8013ade <_isatty_r+0x1a>
 8013ad8:	682b      	ldr	r3, [r5, #0]
 8013ada:	b103      	cbz	r3, 8013ade <_isatty_r+0x1a>
 8013adc:	6023      	str	r3, [r4, #0]
 8013ade:	bd38      	pop	{r3, r4, r5, pc}
 8013ae0:	20008b88 	.word	0x20008b88

08013ae4 <_kill_r>:
 8013ae4:	b538      	push	{r3, r4, r5, lr}
 8013ae6:	4d07      	ldr	r5, [pc, #28]	@ (8013b04 <_kill_r+0x20>)
 8013ae8:	2300      	movs	r3, #0
 8013aea:	4604      	mov	r4, r0
 8013aec:	4608      	mov	r0, r1
 8013aee:	4611      	mov	r1, r2
 8013af0:	602b      	str	r3, [r5, #0]
 8013af2:	f7ed fa67 	bl	8000fc4 <_kill>
 8013af6:	1c43      	adds	r3, r0, #1
 8013af8:	d102      	bne.n	8013b00 <_kill_r+0x1c>
 8013afa:	682b      	ldr	r3, [r5, #0]
 8013afc:	b103      	cbz	r3, 8013b00 <_kill_r+0x1c>
 8013afe:	6023      	str	r3, [r4, #0]
 8013b00:	bd38      	pop	{r3, r4, r5, pc}
 8013b02:	bf00      	nop
 8013b04:	20008b88 	.word	0x20008b88

08013b08 <_getpid_r>:
 8013b08:	f7ed ba54 	b.w	8000fb4 <_getpid>

08013b0c <_init>:
 8013b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b0e:	bf00      	nop
 8013b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b12:	bc08      	pop	{r3}
 8013b14:	469e      	mov	lr, r3
 8013b16:	4770      	bx	lr

08013b18 <_fini>:
 8013b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b1a:	bf00      	nop
 8013b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b1e:	bc08      	pop	{r3}
 8013b20:	469e      	mov	lr, r3
 8013b22:	4770      	bx	lr
