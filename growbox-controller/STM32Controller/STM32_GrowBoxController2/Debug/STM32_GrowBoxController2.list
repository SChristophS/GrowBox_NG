
STM32_GrowBoxController2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b80  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08006c8c  08006c8c  00007c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f88  08006f88  000080e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006f88  08006f88  00007f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f90  08006f90  000080e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f94  08006f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08006f98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  200000e0  08007078  000080e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08007078  00008b64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf77  00000000  00000000  00008109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265d  00000000  00000000  00014080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000166e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000981  00000000  00000000  00017340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000af35  00000000  00000000  00017cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000039f3  00000000  00000000  00022bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000265e9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003984  00000000  00000000  0002662c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007c  00000000  00000000  00029fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006c74 	.word	0x08006c74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08006c74 	.word	0x08006c74

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_write>:
/* USER CODE BEGIN PFP */
void print_network_information(void);
int8_t process_dhcp(void);
int8_t process_dns(void);
int _write(int fd, char *str, int len)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8000168:	2300      	movs	r3, #0
 800016a:	617b      	str	r3, [r7, #20]
 800016c:	e00b      	b.n	8000186 <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800016e:	697b      	ldr	r3, [r7, #20]
 8000170:	68ba      	ldr	r2, [r7, #8]
 8000172:	18d1      	adds	r1, r2, r3
 8000174:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000178:	2201      	movs	r2, #1
 800017a:	4807      	ldr	r0, [pc, #28]	@ (8000198 <_write+0x3c>)
 800017c:	f005 fc3a 	bl	80059f4 <HAL_UART_Transmit>
	for(int i = 0; i < len; i++)
 8000180:	697b      	ldr	r3, [r7, #20]
 8000182:	3301      	adds	r3, #1
 8000184:	617b      	str	r3, [r7, #20]
 8000186:	697a      	ldr	r2, [r7, #20]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	429a      	cmp	r2, r3
 800018c:	dbef      	blt.n	800016e <_write+0x12>
	}
	return len;
 800018e:	687b      	ldr	r3, [r7, #4]
}
 8000190:	4618      	mov	r0, r3
 8000192:	3718      	adds	r7, #24
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000154 	.word	0x20000154

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a2:	f004 f99b 	bl	80044dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a6:	f000 f889 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001aa:	f000 f929 	bl	8000400 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ae:	f000 f8fd 	bl	80003ac <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80001b2:	f000 f8c5 	bl	8000340 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("\t - W5x00 Project - \r\n");
 80001b6:	4834      	ldr	r0, [pc, #208]	@ (8000288 <main+0xec>)
 80001b8:	f005 fec6 	bl	8005f48 <puts>
  resetAssert();
 80001bc:	f000 fc62 	bl	8000a84 <resetAssert>
  HAL_Delay(300);
 80001c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80001c4:	f004 f9ec 	bl	80045a0 <HAL_Delay>
  resetDeassert();
 80001c8:	f000 fc68 	bl	8000a9c <resetDeassert>
  HAL_Delay(300);
 80001cc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80001d0:	f004 f9e6 	bl	80045a0 <HAL_Delay>
  printf("\t - WizChip Init - \r\n");
 80001d4:	482d      	ldr	r0, [pc, #180]	@ (800028c <main+0xf0>)
 80001d6:	f005 feb7 	bl	8005f48 <puts>

  WIZCHIPInitialize();
 80001da:	f000 fc0d 	bl	80009f8 <WIZCHIPInitialize>

  printf("version:%.2x\r\n", getVERSIONR());
 80001de:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 80001e2:	f002 fc73 	bl	8002acc <WIZCHIP_READ>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4619      	mov	r1, r3
 80001ea:	4829      	ldr	r0, [pc, #164]	@ (8000290 <main+0xf4>)
 80001ec:	f005 fe44 	bl	8005e78 <iprintf>

  wizchip_setnetinfo(&defaultNetInfo);
 80001f0:	4828      	ldr	r0, [pc, #160]	@ (8000294 <main+0xf8>)
 80001f2:	f004 f861 	bl	80042b8 <wizchip_setnetinfo>
  print_network_information();
 80001f6:	f000 f987 	bl	8000508 <print_network_information>

#ifdef __USE_DHCP__
  if(process_dhcp() == DHCP_IP_LEASED) // DHCP success
 80001fa:	f000 f9f5 	bl	80005e8 <process_dhcp>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b04      	cmp	r3, #4
 8000202:	d103      	bne.n	800020c <main+0x70>
  {
    flag_process_dhcp_success = ON;
 8000204:	4b24      	ldr	r3, [pc, #144]	@ (8000298 <main+0xfc>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
 800020a:	e003      	b.n	8000214 <main+0x78>
  }
  else // DHCP failed
  {
    ctlnetwork(CN_SET_NETINFO, &defaultNetInfo); // Set default static IP settings
 800020c:	4921      	ldr	r1, [pc, #132]	@ (8000294 <main+0xf8>)
 800020e:	2000      	movs	r0, #0
 8000210:	f003 fd58 	bl	8003cc4 <ctlnetwork>
  }
#else
  ctlnetwork(CN_SET_NETINFO, &defaultNetInfo); // Set default static IP settings
#endif
  printf("Register value after W5x00 initialize!\r\n");
 8000214:	4821      	ldr	r0, [pc, #132]	@ (800029c <main+0x100>)
 8000216:	f005 fe97 	bl	8005f48 <puts>
  print_network_information();
 800021a:	f000 f975 	bl	8000508 <print_network_information>

  /* DNS client */
#ifdef __USE_DNS__
  if(process_dns()) // DNS success
 800021e:	f000 fa23 	bl	8000668 <process_dns>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <main+0x92>
  {
    flag_process_dns_success = ON;
 8000228:	4b1d      	ldr	r3, [pc, #116]	@ (80002a0 <main+0x104>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
  }
#endif
  // Debug UART: DNS results print out
#ifdef __USE_DHCP__
  if(flag_process_dhcp_success == ENABLE)
 800022e:	4b1a      	ldr	r3, [pc, #104]	@ (8000298 <main+0xfc>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d107      	bne.n	8000246 <main+0xaa>
  {
    printf(" # DHCP IP Leased time : %u seconds\r\n", getDHCPLeasetime());
 8000236:	f001 ffed 	bl	8002214 <getDHCPLeasetime>
 800023a:	4603      	mov	r3, r0
 800023c:	4619      	mov	r1, r3
 800023e:	4819      	ldr	r0, [pc, #100]	@ (80002a4 <main+0x108>)
 8000240:	f005 fe1a 	bl	8005e78 <iprintf>
 8000244:	e002      	b.n	800024c <main+0xb0>
  }
  else
  {
    printf(" # DHCP Failed\r\n");
 8000246:	4818      	ldr	r0, [pc, #96]	@ (80002a8 <main+0x10c>)
 8000248:	f005 fe7e 	bl	8005f48 <puts>
  }
#endif

#ifdef __USE_DNS__
  if(flag_process_dns_success == ENABLE)
 800024c:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <main+0x104>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d113      	bne.n	800027c <main+0xe0>
  {
    printf(" # DNS: %s => %d.%d.%d.%d\r\n", Domain_name, Domain_IP[0], Domain_IP[1], Domain_IP[2], Domain_IP[3]);
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <main+0x110>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4619      	mov	r1, r3
 800025a:	4b14      	ldr	r3, [pc, #80]	@ (80002ac <main+0x110>)
 800025c:	785b      	ldrb	r3, [r3, #1]
 800025e:	4618      	mov	r0, r3
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <main+0x110>)
 8000262:	789b      	ldrb	r3, [r3, #2]
 8000264:	461a      	mov	r2, r3
 8000266:	4b11      	ldr	r3, [pc, #68]	@ (80002ac <main+0x110>)
 8000268:	78db      	ldrb	r3, [r3, #3]
 800026a:	9301      	str	r3, [sp, #4]
 800026c:	9200      	str	r2, [sp, #0]
 800026e:	4603      	mov	r3, r0
 8000270:	460a      	mov	r2, r1
 8000272:	490f      	ldr	r1, [pc, #60]	@ (80002b0 <main+0x114>)
 8000274:	480f      	ldr	r0, [pc, #60]	@ (80002b4 <main+0x118>)
 8000276:	f005 fdff 	bl	8005e78 <iprintf>
 800027a:	e003      	b.n	8000284 <main+0xe8>
  }
  else
  {
    printf(" # DNS Failed\r\n");
 800027c:	480e      	ldr	r0, [pc, #56]	@ (80002b8 <main+0x11c>)
 800027e:	f005 fe63 	bl	8005f48 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <main+0xe8>
 8000288:	08006c8c 	.word	0x08006c8c
 800028c:	08006ca4 	.word	0x08006ca4
 8000290:	08006cbc 	.word	0x08006cbc
 8000294:	20000000 	.word	0x20000000
 8000298:	2000019c 	.word	0x2000019c
 800029c:	08006ccc 	.word	0x08006ccc
 80002a0:	2000019d 	.word	0x2000019d
 80002a4:	08006cf4 	.word	0x08006cf4
 80002a8:	08006d1c 	.word	0x08006d1c
 80002ac:	200001a0 	.word	0x200001a0
 80002b0:	2000001c 	.word	0x2000001c
 80002b4:	08006d2c 	.word	0x08006d2c
 80002b8:	08006d48 	.word	0x08006d48

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	@ 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f005 ff1c 	bl	8006108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ee:	2300      	movs	r3, #0
 80002f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002f2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f004 fc3f 	bl	8004b80 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000308:	f000 f9f6 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f004 feac 	bl	8005084 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000332:	f000 f9e1 	bl	80006f8 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	@ 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration */
  hspi2.Instance = SPI2;
 8000344:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000346:	4a18      	ldr	r2, [pc, #96]	@ (80003a8 <MX_SPI2_Init+0x68>)
 8000348:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800034a:	4b16      	ldr	r3, [pc, #88]	@ (80003a4 <MX_SPI2_Init+0x64>)
 800034c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000350:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000358:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <MX_SPI2_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800035e:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000364:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800036a:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <MX_SPI2_Init+0x64>)
 800036c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000370:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <MX_SPI2_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800038a:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <MX_SPI2_Init+0x64>)
 800038c:	220a      	movs	r2, #10
 800038e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000390:	4804      	ldr	r0, [pc, #16]	@ (80003a4 <MX_SPI2_Init+0x64>)
 8000392:	f005 f805 	bl	80053a0 <HAL_SPI_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800039c:	f000 f9ac 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000fc 	.word	0x200000fc
 80003a8:	40003800 	.word	0x40003800

080003ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b0:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003b2:	4a12      	ldr	r2, [pc, #72]	@ (80003fc <MX_USART2_UART_Init+0x50>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003b6:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003e4:	f005 fab6 	bl	8005954 <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ee:	f000 f983 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000154 	.word	0x20000154
 80003fc:	40004400 	.word	0x40004400

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000414:	4b37      	ldr	r3, [pc, #220]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a36      	ldr	r2, [pc, #216]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b34      	ldr	r3, [pc, #208]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0310 	and.w	r3, r3, #16
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042c:	4b31      	ldr	r3, [pc, #196]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a30      	ldr	r2, [pc, #192]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2e      	ldr	r3, [pc, #184]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0320 	and.w	r3, r3, #32
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b2b      	ldr	r3, [pc, #172]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a2a      	ldr	r2, [pc, #168]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b28      	ldr	r3, [pc, #160]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	4b25      	ldr	r3, [pc, #148]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a24      	ldr	r2, [pc, #144]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <MX_GPIO_Init+0xf4>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0308 	and.w	r3, r3, #8
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	481f      	ldr	r0, [pc, #124]	@ (80004f8 <MX_GPIO_Init+0xf8>)
 800047a:	f004 fb47 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ChipSelect_for_W5500_Pin | ResetPin_for_W5500_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2106      	movs	r1, #6
 8000482:	481e      	ldr	r0, [pc, #120]	@ (80004fc <MX_GPIO_Init+0xfc>)
 8000484:	f004 fb42 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000488:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800048e:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <MX_GPIO_Init+0x100>)
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	4819      	ldr	r0, [pc, #100]	@ (8000504 <MX_GPIO_Init+0x104>)
 800049e:	f004 f9b1 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a2:	2320      	movs	r3, #32
 80004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	4619      	mov	r1, r3
 80004b8:	480f      	ldr	r0, [pc, #60]	@ (80004f8 <MX_GPIO_Init+0xf8>)
 80004ba:	f004 f9a3 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ChipSelect_for_W5500_Pin ResetPin_for_W5500_Pin */
  GPIO_InitStruct.Pin = ChipSelect_for_W5500_Pin | ResetPin_for_W5500_Pin;
 80004be:	2306      	movs	r3, #6
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <MX_GPIO_Init+0xfc>)
 80004d6:	f004 f995 	bl	8004804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	2028      	movs	r0, #40	@ 0x28
 80004e0:	f004 f959 	bl	8004796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004e4:	2028      	movs	r0, #40	@ 0x28
 80004e6:	f004 f972 	bl	80047ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800
 80004fc:	40010c00 	.word	0x40010c00
 8000500:	10110000 	.word	0x10110000
 8000504:	40011000 	.word	0x40011000

08000508 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af04      	add	r7, sp, #16
  wizchip_getnetinfo(&defaultNetInfo);
 800050e:	4830      	ldr	r0, [pc, #192]	@ (80005d0 <print_network_information+0xc8>)
 8000510:	f003 ff12 	bl	8004338 <wizchip_getnetinfo>
  printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", defaultNetInfo.mac[0], defaultNetInfo.mac[1], defaultNetInfo.mac[2], defaultNetInfo.mac[3], defaultNetInfo.mac[4], defaultNetInfo.mac[5]);
 8000514:	4b2e      	ldr	r3, [pc, #184]	@ (80005d0 <print_network_information+0xc8>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <print_network_information+0xc8>)
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	461c      	mov	r4, r3
 8000520:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <print_network_information+0xc8>)
 8000522:	789b      	ldrb	r3, [r3, #2]
 8000524:	461d      	mov	r5, r3
 8000526:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <print_network_information+0xc8>)
 8000528:	78db      	ldrb	r3, [r3, #3]
 800052a:	461a      	mov	r2, r3
 800052c:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <print_network_information+0xc8>)
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	4619      	mov	r1, r3
 8000532:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <print_network_information+0xc8>)
 8000534:	795b      	ldrb	r3, [r3, #5]
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	9101      	str	r1, [sp, #4]
 800053a:	9200      	str	r2, [sp, #0]
 800053c:	462b      	mov	r3, r5
 800053e:	4622      	mov	r2, r4
 8000540:	4601      	mov	r1, r0
 8000542:	4824      	ldr	r0, [pc, #144]	@ (80005d4 <print_network_information+0xcc>)
 8000544:	f005 fc98 	bl	8005e78 <iprintf>
  printf("IP address : %d.%d.%d.%d\n\r", defaultNetInfo.ip[0], defaultNetInfo.ip[1], defaultNetInfo.ip[2], defaultNetInfo.ip[3]);
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <print_network_information+0xc8>)
 800054a:	799b      	ldrb	r3, [r3, #6]
 800054c:	4619      	mov	r1, r3
 800054e:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <print_network_information+0xc8>)
 8000550:	79db      	ldrb	r3, [r3, #7]
 8000552:	461a      	mov	r2, r3
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <print_network_information+0xc8>)
 8000556:	7a1b      	ldrb	r3, [r3, #8]
 8000558:	4618      	mov	r0, r3
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <print_network_information+0xc8>)
 800055c:	7a5b      	ldrb	r3, [r3, #9]
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	4603      	mov	r3, r0
 8000562:	481d      	ldr	r0, [pc, #116]	@ (80005d8 <print_network_information+0xd0>)
 8000564:	f005 fc88 	bl	8005e78 <iprintf>
  printf("SM Mask    : %d.%d.%d.%d\n\r", defaultNetInfo.sn[0], defaultNetInfo.sn[1], defaultNetInfo.sn[2], defaultNetInfo.sn[3]);
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <print_network_information+0xc8>)
 800056a:	7a9b      	ldrb	r3, [r3, #10]
 800056c:	4619      	mov	r1, r3
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <print_network_information+0xc8>)
 8000570:	7adb      	ldrb	r3, [r3, #11]
 8000572:	461a      	mov	r2, r3
 8000574:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <print_network_information+0xc8>)
 8000576:	7b1b      	ldrb	r3, [r3, #12]
 8000578:	4618      	mov	r0, r3
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <print_network_information+0xc8>)
 800057c:	7b5b      	ldrb	r3, [r3, #13]
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	4603      	mov	r3, r0
 8000582:	4816      	ldr	r0, [pc, #88]	@ (80005dc <print_network_information+0xd4>)
 8000584:	f005 fc78 	bl	8005e78 <iprintf>
  printf("Gate way   : %d.%d.%d.%d\n\r", defaultNetInfo.gw[0], defaultNetInfo.gw[1], defaultNetInfo.gw[2], defaultNetInfo.gw[3]);
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <print_network_information+0xc8>)
 800058a:	7b9b      	ldrb	r3, [r3, #14]
 800058c:	4619      	mov	r1, r3
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <print_network_information+0xc8>)
 8000590:	7bdb      	ldrb	r3, [r3, #15]
 8000592:	461a      	mov	r2, r3
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <print_network_information+0xc8>)
 8000596:	7c1b      	ldrb	r3, [r3, #16]
 8000598:	4618      	mov	r0, r3
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <print_network_information+0xc8>)
 800059c:	7c5b      	ldrb	r3, [r3, #17]
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	4603      	mov	r3, r0
 80005a2:	480f      	ldr	r0, [pc, #60]	@ (80005e0 <print_network_information+0xd8>)
 80005a4:	f005 fc68 	bl	8005e78 <iprintf>
  printf("DNS Server : %d.%d.%d.%d\n\r", defaultNetInfo.dns[0], defaultNetInfo.dns[1], defaultNetInfo.dns[2], defaultNetInfo.dns[3]);
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <print_network_information+0xc8>)
 80005aa:	7c9b      	ldrb	r3, [r3, #18]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <print_network_information+0xc8>)
 80005b0:	7cdb      	ldrb	r3, [r3, #19]
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <print_network_information+0xc8>)
 80005b6:	7d1b      	ldrb	r3, [r3, #20]
 80005b8:	4618      	mov	r0, r3
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <print_network_information+0xc8>)
 80005bc:	7d5b      	ldrb	r3, [r3, #21]
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4603      	mov	r3, r0
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <print_network_information+0xdc>)
 80005c4:	f005 fc58 	bl	8005e78 <iprintf>
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000
 80005d4:	08006d58 	.word	0x08006d58
 80005d8:	08006d88 	.word	0x08006d88
 80005dc:	08006da4 	.word	0x08006da4
 80005e0:	08006dc0 	.word	0x08006dc0
 80005e4:	08006ddc 	.word	0x08006ddc

080005e8 <process_dhcp>:

int8_t process_dhcp(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71bb      	strb	r3, [r7, #6]
  uint8_t dhcp_retry = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]

#ifdef _MAIN_DEBUG_
  printf(" - DHCP Client running\r\n");
 80005f6:	4817      	ldr	r0, [pc, #92]	@ (8000654 <process_dhcp+0x6c>)
 80005f8:	f005 fca6 	bl	8005f48 <puts>
#endif
  DHCP_init(SOCK_DHCP, data_buf);
 80005fc:	4916      	ldr	r1, [pc, #88]	@ (8000658 <process_dhcp+0x70>)
 80005fe:	2003      	movs	r0, #3
 8000600:	f001 fd5e 	bl	80020c0 <DHCP_init>
  while (1)
  {
    ret = DHCP_run();
 8000604:	f001 fb94 	bl	8001d30 <DHCP_run>
 8000608:	4603      	mov	r3, r0
 800060a:	71bb      	strb	r3, [r7, #6]

    if (ret == DHCP_IP_LEASED)
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b04      	cmp	r3, #4
 8000610:	d103      	bne.n	800061a <process_dhcp+0x32>
    {
#ifdef _MAIN_DEBUG_
      printf(" - DHCP Success\r\n");
 8000612:	4812      	ldr	r0, [pc, #72]	@ (800065c <process_dhcp+0x74>)
 8000614:	f005 fc98 	bl	8005f48 <puts>
#endif
      break;
 8000618:	e015      	b.n	8000646 <process_dhcp+0x5e>
    }
    else if (ret == DHCP_FAILED)
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10a      	bne.n	8000636 <process_dhcp+0x4e>
    {
      dhcp_retry++;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3301      	adds	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
#ifdef _MAIN_DEBUG_
      if (dhcp_retry <= 3) printf(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d804      	bhi.n	8000636 <process_dhcp+0x4e>
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <process_dhcp+0x78>)
 8000632:	f005 fc21 	bl	8005e78 <iprintf>
#endif
    }

    if (dhcp_retry > 3)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b03      	cmp	r3, #3
 800063a:	d9e3      	bls.n	8000604 <process_dhcp+0x1c>
    {
#ifdef _MAIN_DEBUG_
      printf(" - DHCP Failed\r\n\r\n");
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <process_dhcp+0x7c>)
 800063e:	f005 fc83 	bl	8005f48 <puts>
#endif
      DHCP_stop();
 8000642:	f001 fc8f 	bl	8001f64 <DHCP_stop>
      break;
    }
  }

  return ret;
 8000646:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	08006df8 	.word	0x08006df8
 8000658:	200001a4 	.word	0x200001a4
 800065c:	08006e10 	.word	0x08006e10
 8000660:	08006e24 	.word	0x08006e24
 8000664:	08006e50 	.word	0x08006e50

08000668 <process_dns>:

int8_t process_dns(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  int8_t ret = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	71bb      	strb	r3, [r7, #6]
  uint8_t dns_retry = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]

#ifdef _MAIN_DEBUG_
  printf(" - DNS Client running\r\n");
 8000676:	4818      	ldr	r0, [pc, #96]	@ (80006d8 <process_dns+0x70>)
 8000678:	f005 fc66 	bl	8005f48 <puts>
#endif
  DNS_init(SOCK_DNS, data_buf);
 800067c:	4917      	ldr	r1, [pc, #92]	@ (80006dc <process_dns+0x74>)
 800067e:	2004      	movs	r0, #4
 8000680:	f002 f982 	bl	8002988 <DNS_init>

  while (1)
  {
    if ((ret = DNS_run(dns_server, (uint8_t *)Domain_name, Domain_IP)) == 1)
 8000684:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <process_dns+0x78>)
 8000686:	4917      	ldr	r1, [pc, #92]	@ (80006e4 <process_dns+0x7c>)
 8000688:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <process_dns+0x80>)
 800068a:	f002 f999 	bl	80029c0 <DNS_run>
 800068e:	4603      	mov	r3, r0
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d103      	bne.n	80006a2 <process_dns+0x3a>
    {
#ifdef _MAIN_DEBUG_
      printf(" - DNS Success\r\n");
 800069a:	4814      	ldr	r0, [pc, #80]	@ (80006ec <process_dns+0x84>)
 800069c:	f005 fc54 	bl	8005f48 <puts>
#endif
      break;
 80006a0:	e014      	b.n	80006cc <process_dns+0x64>
    }
    else
    {
      dns_retry++;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	3301      	adds	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
#ifdef _MAIN_DEBUG_
      if (dns_retry <= 2) printf(" - DNS Timeout occurred and retry [%d]\r\n", dns_retry);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d804      	bhi.n	80006b8 <process_dns+0x50>
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4619      	mov	r1, r3
 80006b2:	480f      	ldr	r0, [pc, #60]	@ (80006f0 <process_dns+0x88>)
 80006b4:	f005 fbe0 	bl	8005e78 <iprintf>
#endif
    }

    if (dns_retry > 2)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d903      	bls.n	80006c6 <process_dns+0x5e>
    {
#ifdef _MAIN_DEBUG_
      printf(" - DNS Failed\r\n\r\n");
 80006be:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <process_dns+0x8c>)
 80006c0:	f005 fc42 	bl	8005f48 <puts>
#endif
      break;
 80006c4:	e002      	b.n	80006cc <process_dns+0x64>
    }

#ifdef __USE_DHCP__
    DHCP_run();
 80006c6:	f001 fb33 	bl	8001d30 <DHCP_run>
    if ((ret = DNS_run(dns_server, (uint8_t *)Domain_name, Domain_IP)) == 1)
 80006ca:	e7db      	b.n	8000684 <process_dns+0x1c>
#endif
  }
  return ret;
 80006cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	08006e64 	.word	0x08006e64
 80006dc:	200001a4 	.word	0x200001a4
 80006e0:	200001a0 	.word	0x200001a0
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	20000018 	.word	0x20000018
 80006ec:	08006e7c 	.word	0x08006e7c
 80006f0:	08006e8c 	.word	0x08006e8c
 80006f4:	08006eb8 	.word	0x08006eb8

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <Error_Handler+0x8>

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <HAL_MspInit+0x5c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <HAL_MspInit+0x5c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <HAL_MspInit+0x60>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_MspInit+0x60>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <HAL_SPI_MspInit+0x8c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d131      	bne.n	80007ec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <HAL_SPI_MspInit+0x90>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	4a1a      	ldr	r2, [pc, #104]	@ (80007f8 <HAL_SPI_MspInit+0x90>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000792:	61d3      	str	r3, [r2, #28]
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <HAL_SPI_MspInit+0x90>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <HAL_SPI_MspInit+0x90>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <HAL_SPI_MspInit+0x90>)
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_SPI_MspInit+0x90>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007b8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80007bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <HAL_SPI_MspInit+0x94>)
 80007ce:	f004 f819 	bl	8004804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_SPI_MspInit+0x94>)
 80007e8:	f004 f80c 	bl	8004804 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40003800 	.word	0x40003800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010c00 	.word	0x40010c00

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a15      	ldr	r2, [pc, #84]	@ (8000870 <HAL_UART_MspInit+0x70>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d123      	bne.n	8000868 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <HAL_UART_MspInit+0x74>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <HAL_UART_MspInit+0x74>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <HAL_UART_MspInit+0x74>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_UART_MspInit+0x74>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <HAL_UART_MspInit+0x74>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <HAL_UART_MspInit+0x74>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000850:	230c      	movs	r3, #12
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <HAL_UART_MspInit+0x78>)
 8000864:	f003 ffce 	bl	8004804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40004400 	.word	0x40004400
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f003 fe4c 	bl	8004568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008dc:	f004 f92e 	bl	8004b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00a      	b.n	800090c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f6:	f3af 8000 	nop.w
 80008fa:	4601      	mov	r1, r0
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf0      	blt.n	80008f6 <_read+0x12>
  }

  return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:
  }
  return len;
}

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000944:	605a      	str	r2, [r3, #4]
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <_isatty>:

int _isatty(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f005 fc18 	bl	80061e4 <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20005000 	.word	0x20005000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	200009a4 	.word	0x200009a4
 80009e8:	20000b68 	.word	0x20000b68

080009ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <WIZCHIPInitialize>:
 */

#include "wizchip_init.h"


void WIZCHIPInitialize(){
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0

	csDisable();
 80009fe:	f000 f865 	bl	8000acc <csDisable>
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 8000a02:	4919      	ldr	r1, [pc, #100]	@ (8000a68 <WIZCHIPInitialize+0x70>)
 8000a04:	4819      	ldr	r0, [pc, #100]	@ (8000a6c <WIZCHIPInitialize+0x74>)
 8000a06:	f003 f851 	bl	8003aac <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 8000a0a:	4919      	ldr	r1, [pc, #100]	@ (8000a70 <WIZCHIPInitialize+0x78>)
 8000a0c:	4819      	ldr	r0, [pc, #100]	@ (8000a74 <WIZCHIPInitialize+0x7c>)
 8000a0e:	f003 f829 	bl	8003a64 <reg_wizchip_cs_cbfunc>


	uint8_t tmp;
	//w5500, w5200
#if _WIZCHIP_ >= W5200
	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <WIZCHIPInitialize+0x80>)
 8000a14:	1d3c      	adds	r4, r7, #4
 8000a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
	uint8_t memsize[2][4] = { {2,2,2,2},{2,2,2,2}};
#endif
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	f003 f86f 	bl	8003b04 <ctlwizchip>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d105      	bne.n	8000a3a <WIZCHIPInitialize+0x42>
	{
		//myprintf("WIZCHIP Initialized fail.\r\n");
		printf("WIZCHIP Initialized fail.\r\n", 1, 10);
 8000a2e:	220a      	movs	r2, #10
 8000a30:	2101      	movs	r1, #1
 8000a32:	4812      	ldr	r0, [pc, #72]	@ (8000a7c <WIZCHIPInitialize+0x84>)
 8000a34:	f005 fa20 	bl	8005e78 <iprintf>
	  return;
 8000a38:	e012      	b.n	8000a60 <WIZCHIPInitialize+0x68>
	}
	/* PHY link status check */
	do {
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8000a3a:	f107 0317 	add.w	r3, r7, #23
 8000a3e:	4619      	mov	r1, r3
 8000a40:	200f      	movs	r0, #15
 8000a42:	f003 f85f 	bl	8003b04 <ctlwizchip>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d105      	bne.n	8000a5a <WIZCHIPInitialize+0x62>
		{
			printf("Unknown PHY Link status.\r\n", 1, 10);
 8000a4e:	220a      	movs	r2, #10
 8000a50:	2101      	movs	r1, #1
 8000a52:	480b      	ldr	r0, [pc, #44]	@ (8000a80 <WIZCHIPInitialize+0x88>)
 8000a54:	f005 fa10 	bl	8005e78 <iprintf>
		  return;
 8000a58:	e002      	b.n	8000a60 <WIZCHIPInitialize+0x68>
		}
	} while (tmp == PHY_LINK_OFF);
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0ec      	beq.n	8000a3a <WIZCHIPInitialize+0x42>



}
 8000a60:	371c      	adds	r7, #28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	bf00      	nop
 8000a68:	08000ae5 	.word	0x08000ae5
 8000a6c:	08000b0d 	.word	0x08000b0d
 8000a70:	08000acd 	.word	0x08000acd
 8000a74:	08000ab5 	.word	0x08000ab5
 8000a78:	08006f04 	.word	0x08006f04
 8000a7c:	08006ecc 	.word	0x08006ecc
 8000a80:	08006ee8 	.word	0x08006ee8

08000a84 <resetAssert>:


void resetAssert(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <resetAssert+0x14>)
 8000a8e:	f004 f83d 	bl	8004b0c <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <resetDeassert>:

void resetDeassert(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <resetDeassert+0x14>)
 8000aa6:	f004 f831 	bl	8004b0c <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <csEnable>:

void csEnable(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2102      	movs	r1, #2
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <csEnable+0x14>)
 8000abe:	f004 f825 	bl	8004b0c <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <csDisable>:

void csDisable(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <csDisable+0x14>)
 8000ad6:	f004 f819 	bl	8004b0c <HAL_GPIO_WritePin>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <spiWriteByte>:

void spiWriteByte(uint8_t tx)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 8000aee:	f107 020f 	add.w	r2, r7, #15
 8000af2:	1df9      	adds	r1, r7, #7
 8000af4:	230a      	movs	r3, #10
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2301      	movs	r3, #1
 8000afa:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <spiWriteByte+0x24>)
 8000afc:	f004 fcd4 	bl	80054a8 <HAL_SPI_TransmitReceive>
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000fc 	.word	0x200000fc

08000b0c <spiReadByte>:

uint8_t spiReadByte(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af02      	add	r7, sp, #8
	uint8_t rx = 0, tx = 0xFF;
 8000b12:	2300      	movs	r3, #0
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	23ff      	movs	r3, #255	@ 0xff
 8000b18:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	1db9      	adds	r1, r7, #6
 8000b1e:	230a      	movs	r3, #10
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2301      	movs	r3, #1
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <spiReadByte+0x28>)
 8000b26:	f004 fcbf 	bl	80054a8 <HAL_SPI_TransmitReceive>
	return rx;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000fc 	.word	0x200000fc

08000b38 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	4909      	ldr	r1, [pc, #36]	@ (8000b64 <default_ip_assign+0x2c>)
 8000b40:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000b44:	f002 f8bc 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000b48:	2204      	movs	r2, #4
 8000b4a:	4907      	ldr	r1, [pc, #28]	@ (8000b68 <default_ip_assign+0x30>)
 8000b4c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8000b50:	f002 f8b6 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000b54:	2204      	movs	r2, #4
 8000b56:	4905      	ldr	r1, [pc, #20]	@ (8000b6c <default_ip_assign+0x34>)
 8000b58:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000b5c:	f002 f8b0 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200009b8 	.word	0x200009b8
 8000b68:	200009c0 	.word	0x200009c0
 8000b6c:	200009bc 	.word	0x200009bc

08000b70 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	2000      	movs	r0, #0
 8000b78:	f001 fff4 	bl	8002b64 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f001 ffa5 	bl	8002acc <WIZCHIP_READ>
   default_ip_assign();
 8000b82:	f7ff ffd9 	bl	8000b38 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000b86:	2206      	movs	r2, #6
 8000b88:	4903      	ldr	r1, [pc, #12]	@ (8000b98 <default_ip_update+0x28>)
 8000b8a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000b8e:	f002 f897 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200009d8 	.word	0x200009d8

08000b9c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f001 ffde 	bl	8002b64 <WIZCHIP_WRITE>
	getMR(); // for delay
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f001 ff8f 	bl	8002acc <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000bae:	2206      	movs	r2, #6
 8000bb0:	4903      	ldr	r1, [pc, #12]	@ (8000bc0 <default_ip_conflict+0x24>)
 8000bb2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000bb6:	f002 f883 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200009d8 	.word	0x200009d8

08000bc4 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2206      	movs	r2, #6
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000bd4:	f002 f814 	bl	8002c00 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000bd8:	4b72      	ldr	r3, [pc, #456]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8000be0:	4b70      	ldr	r3, [pc, #448]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2201      	movs	r2, #1
 8000be6:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8000be8:	4b6e      	ldr	r3, [pc, #440]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2206      	movs	r2, #6
 8000bee:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8000bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8000bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000c00:	4b69      	ldr	r3, [pc, #420]	@ (8000da8 <makeDHCPMSG+0x1e4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0e1b      	lsrs	r3, r3, #24
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8000c0c:	4b66      	ldr	r3, [pc, #408]	@ (8000da8 <makeDHCPMSG+0x1e4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	0c1a      	lsrs	r2, r3, #16
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000c1a:	4b63      	ldr	r3, [pc, #396]	@ (8000da8 <makeDHCPMSG+0x1e4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	0a1a      	lsrs	r2, r3, #8
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	3302      	adds	r3, #2
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8000c28:	4b5f      	ldr	r3, [pc, #380]	@ (8000da8 <makeDHCPMSG+0x1e4>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3303      	adds	r3, #3
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8000c34:	4b5b      	ldr	r3, [pc, #364]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8000c3c:	4b59      	ldr	r3, [pc, #356]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	330a      	adds	r3, #10
 8000c42:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8000c52:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8000c5a:	4b52      	ldr	r3, [pc, #328]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8000c62:	4b50      	ldr	r3, [pc, #320]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2200      	movs	r2, #0
 8000c68:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8000c72:	4b4c      	ldr	r3, [pc, #304]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2200      	movs	r2, #0
 8000c78:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8000c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8000c82:	4b48      	ldr	r3, [pc, #288]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8000c8a:	4b46      	ldr	r3, [pc, #280]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8000c92:	4b44      	ldr	r3, [pc, #272]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2200      	movs	r2, #0
 8000c98:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8000ca2:	4b40      	ldr	r3, [pc, #256]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8000caa:	4b3e      	ldr	r3, [pc, #248]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8000cba:	4b3a      	ldr	r3, [pc, #232]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8000cc2:	4b38      	ldr	r3, [pc, #224]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8000cca:	4b36      	ldr	r3, [pc, #216]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8000cd2:	4b34      	ldr	r3, [pc, #208]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a35      	ldr	r2, [pc, #212]	@ (8000dac <makeDHCPMSG+0x1e8>)
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000cdc:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a32      	ldr	r2, [pc, #200]	@ (8000dac <makeDHCPMSG+0x1e8>)
 8000ce2:	7852      	ldrb	r2, [r2, #1]
 8000ce4:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a30      	ldr	r2, [pc, #192]	@ (8000dac <makeDHCPMSG+0x1e8>)
 8000cec:	7892      	ldrb	r2, [r2, #2]
 8000cee:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8000dac <makeDHCPMSG+0x1e8>)
 8000cf6:	78d2      	ldrb	r2, [r2, #3]
 8000cf8:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8000dac <makeDHCPMSG+0x1e8>)
 8000d00:	7912      	ldrb	r2, [r2, #4]
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a28      	ldr	r2, [pc, #160]	@ (8000dac <makeDHCPMSG+0x1e8>)
 8000d0c:	7952      	ldrb	r2, [r2, #5]
 8000d0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8000d12:	2306      	movs	r3, #6
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e008      	b.n	8000d2a <makeDHCPMSG+0x166>
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	4413      	add	r3, r2
 8000d20:	2200      	movs	r2, #0
 8000d22:	771a      	strb	r2, [r3, #28]
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	3301      	adds	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d9f3      	bls.n	8000d18 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e009      	b.n	8000d4a <makeDHCPMSG+0x186>
 8000d36:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	3301      	adds	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d4e:	d9f2      	bls.n	8000d36 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e009      	b.n	8000d6a <makeDHCPMSG+0x1a6>
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	3301      	adds	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	daf1      	bge.n	8000d56 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2263      	movs	r2, #99	@ 0x63
 8000d78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2282      	movs	r2, #130	@ 0x82
 8000d82:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2253      	movs	r2, #83	@ 0x53
 8000d8c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <makeDHCPMSG+0x1e0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2263      	movs	r2, #99	@ 0x63
 8000d96:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200009d4 	.word	0x200009d4
 8000da8:	200009d0 	.word	0x200009d0
 8000dac:	200009d8 	.word	0x200009d8

08000db0 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8000dba:	f7ff ff03 	bl	8000bc4 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8000dbe:	4b56      	ldr	r3, [pc, #344]	@ (8000f18 <send_DHCP_DISCOVER+0x168>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8000dc4:	4b54      	ldr	r3, [pc, #336]	@ (8000f18 <send_DHCP_DISCOVER+0x168>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8000dca:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <send_DHCP_DISCOVER+0x168>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8000dd0:	4b51      	ldr	r3, [pc, #324]	@ (8000f18 <send_DHCP_DISCOVER+0x168>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8000dd6:	4b51      	ldr	r3, [pc, #324]	@ (8000f1c <send_DHCP_DISCOVER+0x16c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8000ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f1c <send_DHCP_DISCOVER+0x16c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8000de2:	4b4e      	ldr	r3, [pc, #312]	@ (8000f1c <send_DHCP_DISCOVER+0x16c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8000de8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f1c <send_DHCP_DISCOVER+0x16c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8000dee:	2304      	movs	r3, #4
 8000df0:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8000df2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	1c59      	adds	r1, r3, #1
 8000dfa:	80b9      	strh	r1, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2235      	movs	r2, #53	@ 0x35
 8000e00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000e04:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	1c59      	adds	r1, r3, #1
 8000e0c:	80b9      	strh	r1, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8000e16:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	1c59      	adds	r1, r3, #1
 8000e1e:	80b9      	strh	r1, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8000e28:	4b3d      	ldr	r3, [pc, #244]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	1c59      	adds	r1, r3, #1
 8000e30:	80b9      	strh	r1, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	223d      	movs	r2, #61	@ 0x3d
 8000e36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8000e3a:	4b39      	ldr	r3, [pc, #228]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	1c59      	adds	r1, r3, #1
 8000e42:	80b9      	strh	r1, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	2207      	movs	r2, #7
 8000e48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000e4c:	4b34      	ldr	r3, [pc, #208]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	1c59      	adds	r1, r3, #1
 8000e54:	80b9      	strh	r1, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000e5e:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	88bb      	ldrh	r3, [r7, #4]
 8000e64:	1c59      	adds	r1, r3, #1
 8000e66:	80b9      	strh	r1, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <send_DHCP_DISCOVER+0x174>)
 8000e6c:	7819      	ldrb	r1, [r3, #0]
 8000e6e:	1813      	adds	r3, r2, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8000e76:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	1c59      	adds	r1, r3, #1
 8000e7e:	80b9      	strh	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	4b28      	ldr	r3, [pc, #160]	@ (8000f24 <send_DHCP_DISCOVER+0x174>)
 8000e84:	7859      	ldrb	r1, [r3, #1]
 8000e86:	1813      	adds	r3, r2, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8000e8e:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	88bb      	ldrh	r3, [r7, #4]
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	80b9      	strh	r1, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <send_DHCP_DISCOVER+0x174>)
 8000e9c:	7899      	ldrb	r1, [r3, #2]
 8000e9e:	1813      	adds	r3, r2, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	80b9      	strh	r1, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <send_DHCP_DISCOVER+0x174>)
 8000eb4:	78d9      	ldrb	r1, [r3, #3]
 8000eb6:	1813      	adds	r3, r2, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	88bb      	ldrh	r3, [r7, #4]
 8000ec4:	1c59      	adds	r1, r3, #1
 8000ec6:	80b9      	strh	r1, [r7, #4]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <send_DHCP_DISCOVER+0x174>)
 8000ecc:	7919      	ldrb	r1, [r3, #4]
 8000ece:	1813      	adds	r3, r2, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	1c59      	adds	r1, r3, #1
 8000ede:	80b9      	strh	r1, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <send_DHCP_DISCOVER+0x174>)
 8000ee4:	7959      	ldrb	r1, [r3, #5]
 8000ee6:	1813      	adds	r3, r2, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	1c59      	adds	r1, r3, #1
 8000ef6:	80b9      	strh	r1, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	220c      	movs	r2, #12
 8000efc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <send_DHCP_DISCOVER+0x170>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	1c59      	adds	r1, r3, #1
 8000f08:	80b9      	strh	r1, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	80fb      	strh	r3, [r7, #6]
 8000f16:	e017      	b.n	8000f48 <send_DHCP_DISCOVER+0x198>
 8000f18:	200009ac 	.word	0x200009ac
 8000f1c:	200009b0 	.word	0x200009b0
 8000f20:	200009d4 	.word	0x200009d4
 8000f24:	200009d8 	.word	0x200009d8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8000f28:	88f9      	ldrh	r1, [r7, #6]
 8000f2a:	4b80      	ldr	r3, [pc, #512]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	1c58      	adds	r0, r3, #1
 8000f32:	80b8      	strh	r0, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	4b7e      	ldr	r3, [pc, #504]	@ (8001130 <send_DHCP_DISCOVER+0x380>)
 8000f38:	5c59      	ldrb	r1, [r3, r1]
 8000f3a:	1813      	adds	r3, r2, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	3301      	adds	r3, #1
 8000f46:	80fb      	strh	r3, [r7, #6]
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4a79      	ldr	r2, [pc, #484]	@ (8001130 <send_DHCP_DISCOVER+0x380>)
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1ea      	bne.n	8000f28 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8000f52:	4b78      	ldr	r3, [pc, #480]	@ (8001134 <send_DHCP_DISCOVER+0x384>)
 8000f54:	78db      	ldrb	r3, [r3, #3]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b74      	ldr	r3, [pc, #464]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	1c59      	adds	r1, r3, #1
 8000f62:	80b9      	strh	r1, [r7, #4]
 8000f64:	461d      	mov	r5, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f001 f95e 	bl	8002228 <NibbleToHex>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	1963      	adds	r3, r4, r5
 8000f72:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8000f76:	4b6f      	ldr	r3, [pc, #444]	@ (8001134 <send_DHCP_DISCOVER+0x384>)
 8000f78:	78da      	ldrb	r2, [r3, #3]
 8000f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8000f7c:	681c      	ldr	r4, [r3, #0]
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	1c59      	adds	r1, r3, #1
 8000f82:	80b9      	strh	r1, [r7, #4]
 8000f84:	461d      	mov	r5, r3
 8000f86:	4610      	mov	r0, r2
 8000f88:	f001 f94e 	bl	8002228 <NibbleToHex>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	1963      	adds	r3, r4, r5
 8000f92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8000f96:	4b67      	ldr	r3, [pc, #412]	@ (8001134 <send_DHCP_DISCOVER+0x384>)
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b63      	ldr	r3, [pc, #396]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8000fa0:	681c      	ldr	r4, [r3, #0]
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	1c59      	adds	r1, r3, #1
 8000fa6:	80b9      	strh	r1, [r7, #4]
 8000fa8:	461d      	mov	r5, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f001 f93c 	bl	8002228 <NibbleToHex>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	1963      	adds	r3, r4, r5
 8000fb6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8000fba:	4b5e      	ldr	r3, [pc, #376]	@ (8001134 <send_DHCP_DISCOVER+0x384>)
 8000fbc:	791a      	ldrb	r2, [r3, #4]
 8000fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8000fc0:	681c      	ldr	r4, [r3, #0]
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	1c59      	adds	r1, r3, #1
 8000fc6:	80b9      	strh	r1, [r7, #4]
 8000fc8:	461d      	mov	r5, r3
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f001 f92c 	bl	8002228 <NibbleToHex>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	1963      	adds	r3, r4, r5
 8000fd6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8000fda:	4b56      	ldr	r3, [pc, #344]	@ (8001134 <send_DHCP_DISCOVER+0x384>)
 8000fdc:	795b      	ldrb	r3, [r3, #5]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b52      	ldr	r3, [pc, #328]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8000fe4:	681c      	ldr	r4, [r3, #0]
 8000fe6:	88bb      	ldrh	r3, [r7, #4]
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	80b9      	strh	r1, [r7, #4]
 8000fec:	461d      	mov	r5, r3
 8000fee:	4610      	mov	r0, r2
 8000ff0:	f001 f91a 	bl	8002228 <NibbleToHex>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	1963      	adds	r3, r4, r5
 8000ffa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8001134 <send_DHCP_DISCOVER+0x384>)
 8001000:	795a      	ldrb	r2, [r3, #5]
 8001002:	4b4a      	ldr	r3, [pc, #296]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	1c59      	adds	r1, r3, #1
 800100a:	80b9      	strh	r1, [r7, #4]
 800100c:	461d      	mov	r5, r3
 800100e:	4610      	mov	r0, r2
 8001010:	f001 f90a 	bl	8002228 <NibbleToHex>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	1963      	adds	r3, r4, r5
 800101a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	b2d9      	uxtb	r1, r3
 8001022:	4b42      	ldr	r3, [pc, #264]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	88b8      	ldrh	r0, [r7, #4]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	3307      	adds	r3, #7
 800102c:	1ac3      	subs	r3, r0, r3
 800102e:	3106      	adds	r1, #6
 8001030:	b2c9      	uxtb	r1, r1
 8001032:	4413      	add	r3, r2
 8001034:	460a      	mov	r2, r1
 8001036:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800103a:	4b3c      	ldr	r3, [pc, #240]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	1c59      	adds	r1, r3, #1
 8001042:	80b9      	strh	r1, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	2237      	movs	r2, #55	@ 0x37
 8001048:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 800104c:	4b37      	ldr	r3, [pc, #220]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	1c59      	adds	r1, r3, #1
 8001054:	80b9      	strh	r1, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	2206      	movs	r2, #6
 800105a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800105e:	4b33      	ldr	r3, [pc, #204]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	1c59      	adds	r1, r3, #1
 8001066:	80b9      	strh	r1, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001070:	4b2e      	ldr	r3, [pc, #184]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	1c59      	adds	r1, r3, #1
 8001078:	80b9      	strh	r1, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	2203      	movs	r2, #3
 800107e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	1c59      	adds	r1, r3, #1
 800108a:	80b9      	strh	r1, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	2206      	movs	r2, #6
 8001090:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	1c59      	adds	r1, r3, #1
 800109c:	80b9      	strh	r1, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	220f      	movs	r2, #15
 80010a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	88bb      	ldrh	r3, [r7, #4]
 80010ac:	1c59      	adds	r1, r3, #1
 80010ae:	80b9      	strh	r1, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	223a      	movs	r2, #58	@ 0x3a
 80010b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	1c59      	adds	r1, r3, #1
 80010c0:	80b9      	strh	r1, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	223b      	movs	r2, #59	@ 0x3b
 80010c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	1c59      	adds	r1, r3, #1
 80010d2:	80b9      	strh	r1, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	22ff      	movs	r2, #255	@ 0xff
 80010d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	80fb      	strh	r3, [r7, #6]
 80010e0:	e009      	b.n	80010f6 <send_DHCP_DISCOVER+0x346>
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	4413      	add	r3, r2
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	3301      	adds	r3, #1
 80010f4:	80fb      	strh	r3, [r7, #6]
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80010fc:	d3f1      	bcc.n	80010e2 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80010fe:	23ff      	movs	r3, #255	@ 0xff
 8001100:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001102:	23ff      	movs	r3, #255	@ 0xff
 8001104:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001106:	23ff      	movs	r3, #255	@ 0xff
 8001108:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800110a:	23ff      	movs	r3, #255	@ 0xff
 800110c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <send_DHCP_DISCOVER+0x388>)
 8001110:	7818      	ldrb	r0, [r3, #0]
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <send_DHCP_DISCOVER+0x37c>)
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	463b      	mov	r3, r7
 8001118:	2243      	movs	r2, #67	@ 0x43
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001120:	f002 f93c 	bl	800339c <sendto>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	200009d4 	.word	0x200009d4
 8001130:	20000038 	.word	0x20000038
 8001134:	200009d8 	.word	0x200009d8
 8001138:	200009a8 	.word	0x200009a8

0800113c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001146:	f7ff fd3d 	bl	8000bc4 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <send_DHCP_REQUEST+0x7c>)
 800114c:	f993 3000 	ldrsb.w	r3, [r3]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d004      	beq.n	800115e <send_DHCP_REQUEST+0x22>
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <send_DHCP_REQUEST+0x7c>)
 8001156:	f993 3000 	ldrsb.w	r3, [r3]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d134      	bne.n	80011c8 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <send_DHCP_REQUEST+0x80>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	330a      	adds	r3, #10
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <send_DHCP_REQUEST+0x80>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	330a      	adds	r3, #10
 800116e:	3301      	adds	r3, #1
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <send_DHCP_REQUEST+0x80>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <send_DHCP_REQUEST+0x84>)
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <send_DHCP_REQUEST+0x80>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <send_DHCP_REQUEST+0x84>)
 8001184:	7852      	ldrb	r2, [r2, #1]
 8001186:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <send_DHCP_REQUEST+0x80>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0c      	ldr	r2, [pc, #48]	@ (80011c0 <send_DHCP_REQUEST+0x84>)
 800118e:	7892      	ldrb	r2, [r2, #2]
 8001190:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <send_DHCP_REQUEST+0x80>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <send_DHCP_REQUEST+0x84>)
 8001198:	78d2      	ldrb	r2, [r2, #3]
 800119a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <send_DHCP_REQUEST+0x88>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <send_DHCP_REQUEST+0x88>)
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <send_DHCP_REQUEST+0x88>)
 80011aa:	789b      	ldrb	r3, [r3, #2]
 80011ac:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <send_DHCP_REQUEST+0x88>)
 80011b0:	78db      	ldrb	r3, [r3, #3]
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	e010      	b.n	80011d8 <send_DHCP_REQUEST+0x9c>
 80011b6:	bf00      	nop
 80011b8:	200009c8 	.word	0x200009c8
 80011bc:	200009d4 	.word	0x200009d4
 80011c0:	200009b8 	.word	0x200009b8
 80011c4:	200009ac 	.word	0x200009ac
   }
   else
   {
   	ip[0] = 255;
 80011c8:	23ff      	movs	r3, #255	@ 0xff
 80011ca:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80011cc:	23ff      	movs	r3, #255	@ 0xff
 80011ce:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80011d0:	23ff      	movs	r3, #255	@ 0xff
 80011d2:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80011d4:	23ff      	movs	r3, #255	@ 0xff
 80011d6:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80011d8:	2304      	movs	r3, #4
 80011da:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80011dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	897b      	ldrh	r3, [r7, #10]
 80011e2:	1c59      	adds	r1, r3, #1
 80011e4:	8179      	strh	r1, [r7, #10]
 80011e6:	4413      	add	r3, r2
 80011e8:	2235      	movs	r2, #53	@ 0x35
 80011ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80011ee:	4b89      	ldr	r3, [pc, #548]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	897b      	ldrh	r3, [r7, #10]
 80011f4:	1c59      	adds	r1, r3, #1
 80011f6:	8179      	strh	r1, [r7, #10]
 80011f8:	4413      	add	r3, r2
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001200:	4b84      	ldr	r3, [pc, #528]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	897b      	ldrh	r3, [r7, #10]
 8001206:	1c59      	adds	r1, r3, #1
 8001208:	8179      	strh	r1, [r7, #10]
 800120a:	4413      	add	r3, r2
 800120c:	2203      	movs	r2, #3
 800120e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001212:	4b80      	ldr	r3, [pc, #512]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	897b      	ldrh	r3, [r7, #10]
 8001218:	1c59      	adds	r1, r3, #1
 800121a:	8179      	strh	r1, [r7, #10]
 800121c:	4413      	add	r3, r2
 800121e:	223d      	movs	r2, #61	@ 0x3d
 8001220:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001224:	4b7b      	ldr	r3, [pc, #492]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	897b      	ldrh	r3, [r7, #10]
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	8179      	strh	r1, [r7, #10]
 800122e:	4413      	add	r3, r2
 8001230:	2207      	movs	r2, #7
 8001232:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001236:	4b77      	ldr	r3, [pc, #476]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	8179      	strh	r1, [r7, #10]
 8001240:	4413      	add	r3, r2
 8001242:	2201      	movs	r2, #1
 8001244:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001248:	4b72      	ldr	r3, [pc, #456]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	1c59      	adds	r1, r3, #1
 8001250:	8179      	strh	r1, [r7, #10]
 8001252:	4618      	mov	r0, r3
 8001254:	4b70      	ldr	r3, [pc, #448]	@ (8001418 <send_DHCP_REQUEST+0x2dc>)
 8001256:	7819      	ldrb	r1, [r3, #0]
 8001258:	1813      	adds	r3, r2, r0
 800125a:	460a      	mov	r2, r1
 800125c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001260:	4b6c      	ldr	r3, [pc, #432]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	1c59      	adds	r1, r3, #1
 8001268:	8179      	strh	r1, [r7, #10]
 800126a:	4618      	mov	r0, r3
 800126c:	4b6a      	ldr	r3, [pc, #424]	@ (8001418 <send_DHCP_REQUEST+0x2dc>)
 800126e:	7859      	ldrb	r1, [r3, #1]
 8001270:	1813      	adds	r3, r2, r0
 8001272:	460a      	mov	r2, r1
 8001274:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001278:	4b66      	ldr	r3, [pc, #408]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	8179      	strh	r1, [r7, #10]
 8001282:	4618      	mov	r0, r3
 8001284:	4b64      	ldr	r3, [pc, #400]	@ (8001418 <send_DHCP_REQUEST+0x2dc>)
 8001286:	7899      	ldrb	r1, [r3, #2]
 8001288:	1813      	adds	r3, r2, r0
 800128a:	460a      	mov	r2, r1
 800128c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001290:	4b60      	ldr	r3, [pc, #384]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	8179      	strh	r1, [r7, #10]
 800129a:	4618      	mov	r0, r3
 800129c:	4b5e      	ldr	r3, [pc, #376]	@ (8001418 <send_DHCP_REQUEST+0x2dc>)
 800129e:	78d9      	ldrb	r1, [r3, #3]
 80012a0:	1813      	adds	r3, r2, r0
 80012a2:	460a      	mov	r2, r1
 80012a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80012a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	897b      	ldrh	r3, [r7, #10]
 80012ae:	1c59      	adds	r1, r3, #1
 80012b0:	8179      	strh	r1, [r7, #10]
 80012b2:	4618      	mov	r0, r3
 80012b4:	4b58      	ldr	r3, [pc, #352]	@ (8001418 <send_DHCP_REQUEST+0x2dc>)
 80012b6:	7919      	ldrb	r1, [r3, #4]
 80012b8:	1813      	adds	r3, r2, r0
 80012ba:	460a      	mov	r2, r1
 80012bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80012c0:	4b54      	ldr	r3, [pc, #336]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	897b      	ldrh	r3, [r7, #10]
 80012c6:	1c59      	adds	r1, r3, #1
 80012c8:	8179      	strh	r1, [r7, #10]
 80012ca:	4618      	mov	r0, r3
 80012cc:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <send_DHCP_REQUEST+0x2dc>)
 80012ce:	7959      	ldrb	r1, [r3, #5]
 80012d0:	1813      	adds	r3, r2, r0
 80012d2:	460a      	mov	r2, r1
 80012d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2bff      	cmp	r3, #255	@ 0xff
 80012dc:	f040 8084 	bne.w	80013e8 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80012e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	897b      	ldrh	r3, [r7, #10]
 80012e6:	1c59      	adds	r1, r3, #1
 80012e8:	8179      	strh	r1, [r7, #10]
 80012ea:	4413      	add	r3, r2
 80012ec:	2232      	movs	r2, #50	@ 0x32
 80012ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80012f2:	4b48      	ldr	r3, [pc, #288]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	897b      	ldrh	r3, [r7, #10]
 80012f8:	1c59      	adds	r1, r3, #1
 80012fa:	8179      	strh	r1, [r7, #10]
 80012fc:	4413      	add	r3, r2
 80012fe:	2204      	movs	r2, #4
 8001300:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001304:	4b43      	ldr	r3, [pc, #268]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	1c59      	adds	r1, r3, #1
 800130c:	8179      	strh	r1, [r7, #10]
 800130e:	4618      	mov	r0, r3
 8001310:	4b42      	ldr	r3, [pc, #264]	@ (800141c <send_DHCP_REQUEST+0x2e0>)
 8001312:	7819      	ldrb	r1, [r3, #0]
 8001314:	1813      	adds	r3, r2, r0
 8001316:	460a      	mov	r2, r1
 8001318:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800131c:	4b3d      	ldr	r3, [pc, #244]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	897b      	ldrh	r3, [r7, #10]
 8001322:	1c59      	adds	r1, r3, #1
 8001324:	8179      	strh	r1, [r7, #10]
 8001326:	4618      	mov	r0, r3
 8001328:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <send_DHCP_REQUEST+0x2e0>)
 800132a:	7859      	ldrb	r1, [r3, #1]
 800132c:	1813      	adds	r3, r2, r0
 800132e:	460a      	mov	r2, r1
 8001330:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	1c59      	adds	r1, r3, #1
 800133c:	8179      	strh	r1, [r7, #10]
 800133e:	4618      	mov	r0, r3
 8001340:	4b36      	ldr	r3, [pc, #216]	@ (800141c <send_DHCP_REQUEST+0x2e0>)
 8001342:	7899      	ldrb	r1, [r3, #2]
 8001344:	1813      	adds	r3, r2, r0
 8001346:	460a      	mov	r2, r1
 8001348:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800134c:	4b31      	ldr	r3, [pc, #196]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	897b      	ldrh	r3, [r7, #10]
 8001352:	1c59      	adds	r1, r3, #1
 8001354:	8179      	strh	r1, [r7, #10]
 8001356:	4618      	mov	r0, r3
 8001358:	4b30      	ldr	r3, [pc, #192]	@ (800141c <send_DHCP_REQUEST+0x2e0>)
 800135a:	78d9      	ldrb	r1, [r3, #3]
 800135c:	1813      	adds	r3, r2, r0
 800135e:	460a      	mov	r2, r1
 8001360:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	897b      	ldrh	r3, [r7, #10]
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	8179      	strh	r1, [r7, #10]
 800136e:	4413      	add	r3, r2
 8001370:	2236      	movs	r2, #54	@ 0x36
 8001372:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001376:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	897b      	ldrh	r3, [r7, #10]
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	8179      	strh	r1, [r7, #10]
 8001380:	4413      	add	r3, r2
 8001382:	2204      	movs	r2, #4
 8001384:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	8179      	strh	r1, [r7, #10]
 8001392:	4618      	mov	r0, r3
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <send_DHCP_REQUEST+0x2e4>)
 8001396:	7819      	ldrb	r1, [r3, #0]
 8001398:	1813      	adds	r3, r2, r0
 800139a:	460a      	mov	r2, r1
 800139c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80013a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	1c59      	adds	r1, r3, #1
 80013a8:	8179      	strh	r1, [r7, #10]
 80013aa:	4618      	mov	r0, r3
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <send_DHCP_REQUEST+0x2e4>)
 80013ae:	7859      	ldrb	r1, [r3, #1]
 80013b0:	1813      	adds	r3, r2, r0
 80013b2:	460a      	mov	r2, r1
 80013b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	897b      	ldrh	r3, [r7, #10]
 80013be:	1c59      	adds	r1, r3, #1
 80013c0:	8179      	strh	r1, [r7, #10]
 80013c2:	4618      	mov	r0, r3
 80013c4:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <send_DHCP_REQUEST+0x2e4>)
 80013c6:	7899      	ldrb	r1, [r3, #2]
 80013c8:	1813      	adds	r3, r2, r0
 80013ca:	460a      	mov	r2, r1
 80013cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	897b      	ldrh	r3, [r7, #10]
 80013d6:	1c59      	adds	r1, r3, #1
 80013d8:	8179      	strh	r1, [r7, #10]
 80013da:	4618      	mov	r0, r3
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <send_DHCP_REQUEST+0x2e4>)
 80013de:	78d9      	ldrb	r1, [r3, #3]
 80013e0:	1813      	adds	r3, r2, r0
 80013e2:	460a      	mov	r2, r1
 80013e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	897b      	ldrh	r3, [r7, #10]
 80013ee:	1c59      	adds	r1, r3, #1
 80013f0:	8179      	strh	r1, [r7, #10]
 80013f2:	4413      	add	r3, r2
 80013f4:	220c      	movs	r2, #12
 80013f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <send_DHCP_REQUEST+0x2d8>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	897b      	ldrh	r3, [r7, #10]
 8001400:	1c59      	adds	r1, r3, #1
 8001402:	8179      	strh	r1, [r7, #10]
 8001404:	4413      	add	r3, r2
 8001406:	2200      	movs	r2, #0
 8001408:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e019      	b.n	8001446 <send_DHCP_REQUEST+0x30a>
 8001412:	bf00      	nop
 8001414:	200009d4 	.word	0x200009d4
 8001418:	200009d8 	.word	0x200009d8
 800141c:	200009b8 	.word	0x200009b8
 8001420:	200009ac 	.word	0x200009ac
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001424:	4b86      	ldr	r3, [pc, #536]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	897b      	ldrh	r3, [r7, #10]
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	8179      	strh	r1, [r7, #10]
 800142e:	4618      	mov	r0, r3
 8001430:	4984      	ldr	r1, [pc, #528]	@ (8001644 <send_DHCP_REQUEST+0x508>)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	440b      	add	r3, r1
 8001436:	7819      	ldrb	r1, [r3, #0]
 8001438:	1813      	adds	r3, r2, r0
 800143a:	460a      	mov	r2, r1
 800143c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4a7f      	ldr	r2, [pc, #508]	@ (8001644 <send_DHCP_REQUEST+0x508>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e8      	bne.n	8001424 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001452:	4b7d      	ldr	r3, [pc, #500]	@ (8001648 <send_DHCP_REQUEST+0x50c>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b79      	ldr	r3, [pc, #484]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 800145c:	681c      	ldr	r4, [r3, #0]
 800145e:	897b      	ldrh	r3, [r7, #10]
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	8179      	strh	r1, [r7, #10]
 8001464:	461d      	mov	r5, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f000 fede 	bl	8002228 <NibbleToHex>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	1963      	adds	r3, r4, r5
 8001472:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001476:	4b74      	ldr	r3, [pc, #464]	@ (8001648 <send_DHCP_REQUEST+0x50c>)
 8001478:	78da      	ldrb	r2, [r3, #3]
 800147a:	4b71      	ldr	r3, [pc, #452]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 800147c:	681c      	ldr	r4, [r3, #0]
 800147e:	897b      	ldrh	r3, [r7, #10]
 8001480:	1c59      	adds	r1, r3, #1
 8001482:	8179      	strh	r1, [r7, #10]
 8001484:	461d      	mov	r5, r3
 8001486:	4610      	mov	r0, r2
 8001488:	f000 fece 	bl	8002228 <NibbleToHex>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	1963      	adds	r3, r4, r5
 8001492:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001496:	4b6c      	ldr	r3, [pc, #432]	@ (8001648 <send_DHCP_REQUEST+0x50c>)
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80014a0:	681c      	ldr	r4, [r3, #0]
 80014a2:	897b      	ldrh	r3, [r7, #10]
 80014a4:	1c59      	adds	r1, r3, #1
 80014a6:	8179      	strh	r1, [r7, #10]
 80014a8:	461d      	mov	r5, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f000 febc 	bl	8002228 <NibbleToHex>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	1963      	adds	r3, r4, r5
 80014b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <send_DHCP_REQUEST+0x50c>)
 80014bc:	791a      	ldrb	r2, [r3, #4]
 80014be:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80014c0:	681c      	ldr	r4, [r3, #0]
 80014c2:	897b      	ldrh	r3, [r7, #10]
 80014c4:	1c59      	adds	r1, r3, #1
 80014c6:	8179      	strh	r1, [r7, #10]
 80014c8:	461d      	mov	r5, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f000 feac 	bl	8002228 <NibbleToHex>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	1963      	adds	r3, r4, r5
 80014d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80014da:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <send_DHCP_REQUEST+0x50c>)
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b57      	ldr	r3, [pc, #348]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80014e4:	681c      	ldr	r4, [r3, #0]
 80014e6:	897b      	ldrh	r3, [r7, #10]
 80014e8:	1c59      	adds	r1, r3, #1
 80014ea:	8179      	strh	r1, [r7, #10]
 80014ec:	461d      	mov	r5, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f000 fe9a 	bl	8002228 <NibbleToHex>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	1963      	adds	r3, r4, r5
 80014fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80014fe:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <send_DHCP_REQUEST+0x50c>)
 8001500:	795a      	ldrb	r2, [r3, #5]
 8001502:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001504:	681c      	ldr	r4, [r3, #0]
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	1c59      	adds	r1, r3, #1
 800150a:	8179      	strh	r1, [r7, #10]
 800150c:	461d      	mov	r5, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f000 fe8a 	bl	8002228 <NibbleToHex>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	1963      	adds	r3, r4, r5
 800151a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	b2d9      	uxtb	r1, r3
 8001522:	4b47      	ldr	r3, [pc, #284]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	8978      	ldrh	r0, [r7, #10]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3307      	adds	r3, #7
 800152c:	1ac3      	subs	r3, r0, r3
 800152e:	3106      	adds	r1, #6
 8001530:	b2c9      	uxtb	r1, r1
 8001532:	4413      	add	r3, r2
 8001534:	460a      	mov	r2, r1
 8001536:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	897b      	ldrh	r3, [r7, #10]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	8179      	strh	r1, [r7, #10]
 8001544:	4413      	add	r3, r2
 8001546:	2237      	movs	r2, #55	@ 0x37
 8001548:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 800154c:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	897b      	ldrh	r3, [r7, #10]
 8001552:	1c59      	adds	r1, r3, #1
 8001554:	8179      	strh	r1, [r7, #10]
 8001556:	4413      	add	r3, r2
 8001558:	2208      	movs	r2, #8
 800155a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800155e:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	897b      	ldrh	r3, [r7, #10]
 8001564:	1c59      	adds	r1, r3, #1
 8001566:	8179      	strh	r1, [r7, #10]
 8001568:	4413      	add	r3, r2
 800156a:	2201      	movs	r2, #1
 800156c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001570:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	897b      	ldrh	r3, [r7, #10]
 8001576:	1c59      	adds	r1, r3, #1
 8001578:	8179      	strh	r1, [r7, #10]
 800157a:	4413      	add	r3, r2
 800157c:	2203      	movs	r2, #3
 800157e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	1c59      	adds	r1, r3, #1
 800158a:	8179      	strh	r1, [r7, #10]
 800158c:	4413      	add	r3, r2
 800158e:	2206      	movs	r2, #6
 8001590:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001594:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	897b      	ldrh	r3, [r7, #10]
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	8179      	strh	r1, [r7, #10]
 800159e:	4413      	add	r3, r2
 80015a0:	220f      	movs	r2, #15
 80015a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	897b      	ldrh	r3, [r7, #10]
 80015ac:	1c59      	adds	r1, r3, #1
 80015ae:	8179      	strh	r1, [r7, #10]
 80015b0:	4413      	add	r3, r2
 80015b2:	223a      	movs	r2, #58	@ 0x3a
 80015b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	8179      	strh	r1, [r7, #10]
 80015c2:	4413      	add	r3, r2
 80015c4:	223b      	movs	r2, #59	@ 0x3b
 80015c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	8179      	strh	r1, [r7, #10]
 80015d4:	4413      	add	r3, r2
 80015d6:	221f      	movs	r2, #31
 80015d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	897b      	ldrh	r3, [r7, #10]
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	8179      	strh	r1, [r7, #10]
 80015e6:	4413      	add	r3, r2
 80015e8:	2221      	movs	r2, #33	@ 0x21
 80015ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	8179      	strh	r1, [r7, #10]
 80015f8:	4413      	add	r3, r2
 80015fa:	22ff      	movs	r2, #255	@ 0xff
 80015fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e009      	b.n	800161a <send_DHCP_REQUEST+0x4de>
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	33ec      	adds	r3, #236	@ 0xec
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001620:	dbf1      	blt.n	8001606 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <send_DHCP_REQUEST+0x510>)
 8001624:	7818      	ldrb	r0, [r3, #0]
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <send_DHCP_REQUEST+0x504>)
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2243      	movs	r2, #67	@ 0x43
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001634:	f001 feb2 	bl	800339c <sendto>

}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bdb0      	pop	{r4, r5, r7, pc}
 8001640:	200009d4 	.word	0x200009d4
 8001644:	20000038 	.word	0x20000038
 8001648:	200009d8 	.word	0x200009d8
 800164c:	200009a8 	.word	0x200009a8

08001650 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800165a:	f7ff fab3 	bl	8000bc4 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800165e:	2304      	movs	r3, #4
 8001660:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001662:	4b9f      	ldr	r3, [pc, #636]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	330a      	adds	r3, #10
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800166c:	4b9c      	ldr	r3, [pc, #624]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	330a      	adds	r3, #10
 8001672:	3301      	adds	r3, #1
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001678:	4b99      	ldr	r3, [pc, #612]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	897b      	ldrh	r3, [r7, #10]
 800167e:	1c59      	adds	r1, r3, #1
 8001680:	8179      	strh	r1, [r7, #10]
 8001682:	4413      	add	r3, r2
 8001684:	2235      	movs	r2, #53	@ 0x35
 8001686:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800168a:	4b95      	ldr	r3, [pc, #596]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	8179      	strh	r1, [r7, #10]
 8001694:	4413      	add	r3, r2
 8001696:	2201      	movs	r2, #1
 8001698:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800169c:	4b90      	ldr	r3, [pc, #576]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	8179      	strh	r1, [r7, #10]
 80016a6:	4413      	add	r3, r2
 80016a8:	2204      	movs	r2, #4
 80016aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80016ae:	4b8c      	ldr	r3, [pc, #560]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	897b      	ldrh	r3, [r7, #10]
 80016b4:	1c59      	adds	r1, r3, #1
 80016b6:	8179      	strh	r1, [r7, #10]
 80016b8:	4413      	add	r3, r2
 80016ba:	223d      	movs	r2, #61	@ 0x3d
 80016bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80016c0:	4b87      	ldr	r3, [pc, #540]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	897b      	ldrh	r3, [r7, #10]
 80016c6:	1c59      	adds	r1, r3, #1
 80016c8:	8179      	strh	r1, [r7, #10]
 80016ca:	4413      	add	r3, r2
 80016cc:	2207      	movs	r2, #7
 80016ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80016d2:	4b83      	ldr	r3, [pc, #524]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	897b      	ldrh	r3, [r7, #10]
 80016d8:	1c59      	adds	r1, r3, #1
 80016da:	8179      	strh	r1, [r7, #10]
 80016dc:	4413      	add	r3, r2
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80016e4:	4b7e      	ldr	r3, [pc, #504]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	897b      	ldrh	r3, [r7, #10]
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	8179      	strh	r1, [r7, #10]
 80016ee:	4618      	mov	r0, r3
 80016f0:	4b7c      	ldr	r3, [pc, #496]	@ (80018e4 <send_DHCP_DECLINE+0x294>)
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	1813      	adds	r3, r2, r0
 80016f6:	460a      	mov	r2, r1
 80016f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80016fc:	4b78      	ldr	r3, [pc, #480]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	897b      	ldrh	r3, [r7, #10]
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	8179      	strh	r1, [r7, #10]
 8001706:	4618      	mov	r0, r3
 8001708:	4b76      	ldr	r3, [pc, #472]	@ (80018e4 <send_DHCP_DECLINE+0x294>)
 800170a:	7859      	ldrb	r1, [r3, #1]
 800170c:	1813      	adds	r3, r2, r0
 800170e:	460a      	mov	r2, r1
 8001710:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001714:	4b72      	ldr	r3, [pc, #456]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	8179      	strh	r1, [r7, #10]
 800171e:	4618      	mov	r0, r3
 8001720:	4b70      	ldr	r3, [pc, #448]	@ (80018e4 <send_DHCP_DECLINE+0x294>)
 8001722:	7899      	ldrb	r1, [r3, #2]
 8001724:	1813      	adds	r3, r2, r0
 8001726:	460a      	mov	r2, r1
 8001728:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800172c:	4b6c      	ldr	r3, [pc, #432]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	897b      	ldrh	r3, [r7, #10]
 8001732:	1c59      	adds	r1, r3, #1
 8001734:	8179      	strh	r1, [r7, #10]
 8001736:	4618      	mov	r0, r3
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <send_DHCP_DECLINE+0x294>)
 800173a:	78d9      	ldrb	r1, [r3, #3]
 800173c:	1813      	adds	r3, r2, r0
 800173e:	460a      	mov	r2, r1
 8001740:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001744:	4b66      	ldr	r3, [pc, #408]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	897b      	ldrh	r3, [r7, #10]
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	8179      	strh	r1, [r7, #10]
 800174e:	4618      	mov	r0, r3
 8001750:	4b64      	ldr	r3, [pc, #400]	@ (80018e4 <send_DHCP_DECLINE+0x294>)
 8001752:	7919      	ldrb	r1, [r3, #4]
 8001754:	1813      	adds	r3, r2, r0
 8001756:	460a      	mov	r2, r1
 8001758:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800175c:	4b60      	ldr	r3, [pc, #384]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	897b      	ldrh	r3, [r7, #10]
 8001762:	1c59      	adds	r1, r3, #1
 8001764:	8179      	strh	r1, [r7, #10]
 8001766:	4618      	mov	r0, r3
 8001768:	4b5e      	ldr	r3, [pc, #376]	@ (80018e4 <send_DHCP_DECLINE+0x294>)
 800176a:	7959      	ldrb	r1, [r3, #5]
 800176c:	1813      	adds	r3, r2, r0
 800176e:	460a      	mov	r2, r1
 8001770:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001774:	4b5a      	ldr	r3, [pc, #360]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	1c59      	adds	r1, r3, #1
 800177c:	8179      	strh	r1, [r7, #10]
 800177e:	4413      	add	r3, r2
 8001780:	2232      	movs	r2, #50	@ 0x32
 8001782:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001786:	4b56      	ldr	r3, [pc, #344]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	897b      	ldrh	r3, [r7, #10]
 800178c:	1c59      	adds	r1, r3, #1
 800178e:	8179      	strh	r1, [r7, #10]
 8001790:	4413      	add	r3, r2
 8001792:	2204      	movs	r2, #4
 8001794:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001798:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	8179      	strh	r1, [r7, #10]
 80017a2:	4618      	mov	r0, r3
 80017a4:	4b50      	ldr	r3, [pc, #320]	@ (80018e8 <send_DHCP_DECLINE+0x298>)
 80017a6:	7819      	ldrb	r1, [r3, #0]
 80017a8:	1813      	adds	r3, r2, r0
 80017aa:	460a      	mov	r2, r1
 80017ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80017b0:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	897b      	ldrh	r3, [r7, #10]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	8179      	strh	r1, [r7, #10]
 80017ba:	4618      	mov	r0, r3
 80017bc:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <send_DHCP_DECLINE+0x298>)
 80017be:	7859      	ldrb	r1, [r3, #1]
 80017c0:	1813      	adds	r3, r2, r0
 80017c2:	460a      	mov	r2, r1
 80017c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80017c8:	4b45      	ldr	r3, [pc, #276]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	897b      	ldrh	r3, [r7, #10]
 80017ce:	1c59      	adds	r1, r3, #1
 80017d0:	8179      	strh	r1, [r7, #10]
 80017d2:	4618      	mov	r0, r3
 80017d4:	4b44      	ldr	r3, [pc, #272]	@ (80018e8 <send_DHCP_DECLINE+0x298>)
 80017d6:	7899      	ldrb	r1, [r3, #2]
 80017d8:	1813      	adds	r3, r2, r0
 80017da:	460a      	mov	r2, r1
 80017dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80017e0:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	897b      	ldrh	r3, [r7, #10]
 80017e6:	1c59      	adds	r1, r3, #1
 80017e8:	8179      	strh	r1, [r7, #10]
 80017ea:	4618      	mov	r0, r3
 80017ec:	4b3e      	ldr	r3, [pc, #248]	@ (80018e8 <send_DHCP_DECLINE+0x298>)
 80017ee:	78d9      	ldrb	r1, [r3, #3]
 80017f0:	1813      	adds	r3, r2, r0
 80017f2:	460a      	mov	r2, r1
 80017f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80017f8:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	897b      	ldrh	r3, [r7, #10]
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	8179      	strh	r1, [r7, #10]
 8001802:	4413      	add	r3, r2
 8001804:	2236      	movs	r2, #54	@ 0x36
 8001806:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800180a:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	897b      	ldrh	r3, [r7, #10]
 8001810:	1c59      	adds	r1, r3, #1
 8001812:	8179      	strh	r1, [r7, #10]
 8001814:	4413      	add	r3, r2
 8001816:	2204      	movs	r2, #4
 8001818:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800181c:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	8179      	strh	r1, [r7, #10]
 8001826:	4618      	mov	r0, r3
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <send_DHCP_DECLINE+0x29c>)
 800182a:	7819      	ldrb	r1, [r3, #0]
 800182c:	1813      	adds	r3, r2, r0
 800182e:	460a      	mov	r2, r1
 8001830:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	897b      	ldrh	r3, [r7, #10]
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	8179      	strh	r1, [r7, #10]
 800183e:	4618      	mov	r0, r3
 8001840:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <send_DHCP_DECLINE+0x29c>)
 8001842:	7859      	ldrb	r1, [r3, #1]
 8001844:	1813      	adds	r3, r2, r0
 8001846:	460a      	mov	r2, r1
 8001848:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	897b      	ldrh	r3, [r7, #10]
 8001852:	1c59      	adds	r1, r3, #1
 8001854:	8179      	strh	r1, [r7, #10]
 8001856:	4618      	mov	r0, r3
 8001858:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <send_DHCP_DECLINE+0x29c>)
 800185a:	7899      	ldrb	r1, [r3, #2]
 800185c:	1813      	adds	r3, r2, r0
 800185e:	460a      	mov	r2, r1
 8001860:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	897b      	ldrh	r3, [r7, #10]
 800186a:	1c59      	adds	r1, r3, #1
 800186c:	8179      	strh	r1, [r7, #10]
 800186e:	4618      	mov	r0, r3
 8001870:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <send_DHCP_DECLINE+0x29c>)
 8001872:	78d9      	ldrb	r1, [r3, #3]
 8001874:	1813      	adds	r3, r2, r0
 8001876:	460a      	mov	r2, r1
 8001878:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	897b      	ldrh	r3, [r7, #10]
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	8179      	strh	r1, [r7, #10]
 8001886:	4413      	add	r3, r2
 8001888:	22ff      	movs	r2, #255	@ 0xff
 800188a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800188e:	897b      	ldrh	r3, [r7, #10]
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e009      	b.n	80018a8 <send_DHCP_DECLINE+0x258>
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	33ec      	adds	r3, #236	@ 0xec
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80018ae:	dbf1      	blt.n	8001894 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80018b0:	23ff      	movs	r3, #255	@ 0xff
 80018b2:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80018b4:	23ff      	movs	r3, #255	@ 0xff
 80018b6:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80018b8:	23ff      	movs	r3, #255	@ 0xff
 80018ba:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80018bc:	23ff      	movs	r3, #255	@ 0xff
 80018be:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <send_DHCP_DECLINE+0x2a0>)
 80018c2:	7818      	ldrb	r0, [r3, #0]
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <send_DHCP_DECLINE+0x290>)
 80018c6:	6819      	ldr	r1, [r3, #0]
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2243      	movs	r2, #67	@ 0x43
 80018cc:	9200      	str	r2, [sp, #0]
 80018ce:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80018d2:	f001 fd63 	bl	800339c <sendto>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200009d4 	.word	0x200009d4
 80018e4:	200009d8 	.word	0x200009d8
 80018e8:	200009b8 	.word	0x200009b8
 80018ec:	200009ac 	.word	0x200009ac
 80018f0:	200009a8 	.word	0x200009a8

080018f4 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80018fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001b84 <parseDHCPMSG+0x290>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fa85 	bl	8002e12 <getSn_RX_RSR>
 8001908:	4603      	mov	r3, r0
 800190a:	823b      	strh	r3, [r7, #16]
 800190c:	8a3b      	ldrh	r3, [r7, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001912:	4b9c      	ldr	r3, [pc, #624]	@ (8001b84 <parseDHCPMSG+0x290>)
 8001914:	7818      	ldrb	r0, [r3, #0]
 8001916:	4b9c      	ldr	r3, [pc, #624]	@ (8001b88 <parseDHCPMSG+0x294>)
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	1d3c      	adds	r4, r7, #4
 800191c:	8a3a      	ldrh	r2, [r7, #16]
 800191e:	1cbb      	adds	r3, r7, #2
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	4623      	mov	r3, r4
 8001924:	f001 fe6e 	bl	8003604 <recvfrom>
 8001928:	4603      	mov	r3, r0
 800192a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	2b43      	cmp	r3, #67	@ 0x43
 8001930:	f040 81ed 	bne.w	8001d0e <parseDHCPMSG+0x41a>
 8001934:	e001      	b.n	800193a <parseDHCPMSG+0x46>
   else return 0;
 8001936:	2300      	movs	r3, #0
 8001938:	e1eb      	b.n	8001d12 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800193a:	4b93      	ldr	r3, [pc, #588]	@ (8001b88 <parseDHCPMSG+0x294>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	7f1a      	ldrb	r2, [r3, #28]
 8001940:	4b92      	ldr	r3, [pc, #584]	@ (8001b8c <parseDHCPMSG+0x298>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d124      	bne.n	8001992 <parseDHCPMSG+0x9e>
 8001948:	4b8f      	ldr	r3, [pc, #572]	@ (8001b88 <parseDHCPMSG+0x294>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	7f5a      	ldrb	r2, [r3, #29]
 800194e:	4b8f      	ldr	r3, [pc, #572]	@ (8001b8c <parseDHCPMSG+0x298>)
 8001950:	785b      	ldrb	r3, [r3, #1]
 8001952:	429a      	cmp	r2, r3
 8001954:	d11d      	bne.n	8001992 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001956:	4b8c      	ldr	r3, [pc, #560]	@ (8001b88 <parseDHCPMSG+0x294>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	7f9a      	ldrb	r2, [r3, #30]
 800195c:	4b8b      	ldr	r3, [pc, #556]	@ (8001b8c <parseDHCPMSG+0x298>)
 800195e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d116      	bne.n	8001992 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001964:	4b88      	ldr	r3, [pc, #544]	@ (8001b88 <parseDHCPMSG+0x294>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	7fda      	ldrb	r2, [r3, #31]
 800196a:	4b88      	ldr	r3, [pc, #544]	@ (8001b8c <parseDHCPMSG+0x298>)
 800196c:	78db      	ldrb	r3, [r3, #3]
 800196e:	429a      	cmp	r2, r3
 8001970:	d10f      	bne.n	8001992 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001972:	4b85      	ldr	r3, [pc, #532]	@ (8001b88 <parseDHCPMSG+0x294>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f893 2020 	ldrb.w	r2, [r3, #32]
 800197a:	4b84      	ldr	r3, [pc, #528]	@ (8001b8c <parseDHCPMSG+0x298>)
 800197c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d107      	bne.n	8001992 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001982:	4b81      	ldr	r3, [pc, #516]	@ (8001b88 <parseDHCPMSG+0x294>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800198a:	4b80      	ldr	r3, [pc, #512]	@ (8001b8c <parseDHCPMSG+0x298>)
 800198c:	795b      	ldrb	r3, [r3, #5]
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8001992:	2300      	movs	r3, #0
 8001994:	e1bd      	b.n	8001d12 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001996:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <parseDHCPMSG+0x29c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10b      	bne.n	80019b6 <parseDHCPMSG+0xc2>
 800199e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b90 <parseDHCPMSG+0x29c>)
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d107      	bne.n	80019b6 <parseDHCPMSG+0xc2>
 80019a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001b90 <parseDHCPMSG+0x29c>)
 80019a8:	789b      	ldrb	r3, [r3, #2]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <parseDHCPMSG+0xc2>
 80019ae:	4b78      	ldr	r3, [pc, #480]	@ (8001b90 <parseDHCPMSG+0x29c>)
 80019b0:	78db      	ldrb	r3, [r3, #3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d029      	beq.n	8001a0a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80019b6:	793a      	ldrb	r2, [r7, #4]
 80019b8:	4b75      	ldr	r3, [pc, #468]	@ (8001b90 <parseDHCPMSG+0x29c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d10e      	bne.n	80019de <parseDHCPMSG+0xea>
 80019c0:	797a      	ldrb	r2, [r7, #5]
 80019c2:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <parseDHCPMSG+0x29c>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d109      	bne.n	80019de <parseDHCPMSG+0xea>
 80019ca:	79ba      	ldrb	r2, [r7, #6]
 80019cc:	4b70      	ldr	r3, [pc, #448]	@ (8001b90 <parseDHCPMSG+0x29c>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d104      	bne.n	80019de <parseDHCPMSG+0xea>
 80019d4:	79fa      	ldrb	r2, [r7, #7]
 80019d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b90 <parseDHCPMSG+0x29c>)
 80019d8:	78db      	ldrb	r3, [r3, #3]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d015      	beq.n	8001a0a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80019de:	793a      	ldrb	r2, [r7, #4]
 80019e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b94 <parseDHCPMSG+0x2a0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d10e      	bne.n	8001a06 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80019e8:	797a      	ldrb	r2, [r7, #5]
 80019ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001b94 <parseDHCPMSG+0x2a0>)
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d109      	bne.n	8001a06 <parseDHCPMSG+0x112>
 80019f2:	79ba      	ldrb	r2, [r7, #6]
 80019f4:	4b67      	ldr	r3, [pc, #412]	@ (8001b94 <parseDHCPMSG+0x2a0>)
 80019f6:	789b      	ldrb	r3, [r3, #2]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d104      	bne.n	8001a06 <parseDHCPMSG+0x112>
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	4b65      	ldr	r3, [pc, #404]	@ (8001b94 <parseDHCPMSG+0x2a0>)
 8001a00:	78db      	ldrb	r3, [r3, #3]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d001      	beq.n	8001a0a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e183      	b.n	8001d12 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b88 <parseDHCPMSG+0x294>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	33f0      	adds	r3, #240	@ 0xf0
 8001a14:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001a16:	8a3b      	ldrh	r3, [r7, #16]
 8001a18:	3bf0      	subs	r3, #240	@ 0xf0
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001a20:	e170      	b.n	8001d04 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b36      	cmp	r3, #54	@ 0x36
 8001a28:	dc76      	bgt.n	8001b18 <parseDHCPMSG+0x224>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f2c0 815d 	blt.w	8001cea <parseDHCPMSG+0x3f6>
 8001a30:	2b36      	cmp	r3, #54	@ 0x36
 8001a32:	f200 815a 	bhi.w	8001cea <parseDHCPMSG+0x3f6>
 8001a36:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <parseDHCPMSG+0x148>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001b25 	.word	0x08001b25
 8001a40:	08001b45 	.word	0x08001b45
 8001a44:	08001ceb 	.word	0x08001ceb
 8001a48:	08001b9d 	.word	0x08001b9d
 8001a4c:	08001ceb 	.word	0x08001ceb
 8001a50:	08001ceb 	.word	0x08001ceb
 8001a54:	08001be9 	.word	0x08001be9
 8001a58:	08001ceb 	.word	0x08001ceb
 8001a5c:	08001ceb 	.word	0x08001ceb
 8001a60:	08001ceb 	.word	0x08001ceb
 8001a64:	08001ceb 	.word	0x08001ceb
 8001a68:	08001ceb 	.word	0x08001ceb
 8001a6c:	08001ceb 	.word	0x08001ceb
 8001a70:	08001ceb 	.word	0x08001ceb
 8001a74:	08001ceb 	.word	0x08001ceb
 8001a78:	08001ceb 	.word	0x08001ceb
 8001a7c:	08001ceb 	.word	0x08001ceb
 8001a80:	08001ceb 	.word	0x08001ceb
 8001a84:	08001ceb 	.word	0x08001ceb
 8001a88:	08001ceb 	.word	0x08001ceb
 8001a8c:	08001ceb 	.word	0x08001ceb
 8001a90:	08001ceb 	.word	0x08001ceb
 8001a94:	08001ceb 	.word	0x08001ceb
 8001a98:	08001ceb 	.word	0x08001ceb
 8001a9c:	08001ceb 	.word	0x08001ceb
 8001aa0:	08001ceb 	.word	0x08001ceb
 8001aa4:	08001ceb 	.word	0x08001ceb
 8001aa8:	08001ceb 	.word	0x08001ceb
 8001aac:	08001ceb 	.word	0x08001ceb
 8001ab0:	08001ceb 	.word	0x08001ceb
 8001ab4:	08001ceb 	.word	0x08001ceb
 8001ab8:	08001ceb 	.word	0x08001ceb
 8001abc:	08001ceb 	.word	0x08001ceb
 8001ac0:	08001ceb 	.word	0x08001ceb
 8001ac4:	08001ceb 	.word	0x08001ceb
 8001ac8:	08001ceb 	.word	0x08001ceb
 8001acc:	08001ceb 	.word	0x08001ceb
 8001ad0:	08001ceb 	.word	0x08001ceb
 8001ad4:	08001ceb 	.word	0x08001ceb
 8001ad8:	08001ceb 	.word	0x08001ceb
 8001adc:	08001ceb 	.word	0x08001ceb
 8001ae0:	08001ceb 	.word	0x08001ceb
 8001ae4:	08001ceb 	.word	0x08001ceb
 8001ae8:	08001ceb 	.word	0x08001ceb
 8001aec:	08001ceb 	.word	0x08001ceb
 8001af0:	08001ceb 	.word	0x08001ceb
 8001af4:	08001ceb 	.word	0x08001ceb
 8001af8:	08001ceb 	.word	0x08001ceb
 8001afc:	08001ceb 	.word	0x08001ceb
 8001b00:	08001ceb 	.word	0x08001ceb
 8001b04:	08001ceb 	.word	0x08001ceb
 8001b08:	08001c35 	.word	0x08001c35
 8001b0c:	08001ceb 	.word	0x08001ceb
 8001b10:	08001b2d 	.word	0x08001b2d
 8001b14:	08001c91 	.word	0x08001c91
 8001b18:	2bff      	cmp	r3, #255	@ 0xff
 8001b1a:	f040 80e6 	bne.w	8001cea <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	617b      	str	r3, [r7, #20]
   				break;
 8001b22:	e0ef      	b.n	8001d04 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
   				break;
 8001b2a:	e0eb      	b.n	8001d04 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
   				p++;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	617a      	str	r2, [r7, #20]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	74fb      	strb	r3, [r7, #19]
   				break;
 8001b42:	e0df      	b.n	8001d04 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
   				p++;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	617a      	str	r2, [r7, #20]
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <parseDHCPMSG+0x2a4>)
 8001b5a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	617a      	str	r2, [r7, #20]
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <parseDHCPMSG+0x2a4>)
 8001b66:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	617a      	str	r2, [r7, #20]
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <parseDHCPMSG+0x2a4>)
 8001b72:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	617a      	str	r2, [r7, #20]
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <parseDHCPMSG+0x2a4>)
 8001b7e:	70da      	strb	r2, [r3, #3]
   				break;
 8001b80:	e0c0      	b.n	8001d04 <parseDHCPMSG+0x410>
 8001b82:	bf00      	nop
 8001b84:	200009a8 	.word	0x200009a8
 8001b88:	200009d4 	.word	0x200009d4
 8001b8c:	200009d8 	.word	0x200009d8
 8001b90:	200009ac 	.word	0x200009ac
 8001b94:	200009b0 	.word	0x200009b0
 8001b98:	200009c0 	.word	0x200009c0
   			case routersOnSubnet :
   				p++;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	617a      	str	r2, [r7, #20]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	617a      	str	r2, [r7, #20]
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <parseDHCPMSG+0x428>)
 8001bb6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	617a      	str	r2, [r7, #20]
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	4b56      	ldr	r3, [pc, #344]	@ (8001d1c <parseDHCPMSG+0x428>)
 8001bc2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	617a      	str	r2, [r7, #20]
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b53      	ldr	r3, [pc, #332]	@ (8001d1c <parseDHCPMSG+0x428>)
 8001bce:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	617a      	str	r2, [r7, #20]
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	4b50      	ldr	r3, [pc, #320]	@ (8001d1c <parseDHCPMSG+0x428>)
 8001bda:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	3b04      	subs	r3, #4
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4413      	add	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
   				break;
 8001be6:	e08d      	b.n	8001d04 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	617a      	str	r2, [r7, #20]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	617a      	str	r2, [r7, #20]
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <parseDHCPMSG+0x42c>)
 8001c02:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	617a      	str	r2, [r7, #20]
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <parseDHCPMSG+0x42c>)
 8001c0e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	617a      	str	r2, [r7, #20]
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <parseDHCPMSG+0x42c>)
 8001c1a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	617a      	str	r2, [r7, #20]
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	4b3e      	ldr	r3, [pc, #248]	@ (8001d20 <parseDHCPMSG+0x42c>)
 8001c26:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4413      	add	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
   				break;
 8001c32:	e067      	b.n	8001d04 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	617a      	str	r2, [r7, #20]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	617a      	str	r2, [r7, #20]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <parseDHCPMSG+0x430>)
 8001c50:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001c52:	4b34      	ldr	r3, [pc, #208]	@ (8001d24 <parseDHCPMSG+0x430>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	1c59      	adds	r1, r3, #1
 8001c5c:	6179      	str	r1, [r7, #20]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a30      	ldr	r2, [pc, #192]	@ (8001d24 <parseDHCPMSG+0x430>)
 8001c64:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <parseDHCPMSG+0x430>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	021a      	lsls	r2, r3, #8
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1c59      	adds	r1, r3, #1
 8001c70:	6179      	str	r1, [r7, #20]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a2b      	ldr	r2, [pc, #172]	@ (8001d24 <parseDHCPMSG+0x430>)
 8001c78:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <parseDHCPMSG+0x430>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	021a      	lsls	r2, r3, #8
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	1c59      	adds	r1, r3, #1
 8001c84:	6179      	str	r1, [r7, #20]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a26      	ldr	r2, [pc, #152]	@ (8001d24 <parseDHCPMSG+0x430>)
 8001c8c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001c8e:	e039      	b.n	8001d04 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	617a      	str	r2, [r7, #20]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	617a      	str	r2, [r7, #20]
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <parseDHCPMSG+0x434>)
 8001caa:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	617a      	str	r2, [r7, #20]
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <parseDHCPMSG+0x434>)
 8001cb6:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	617a      	str	r2, [r7, #20]
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <parseDHCPMSG+0x434>)
 8001cc2:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	617a      	str	r2, [r7, #20]
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <parseDHCPMSG+0x434>)
 8001cce:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8001cd0:	793a      	ldrb	r2, [r7, #4]
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <parseDHCPMSG+0x438>)
 8001cd4:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8001cd6:	797a      	ldrb	r2, [r7, #5]
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <parseDHCPMSG+0x438>)
 8001cda:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8001cdc:	79ba      	ldrb	r2, [r7, #6]
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <parseDHCPMSG+0x438>)
 8001ce0:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8001ce2:	79fa      	ldrb	r2, [r7, #7]
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <parseDHCPMSG+0x438>)
 8001ce6:	70da      	strb	r2, [r3, #3]
   				break;
 8001ce8:	e00c      	b.n	8001d04 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	617a      	str	r2, [r7, #20]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
   				break;
 8001d02:	bf00      	nop
		while ( p < e ) {
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f4ff ae8a 	bcc.w	8001a22 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8001d0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200009bc 	.word	0x200009bc
 8001d20:	200009c4 	.word	0x200009c4
 8001d24:	20000030 	.word	0x20000030
 8001d28:	200009ac 	.word	0x200009ac
 8001d2c:	200009b0 	.word	0x200009b0

08001d30 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001d36:	4b7f      	ldr	r3, [pc, #508]	@ (8001f34 <DHCP_run+0x204>)
 8001d38:	f993 3000 	ldrsb.w	r3, [r3]
 8001d3c:	2b06      	cmp	r3, #6
 8001d3e:	d101      	bne.n	8001d44 <DHCP_run+0x14>
 8001d40:	2305      	movs	r3, #5
 8001d42:	e0f3      	b.n	8001f2c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001d44:	4b7c      	ldr	r3, [pc, #496]	@ (8001f38 <DHCP_run+0x208>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 feba 	bl	8002acc <WIZCHIP_READ>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b22      	cmp	r3, #34	@ 0x22
 8001d5c:	d006      	beq.n	8001d6c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8001d5e:	4b76      	ldr	r3, [pc, #472]	@ (8001f38 <DHCP_run+0x208>)
 8001d60:	7818      	ldrb	r0, [r3, #0]
 8001d62:	2300      	movs	r3, #0
 8001d64:	2244      	movs	r2, #68	@ 0x44
 8001d66:	2102      	movs	r1, #2
 8001d68:	f001 f996 	bl	8003098 <socket>

	ret = DHCP_RUNNING;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8001d70:	f7ff fdc0 	bl	80018f4 <parseDHCPMSG>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8001d78:	4b6e      	ldr	r3, [pc, #440]	@ (8001f34 <DHCP_run+0x204>)
 8001d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	f200 80d0 	bhi.w	8001f24 <DHCP_run+0x1f4>
 8001d84:	a201      	add	r2, pc, #4	@ (adr r2, 8001d8c <DHCP_run+0x5c>)
 8001d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8a:	bf00      	nop
 8001d8c:	08001da1 	.word	0x08001da1
 8001d90:	08001dc5 	.word	0x08001dc5
 8001d94:	08001e09 	.word	0x08001e09
 8001d98:	08001e59 	.word	0x08001e59
 8001d9c:	08001eb3 	.word	0x08001eb3
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8001da0:	4b66      	ldr	r3, [pc, #408]	@ (8001f3c <DHCP_run+0x20c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8001da6:	4b65      	ldr	r3, [pc, #404]	@ (8001f3c <DHCP_run+0x20c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8001dac:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <DHCP_run+0x20c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8001db2:	4b62      	ldr	r3, [pc, #392]	@ (8001f3c <DHCP_run+0x20c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8001db8:	f7fe fffa 	bl	8000db0 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8001dbc:	4b5d      	ldr	r3, [pc, #372]	@ (8001f34 <DHCP_run+0x204>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
   		break;
 8001dc2:	e0b2      	b.n	8001f2a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8001dc4:	79bb      	ldrb	r3, [r7, #6]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d119      	bne.n	8001dfe <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8001dca:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <DHCP_run+0x210>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	7c1a      	ldrb	r2, [r3, #16]
 8001dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f3c <DHCP_run+0x20c>)
 8001dd2:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8001dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8001f40 <DHCP_run+0x210>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	7c5a      	ldrb	r2, [r3, #17]
 8001dda:	4b58      	ldr	r3, [pc, #352]	@ (8001f3c <DHCP_run+0x20c>)
 8001ddc:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8001dde:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <DHCP_run+0x210>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	7c9a      	ldrb	r2, [r3, #18]
 8001de4:	4b55      	ldr	r3, [pc, #340]	@ (8001f3c <DHCP_run+0x20c>)
 8001de6:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8001de8:	4b55      	ldr	r3, [pc, #340]	@ (8001f40 <DHCP_run+0x210>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	7cda      	ldrb	r2, [r3, #19]
 8001dee:	4b53      	ldr	r3, [pc, #332]	@ (8001f3c <DHCP_run+0x20c>)
 8001df0:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8001df2:	f7ff f9a3 	bl	800113c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8001df6:	4b4f      	ldr	r3, [pc, #316]	@ (8001f34 <DHCP_run+0x204>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8001dfc:	e095      	b.n	8001f2a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001dfe:	f000 f8c1 	bl	8001f84 <check_DHCP_timeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
         break;
 8001e06:	e090      	b.n	8001f2a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d116      	bne.n	8001e3c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8001e0e:	f000 f919 	bl	8002044 <check_DHCP_leasedIP>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8001e18:	4b4a      	ldr	r3, [pc, #296]	@ (8001f44 <DHCP_run+0x214>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4798      	blx	r3
					reset_DHCP_timeout();
 8001e1e:	f000 f9e3 	bl	80021e8 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8001e22:	4b44      	ldr	r3, [pc, #272]	@ (8001f34 <DHCP_run+0x204>)
 8001e24:	2203      	movs	r2, #3
 8001e26:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8001e28:	e07f      	b.n	8001f2a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8001e2a:	f000 f9dd 	bl	80021e8 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <DHCP_run+0x218>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8001e34:	4b3f      	ldr	r3, [pc, #252]	@ (8001f34 <DHCP_run+0x204>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
		break;
 8001e3a:	e076      	b.n	8001f2a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d105      	bne.n	8001e4e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8001e42:	f000 f9d1 	bl	80021e8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001e46:	4b3b      	ldr	r3, [pc, #236]	@ (8001f34 <DHCP_run+0x204>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		break;
 8001e4c:	e06d      	b.n	8001f2a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001e4e:	f000 f899 	bl	8001f84 <check_DHCP_timeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
		break;
 8001e56:	e068      	b.n	8001f2a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <DHCP_run+0x21c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d060      	beq.n	8001f28 <DHCP_run+0x1f8>
 8001e66:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <DHCP_run+0x21c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	085a      	lsrs	r2, r3, #1
 8001e6c:	4b38      	ldr	r3, [pc, #224]	@ (8001f50 <DHCP_run+0x220>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d259      	bcs.n	8001f28 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8001e78:	4b30      	ldr	r3, [pc, #192]	@ (8001f3c <DHCP_run+0x20c>)
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	4b35      	ldr	r3, [pc, #212]	@ (8001f54 <DHCP_run+0x224>)
 8001e7e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8001e80:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <DHCP_run+0x20c>)
 8001e82:	785a      	ldrb	r2, [r3, #1]
 8001e84:	4b33      	ldr	r3, [pc, #204]	@ (8001f54 <DHCP_run+0x224>)
 8001e86:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8001e88:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <DHCP_run+0x20c>)
 8001e8a:	789a      	ldrb	r2, [r3, #2]
 8001e8c:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <DHCP_run+0x224>)
 8001e8e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8001e90:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <DHCP_run+0x20c>)
 8001e92:	78da      	ldrb	r2, [r3, #3]
 8001e94:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <DHCP_run+0x224>)
 8001e96:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <DHCP_run+0x228>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <DHCP_run+0x228>)
 8001ea0:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8001ea2:	f7ff f94b 	bl	800113c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8001ea6:	f000 f99f 	bl	80021e8 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <DHCP_run+0x204>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001eb0:	e03a      	b.n	8001f28 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d125      	bne.n	8001f08 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <DHCP_run+0x22c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <DHCP_run+0x224>)
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <DHCP_run+0x20c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d111      	bne.n	8001ef2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001ece:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <DHCP_run+0x224>)
 8001ed0:	785a      	ldrb	r2, [r3, #1]
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <DHCP_run+0x20c>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d10b      	bne.n	8001ef2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001eda:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <DHCP_run+0x224>)
 8001edc:	789a      	ldrb	r2, [r3, #2]
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <DHCP_run+0x20c>)
 8001ee0:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d105      	bne.n	8001ef2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <DHCP_run+0x224>)
 8001ee8:	78da      	ldrb	r2, [r3, #3]
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <DHCP_run+0x20c>)
 8001eec:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d004      	beq.n	8001efc <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <DHCP_run+0x230>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8001efc:	f000 f974 	bl	80021e8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <DHCP_run+0x204>)
 8001f02:	2203      	movs	r2, #3
 8001f04:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8001f06:	e010      	b.n	8001f2a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d105      	bne.n	8001f1a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8001f0e:	f000 f96b 	bl	80021e8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <DHCP_run+0x204>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
	   	break;
 8001f18:	e007      	b.n	8001f2a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001f1a:	f000 f833 	bl	8001f84 <check_DHCP_timeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	   	break;
 8001f22:	e002      	b.n	8001f2a <DHCP_run+0x1fa>
		default :
   		break;
 8001f24:	bf00      	nop
 8001f26:	e000      	b.n	8001f2a <DHCP_run+0x1fa>
		break;
 8001f28:	bf00      	nop
	}

	return ret;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200009c8 	.word	0x200009c8
 8001f38:	200009a8 	.word	0x200009a8
 8001f3c:	200009b8 	.word	0x200009b8
 8001f40:	200009d4 	.word	0x200009d4
 8001f44:	20000040 	.word	0x20000040
 8001f48:	20000048 	.word	0x20000048
 8001f4c:	20000030 	.word	0x20000030
 8001f50:	200009cc 	.word	0x200009cc
 8001f54:	200009b4 	.word	0x200009b4
 8001f58:	200009d0 	.word	0x200009d0
 8001f5c:	200009c9 	.word	0x200009c9
 8001f60:	20000044 	.word	0x20000044

08001f64 <DHCP_stop>:

void    DHCP_stop(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <DHCP_stop+0x18>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 f9a7 	bl	80032c0 <close>
   dhcp_state = STATE_DHCP_STOP;
 8001f72:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <DHCP_stop+0x1c>)
 8001f74:	2206      	movs	r2, #6
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200009a8 	.word	0x200009a8
 8001f80:	200009c8 	.word	0x200009c8

08001f84 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <check_DHCP_timeout+0xb0>)
 8001f90:	f993 3000 	ldrsb.w	r3, [r3]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	dc2d      	bgt.n	8001ff4 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8001f98:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <check_DHCP_timeout+0xb4>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b27      	ldr	r3, [pc, #156]	@ (800203c <check_DHCP_timeout+0xb8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d242      	bcs.n	800202a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8001fa4:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <check_DHCP_timeout+0xbc>)
 8001fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d00c      	beq.n	8001fc8 <check_DHCP_timeout+0x44>
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	dc0d      	bgt.n	8001fce <check_DHCP_timeout+0x4a>
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d002      	beq.n	8001fbc <check_DHCP_timeout+0x38>
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d003      	beq.n	8001fc2 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8001fba:	e008      	b.n	8001fce <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8001fbc:	f7fe fef8 	bl	8000db0 <send_DHCP_DISCOVER>
				break;
 8001fc0:	e006      	b.n	8001fd0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8001fc2:	f7ff f8bb 	bl	800113c <send_DHCP_REQUEST>
				break;
 8001fc6:	e003      	b.n	8001fd0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8001fc8:	f7ff f8b8 	bl	800113c <send_DHCP_REQUEST>
				break;
 8001fcc:	e000      	b.n	8001fd0 <check_DHCP_timeout+0x4c>
				break;
 8001fce:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <check_DHCP_timeout+0xb8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	@ (800203c <check_DHCP_timeout+0xb8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330a      	adds	r3, #10
 8001fdc:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <check_DHCP_timeout+0xb4>)
 8001fde:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <check_DHCP_timeout+0xb0>)
 8001fe2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	b25a      	sxtb	r2, r3
 8001fee:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <check_DHCP_timeout+0xb0>)
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e01a      	b.n	800202a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <check_DHCP_timeout+0xbc>)
 8001ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d00c      	beq.n	8002018 <check_DHCP_timeout+0x94>
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	dc10      	bgt.n	8002024 <check_DHCP_timeout+0xa0>
 8002002:	2b01      	cmp	r3, #1
 8002004:	d002      	beq.n	800200c <check_DHCP_timeout+0x88>
 8002006:	2b02      	cmp	r3, #2
 8002008:	d006      	beq.n	8002018 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800200a:	e00b      	b.n	8002024 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <check_DHCP_timeout+0xbc>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002012:	2300      	movs	r3, #0
 8002014:	71fb      	strb	r3, [r7, #7]
				break;
 8002016:	e006      	b.n	8002026 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002018:	f7fe feca 	bl	8000db0 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <check_DHCP_timeout+0xbc>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
				break;
 8002022:	e000      	b.n	8002026 <check_DHCP_timeout+0xa2>
				break;
 8002024:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002026:	f000 f8df 	bl	80021e8 <reset_DHCP_timeout>
	}
	return ret;
 800202a:	79fb      	ldrb	r3, [r7, #7]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200009c9 	.word	0x200009c9
 8002038:	20000034 	.word	0x20000034
 800203c:	200009cc 	.word	0x200009cc
 8002040:	200009c8 	.word	0x200009c8

08002044 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800204a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800204e:	f000 fd3d 	bl	8002acc <WIZCHIP_READ>
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002056:	2103      	movs	r1, #3
 8002058:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800205c:	f000 fd82 	bl	8002b64 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <check_DHCP_leasedIP+0x6c>)
 8002062:	7818      	ldrb	r0, [r3, #0]
 8002064:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <check_DHCP_leasedIP+0x70>)
 800206c:	2211      	movs	r2, #17
 800206e:	4912      	ldr	r1, [pc, #72]	@ (80020b8 <check_DHCP_leasedIP+0x74>)
 8002070:	f001 f994 	bl	800339c <sendto>
 8002074:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800207e:	f000 fd71 	bl	8002b64 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f113 0f0d 	cmn.w	r3, #13
 8002088:	d101      	bne.n	800208e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800208a:	2301      	movs	r3, #1
 800208c:	e00c      	b.n	80020a8 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800208e:	f7ff fadf 	bl	8001650 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <check_DHCP_leasedIP+0x78>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002098:	bf00      	nop
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <check_DHCP_leasedIP+0x78>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d9f9      	bls.n	800209a <check_DHCP_leasedIP+0x56>

		return 0;
 80020a6:	2300      	movs	r3, #0
	}
}	
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200009a8 	.word	0x200009a8
 80020b4:	200009b8 	.word	0x200009b8
 80020b8:	08006f14 	.word	0x08006f14
 80020bc:	200009cc 	.word	0x200009cc

080020c0 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80020d0:	2206      	movs	r2, #6
 80020d2:	493f      	ldr	r1, [pc, #252]	@ (80021d0 <DHCP_init+0x110>)
 80020d4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80020d8:	f000 fd92 	bl	8002c00 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80020dc:	4b3c      	ldr	r3, [pc, #240]	@ (80021d0 <DHCP_init+0x110>)
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <DHCP_init+0x110>)
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b39      	ldr	r3, [pc, #228]	@ (80021d0 <DHCP_init+0x110>)
 80020ea:	789b      	ldrb	r3, [r3, #2]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <DHCP_init+0x110>)
 80020f2:	78db      	ldrb	r3, [r3, #3]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <DHCP_init+0x110>)
 80020fa:	791b      	ldrb	r3, [r3, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b33      	ldr	r3, [pc, #204]	@ (80021d0 <DHCP_init+0x110>)
 8002102:	795b      	ldrb	r3, [r3, #5]
 8002104:	4313      	orrs	r3, r2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d117      	bne.n	800213c <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800210c:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <DHCP_init+0x110>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002112:	4b2f      	ldr	r3, [pc, #188]	@ (80021d0 <DHCP_init+0x110>)
 8002114:	2208      	movs	r2, #8
 8002116:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <DHCP_init+0x110>)
 800211a:	22dc      	movs	r2, #220	@ 0xdc
 800211c:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800211e:	4b2c      	ldr	r3, [pc, #176]	@ (80021d0 <DHCP_init+0x110>)
 8002120:	2200      	movs	r2, #0
 8002122:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <DHCP_init+0x110>)
 8002126:	2200      	movs	r2, #0
 8002128:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800212a:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <DHCP_init+0x110>)
 800212c:	2200      	movs	r2, #0
 800212e:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002130:	2206      	movs	r2, #6
 8002132:	4927      	ldr	r1, [pc, #156]	@ (80021d0 <DHCP_init+0x110>)
 8002134:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002138:	f000 fdc2 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 800213c:	4a25      	ldr	r2, [pc, #148]	@ (80021d4 <DHCP_init+0x114>)
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002142:	4a25      	ldr	r2, [pc, #148]	@ (80021d8 <DHCP_init+0x118>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <DHCP_init+0x11c>)
 800214a:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <DHCP_init+0x120>)
 800214c:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800214e:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <DHCP_init+0x110>)
 8002150:	78db      	ldrb	r3, [r3, #3]
 8002152:	461a      	mov	r2, r3
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <DHCP_init+0x11c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4413      	add	r3, r2
 800215a:	4a20      	ldr	r2, [pc, #128]	@ (80021dc <DHCP_init+0x11c>)
 800215c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <DHCP_init+0x110>)
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	461a      	mov	r2, r3
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <DHCP_init+0x11c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4413      	add	r3, r2
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <DHCP_init+0x11c>)
 800216c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800216e:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <DHCP_init+0x110>)
 8002170:	795b      	ldrb	r3, [r3, #5]
 8002172:	461a      	mov	r2, r3
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <DHCP_init+0x11c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4413      	add	r3, r2
 800217a:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <DHCP_init+0x11c>)
 800217c:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800217e:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <DHCP_init+0x110>)
 8002180:	78da      	ldrb	r2, [r3, #3]
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <DHCP_init+0x110>)
 8002184:	791b      	ldrb	r3, [r3, #4]
 8002186:	4053      	eors	r3, r2
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <DHCP_init+0x110>)
 800218c:	795b      	ldrb	r3, [r3, #5]
 800218e:	4053      	eors	r3, r2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <DHCP_init+0x11c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4413      	add	r3, r2
 800219a:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <DHCP_init+0x11c>)
 800219c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2204      	movs	r2, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80021aa:	f000 fd89 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	2204      	movs	r2, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021ba:	f000 fd81 	bl	8002cc0 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80021be:	f000 f813 	bl	80021e8 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80021c2:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <DHCP_init+0x124>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200009d8 	.word	0x200009d8
 80021d4:	200009a8 	.word	0x200009a8
 80021d8:	200009d4 	.word	0x200009d4
 80021dc:	200009d0 	.word	0x200009d0
 80021e0:	12345678 	.word	0x12345678
 80021e4:	200009c8 	.word	0x200009c8

080021e8 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <reset_DHCP_timeout+0x20>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <reset_DHCP_timeout+0x24>)
 80021f4:	220a      	movs	r2, #10
 80021f6:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <reset_DHCP_timeout+0x28>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200009cc 	.word	0x200009cc
 800220c:	20000034 	.word	0x20000034
 8002210:	200009c9 	.word	0x200009c9

08002214 <getDHCPLeasetime>:
   ip[2] = DHCP_allocated_dns[2];
   ip[3] = DHCP_allocated_dns[3];         
}

uint32_t getDHCPLeasetime(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 8002218:	4b02      	ldr	r3, [pc, #8]	@ (8002224 <getDHCPLeasetime+0x10>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000030 	.word	0x20000030

08002228 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d803      	bhi.n	8002248 <NibbleToHex+0x20>
    return nibble + '0';
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	3330      	adds	r3, #48	@ 0x30
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e002      	b.n	800224e <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	3337      	adds	r3, #55	@ 0x37
 800224c:	b2db      	uxtb	r3, r3
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	4413      	add	r3, r2
 8002276:	81fb      	strh	r3, [r7, #14]
	return i;
 8002278:	89fb      	ldrh	r3, [r7, #14]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b299      	uxth	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	b2ca      	uxtb	r2, r1
 800229e:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	701a      	strb	r2, [r3, #0]
	return s;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	@ 0x2c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	623a      	str	r2, [r7, #32]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <parse_name+0x34>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 80022ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80022ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80022f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80022f4:	d117      	bne.n	8002326 <parse_name+0x6e>
		{
			if (!indirect)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <parse_name+0x4a>
				clen++;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8002306:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	7812      	ldrb	r2, [r2, #0]
 8002312:	4413      	add	r3, r2
 8002314:	461a      	mov	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4413      	add	r3, r2
 800231a:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	623a      	str	r2, [r7, #32]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8002326:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002328:	2b00      	cmp	r3, #0
 800232a:	d02b      	beq.n	8002384 <parse_name+0xcc>
			break;

		len -= slen + 1;
 800232c:	887a      	ldrh	r2, [r7, #2]
 800232e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29b      	uxth	r3, r3
 8002338:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800233a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800233e:	2b00      	cmp	r3, #0
 8002340:	da02      	bge.n	8002348 <parse_name+0x90>
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e038      	b.n	80023ba <parse_name+0x102>

		if (!indirect) clen += slen;
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <parse_name+0xb0>
 800234e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8002356:	e007      	b.n	8002368 <parse_name+0xb0>
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	1c53      	adds	r3, r2, #1
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1c59      	adds	r1, r3, #1
 8002362:	6079      	str	r1, [r7, #4]
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800236a:	1e5a      	subs	r2, r3, #1
 800236c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f2      	bne.n	8002358 <parse_name+0xa0>
		*buf++ = '.';
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	222e      	movs	r2, #46	@ 0x2e
 800237a:	701a      	strb	r2, [r3, #0]
		nseg++;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8002382:	e7a8      	b.n	80022d6 <parse_name+0x1e>
			break;
 8002384:	bf00      	nop
	}

	if (nseg == 0)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	222e      	movs	r2, #46	@ 0x2e
 8002394:	701a      	strb	r2, [r3, #0]
		len--;
 8002396:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29b      	uxth	r3, r3
 80023a0:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
	len--;
 80023ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80023b8:	69fb      	ldr	r3, [r7, #28]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	372c      	adds	r7, #44	@ 0x2c
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0b4      	sub	sp, #208	@ 0xd0
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80023ce:	f107 020c 	add.w	r2, r7, #12
 80023d2:	23c0      	movs	r3, #192	@ 0xc0
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff6e 	bl	80022b8 <parse_name>
 80023dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 80023e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d101      	bne.n	80023ee <dns_question+0x2a>
 80023ea:	2300      	movs	r3, #0
 80023ec:	e00b      	b.n	8002406 <dns_question+0x42>

	cp += len;
 80023ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3302      	adds	r3, #2
 80023fc:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	3302      	adds	r3, #2
 8002402:	603b      	str	r3, [r7, #0]

	return cp;
 8002404:	683b      	ldr	r3, [r7, #0]
}
 8002406:	4618      	mov	r0, r3
 8002408:	37d0      	adds	r7, #208	@ 0xd0
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b0b6      	sub	sp, #216	@ 0xd8
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800241a:	f107 0210 	add.w	r2, r7, #16
 800241e:	23c0      	movs	r3, #192	@ 0xc0
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff ff48 	bl	80022b8 <parse_name>
 8002428:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 800242c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d101      	bne.n	800243a <dns_answer+0x2c>
 8002436:	2300      	movs	r3, #0
 8002438:	e0f9      	b.n	800262e <dns_answer+0x220>

	cp += len;
 800243a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8002444:	68b8      	ldr	r0, [r7, #8]
 8002446:	f7ff ff07 	bl	8002258 <get16>
 800244a:	4603      	mov	r3, r0
 800244c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	3302      	adds	r3, #2
 8002454:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3302      	adds	r3, #2
 800245a:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3304      	adds	r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3302      	adds	r3, #2
 8002466:	60bb      	str	r3, [r7, #8]


	switch (type)
 8002468:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800246c:	2b10      	cmp	r3, #16
 800246e:	f000 80da 	beq.w	8002626 <dns_answer+0x218>
 8002472:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002476:	2b10      	cmp	r3, #16
 8002478:	f300 80d7 	bgt.w	800262a <dns_answer+0x21c>
 800247c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d07d      	beq.n	8002580 <dns_answer+0x172>
 8002484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002488:	2b0f      	cmp	r3, #15
 800248a:	f300 80ce 	bgt.w	800262a <dns_answer+0x21c>
 800248e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002492:	2b0c      	cmp	r3, #12
 8002494:	dc26      	bgt.n	80024e4 <dns_answer+0xd6>
 8002496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f340 80c5 	ble.w	800262a <dns_answer+0x21c>
 80024a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024a4:	2201      	movs	r2, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 80024ae:	401a      	ands	r2, r3
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	bf14      	ite	ne
 80024b4:	2201      	movne	r2, #1
 80024b6:	2200      	moveq	r2, #0
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	2a00      	cmp	r2, #0
 80024bc:	d133      	bne.n	8002526 <dns_answer+0x118>
 80024be:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80024c2:	2a00      	cmp	r2, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2201      	movne	r2, #1
 80024c8:	2200      	moveq	r2, #0
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	2a00      	cmp	r2, #0
 80024ce:	d170      	bne.n	80025b2 <dns_answer+0x1a4>
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80024e2:	e0a2      	b.n	800262a <dns_answer+0x21c>
	switch (type)
 80024e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024e8:	2b0d      	cmp	r3, #13
 80024ea:	d032      	beq.n	8002552 <dns_answer+0x144>
		break;
 80024ec:	e09d      	b.n	800262a <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	60ba      	str	r2, [r7, #8]
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	60ba      	str	r2, [r7, #8]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	3201      	adds	r2, #1
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	3202      	adds	r2, #2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	60ba      	str	r2, [r7, #8]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	3203      	adds	r2, #3
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	7013      	strb	r3, [r2, #0]
		break;
 8002524:	e082      	b.n	800262c <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8002526:	f107 0210 	add.w	r2, r7, #16
 800252a:	23c0      	movs	r3, #192	@ 0xc0
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff fec2 	bl	80022b8 <parse_name>
 8002534:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8002538:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d101      	bne.n	8002546 <dns_answer+0x138>
 8002542:	2300      	movs	r3, #0
 8002544:	e073      	b.n	800262e <dns_answer+0x220>
		cp += len;
 8002546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4413      	add	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
		break;
 8002550:	e06c      	b.n	800262c <dns_answer+0x21e>
		len = *cp++;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	60ba      	str	r2, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 800255e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	4413      	add	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8002574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	4413      	add	r3, r2
 800257c:	60bb      	str	r3, [r7, #8]
		break;
 800257e:	e055      	b.n	800262c <dns_answer+0x21e>
		cp += 2;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	3302      	adds	r3, #2
 8002584:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8002586:	f107 0210 	add.w	r2, r7, #16
 800258a:	23c0      	movs	r3, #192	@ 0xc0
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7ff fe92 	bl	80022b8 <parse_name>
 8002594:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8002598:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d101      	bne.n	80025a6 <dns_answer+0x198>
 80025a2:	2300      	movs	r3, #0
 80025a4:	e043      	b.n	800262e <dns_answer+0x220>
		cp += len;
 80025a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	4413      	add	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
		break;
 80025b0:	e03c      	b.n	800262c <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80025b2:	f107 0210 	add.w	r2, r7, #16
 80025b6:	23c0      	movs	r3, #192	@ 0xc0
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f7ff fe7c 	bl	80022b8 <parse_name>
 80025c0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80025c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d101      	bne.n	80025d2 <dns_answer+0x1c4>
 80025ce:	2300      	movs	r3, #0
 80025d0:	e02d      	b.n	800262e <dns_answer+0x220>
		cp += len;
 80025d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	4413      	add	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80025dc:	f107 0210 	add.w	r2, r7, #16
 80025e0:	23c0      	movs	r3, #192	@ 0xc0
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff fe67 	bl	80022b8 <parse_name>
 80025ea:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80025ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d101      	bne.n	80025fc <dns_answer+0x1ee>
 80025f8:	2300      	movs	r3, #0
 80025fa:	e018      	b.n	800262e <dns_answer+0x220>
		cp += len;
 80025fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	4413      	add	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3304      	adds	r3, #4
 800260a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	3304      	adds	r3, #4
 8002610:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3304      	adds	r3, #4
 800261c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3304      	adds	r3, #4
 8002622:	60bb      	str	r3, [r7, #8]
		break;
 8002624:	e002      	b.n	800262c <dns_answer+0x21e>
		break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <dns_answer+0x21e>
		break;
 800262a:	bf00      	nop
	}

	return cp;
 800262c:	68bb      	ldr	r3, [r7, #8]
}
 800262e:	4618      	mov	r0, r3
 8002630:	37d8      	adds	r7, #216	@ 0xd8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b088      	sub	sp, #32
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8002646:	2212      	movs	r2, #18
 8002648:	2100      	movs	r1, #0
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f003 fd5c 	bl	8006108 <memset>

	pdhdr->id = get16(&msg[0]);
 8002650:	6978      	ldr	r0, [r7, #20]
 8002652:	f7ff fe01 	bl	8002258 <get16>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3302      	adds	r3, #2
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fdf8 	bl	8002258 <get16>
 8002668:	4603      	mov	r3, r0
 800266a:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800266c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002670:	2b00      	cmp	r3, #0
 8002672:	da02      	bge.n	800267a <parseDNSMSG+0x44>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 800267a:	8a7b      	ldrh	r3, [r7, #18]
 800267c:	0adb      	lsrs	r3, r3, #11
 800267e:	b29b      	uxth	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800268c:	8a7b      	ldrh	r3, [r7, #18]
 800268e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <parseDNSMSG+0x66>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800269c:	8a7b      	ldrh	r3, [r7, #18]
 800269e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <parseDNSMSG+0x76>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80026ac:	8a7b      	ldrh	r3, [r7, #18]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <parseDNSMSG+0x86>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80026bc:	8a7b      	ldrh	r3, [r7, #18]
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <parseDNSMSG+0x96>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80026cc:	8a7b      	ldrh	r3, [r7, #18]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3304      	adds	r3, #4
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fdba 	bl	8002258 <get16>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3306      	adds	r3, #6
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fdb1 	bl	8002258 <get16>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3308      	adds	r3, #8
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fda8 	bl	8002258 <get16>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	330a      	adds	r3, #10
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fd9f 	bl	8002258 <get16>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	330c      	adds	r3, #12
 8002726:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	83fb      	strh	r3, [r7, #30]
 800272c:	e00d      	b.n	800274a <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f7ff fe47 	bl	80023c4 <dns_question>
 8002736:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <parseDNSMSG+0x10e>
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e03b      	b.n	80027bc <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8002744:	8bfb      	ldrh	r3, [r7, #30]
 8002746:	3301      	adds	r3, #1
 8002748:	83fb      	strh	r3, [r7, #30]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	895b      	ldrh	r3, [r3, #10]
 800274e:	8bfa      	ldrh	r2, [r7, #30]
 8002750:	429a      	cmp	r2, r3
 8002752:	d3ec      	bcc.n	800272e <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	83fb      	strh	r3, [r7, #30]
 8002758:	e00e      	b.n	8002778 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	69b9      	ldr	r1, [r7, #24]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff fe55 	bl	800240e <dns_answer>
 8002764:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <parseDNSMSG+0x13c>
 800276c:	f04f 33ff 	mov.w	r3, #4294967295
 8002770:	e024      	b.n	80027bc <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8002772:	8bfb      	ldrh	r3, [r7, #30]
 8002774:	3301      	adds	r3, #1
 8002776:	83fb      	strh	r3, [r7, #30]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	899b      	ldrh	r3, [r3, #12]
 800277c:	8bfa      	ldrh	r2, [r7, #30]
 800277e:	429a      	cmp	r2, r3
 8002780:	d3eb      	bcc.n	800275a <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8002782:	2300      	movs	r3, #0
 8002784:	83fb      	strh	r3, [r7, #30]
 8002786:	e002      	b.n	800278e <parseDNSMSG+0x158>
 8002788:	8bfb      	ldrh	r3, [r7, #30]
 800278a:	3301      	adds	r3, #1
 800278c:	83fb      	strh	r3, [r7, #30]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	89db      	ldrh	r3, [r3, #14]
 8002792:	8bfa      	ldrh	r2, [r7, #30]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3f7      	bcc.n	8002788 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8002798:	2300      	movs	r3, #0
 800279a:	83fb      	strh	r3, [r7, #30]
 800279c:	e002      	b.n	80027a4 <parseDNSMSG+0x16e>
 800279e:	8bfb      	ldrh	r3, [r7, #30]
 80027a0:	3301      	adds	r3, #1
 80027a2:	83fb      	strh	r3, [r7, #30]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8a1b      	ldrh	r3, [r3, #16]
 80027a8:	8bfa      	ldrh	r2, [r7, #30]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d3f7      	bcc.n	800279e <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	7a1b      	ldrb	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <parseDNSMSG+0x184>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <parseDNSMSG+0x186>
	else return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0b8      	sub	sp, #224	@ 0xe0
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	461a      	mov	r2, r3
 80027d0:	4603      	mov	r3, r0
 80027d2:	81fb      	strh	r3, [r7, #14]
 80027d4:	4613      	mov	r3, r2
 80027d6:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 80027de:	4b57      	ldr	r3, [pc, #348]	@ (800293c <dns_makequery+0x178>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b55      	ldr	r3, [pc, #340]	@ (800293c <dns_makequery+0x178>)
 80027e8:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 80027ea:	4b54      	ldr	r3, [pc, #336]	@ (800293c <dns_makequery+0x178>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80027f4:	f7ff fd46 	bl	8002284 <put16>
 80027f8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80027fc:	89fb      	ldrh	r3, [r7, #14]
 80027fe:	02db      	lsls	r3, r3, #11
 8002800:	b21b      	sxth	r3, r3
 8002802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002806:	b21b      	sxth	r3, r3
 8002808:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 800280c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8002810:	4619      	mov	r1, r3
 8002812:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002816:	f7ff fd35 	bl	8002284 <put16>
 800281a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 800281e:	2101      	movs	r1, #1
 8002820:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002824:	f7ff fd2e 	bl	8002284 <put16>
 8002828:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 800282c:	2100      	movs	r1, #0
 800282e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002832:	f7ff fd27 	bl	8002284 <put16>
 8002836:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 800283a:	2100      	movs	r1, #0
 800283c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002840:	f7ff fd20 	bl	8002284 <put16>
 8002844:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8002848:	2100      	movs	r1, #0
 800284a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800284e:	f7ff fd19 	bl	8002284 <put16>
 8002852:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fcee 	bl	800623e <strcpy>
	dname = sname;
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 800286a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800286e:	f7fd fc6d 	bl	800014c <strlen>
 8002872:	4603      	mov	r3, r0
 8002874:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8002878:	212e      	movs	r1, #46	@ 0x2e
 800287a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800287e:	f003 fc4b 	bl	8006118 <strchr>
 8002882:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8002886:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <dns_makequery+0xd8>
 800288e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	81bb      	strh	r3, [r7, #12]
 800289a:	e002      	b.n	80028a2 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 800289c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80028a0:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 80028a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028ac:	89ba      	ldrh	r2, [r7, #12]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 80028b2:	89bb      	ldrh	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d029      	beq.n	800290c <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80028b8:	89bb      	ldrh	r3, [r7, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80028c0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80028c4:	f003 fc35 	bl	8006132 <strncpy>
		cp += len;
 80028c8:	89bb      	ldrh	r3, [r7, #12]
 80028ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80028ce:	4413      	add	r3, r2
 80028d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 80028d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80028dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
			break;
 80028ea:	e010      	b.n	800290e <dns_makequery+0x14a>
		}
		dname += len+1;
 80028ec:	89bb      	ldrh	r3, [r7, #12]
 80028ee:	3301      	adds	r3, #1
 80028f0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80028f4:	4413      	add	r3, r2
 80028f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 80028fa:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 80028fe:	89bb      	ldrh	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 800290a:	e7b5      	b.n	8002878 <dns_makequery+0xb4>
		if (len == 0) break;
 800290c:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 800290e:	2101      	movs	r1, #1
 8002910:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002914:	f7ff fcb6 	bl	8002284 <put16>
 8002918:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 800291c:	2101      	movs	r1, #1
 800291e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002922:	f7ff fcaf 	bl	8002284 <put16>
 8002926:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800292a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	b21b      	sxth	r3, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	37e0      	adds	r7, #224	@ 0xe0
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200009e6 	.word	0x200009e6

08002940 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8002944:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <check_DNS_timeout+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d914      	bls.n	8002976 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <check_DNS_timeout+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8002952:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <check_DNS_timeout+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d905      	bls.n	8002966 <check_DNS_timeout+0x26>
			retry_count = 0;
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <check_DNS_timeout+0x44>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e008      	b.n	8002978 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <check_DNS_timeout+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <check_DNS_timeout+0x44>)
 8002970:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	200009e8 	.word	0x200009e8
 8002984:	200009ec 	.word	0x200009ec

08002988 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8002994:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <DNS_init+0x2c>)
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800299a:	4a07      	ldr	r2, [pc, #28]	@ (80029b8 <DNS_init+0x30>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <DNS_init+0x34>)
 80029a2:	f241 1222 	movw	r2, #4386	@ 0x1122
 80029a6:	801a      	strh	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	200009e4 	.word	0x200009e4
 80029b8:	200009e0 	.word	0x200009e0
 80029bc:	200009e6 	.word	0x200009e6

080029c0 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08f      	sub	sp, #60	@ 0x3c
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80029cc:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <DNS_run+0xfc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <DNS_run+0x100>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80029d8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac4 <DNS_run+0x104>)
 80029da:	7818      	ldrb	r0, [r3, #0]
 80029dc:	2300      	movs	r3, #0
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	f000 fb59 	bl	8003098 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80029e6:	4b38      	ldr	r3, [pc, #224]	@ (8002ac8 <DNS_run+0x108>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff fee7 	bl	80027c4 <dns_makequery>
 80029f6:	4603      	mov	r3, r0
 80029f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80029fa:	4b32      	ldr	r3, [pc, #200]	@ (8002ac4 <DNS_run+0x104>)
 80029fc:	7818      	ldrb	r0, [r3, #0]
 80029fe:	4b32      	ldr	r3, [pc, #200]	@ (8002ac8 <DNS_run+0x108>)
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a04:	2335      	movs	r3, #53	@ 0x35
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f000 fcc7 	bl	800339c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac4 <DNS_run+0x104>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f9fd 	bl	8002e12 <getSn_RX_RSR>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002a1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d029      	beq.n	8002a76 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8002a22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a28:	d902      	bls.n	8002a30 <DNS_run+0x70>
 8002a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a2e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8002a30:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <DNS_run+0x104>)
 8002a32:	7818      	ldrb	r0, [r3, #0]
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <DNS_run+0x108>)
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	f107 0414 	add.w	r4, r7, #20
 8002a3c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a3e:	f107 0312 	add.w	r3, r7, #18
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4623      	mov	r3, r4
 8002a46:	f000 fddd 	bl	8003604 <recvfrom>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <DNS_run+0x108>)
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	f107 0318 	add.w	r3, r7, #24
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fdec 	bl	8002636 <parseDNSMSG>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8002a64:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <DNS_run+0x104>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fc28 	bl	80032c0 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8002a70:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8002a74:	e01e      	b.n	8002ab4 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8002a76:	f7ff ff63 	bl	8002940 <check_DNS_timeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 8002a80:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da06      	bge.n	8002a96 <DNS_run+0xd6>
			close(DNS_SOCKET);
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <DNS_run+0x104>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fc17 	bl	80032c0 <close>
			return 0; // timeout occurred
 8002a92:	2300      	movs	r3, #0
 8002a94:	e00e      	b.n	8002ab4 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8002a96:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1b7      	bne.n	8002a0e <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <DNS_run+0x104>)
 8002aa0:	7818      	ldrb	r0, [r3, #0]
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <DNS_run+0x108>)
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002aa8:	2335      	movs	r3, #53	@ 0x35
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f000 fc75 	bl	800339c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002ab2:	e7ac      	b.n	8002a0e <DNS_run+0x4e>
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3734      	adds	r7, #52	@ 0x34
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}
 8002abc:	200009ec 	.word	0x200009ec
 8002ac0:	200009e8 	.word	0x200009e8
 8002ac4:	200009e4 	.word	0x200009e4
 8002ac8:	200009e0 	.word	0x200009e0

08002acc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002ad4:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002ada:	4b21      	ldr	r3, [pc, #132]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <WIZCHIP_READ+0x24>
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d114      	bne.n	8002b1a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002af0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	0c12      	lsrs	r2, r2, #16
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	4610      	mov	r0, r2
 8002afc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002afe:	4b18      	ldr	r3, [pc, #96]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	0a12      	lsrs	r2, r2, #8
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002b0c:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4610      	mov	r0, r2
 8002b16:	4798      	blx	r3
 8002b18:	e011      	b.n	8002b3e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	f107 020c 	add.w	r2, r7, #12
 8002b38:	2103      	movs	r1, #3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4798      	blx	r3
 8002b44:	4603      	mov	r3, r0
 8002b46:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b4e:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <WIZCHIP_READ+0x94>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	4798      	blx	r3
   return ret;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000050 	.word	0x20000050

08002b64 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002b70:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b76:	4b21      	ldr	r3, [pc, #132]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d119      	bne.n	8002bc0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	0c12      	lsrs	r2, r2, #16
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4610      	mov	r0, r2
 8002b98:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002b9a:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	0a12      	lsrs	r2, r2, #8
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002bb4:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4798      	blx	r3
 8002bbe:	e013      	b.n	8002be8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002bda:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	f107 020c 	add.w	r2, r7, #12
 8002be2:	2104      	movs	r1, #4
 8002be4:	4610      	mov	r0, r2
 8002be6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002bee:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <WIZCHIP_WRITE+0x98>)
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	4798      	blx	r3
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000050 	.word	0x20000050

08002c00 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <WIZCHIP_READ_BUF+0x2a>
 8002c22:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d126      	bne.n	8002c78 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	0c12      	lsrs	r2, r2, #16
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	4610      	mov	r0, r2
 8002c36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	0a12      	lsrs	r2, r2, #8
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	4610      	mov	r0, r2
 8002c44:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002c46:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	82fb      	strh	r3, [r7, #22]
 8002c56:	e00a      	b.n	8002c6e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002c58:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	8afa      	ldrh	r2, [r7, #22]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	188c      	adds	r4, r1, r2
 8002c62:	4798      	blx	r3
 8002c64:	4603      	mov	r3, r0
 8002c66:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002c68:	8afb      	ldrh	r3, [r7, #22]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	82fb      	strh	r3, [r7, #22]
 8002c6e:	8afa      	ldrh	r2, [r7, #22]
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3f0      	bcc.n	8002c58 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002c76:	e017      	b.n	8002ca8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	f107 0210 	add.w	r2, r7, #16
 8002c96:	2103      	movs	r1, #3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	68b8      	ldr	r0, [r7, #8]
 8002ca6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002cae:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <WIZCHIP_READ_BUF+0xbc>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	4798      	blx	r3
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	20000050 	.word	0x20000050

08002cc0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002cce:	4b2b      	ldr	r3, [pc, #172]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002cd4:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d126      	bne.n	8002d38 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	0c12      	lsrs	r2, r2, #16
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002cf8:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	0a12      	lsrs	r2, r2, #8
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	4610      	mov	r0, r2
 8002d04:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002d06:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	82fb      	strh	r3, [r7, #22]
 8002d16:	e00a      	b.n	8002d2e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002d18:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	8afa      	ldrh	r2, [r7, #22]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	440a      	add	r2, r1
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	4610      	mov	r0, r2
 8002d26:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002d28:	8afb      	ldrh	r3, [r7, #22]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	82fb      	strh	r3, [r7, #22]
 8002d2e:	8afa      	ldrh	r2, [r7, #22]
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3f0      	bcc.n	8002d18 <WIZCHIP_WRITE_BUF+0x58>
 8002d36:	e017      	b.n	8002d68 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	f107 0210 	add.w	r2, r7, #16
 8002d56:	2103      	movs	r1, #3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	4611      	mov	r1, r2
 8002d64:	68b8      	ldr	r0, [r7, #8]
 8002d66:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002d68:	4b04      	ldr	r3, [pc, #16]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002d6e:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <WIZCHIP_WRITE_BUF+0xbc>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	4798      	blx	r3
}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000050 	.word	0x20000050

08002d80 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	81fb      	strh	r3, [r7, #14]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3301      	adds	r3, #1
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fe94 	bl	8002acc <WIZCHIP_READ>
 8002da4:	4603      	mov	r3, r0
 8002da6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002da8:	89bb      	ldrh	r3, [r7, #12]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	b29c      	uxth	r4, r3
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	3301      	adds	r3, #1
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fe86 	bl	8002acc <WIZCHIP_READ>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4423      	add	r3, r4
 8002dc4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002dc6:	89bb      	ldrh	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d019      	beq.n	8002e00 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe77 	bl	8002acc <WIZCHIP_READ>
 8002dde:	4603      	mov	r3, r0
 8002de0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002de2:	89fb      	ldrh	r3, [r7, #14]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	b29c      	uxth	r4, r3
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	3301      	adds	r3, #1
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fe69 	bl	8002acc <WIZCHIP_READ>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4423      	add	r3, r4
 8002dfe:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002e00:	89fa      	ldrh	r2, [r7, #14]
 8002e02:	89bb      	ldrh	r3, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1c4      	bne.n	8002d92 <getSn_TX_FSR+0x12>
   return val;
 8002e08:	89fb      	ldrh	r3, [r7, #14]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd90      	pop	{r4, r7, pc}

08002e12 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002e12:	b590      	push	{r4, r7, lr}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	81fb      	strh	r3, [r7, #14]
 8002e20:	2300      	movs	r3, #0
 8002e22:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	3301      	adds	r3, #1
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fe4b 	bl	8002acc <WIZCHIP_READ>
 8002e36:	4603      	mov	r3, r0
 8002e38:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002e3a:	89bb      	ldrh	r3, [r7, #12]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	b29c      	uxth	r4, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	3301      	adds	r3, #1
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe3d 	bl	8002acc <WIZCHIP_READ>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4423      	add	r3, r4
 8002e56:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002e58:	89bb      	ldrh	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d019      	beq.n	8002e92 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	3301      	adds	r3, #1
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fe2e 	bl	8002acc <WIZCHIP_READ>
 8002e70:	4603      	mov	r3, r0
 8002e72:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002e74:	89fb      	ldrh	r3, [r7, #14]
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	b29c      	uxth	r4, r3
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3301      	adds	r3, #1
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fe20 	bl	8002acc <WIZCHIP_READ>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4423      	add	r3, r4
 8002e90:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002e92:	89fa      	ldrh	r2, [r7, #14]
 8002e94:	89bb      	ldrh	r3, [r7, #12]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1c4      	bne.n	8002e24 <getSn_RX_RSR+0x12>
   return val;
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd90      	pop	{r4, r7, pc}

08002ea4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d046      	beq.n	8002f50 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fdfc 	bl	8002acc <WIZCHIP_READ>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	b29c      	uxth	r4, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3301      	adds	r3, #1
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fdf0 	bl	8002acc <WIZCHIP_READ>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4423      	add	r3, r4
 8002ef0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	0092      	lsls	r2, r2, #2
 8002efa:	3202      	adds	r2, #2
 8002efc:	00d2      	lsls	r2, r2, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002f02:	88bb      	ldrh	r3, [r7, #4]
 8002f04:	461a      	mov	r2, r3
 8002f06:	6839      	ldr	r1, [r7, #0]
 8002f08:	68b8      	ldr	r0, [r7, #8]
 8002f0a:	f7ff fed9 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002f0e:	89fa      	ldrh	r2, [r7, #14]
 8002f10:	88bb      	ldrh	r3, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002f22:	461a      	mov	r2, r3
 8002f24:	89fb      	ldrh	r3, [r7, #14]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f7ff fe18 	bl	8002b64 <WIZCHIP_WRITE>
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	3301      	adds	r3, #1
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002f40:	461a      	mov	r2, r3
 8002f42:	89fb      	ldrh	r3, [r7, #14]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f7ff fe0b 	bl	8002b64 <WIZCHIP_WRITE>
 8002f4e:	e000      	b.n	8002f52 <wiz_send_data+0xae>
   if(len == 0)  return;
 8002f50:	bf00      	nop
}
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd90      	pop	{r4, r7, pc}

08002f58 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	71fb      	strb	r3, [r7, #7]
 8002f64:	4613      	mov	r3, r2
 8002f66:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002f70:	88bb      	ldrh	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d046      	beq.n	8003004 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fda2 	bl	8002acc <WIZCHIP_READ>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b29c      	uxth	r4, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3301      	adds	r3, #1
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fd96 	bl	8002acc <WIZCHIP_READ>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4423      	add	r3, r4
 8002fa4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	79fa      	ldrb	r2, [r7, #7]
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	3203      	adds	r2, #3
 8002fb0:	00d2      	lsls	r2, r2, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002fb6:	88bb      	ldrh	r3, [r7, #4]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	68b8      	ldr	r0, [r7, #8]
 8002fbe:	f7ff fe1f 	bl	8002c00 <WIZCHIP_READ_BUF>
   ptr += len;
 8002fc2:	89fa      	ldrh	r2, [r7, #14]
 8002fc4:	88bb      	ldrh	r3, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	3301      	adds	r3, #1
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f7ff fdbe 	bl	8002b64 <WIZCHIP_WRITE>
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	3301      	adds	r3, #1
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7ff fdb1 	bl	8002b64 <WIZCHIP_WRITE>
 8003002:	e000      	b.n	8003006 <wiz_recv_data+0xae>
   if(len == 0) return;
 8003004:	bf00      	nop
}
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bd90      	pop	{r4, r7, pc}

0800300c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	460a      	mov	r2, r1
 8003016:	71fb      	strb	r3, [r7, #7]
 8003018:	4613      	mov	r3, r2
 800301a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	3301      	adds	r3, #1
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fd4d 	bl	8002acc <WIZCHIP_READ>
 8003032:	4603      	mov	r3, r0
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	b29c      	uxth	r4, r3
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	3301      	adds	r3, #1
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fd41 	bl	8002acc <WIZCHIP_READ>
 800304a:	4603      	mov	r3, r0
 800304c:	4423      	add	r3, r4
 800304e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003050:	89fa      	ldrh	r2, [r7, #14]
 8003052:	88bb      	ldrh	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	3301      	adds	r3, #1
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003064:	461a      	mov	r2, r3
 8003066:	89fb      	ldrh	r3, [r7, #14]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	b29b      	uxth	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	4619      	mov	r1, r3
 8003070:	4610      	mov	r0, r2
 8003072:	f7ff fd77 	bl	8002b64 <WIZCHIP_WRITE>
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3301      	adds	r3, #1
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003082:	461a      	mov	r2, r3
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7ff fd6a 	bl	8002b64 <WIZCHIP_WRITE>
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	71fb      	strb	r3, [r7, #7]
 80030aa:	4603      	mov	r3, r0
 80030ac:	71bb      	strb	r3, [r7, #6]
 80030ae:	460b      	mov	r3, r1
 80030b0:	80bb      	strh	r3, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d902      	bls.n	80030c2 <socket+0x2a>
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e0f0      	b.n	80032a4 <socket+0x20c>
	switch(protocol)
 80030c2:	79bb      	ldrb	r3, [r7, #6]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d005      	beq.n	80030d4 <socket+0x3c>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	dd11      	ble.n	80030f0 <socket+0x58>
 80030cc:	3b02      	subs	r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d80e      	bhi.n	80030f0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80030d2:	e011      	b.n	80030f8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2204      	movs	r2, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80030e0:	f7ff fd8e 	bl	8002c00 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <socket+0x5e>
 80030ea:	f06f 0302 	mvn.w	r3, #2
 80030ee:	e0d9      	b.n	80032a4 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80030f0:	f06f 0304 	mvn.w	r3, #4
 80030f4:	e0d6      	b.n	80032a4 <socket+0x20c>
	    break;
 80030f6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <socket+0x70>
 8003102:	f06f 0305 	mvn.w	r3, #5
 8003106:	e0cd      	b.n	80032a4 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d028      	beq.n	8003160 <socket+0xc8>
	{
   	switch(protocol)
 800310e:	79bb      	ldrb	r3, [r7, #6]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d002      	beq.n	800311a <socket+0x82>
 8003114:	2b02      	cmp	r3, #2
 8003116:	d008      	beq.n	800312a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003118:	e022      	b.n	8003160 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003120:	2b00      	cmp	r3, #0
 8003122:	d11a      	bne.n	800315a <socket+0xc2>
 8003124:	f06f 0305 	mvn.w	r3, #5
 8003128:	e0bc      	b.n	80032a4 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db02      	blt.n	8003142 <socket+0xaa>
 800313c:	f06f 0305 	mvn.w	r3, #5
 8003140:	e0b0      	b.n	80032a4 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800314c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db04      	blt.n	800315e <socket+0xc6>
 8003154:	f06f 0305 	mvn.w	r3, #5
 8003158:	e0a4      	b.n	80032a4 <socket+0x20c>
   	      break;
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <socket+0xc8>
   	      break;
 800315e:	bf00      	nop
   	}
   }
	close(sn);
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f8ac 	bl	80032c0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	3301      	adds	r3, #1
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4618      	mov	r0, r3
 8003172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003176:	f023 030f 	bic.w	r3, r3, #15
 800317a:	b25a      	sxtb	r2, r3
 800317c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003180:	4313      	orrs	r3, r2
 8003182:	b25b      	sxtb	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4619      	mov	r1, r3
 8003188:	f7ff fcec 	bl	8002b64 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800318c:	88bb      	ldrh	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d110      	bne.n	80031b4 <socket+0x11c>
	{
	   port = sock_any_port++;
 8003192:	4b46      	ldr	r3, [pc, #280]	@ (80032ac <socket+0x214>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	b291      	uxth	r1, r2
 800319a:	4a44      	ldr	r2, [pc, #272]	@ (80032ac <socket+0x214>)
 800319c:	8011      	strh	r1, [r2, #0]
 800319e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80031a0:	4b42      	ldr	r3, [pc, #264]	@ (80032ac <socket+0x214>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <socket+0x11c>
 80031ac:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <socket+0x214>)
 80031ae:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80031b2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	3301      	adds	r3, #1
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031c0:	461a      	mov	r2, r3
 80031c2:	88bb      	ldrh	r3, [r7, #4]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7ff fcc9 	bl	8002b64 <WIZCHIP_WRITE>
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3301      	adds	r3, #1
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	88bb      	ldrh	r3, [r7, #4]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7ff fcbc 	bl	8002b64 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	3301      	adds	r3, #1
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80031f8:	2101      	movs	r1, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fcb2 	bl	8002b64 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003200:	bf00      	nop
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3301      	adds	r3, #1
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fc5c 	bl	8002acc <WIZCHIP_READ>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f3      	bne.n	8003202 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	2201      	movs	r2, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	b21b      	sxth	r3, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	b21a      	sxth	r2, r3
 8003228:	4b21      	ldr	r3, [pc, #132]	@ (80032b0 <socket+0x218>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b21b      	sxth	r3, r3
 800322e:	4013      	ands	r3, r2
 8003230:	b21b      	sxth	r3, r3
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b1e      	ldr	r3, [pc, #120]	@ (80032b0 <socket+0x218>)
 8003236:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 0201 	and.w	r2, r3, #1
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <socket+0x218>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b21b      	sxth	r3, r3
 800324c:	4313      	orrs	r3, r2
 800324e:	b21b      	sxth	r3, r3
 8003250:	b29a      	uxth	r2, r3
 8003252:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <socket+0x218>)
 8003254:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2201      	movs	r2, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	b21b      	sxth	r3, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	b21a      	sxth	r2, r3
 8003264:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <socket+0x21c>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	b21b      	sxth	r3, r3
 800326a:	4013      	ands	r3, r2
 800326c:	b21b      	sxth	r3, r3
 800326e:	b29a      	uxth	r2, r3
 8003270:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <socket+0x21c>)
 8003272:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	4a10      	ldr	r2, [pc, #64]	@ (80032b8 <socket+0x220>)
 8003278:	2100      	movs	r1, #0
 800327a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	4a0e      	ldr	r2, [pc, #56]	@ (80032bc <socket+0x224>)
 8003282:	2100      	movs	r1, #0
 8003284:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003286:	bf00      	nop
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	3301      	adds	r3, #1
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fc19 	bl	8002acc <WIZCHIP_READ>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f3      	beq.n	8003288 <socket+0x1f0>
   return (int8_t)sn;
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}
 80032ac:	2000004c 	.word	0x2000004c
 80032b0:	200009ee 	.word	0x200009ee
 80032b4:	200009f0 	.word	0x200009f0
 80032b8:	200009f4 	.word	0x200009f4
 80032bc:	20000a04 	.word	0x20000a04

080032c0 <close>:

int8_t close(uint8_t sn)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d902      	bls.n	80032d6 <close+0x16>
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	e055      	b.n	8003382 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	3301      	adds	r3, #1
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032e2:	2110      	movs	r1, #16
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fc3d 	bl	8002b64 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80032ea:	bf00      	nop
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	3301      	adds	r3, #1
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fbe7 	bl	8002acc <WIZCHIP_READ>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f3      	bne.n	80032ec <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3301      	adds	r3, #1
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003310:	211f      	movs	r1, #31
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fc26 	bl	8002b64 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	2201      	movs	r2, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	b21b      	sxth	r3, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	b21a      	sxth	r2, r3
 8003326:	4b19      	ldr	r3, [pc, #100]	@ (800338c <close+0xcc>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b21b      	sxth	r3, r3
 800332c:	4013      	ands	r3, r2
 800332e:	b21b      	sxth	r3, r3
 8003330:	b29a      	uxth	r2, r3
 8003332:	4b16      	ldr	r3, [pc, #88]	@ (800338c <close+0xcc>)
 8003334:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	2201      	movs	r2, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	b21b      	sxth	r3, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	b21a      	sxth	r2, r3
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <close+0xd0>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b21b      	sxth	r3, r3
 800334a:	4013      	ands	r3, r2
 800334c:	b21b      	sxth	r3, r3
 800334e:	b29a      	uxth	r2, r3
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <close+0xd0>)
 8003352:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4a0f      	ldr	r2, [pc, #60]	@ (8003394 <close+0xd4>)
 8003358:	2100      	movs	r1, #0
 800335a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	4a0d      	ldr	r2, [pc, #52]	@ (8003398 <close+0xd8>)
 8003362:	2100      	movs	r1, #0
 8003364:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003366:	bf00      	nop
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3301      	adds	r3, #1
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fba9 	bl	8002acc <WIZCHIP_READ>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f3      	bne.n	8003368 <close+0xa8>
	return SOCK_OK;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200009ee 	.word	0x200009ee
 8003390:	200009f0 	.word	0x200009f0
 8003394:	200009f4 	.word	0x200009f4
 8003398:	20000a04 	.word	0x20000a04

0800339c <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	4603      	mov	r3, r0
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	4613      	mov	r3, r2
 80033ac:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d902      	bls.n	80033c2 <sendto+0x26>
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
 80033c0:	e11a      	b.n	80035f8 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3301      	adds	r3, #1
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fb7e 	bl	8002acc <WIZCHIP_READ>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3b02      	subs	r3, #2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d902      	bls.n	80033e2 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80033dc:	f06f 0304 	mvn.w	r3, #4
 80033e0:	e10a      	b.n	80035f8 <sendto+0x25c>
         break;
 80033e2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80033e4:	89bb      	ldrh	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <sendto+0x54>
 80033ea:	f06f 030d 	mvn.w	r3, #13
 80033ee:	e103      	b.n	80035f8 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	3201      	adds	r2, #1
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	4413      	add	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	3202      	adds	r2, #2
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	4413      	add	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	3203      	adds	r2, #3
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <sendto+0xa8>
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	3301      	adds	r3, #1
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fb4c 	bl	8002acc <WIZCHIP_READ>
 8003434:	4603      	mov	r3, r0
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d002      	beq.n	8003444 <sendto+0xa8>
 800343e:	f06f 030b 	mvn.w	r3, #11
 8003442:	e0d9      	b.n	80035f8 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003444:	8c3b      	ldrh	r3, [r7, #32]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10e      	bne.n	8003468 <sendto+0xcc>
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3301      	adds	r3, #1
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fb3a 	bl	8002acc <WIZCHIP_READ>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d002      	beq.n	8003468 <sendto+0xcc>
 8003462:	f06f 030a 	mvn.w	r3, #10
 8003466:	e0c7      	b.n	80035f8 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	3301      	adds	r3, #1
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fb29 	bl	8002acc <WIZCHIP_READ>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b42      	cmp	r3, #66	@ 0x42
 8003482:	d008      	beq.n	8003496 <sendto+0xfa>
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b22      	cmp	r3, #34	@ 0x22
 8003488:	d005      	beq.n	8003496 <sendto+0xfa>
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b32      	cmp	r3, #50	@ 0x32
 800348e:	d002      	beq.n	8003496 <sendto+0xfa>
 8003490:	f06f 0306 	mvn.w	r3, #6
 8003494:	e0b0      	b.n	80035f8 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	3301      	adds	r3, #1
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80034a2:	2204      	movs	r2, #4
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fc0a 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3301      	adds	r3, #1
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b8:	461a      	mov	r2, r3
 80034ba:	8c3b      	ldrh	r3, [r7, #32]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	b29b      	uxth	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f7ff fb4d 	bl	8002b64 <WIZCHIP_WRITE>
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3301      	adds	r3, #1
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80034d6:	461a      	mov	r2, r3
 80034d8:	8c3b      	ldrh	r3, [r7, #32]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f7ff fb40 	bl	8002b64 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3301      	adds	r3, #1
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff faeb 	bl	8002acc <WIZCHIP_READ>
 80034f6:	4603      	mov	r3, r0
 80034f8:	029b      	lsls	r3, r3, #10
 80034fa:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80034fc:	89ba      	ldrh	r2, [r7, #12]
 80034fe:	8abb      	ldrh	r3, [r7, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	d901      	bls.n	8003508 <sendto+0x16c>
 8003504:	8abb      	ldrh	r3, [r7, #20]
 8003506:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fc38 	bl	8002d80 <getSn_TX_FSR>
 8003510:	4603      	mov	r3, r0
 8003512:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	3301      	adds	r3, #1
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fad3 	bl	8002acc <WIZCHIP_READ>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <sendto+0x196>
 800352c:	f06f 0303 	mvn.w	r3, #3
 8003530:	e062      	b.n	80035f8 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003532:	4b33      	ldr	r3, [pc, #204]	@ (8003600 <sendto+0x264>)
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	fa42 f303 	asr.w	r3, r2, r3
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <sendto+0x1b6>
 8003546:	89ba      	ldrh	r2, [r7, #12]
 8003548:	8abb      	ldrh	r3, [r7, #20]
 800354a:	429a      	cmp	r2, r3
 800354c:	d901      	bls.n	8003552 <sendto+0x1b6>
 800354e:	2300      	movs	r3, #0
 8003550:	e052      	b.n	80035f8 <sendto+0x25c>
      if(len <= freesize) break;
 8003552:	89ba      	ldrh	r2, [r7, #12]
 8003554:	8abb      	ldrh	r3, [r7, #20]
 8003556:	429a      	cmp	r2, r3
 8003558:	d900      	bls.n	800355c <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 800355a:	e7d5      	b.n	8003508 <sendto+0x16c>
      if(len <= freesize) break;
 800355c:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800355e:	89ba      	ldrh	r2, [r7, #12]
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fc9d 	bl	8002ea4 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3301      	adds	r3, #1
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003576:	2120      	movs	r1, #32
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff faf3 	bl	8002b64 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800357e:	bf00      	nop
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	3301      	adds	r3, #1
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fa9d 	bl	8002acc <WIZCHIP_READ>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f3      	bne.n	8003580 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	3301      	adds	r3, #1
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fa91 	bl	8002acc <WIZCHIP_READ>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	3301      	adds	r3, #1
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035c8:	2110      	movs	r1, #16
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff faca 	bl	8002b64 <WIZCHIP_WRITE>
         break;
 80035d0:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80035d2:	89bb      	ldrh	r3, [r7, #12]
 80035d4:	e010      	b.n	80035f8 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0db      	beq.n	8003598 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	3301      	adds	r3, #1
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035ec:	2108      	movs	r1, #8
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fab8 	bl	8002b64 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80035f4:	f06f 030c 	mvn.w	r3, #12
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200009ee 	.word	0x200009ee

08003604 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	4603      	mov	r3, r0
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	4613      	mov	r3, r2
 8003614:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003616:	2300      	movs	r3, #0
 8003618:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d902      	bls.n	8003626 <recvfrom+0x22>
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	e1d2      	b.n	80039cc <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	3301      	adds	r3, #1
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fa4c 	bl	8002acc <WIZCHIP_READ>
 8003634:	4603      	mov	r3, r0
 8003636:	777b      	strb	r3, [r7, #29]
 8003638:	7f7b      	ldrb	r3, [r7, #29]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b02      	subs	r3, #2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d902      	bls.n	800364a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003644:	f06f 0304 	mvn.w	r3, #4
 8003648:	e1c0      	b.n	80039cc <recvfrom+0x3c8>
         break;
 800364a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800364c:	89bb      	ldrh	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <recvfrom+0x54>
 8003652:	f06f 030d 	mvn.w	r3, #13
 8003656:	e1b9      	b.n	80039cc <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	4a87      	ldr	r2, [pc, #540]	@ (8003878 <recvfrom+0x274>)
 800365c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d128      	bne.n	80036b6 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fbd3 	bl	8002e12 <getSn_RX_RSR>
 800366c:	4603      	mov	r3, r0
 800366e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3301      	adds	r3, #1
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fa25 	bl	8002acc <WIZCHIP_READ>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <recvfrom+0x8a>
 8003688:	f06f 0303 	mvn.w	r3, #3
 800368c:	e19e      	b.n	80039cc <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800368e:	4b7b      	ldr	r3, [pc, #492]	@ (800387c <recvfrom+0x278>)
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	fa42 f303 	asr.w	r3, r2, r3
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <recvfrom+0xa8>
 80036a2:	8bfb      	ldrh	r3, [r7, #30]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <recvfrom+0xa8>
 80036a8:	2300      	movs	r3, #0
 80036aa:	e18f      	b.n	80039cc <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80036ac:	8bfb      	ldrh	r3, [r7, #30]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d100      	bne.n	80036b4 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80036b2:	e7d7      	b.n	8003664 <recvfrom+0x60>
         if(pack_len != 0) break;
 80036b4:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80036b6:	7f7b      	ldrb	r3, [r7, #29]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d078      	beq.n	80037b2 <recvfrom+0x1ae>
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	f300 8140 	bgt.w	8003946 <recvfrom+0x342>
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d003      	beq.n	80036d2 <recvfrom+0xce>
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	f000 80da 	beq.w	8003884 <recvfrom+0x280>
 80036d0:	e139      	b.n	8003946 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	4a68      	ldr	r2, [pc, #416]	@ (8003878 <recvfrom+0x274>)
 80036d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d151      	bne.n	8003782 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80036de:	f107 0114 	add.w	r1, r7, #20
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2208      	movs	r2, #8
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fc36 	bl	8002f58 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3301      	adds	r3, #1
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80036f8:	2140      	movs	r1, #64	@ 0x40
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fa32 	bl	8002b64 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003700:	bf00      	nop
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	3301      	adds	r3, #1
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f9dc 	bl	8002acc <WIZCHIP_READ>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f3      	bne.n	8003702 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800371a:	7d3a      	ldrb	r2, [r7, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3301      	adds	r3, #1
 8003724:	7d7a      	ldrb	r2, [r7, #21]
 8003726:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3302      	adds	r3, #2
 800372c:	7dba      	ldrb	r2, [r7, #22]
 800372e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3303      	adds	r3, #3
 8003734:	7dfa      	ldrb	r2, [r7, #23]
 8003736:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003738:	7e3b      	ldrb	r3, [r7, #24]
 800373a:	461a      	mov	r2, r3
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	7e7a      	ldrb	r2, [r7, #25]
 800374a:	4413      	add	r3, r2
 800374c:	b29a      	uxth	r2, r3
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003752:	7eba      	ldrb	r2, [r7, #26]
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4611      	mov	r1, r2
 8003758:	4a47      	ldr	r2, [pc, #284]	@ (8003878 <recvfrom+0x274>)
 800375a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	4a45      	ldr	r2, [pc, #276]	@ (8003878 <recvfrom+0x274>)
 8003762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	b29a      	uxth	r2, r3
 800376a:	7efb      	ldrb	r3, [r7, #27]
 800376c:	4619      	mov	r1, r3
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	440a      	add	r2, r1
 8003772:	b291      	uxth	r1, r2
 8003774:	4a40      	ldr	r2, [pc, #256]	@ (8003878 <recvfrom+0x274>)
 8003776:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	4a40      	ldr	r2, [pc, #256]	@ (8003880 <recvfrom+0x27c>)
 800377e:	2180      	movs	r1, #128	@ 0x80
 8003780:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <recvfrom+0x274>)
 8003786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800378a:	89ba      	ldrh	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d202      	bcs.n	8003796 <recvfrom+0x192>
 8003790:	89bb      	ldrh	r3, [r7, #12]
 8003792:	83fb      	strh	r3, [r7, #30]
 8003794:	e004      	b.n	80037a0 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	4a37      	ldr	r2, [pc, #220]	@ (8003878 <recvfrom+0x274>)
 800379a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800379e:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80037a0:	8bfb      	ldrh	r3, [r7, #30]
 80037a2:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80037a4:	8bfa      	ldrh	r2, [r7, #30]
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fbd4 	bl	8002f58 <wiz_recv_data>
			break;
 80037b0:	e0d5      	b.n	800395e <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	4a30      	ldr	r2, [pc, #192]	@ (8003878 <recvfrom+0x274>)
 80037b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d145      	bne.n	800384a <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80037be:	f107 0114 	add.w	r1, r7, #20
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2202      	movs	r2, #2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fbc6 	bl	8002f58 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3301      	adds	r3, #1
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80037d8:	2140      	movs	r1, #64	@ 0x40
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff f9c2 	bl	8002b64 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80037e0:	bf00      	nop
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	3301      	adds	r3, #1
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f96c 	bl	8002acc <WIZCHIP_READ>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f3      	bne.n	80037e2 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80037fa:	7d3a      	ldrb	r2, [r7, #20]
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	4611      	mov	r1, r2
 8003800:	4a1d      	ldr	r2, [pc, #116]	@ (8003878 <recvfrom+0x274>)
 8003802:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	4a1b      	ldr	r2, [pc, #108]	@ (8003878 <recvfrom+0x274>)
 800380a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	b29b      	uxth	r3, r3
 8003812:	7d7a      	ldrb	r2, [r7, #21]
 8003814:	4413      	add	r3, r2
 8003816:	b29a      	uxth	r2, r3
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	3a02      	subs	r2, #2
 800381c:	b291      	uxth	r1, r2
 800381e:	4a16      	ldr	r2, [pc, #88]	@ (8003878 <recvfrom+0x274>)
 8003820:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4a14      	ldr	r2, [pc, #80]	@ (8003878 <recvfrom+0x274>)
 8003828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800382c:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8003830:	4293      	cmp	r3, r2
 8003832:	d906      	bls.n	8003842 <recvfrom+0x23e>
   			{
   			   close(sn);
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fd42 	bl	80032c0 <close>
   			   return SOCKFATAL_PACKLEN;
 800383c:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8003840:	e0c4      	b.n	80039cc <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	4a0e      	ldr	r2, [pc, #56]	@ (8003880 <recvfrom+0x27c>)
 8003846:	2180      	movs	r1, #128	@ 0x80
 8003848:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	4a0a      	ldr	r2, [pc, #40]	@ (8003878 <recvfrom+0x274>)
 800384e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003852:	89ba      	ldrh	r2, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d202      	bcs.n	800385e <recvfrom+0x25a>
 8003858:	89bb      	ldrh	r3, [r7, #12]
 800385a:	83fb      	strh	r3, [r7, #30]
 800385c:	e004      	b.n	8003868 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <recvfrom+0x274>)
 8003862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003866:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003868:	8bfa      	ldrh	r2, [r7, #30]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fb72 	bl	8002f58 <wiz_recv_data>
		   break;
 8003874:	e073      	b.n	800395e <recvfrom+0x35a>
 8003876:	bf00      	nop
 8003878:	200009f4 	.word	0x200009f4
 800387c:	200009ee 	.word	0x200009ee
 8003880:	20000a04 	.word	0x20000a04
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	4a53      	ldr	r2, [pc, #332]	@ (80039d4 <recvfrom+0x3d0>)
 8003888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d144      	bne.n	800391a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8003890:	f107 0114 	add.w	r1, r7, #20
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2206      	movs	r2, #6
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fb5d 	bl	8002f58 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	3301      	adds	r3, #1
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80038aa:	2140      	movs	r1, #64	@ 0x40
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff f959 	bl	8002b64 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80038b2:	bf00      	nop
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	3301      	adds	r3, #1
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f903 	bl	8002acc <WIZCHIP_READ>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f3      	bne.n	80038b4 <recvfrom+0x2b0>
   			addr[0] = head[0];
 80038cc:	7d3a      	ldrb	r2, [r7, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3301      	adds	r3, #1
 80038d6:	7d7a      	ldrb	r2, [r7, #21]
 80038d8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3302      	adds	r3, #2
 80038de:	7dba      	ldrb	r2, [r7, #22]
 80038e0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3303      	adds	r3, #3
 80038e6:	7dfa      	ldrb	r2, [r7, #23]
 80038e8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80038ea:	7e3a      	ldrb	r2, [r7, #24]
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4a38      	ldr	r2, [pc, #224]	@ (80039d4 <recvfrom+0x3d0>)
 80038f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	4a36      	ldr	r2, [pc, #216]	@ (80039d4 <recvfrom+0x3d0>)
 80038fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	b29a      	uxth	r2, r3
 8003902:	7e7b      	ldrb	r3, [r7, #25]
 8003904:	4619      	mov	r1, r3
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	440a      	add	r2, r1
 800390a:	b291      	uxth	r1, r2
 800390c:	4a31      	ldr	r2, [pc, #196]	@ (80039d4 <recvfrom+0x3d0>)
 800390e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	4a30      	ldr	r2, [pc, #192]	@ (80039d8 <recvfrom+0x3d4>)
 8003916:	2180      	movs	r1, #128	@ 0x80
 8003918:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	4a2d      	ldr	r2, [pc, #180]	@ (80039d4 <recvfrom+0x3d0>)
 800391e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003922:	89ba      	ldrh	r2, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d202      	bcs.n	800392e <recvfrom+0x32a>
 8003928:	89bb      	ldrh	r3, [r7, #12]
 800392a:	83fb      	strh	r3, [r7, #30]
 800392c:	e004      	b.n	8003938 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	4a28      	ldr	r2, [pc, #160]	@ (80039d4 <recvfrom+0x3d0>)
 8003932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003936:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003938:	8bfa      	ldrh	r2, [r7, #30]
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fb0a 	bl	8002f58 <wiz_recv_data>
			break;
 8003944:	e00b      	b.n	800395e <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003946:	8bfa      	ldrh	r2, [r7, #30]
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fb5d 	bl	800300c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	491f      	ldr	r1, [pc, #124]	@ (80039d4 <recvfrom+0x3d0>)
 8003956:	8bfa      	ldrh	r2, [r7, #30]
 8003958:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800395c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	3301      	adds	r3, #1
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800396a:	2140      	movs	r1, #64	@ 0x40
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f8f9 	bl	8002b64 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8003972:	bf00      	nop
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	3301      	adds	r3, #1
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff f8a3 	bl	8002acc <WIZCHIP_READ>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f3      	bne.n	8003974 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	4a11      	ldr	r2, [pc, #68]	@ (80039d4 <recvfrom+0x3d0>)
 8003990:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	8bfa      	ldrh	r2, [r7, #30]
 8003998:	1a8a      	subs	r2, r1, r2
 800399a:	b291      	uxth	r1, r2
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <recvfrom+0x3d0>)
 800399e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	4a0b      	ldr	r2, [pc, #44]	@ (80039d4 <recvfrom+0x3d0>)
 80039a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	4a09      	ldr	r2, [pc, #36]	@ (80039d8 <recvfrom+0x3d4>)
 80039b2:	5cd2      	ldrb	r2, [r2, r3]
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	b2d1      	uxtb	r1, r2
 80039bc:	4a06      	ldr	r2, [pc, #24]	@ (80039d8 <recvfrom+0x3d4>)
 80039be:	54d1      	strb	r1, [r2, r3]
 80039c0:	e003      	b.n	80039ca <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <recvfrom+0x3d4>)
 80039c6:	2100      	movs	r1, #0
 80039c8:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80039ca:	8bfb      	ldrh	r3, [r7, #30]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200009f4 	.word	0x200009f4
 80039d8:	20000a04 	.word	0x20000a04

080039dc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	2300      	movs	r3, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	71fb      	strb	r3, [r7, #7]
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
	...

08003a64 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <reg_wizchip_cs_cbfunc+0x16>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <reg_wizchip_cs_cbfunc+0x3c>)
 8003a7c:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <reg_wizchip_cs_cbfunc+0x40>)
 8003a7e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003a80:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <reg_wizchip_cs_cbfunc+0x3c>)
 8003a82:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <reg_wizchip_cs_cbfunc+0x44>)
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	e006      	b.n	8003a96 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003a88:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <reg_wizchip_cs_cbfunc+0x3c>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003a8e:	4a04      	ldr	r2, [pc, #16]	@ (8003aa0 <reg_wizchip_cs_cbfunc+0x3c>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6193      	str	r3, [r2, #24]
   }
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	20000050 	.word	0x20000050
 8003aa4:	080039f5 	.word	0x080039f5
 8003aa8:	08003a01 	.word	0x08003a01

08003aac <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003ab6:	bf00      	nop
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f9      	beq.n	8003ab8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <reg_wizchip_spi_cbfunc+0x24>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <reg_wizchip_spi_cbfunc+0x50>)
 8003ad4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003ad6:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ad8:	4a09      	ldr	r2, [pc, #36]	@ (8003b00 <reg_wizchip_spi_cbfunc+0x54>)
 8003ada:	621a      	str	r2, [r3, #32]
 8003adc:	e006      	b.n	8003aec <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003ade:	4a06      	ldr	r2, [pc, #24]	@ (8003af8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003ae4:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6213      	str	r3, [r2, #32]
   }
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000050 	.word	0x20000050
 8003afc:	08003a41 	.word	0x08003a41
 8003b00:	08003a4f 	.word	0x08003a4f

08003b04 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	f200 80c5 	bhi.w	8003cae <ctlwizchip+0x1aa>
 8003b24:	a201      	add	r2, pc, #4	@ (adr r2, 8003b2c <ctlwizchip+0x28>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b73 	.word	0x08003b73
 8003b34:	08003b9f 	.word	0x08003b9f
 8003b38:	08003b93 	.word	0x08003b93
 8003b3c:	08003bad 	.word	0x08003bad
 8003b40:	08003bb9 	.word	0x08003bb9
 8003b44:	08003bc7 	.word	0x08003bc7
 8003b48:	08003bed 	.word	0x08003bed
 8003b4c:	08003c0f 	.word	0x08003c0f
 8003b50:	08003c53 	.word	0x08003c53
 8003b54:	08003c59 	.word	0x08003c59
 8003b58:	08003c61 	.word	0x08003c61
 8003b5c:	08003cb5 	.word	0x08003cb5
 8003b60:	08003c69 	.word	0x08003c69
 8003b64:	08003c77 	.word	0x08003c77
 8003b68:	08003c93 	.word	0x08003c93
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003b6c:	f000 f8e8 	bl	8003d40 <wizchip_sw_reset>
         break;
 8003b70:	e0a1      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f925 	bl	8003dd8 <wizchip_init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	e092      	b.n	8003cb8 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f9aa 	bl	8003ef0 <wizchip_clrinterrupt>
         break;
 8003b9c:	e08b      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003b9e:	f000 f9db 	bl	8003f58 <wizchip_getinterrupt>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	801a      	strh	r2, [r3, #0]
         break;
 8003baa:	e084      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f9f6 	bl	8003fa2 <wizchip_setinterruptmask>
         break;         
 8003bb6:	e07e      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003bb8:	f000 fa0e 	bl	8003fd8 <wizchip_getinterruptmask>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	801a      	strh	r2, [r3, #0]
         break;
 8003bc4:	e077      	b.n	8003cb6 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003bd6:	f7fe ffc5 	bl	8002b64 <WIZCHIP_WRITE>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003be6:	f7fe ffbd 	bl	8002b64 <WIZCHIP_WRITE>
         break;
 8003bea:	e064      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003bec:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003bf0:	f7fe ff6c 	bl	8002acc <WIZCHIP_READ>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	b29c      	uxth	r4, r3
 8003bfa:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003bfe:	f7fe ff65 	bl	8002acc <WIZCHIP_READ>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4423      	add	r3, r4
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	801a      	strh	r2, [r3, #0]
         break;
 8003c0c:	e053      	b.n	8003cb6 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc0 <ctlwizchip+0x1bc>)
 8003c10:	789a      	ldrb	r2, [r3, #2]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	4a29      	ldr	r2, [pc, #164]	@ (8003cc0 <ctlwizchip+0x1bc>)
 8003c1c:	78d2      	ldrb	r2, [r2, #3]
 8003c1e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	3302      	adds	r3, #2
 8003c24:	4a26      	ldr	r2, [pc, #152]	@ (8003cc0 <ctlwizchip+0x1bc>)
 8003c26:	7912      	ldrb	r2, [r2, #4]
 8003c28:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3303      	adds	r3, #3
 8003c2e:	4a24      	ldr	r2, [pc, #144]	@ (8003cc0 <ctlwizchip+0x1bc>)
 8003c30:	7952      	ldrb	r2, [r2, #5]
 8003c32:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <ctlwizchip+0x1bc>)
 8003c3a:	7992      	ldrb	r2, [r2, #6]
 8003c3c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	3305      	adds	r3, #5
 8003c42:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <ctlwizchip+0x1bc>)
 8003c44:	79d2      	ldrb	r2, [r2, #7]
 8003c46:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	3306      	adds	r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
         break;
 8003c50:	e031      	b.n	8003cb6 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003c52:	f000 fa13 	bl	800407c <wizphy_reset>
         break;
 8003c56:	e02e      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	f000 fa36 	bl	80040ca <wizphy_setphyconf>
         break;
 8003c5e:	e02a      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003c60:	6838      	ldr	r0, [r7, #0]
 8003c62:	f000 fa75 	bl	8004150 <wizphy_getphyconf>
         break;
 8003c66:	e026      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fad9 	bl	8004224 <wizphy_setphypmode>
 8003c72:	4603      	mov	r3, r0
 8003c74:	e020      	b.n	8003cb8 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003c76:	f000 f9e8 	bl	800404a <wizphy_getphypmode>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	2bff      	cmp	r3, #255	@ 0xff
 8003c82:	d102      	bne.n	8003c8a <ctlwizchip+0x186>
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	e016      	b.n	8003cb8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7dfa      	ldrb	r2, [r7, #23]
 8003c8e:	701a      	strb	r2, [r3, #0]
         break;
 8003c90:	e011      	b.n	8003cb6 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003c92:	f000 f9c4 	bl	800401e <wizphy_getphylink>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2bff      	cmp	r3, #255	@ 0xff
 8003c9e:	d102      	bne.n	8003ca6 <ctlwizchip+0x1a2>
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca4:	e008      	b.n	8003cb8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	7dfa      	ldrb	r2, [r7, #23]
 8003caa:	701a      	strb	r2, [r3, #0]
         break;
 8003cac:	e003      	b.n	8003cb6 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e001      	b.n	8003cb8 <ctlwizchip+0x1b4>
         break;
 8003cb4:	bf00      	nop
   }
   return 0;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}
 8003cc0:	20000050 	.word	0x20000050

08003cc4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d82c      	bhi.n	8003d30 <ctlnetwork+0x6c>
 8003cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <ctlnetwork+0x18>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003cf5 	.word	0x08003cf5
 8003ce0:	08003cfd 	.word	0x08003cfd
 8003ce4:	08003d05 	.word	0x08003d05
 8003ce8:	08003d13 	.word	0x08003d13
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d29 	.word	0x08003d29
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	f000 fadf 	bl	80042b8 <wizchip_setnetinfo>
         break;
 8003cfa:	e01c      	b.n	8003d36 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f000 fb1b 	bl	8004338 <wizchip_getnetinfo>
         break;
 8003d02:	e018      	b.n	8003d36 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fb55 	bl	80043b8 <wizchip_setnetmode>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	e012      	b.n	8003d38 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003d12:	f000 fb73 	bl	80043fc <wizchip_getnetmode>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
         break;
 8003d1e:	e00a      	b.n	8003d36 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003d20:	6838      	ldr	r0, [r7, #0]
 8003d22:	f000 fb73 	bl	800440c <wizchip_settimeout>
         break;
 8003d26:	e006      	b.n	8003d36 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003d28:	6838      	ldr	r0, [r7, #0]
 8003d2a:	f000 fb90 	bl	800444e <wizchip_gettimeout>
         break;
 8003d2e:	e002      	b.n	8003d36 <ctlnetwork+0x72>
      default:
         return -1;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
 8003d34:	e000      	b.n	8003d38 <ctlnetwork+0x74>
   }
   return 0;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003d46:	1d3b      	adds	r3, r7, #4
 8003d48:	2206      	movs	r2, #6
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003d50:	f7fe ff56 	bl	8002c00 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	2204      	movs	r2, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003d60:	f7fe ff4e 	bl	8002c00 <WIZCHIP_READ_BUF>
 8003d64:	f107 0310 	add.w	r3, r7, #16
 8003d68:	2204      	movs	r2, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003d70:	f7fe ff46 	bl	8002c00 <WIZCHIP_READ_BUF>
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	2204      	movs	r2, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003d80:	f7fe ff3e 	bl	8002c00 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	2000      	movs	r0, #0
 8003d88:	f7fe feec 	bl	8002b64 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f7fe fe9d 	bl	8002acc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	2206      	movs	r2, #6
 8003d96:	4619      	mov	r1, r3
 8003d98:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003d9c:	f7fe ff90 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	2204      	movs	r2, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003dac:	f7fe ff88 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003db0:	f107 0310 	add.w	r3, r7, #16
 8003db4:	2204      	movs	r2, #4
 8003db6:	4619      	mov	r1, r3
 8003db8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003dbc:	f7fe ff80 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003dcc:	f7fe ff78 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
}
 8003dd0:	bf00      	nop
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003de6:	f7ff ffab 	bl	8003d40 <wizchip_sw_reset>
   if(txsize)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d03b      	beq.n	8003e68 <wizchip_init+0x90>
   {
      tmp = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	e015      	b.n	8003e26 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	7bbb      	ldrb	r3, [r7, #14]
 8003e06:	4413      	add	r3, r2
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	dd02      	ble.n	8003e1a <wizchip_init+0x42>
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	e066      	b.n	8003ee8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2a:	2b07      	cmp	r3, #7
 8003e2c:	dde5      	ble.n	8003dfa <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	e015      	b.n	8003e60 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003e42:	4618      	mov	r0, r3
 8003e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7fe fe88 	bl	8002b64 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e64:	2b07      	cmp	r3, #7
 8003e66:	dde5      	ble.n	8003e34 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03b      	beq.n	8003ee6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e015      	b.n	8003ea4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	4413      	add	r3, r2
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	7bbb      	ldrb	r3, [r7, #14]
 8003e84:	4413      	add	r3, r2
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	dd02      	ble.n	8003e98 <wizchip_init+0xc0>
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	e027      	b.n	8003ee8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea8:	2b07      	cmp	r3, #7
 8003eaa:	dde5      	ble.n	8003e78 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e015      	b.n	8003ede <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	3301      	adds	r3, #1
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4413      	add	r3, r2
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f7fe fe49 	bl	8002b64 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee2:	2b07      	cmp	r3, #7
 8003ee4:	dde5      	ble.n	8003eb2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	f023 030f 	bic.w	r3, r3, #15
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003f14:	f7fe fe26 	bl	8002b64 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	e014      	b.n	8003f48 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003f1e:	7bba      	ldrb	r2, [r7, #14]
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	fa42 f303 	asr.w	r3, r2, r3
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <wizchip_clrinterrupt+0x52>
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3301      	adds	r3, #1
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f3a:	211f      	movs	r1, #31
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fe11 	bl	8002b64 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	3301      	adds	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	d9e7      	bls.n	8003f1e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003f6a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003f6e:	f7fe fdad 	bl	8002acc <WIZCHIP_READ>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f023 030f 	bic.w	r3, r3, #15
 8003f78:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003f7a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8003f7e:	f7fe fda5 	bl	8002acc <WIZCHIP_READ>
 8003f82:	4603      	mov	r3, r0
 8003f84:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003f86:	79bb      	ldrb	r3, [r7, #6]
 8003f88:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003f8a:	88bb      	ldrh	r3, [r7, #4]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003f98:	88bb      	ldrh	r3, [r7, #4]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003fc0:	f7fe fdd0 	bl	8002b64 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003fc4:	7bbb      	ldrb	r3, [r7, #14]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003fcc:	f7fe fdca 	bl	8002b64 <WIZCHIP_WRITE>
#endif   
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003fea:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003fee:	f7fe fd6d 	bl	8002acc <WIZCHIP_READ>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003ff6:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003ffa:	f7fe fd67 	bl	8002acc <WIZCHIP_READ>
 8003ffe:	4603      	mov	r3, r0
 8004000:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004002:	79bb      	ldrb	r3, [r7, #6]
 8004004:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004006:	88bb      	ldrh	r3, [r7, #4]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b29a      	uxth	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	b29b      	uxth	r3, r3
 8004010:	4413      	add	r3, r2
 8004012:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004014:	88bb      	ldrh	r3, [r7, #4]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004024:	2300      	movs	r3, #0
 8004026:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004028:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800402c:	f7fe fd4e 	bl	8002acc <WIZCHIP_READ>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800403a:	2301      	movs	r3, #1
 800403c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004054:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004058:	f7fe fd38 	bl	8002acc <WIZCHIP_READ>
 800405c:	4603      	mov	r3, r0
 800405e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004062:	2b30      	cmp	r3, #48	@ 0x30
 8004064:	d102      	bne.n	800406c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004066:	2301      	movs	r3, #1
 8004068:	71fb      	strb	r3, [r7, #7]
 800406a:	e001      	b.n	8004070 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800406c:	2300      	movs	r3, #0
 800406e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004070:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004082:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004086:	f7fe fd21 	bl	8002acc <WIZCHIP_READ>
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004094:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4619      	mov	r1, r3
 800409a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800409e:	f7fe fd61 	bl	8002b64 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80040a2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80040a6:	f7fe fd11 	bl	8002acc <WIZCHIP_READ>
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040b4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	4619      	mov	r1, r3
 80040ba:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80040be:	f7fe fd51 	bl	8002b64 <WIZCHIP_WRITE>
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d104      	bne.n	80040e8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e4:	73fb      	strb	r3, [r7, #15]
 80040e6:	e003      	b.n	80040f0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ee:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	785b      	ldrb	r3, [r3, #1]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d104      	bne.n	8004102 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	e019      	b.n	8004136 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	78db      	ldrb	r3, [r3, #3]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10d      	bne.n	8004126 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	789b      	ldrb	r3, [r3, #2]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d104      	bne.n	800411c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	f043 0318 	orr.w	r3, r3, #24
 8004118:	73fb      	strb	r3, [r7, #15]
 800411a:	e00c      	b.n	8004136 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	f043 0308 	orr.w	r3, r3, #8
 8004122:	73fb      	strb	r3, [r7, #15]
 8004124:	e007      	b.n	8004136 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	789b      	ldrb	r3, [r3, #2]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d103      	bne.n	8004136 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	f043 0310 	orr.w	r3, r3, #16
 8004134:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	4619      	mov	r1, r3
 800413a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800413e:	f7fe fd11 	bl	8002b64 <WIZCHIP_WRITE>
   wizphy_reset();
 8004142:	f7ff ff9b 	bl	800407c <wizphy_reset>
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800415c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004160:	f7fe fcb4 	bl	8002acc <WIZCHIP_READ>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	119b      	asrs	r3, r3, #6
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800417e:	2b20      	cmp	r3, #32
 8004180:	d001      	beq.n	8004186 <wizphy_getphyconf+0x36>
 8004182:	2b38      	cmp	r3, #56	@ 0x38
 8004184:	d103      	bne.n	800418e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	705a      	strb	r2, [r3, #1]
         break;
 800418c:	e003      	b.n	8004196 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	705a      	strb	r2, [r3, #1]
         break;
 8004194:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800419c:	3b10      	subs	r3, #16
 800419e:	2b10      	cmp	r3, #16
 80041a0:	bf8c      	ite	hi
 80041a2:	2201      	movhi	r2, #1
 80041a4:	2200      	movls	r2, #0
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	d10f      	bne.n	80041cc <wizphy_getphyconf+0x7c>
 80041ac:	4a1b      	ldr	r2, [pc, #108]	@ (800421c <wizphy_getphyconf+0xcc>)
 80041ae:	fa22 f303 	lsr.w	r3, r2, r3
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	709a      	strb	r2, [r3, #2]
         break;
 80041ca:	e003      	b.n	80041d4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	709a      	strb	r2, [r3, #2]
         break;
 80041d2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041da:	3b08      	subs	r3, #8
 80041dc:	2b18      	cmp	r3, #24
 80041de:	bf8c      	ite	hi
 80041e0:	2201      	movhi	r2, #1
 80041e2:	2200      	movls	r2, #0
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	d10f      	bne.n	800420a <wizphy_getphyconf+0xba>
 80041ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004220 <wizphy_getphyconf+0xd0>)
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	70da      	strb	r2, [r3, #3]
         break;
 8004208:	e003      	b.n	8004212 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	70da      	strb	r2, [r3, #3]
         break;
 8004210:	bf00      	nop
   }
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00010101 	.word	0x00010101
 8004220:	01010001 	.word	0x01010001

08004224 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004232:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004236:	f7fe fc49 	bl	8002acc <WIZCHIP_READ>
 800423a:	4603      	mov	r3, r0
 800423c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <wizphy_setphypmode+0x2a>
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	e030      	b.n	80042b0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004254:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d104      	bne.n	8004266 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	e003      	b.n	800426e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800426c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	4619      	mov	r1, r3
 8004272:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004276:	f7fe fc75 	bl	8002b64 <WIZCHIP_WRITE>
   wizphy_reset();
 800427a:	f7ff feff 	bl	800407c <wizphy_reset>
   tmp = getPHYCFGR();
 800427e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004282:	f7fe fc23 	bl	8002acc <WIZCHIP_READ>
 8004286:	4603      	mov	r3, r0
 8004288:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <wizphy_setphypmode+0x88>
 800429a:	2300      	movs	r3, #0
 800429c:	e008      	b.n	80042b0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <wizphy_setphypmode+0x88>
 80042a8:	2300      	movs	r3, #0
 80042aa:	e001      	b.n	80042b0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2206      	movs	r2, #6
 80042c4:	4619      	mov	r1, r3
 80042c6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80042ca:	f7fe fcf9 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	330e      	adds	r3, #14
 80042d2:	2204      	movs	r2, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80042da:	f7fe fcf1 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	330a      	adds	r3, #10
 80042e2:	2204      	movs	r2, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80042ea:	f7fe fce9 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3306      	adds	r3, #6
 80042f2:	2204      	movs	r2, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80042fa:	f7fe fce1 	bl	8002cc0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	7c9a      	ldrb	r2, [r3, #18]
 8004302:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <wizchip_setnetinfo+0x78>)
 8004304:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	7cda      	ldrb	r2, [r3, #19]
 800430a:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <wizchip_setnetinfo+0x78>)
 800430c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7d1a      	ldrb	r2, [r3, #20]
 8004312:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <wizchip_setnetinfo+0x78>)
 8004314:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7d5a      	ldrb	r2, [r3, #21]
 800431a:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <wizchip_setnetinfo+0x78>)
 800431c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7d9a      	ldrb	r2, [r3, #22]
 8004322:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <wizchip_setnetinfo+0x7c>)
 8004324:	701a      	strb	r2, [r3, #0]
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000a0c 	.word	0x20000a0c
 8004334:	20000a10 	.word	0x20000a10

08004338 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2206      	movs	r2, #6
 8004344:	4619      	mov	r1, r3
 8004346:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800434a:	f7fe fc59 	bl	8002c00 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	330e      	adds	r3, #14
 8004352:	2204      	movs	r2, #4
 8004354:	4619      	mov	r1, r3
 8004356:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800435a:	f7fe fc51 	bl	8002c00 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	330a      	adds	r3, #10
 8004362:	2204      	movs	r2, #4
 8004364:	4619      	mov	r1, r3
 8004366:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800436a:	f7fe fc49 	bl	8002c00 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3306      	adds	r3, #6
 8004372:	2204      	movs	r2, #4
 8004374:	4619      	mov	r1, r3
 8004376:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800437a:	f7fe fc41 	bl	8002c00 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800437e:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <wizchip_getnetinfo+0x78>)
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004386:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <wizchip_getnetinfo+0x78>)
 8004388:	785a      	ldrb	r2, [r3, #1]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800438e:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <wizchip_getnetinfo+0x78>)
 8004390:	789a      	ldrb	r2, [r3, #2]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004396:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <wizchip_getnetinfo+0x78>)
 8004398:	78da      	ldrb	r2, [r3, #3]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800439e:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <wizchip_getnetinfo+0x7c>)
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	759a      	strb	r2, [r3, #22]
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000a0c 	.word	0x20000a0c
 80043b4:	20000a10 	.word	0x20000a10

080043b8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <wizchip_setnetmode+0x1e>
 80043d0:	f04f 33ff 	mov.w	r3, #4294967295
 80043d4:	e00e      	b.n	80043f4 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fe fb78 	bl	8002acc <WIZCHIP_READ>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	4619      	mov	r1, r3
 80043ec:	2000      	movs	r0, #0
 80043ee:	f7fe fbb9 	bl	8002b64 <WIZCHIP_WRITE>
   return 0;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004400:	2000      	movs	r0, #0
 8004402:	f7fe fb63 	bl	8002acc <WIZCHIP_READ>
 8004406:	4603      	mov	r3, r0
}
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}

0800440c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800441e:	f7fe fba1 	bl	8002b64 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	885b      	ldrh	r3, [r3, #2]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	b29b      	uxth	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004432:	f7fe fb97 	bl	8002b64 <WIZCHIP_WRITE>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	885b      	ldrh	r3, [r3, #2]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	4619      	mov	r1, r3
 800443e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004442:	f7fe fb8f 	bl	8002b64 <WIZCHIP_WRITE>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800444e:	b590      	push	{r4, r7, lr}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004456:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800445a:	f7fe fb37 	bl	8002acc <WIZCHIP_READ>
 800445e:	4603      	mov	r3, r0
 8004460:	461a      	mov	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004466:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800446a:	f7fe fb2f 	bl	8002acc <WIZCHIP_READ>
 800446e:	4603      	mov	r3, r0
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	b29c      	uxth	r4, r3
 8004474:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004478:	f7fe fb28 	bl	8002acc <WIZCHIP_READ>
 800447c:	4603      	mov	r3, r0
 800447e:	4423      	add	r3, r4
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	805a      	strh	r2, [r3, #2]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bd90      	pop	{r4, r7, pc}
	...

08004490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004490:	f7fc faac 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004494:	480b      	ldr	r0, [pc, #44]	@ (80044c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004496:	490c      	ldr	r1, [pc, #48]	@ (80044c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004498:	4a0c      	ldr	r2, [pc, #48]	@ (80044cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800449a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800449c:	e002      	b.n	80044a4 <LoopCopyDataInit>

0800449e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800449e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044a2:	3304      	adds	r3, #4

080044a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044a8:	d3f9      	bcc.n	800449e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80044ac:	4c09      	ldr	r4, [pc, #36]	@ (80044d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044b0:	e001      	b.n	80044b6 <LoopFillZerobss>

080044b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044b4:	3204      	adds	r2, #4

080044b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044b8:	d3fb      	bcc.n	80044b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ba:	f001 fe99 	bl	80061f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044be:	f7fb fe6d 	bl	800019c <main>
  bx lr
 80044c2:	4770      	bx	lr
  ldr r0, =_sdata
 80044c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80044cc:	08006f98 	.word	0x08006f98
  ldr r2, =_sbss
 80044d0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80044d4:	20000b64 	.word	0x20000b64

080044d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044d8:	e7fe      	b.n	80044d8 <ADC1_2_IRQHandler>
	...

080044dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044e0:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_Init+0x28>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a07      	ldr	r2, [pc, #28]	@ (8004504 <HAL_Init+0x28>)
 80044e6:	f043 0310 	orr.w	r3, r3, #16
 80044ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044ec:	2003      	movs	r0, #3
 80044ee:	f000 f947 	bl	8004780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f000 f808 	bl	8004508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044f8:	f7fc f904 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40022000 	.word	0x40022000

08004508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004510:	4b12      	ldr	r3, [pc, #72]	@ (800455c <HAL_InitTick+0x54>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <HAL_InitTick+0x58>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	4619      	mov	r1, r3
 800451a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800451e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f95f 	bl	80047ea <HAL_SYSTICK_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e00e      	b.n	8004554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d80a      	bhi.n	8004552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800453c:	2200      	movs	r2, #0
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	f000 f927 	bl	8004796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004548:	4a06      	ldr	r2, [pc, #24]	@ (8004564 <HAL_InitTick+0x5c>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	2000002c 	.word	0x2000002c
 8004560:	20000080 	.word	0x20000080
 8004564:	2000007c 	.word	0x2000007c

08004568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_IncTick+0x1c>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <HAL_IncTick+0x20>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4413      	add	r3, r2
 8004578:	4a03      	ldr	r2, [pc, #12]	@ (8004588 <HAL_IncTick+0x20>)
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	20000080 	.word	0x20000080
 8004588:	20000a14 	.word	0x20000a14

0800458c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return uwTick;
 8004590:	4b02      	ldr	r3, [pc, #8]	@ (800459c <HAL_GetTick+0x10>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	20000a14 	.word	0x20000a14

080045a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045a8:	f7ff fff0 	bl	800458c <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d005      	beq.n	80045c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ba:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <HAL_Delay+0x44>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045c6:	bf00      	nop
 80045c8:	f7ff ffe0 	bl	800458c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d8f7      	bhi.n	80045c8 <HAL_Delay+0x28>
  {
  }
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000080 	.word	0x20000080

080045e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045f8:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <__NVIC_SetPriorityGrouping+0x44>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004604:	4013      	ands	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800461a:	4a04      	ldr	r2, [pc, #16]	@ (800462c <__NVIC_SetPriorityGrouping+0x44>)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	60d3      	str	r3, [r2, #12]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004634:	4b04      	ldr	r3, [pc, #16]	@ (8004648 <__NVIC_GetPriorityGrouping+0x18>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	f003 0307 	and.w	r3, r3, #7
}
 800463e:	4618      	mov	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	db0b      	blt.n	8004676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	4906      	ldr	r1, [pc, #24]	@ (8004680 <__NVIC_EnableIRQ+0x34>)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2001      	movs	r0, #1
 800466e:	fa00 f202 	lsl.w	r2, r0, r2
 8004672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100

08004684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	6039      	str	r1, [r7, #0]
 800468e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004694:	2b00      	cmp	r3, #0
 8004696:	db0a      	blt.n	80046ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	490c      	ldr	r1, [pc, #48]	@ (80046d0 <__NVIC_SetPriority+0x4c>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	0112      	lsls	r2, r2, #4
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	440b      	add	r3, r1
 80046a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046ac:	e00a      	b.n	80046c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4908      	ldr	r1, [pc, #32]	@ (80046d4 <__NVIC_SetPriority+0x50>)
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	3b04      	subs	r3, #4
 80046bc:	0112      	lsls	r2, r2, #4
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	440b      	add	r3, r1
 80046c2:	761a      	strb	r2, [r3, #24]
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e100 	.word	0xe000e100
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	@ 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f1c3 0307 	rsb	r3, r3, #7
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	bf28      	it	cs
 80046f6:	2304      	movcs	r3, #4
 80046f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3304      	adds	r3, #4
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d902      	bls.n	8004708 <NVIC_EncodePriority+0x30>
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3b03      	subs	r3, #3
 8004706:	e000      	b.n	800470a <NVIC_EncodePriority+0x32>
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470c:	f04f 32ff 	mov.w	r2, #4294967295
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43da      	mvns	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	401a      	ands	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004720:	f04f 31ff 	mov.w	r1, #4294967295
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fa01 f303 	lsl.w	r3, r1, r3
 800472a:	43d9      	mvns	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	4313      	orrs	r3, r2
         );
}
 8004732:	4618      	mov	r0, r3
 8004734:	3724      	adds	r7, #36	@ 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800474c:	d301      	bcc.n	8004752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800474e:	2301      	movs	r3, #1
 8004750:	e00f      	b.n	8004772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004752:	4a0a      	ldr	r2, [pc, #40]	@ (800477c <SysTick_Config+0x40>)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800475a:	210f      	movs	r1, #15
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	f7ff ff90 	bl	8004684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <SysTick_Config+0x40>)
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800476a:	4b04      	ldr	r3, [pc, #16]	@ (800477c <SysTick_Config+0x40>)
 800476c:	2207      	movs	r2, #7
 800476e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	e000e010 	.word	0xe000e010

08004780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff2d 	bl	80045e8 <__NVIC_SetPriorityGrouping>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	4603      	mov	r3, r0
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047a8:	f7ff ff42 	bl	8004630 <__NVIC_GetPriorityGrouping>
 80047ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	6978      	ldr	r0, [r7, #20]
 80047b4:	f7ff ff90 	bl	80046d8 <NVIC_EncodePriority>
 80047b8:	4602      	mov	r2, r0
 80047ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ff5f 	bl	8004684 <__NVIC_SetPriority>
}
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	4603      	mov	r3, r0
 80047d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff ff35 	bl	800464c <__NVIC_EnableIRQ>
}
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff ffa2 	bl	800473c <SysTick_Config>
 80047f8:	4603      	mov	r3, r0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004804:	b480      	push	{r7}
 8004806:	b08b      	sub	sp, #44	@ 0x2c
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004816:	e169      	b.n	8004aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004818:	2201      	movs	r2, #1
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 8158 	bne.w	8004ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a9a      	ldr	r2, [pc, #616]	@ (8004aa4 <HAL_GPIO_Init+0x2a0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d05e      	beq.n	80048fe <HAL_GPIO_Init+0xfa>
 8004840:	4a98      	ldr	r2, [pc, #608]	@ (8004aa4 <HAL_GPIO_Init+0x2a0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d875      	bhi.n	8004932 <HAL_GPIO_Init+0x12e>
 8004846:	4a98      	ldr	r2, [pc, #608]	@ (8004aa8 <HAL_GPIO_Init+0x2a4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d058      	beq.n	80048fe <HAL_GPIO_Init+0xfa>
 800484c:	4a96      	ldr	r2, [pc, #600]	@ (8004aa8 <HAL_GPIO_Init+0x2a4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d86f      	bhi.n	8004932 <HAL_GPIO_Init+0x12e>
 8004852:	4a96      	ldr	r2, [pc, #600]	@ (8004aac <HAL_GPIO_Init+0x2a8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d052      	beq.n	80048fe <HAL_GPIO_Init+0xfa>
 8004858:	4a94      	ldr	r2, [pc, #592]	@ (8004aac <HAL_GPIO_Init+0x2a8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d869      	bhi.n	8004932 <HAL_GPIO_Init+0x12e>
 800485e:	4a94      	ldr	r2, [pc, #592]	@ (8004ab0 <HAL_GPIO_Init+0x2ac>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04c      	beq.n	80048fe <HAL_GPIO_Init+0xfa>
 8004864:	4a92      	ldr	r2, [pc, #584]	@ (8004ab0 <HAL_GPIO_Init+0x2ac>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d863      	bhi.n	8004932 <HAL_GPIO_Init+0x12e>
 800486a:	4a92      	ldr	r2, [pc, #584]	@ (8004ab4 <HAL_GPIO_Init+0x2b0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d046      	beq.n	80048fe <HAL_GPIO_Init+0xfa>
 8004870:	4a90      	ldr	r2, [pc, #576]	@ (8004ab4 <HAL_GPIO_Init+0x2b0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d85d      	bhi.n	8004932 <HAL_GPIO_Init+0x12e>
 8004876:	2b12      	cmp	r3, #18
 8004878:	d82a      	bhi.n	80048d0 <HAL_GPIO_Init+0xcc>
 800487a:	2b12      	cmp	r3, #18
 800487c:	d859      	bhi.n	8004932 <HAL_GPIO_Init+0x12e>
 800487e:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <HAL_GPIO_Init+0x80>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	080048ff 	.word	0x080048ff
 8004888:	080048d9 	.word	0x080048d9
 800488c:	080048eb 	.word	0x080048eb
 8004890:	0800492d 	.word	0x0800492d
 8004894:	08004933 	.word	0x08004933
 8004898:	08004933 	.word	0x08004933
 800489c:	08004933 	.word	0x08004933
 80048a0:	08004933 	.word	0x08004933
 80048a4:	08004933 	.word	0x08004933
 80048a8:	08004933 	.word	0x08004933
 80048ac:	08004933 	.word	0x08004933
 80048b0:	08004933 	.word	0x08004933
 80048b4:	08004933 	.word	0x08004933
 80048b8:	08004933 	.word	0x08004933
 80048bc:	08004933 	.word	0x08004933
 80048c0:	08004933 	.word	0x08004933
 80048c4:	08004933 	.word	0x08004933
 80048c8:	080048e1 	.word	0x080048e1
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	4a79      	ldr	r2, [pc, #484]	@ (8004ab8 <HAL_GPIO_Init+0x2b4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048d6:	e02c      	b.n	8004932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	623b      	str	r3, [r7, #32]
          break;
 80048de:	e029      	b.n	8004934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	3304      	adds	r3, #4
 80048e6:	623b      	str	r3, [r7, #32]
          break;
 80048e8:	e024      	b.n	8004934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	3308      	adds	r3, #8
 80048f0:	623b      	str	r3, [r7, #32]
          break;
 80048f2:	e01f      	b.n	8004934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	330c      	adds	r3, #12
 80048fa:	623b      	str	r3, [r7, #32]
          break;
 80048fc:	e01a      	b.n	8004934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004906:	2304      	movs	r3, #4
 8004908:	623b      	str	r3, [r7, #32]
          break;
 800490a:	e013      	b.n	8004934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d105      	bne.n	8004920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004914:	2308      	movs	r3, #8
 8004916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	611a      	str	r2, [r3, #16]
          break;
 800491e:	e009      	b.n	8004934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004920:	2308      	movs	r3, #8
 8004922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	615a      	str	r2, [r3, #20]
          break;
 800492a:	e003      	b.n	8004934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800492c:	2300      	movs	r3, #0
 800492e:	623b      	str	r3, [r7, #32]
          break;
 8004930:	e000      	b.n	8004934 <HAL_GPIO_Init+0x130>
          break;
 8004932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2bff      	cmp	r3, #255	@ 0xff
 8004938:	d801      	bhi.n	800493e <HAL_GPIO_Init+0x13a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	e001      	b.n	8004942 <HAL_GPIO_Init+0x13e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3304      	adds	r3, #4
 8004942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2bff      	cmp	r3, #255	@ 0xff
 8004948:	d802      	bhi.n	8004950 <HAL_GPIO_Init+0x14c>
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	e002      	b.n	8004956 <HAL_GPIO_Init+0x152>
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	3b08      	subs	r3, #8
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	210f      	movs	r1, #15
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	401a      	ands	r2, r3
 8004968:	6a39      	ldr	r1, [r7, #32]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	431a      	orrs	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80b1 	beq.w	8004ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004984:	4b4d      	ldr	r3, [pc, #308]	@ (8004abc <HAL_GPIO_Init+0x2b8>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	4a4c      	ldr	r2, [pc, #304]	@ (8004abc <HAL_GPIO_Init+0x2b8>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6193      	str	r3, [r2, #24]
 8004990:	4b4a      	ldr	r3, [pc, #296]	@ (8004abc <HAL_GPIO_Init+0x2b8>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800499c:	4a48      	ldr	r2, [pc, #288]	@ (8004ac0 <HAL_GPIO_Init+0x2bc>)
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	3302      	adds	r3, #2
 80049a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	220f      	movs	r2, #15
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4013      	ands	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a40      	ldr	r2, [pc, #256]	@ (8004ac4 <HAL_GPIO_Init+0x2c0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_GPIO_Init+0x1ec>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac8 <HAL_GPIO_Init+0x2c4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00d      	beq.n	80049ec <HAL_GPIO_Init+0x1e8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3e      	ldr	r2, [pc, #248]	@ (8004acc <HAL_GPIO_Init+0x2c8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <HAL_GPIO_Init+0x1e4>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3d      	ldr	r2, [pc, #244]	@ (8004ad0 <HAL_GPIO_Init+0x2cc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_GPIO_Init+0x1e0>
 80049e0:	2303      	movs	r3, #3
 80049e2:	e006      	b.n	80049f2 <HAL_GPIO_Init+0x1ee>
 80049e4:	2304      	movs	r3, #4
 80049e6:	e004      	b.n	80049f2 <HAL_GPIO_Init+0x1ee>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e002      	b.n	80049f2 <HAL_GPIO_Init+0x1ee>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <HAL_GPIO_Init+0x1ee>
 80049f0:	2300      	movs	r3, #0
 80049f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f4:	f002 0203 	and.w	r2, r2, #3
 80049f8:	0092      	lsls	r2, r2, #2
 80049fa:	4093      	lsls	r3, r2
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a02:	492f      	ldr	r1, [pc, #188]	@ (8004ac0 <HAL_GPIO_Init+0x2bc>)
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	089b      	lsrs	r3, r3, #2
 8004a08:	3302      	adds	r3, #2
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d006      	beq.n	8004a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	492c      	ldr	r1, [pc, #176]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]
 8004a28:	e006      	b.n	8004a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	4928      	ldr	r1, [pc, #160]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d006      	beq.n	8004a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a44:	4b23      	ldr	r3, [pc, #140]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	4922      	ldr	r1, [pc, #136]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60cb      	str	r3, [r1, #12]
 8004a50:	e006      	b.n	8004a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a52:	4b20      	ldr	r3, [pc, #128]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	491e      	ldr	r1, [pc, #120]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d006      	beq.n	8004a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a6c:	4b19      	ldr	r3, [pc, #100]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	4918      	ldr	r1, [pc, #96]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
 8004a78:	e006      	b.n	8004a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a7a:	4b16      	ldr	r3, [pc, #88]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	4914      	ldr	r1, [pc, #80]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d021      	beq.n	8004ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a94:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	490e      	ldr	r1, [pc, #56]	@ (8004ad4 <HAL_GPIO_Init+0x2d0>)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]
 8004aa0:	e021      	b.n	8004ae6 <HAL_GPIO_Init+0x2e2>
 8004aa2:	bf00      	nop
 8004aa4:	10320000 	.word	0x10320000
 8004aa8:	10310000 	.word	0x10310000
 8004aac:	10220000 	.word	0x10220000
 8004ab0:	10210000 	.word	0x10210000
 8004ab4:	10120000 	.word	0x10120000
 8004ab8:	10110000 	.word	0x10110000
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40010800 	.word	0x40010800
 8004ac8:	40010c00 	.word	0x40010c00
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	40011400 	.word	0x40011400
 8004ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_GPIO_Init+0x304>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	4909      	ldr	r1, [pc, #36]	@ (8004b08 <HAL_GPIO_Init+0x304>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	3301      	adds	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f47f ae8e 	bne.w	8004818 <HAL_GPIO_Init+0x14>
  }
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	372c      	adds	r7, #44	@ 0x2c
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	40010400 	.word	0x40010400

08004b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b1c:	787b      	ldrb	r3, [r7, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b28:	e003      	b.n	8004b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b2a:	887b      	ldrh	r3, [r7, #2]
 8004b2c:	041a      	lsls	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b46:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b52:	4a05      	ldr	r2, [pc, #20]	@ (8004b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f806 	bl	8004b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40010400 	.word	0x40010400

08004b6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e272      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8087 	beq.w	8004cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba0:	4b92      	ldr	r3, [pc, #584]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d00c      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bac:	4b8f      	ldr	r3, [pc, #572]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d112      	bne.n	8004bde <HAL_RCC_OscConfig+0x5e>
 8004bb8:	4b8c      	ldr	r3, [pc, #560]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc4:	d10b      	bne.n	8004bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc6:	4b89      	ldr	r3, [pc, #548]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d06c      	beq.n	8004cac <HAL_RCC_OscConfig+0x12c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d168      	bne.n	8004cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e24c      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be6:	d106      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x76>
 8004be8:	4b80      	ldr	r3, [pc, #512]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a7f      	ldr	r2, [pc, #508]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e02e      	b.n	8004c54 <HAL_RCC_OscConfig+0xd4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x98>
 8004bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a7a      	ldr	r2, [pc, #488]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4b78      	ldr	r3, [pc, #480]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a77      	ldr	r2, [pc, #476]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e01d      	b.n	8004c54 <HAL_RCC_OscConfig+0xd4>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c20:	d10c      	bne.n	8004c3c <HAL_RCC_OscConfig+0xbc>
 8004c22:	4b72      	ldr	r3, [pc, #456]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a71      	ldr	r2, [pc, #452]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6e      	ldr	r2, [pc, #440]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e00b      	b.n	8004c54 <HAL_RCC_OscConfig+0xd4>
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6a      	ldr	r2, [pc, #424]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4b68      	ldr	r3, [pc, #416]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a67      	ldr	r2, [pc, #412]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d013      	beq.n	8004c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5c:	f7ff fc96 	bl	800458c <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7ff fc92 	bl	800458c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	@ 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e200      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b5d      	ldr	r3, [pc, #372]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0xe4>
 8004c82:	e014      	b.n	8004cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7ff fc82 	bl	800458c <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7ff fc7e 	bl	800458c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	@ 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e1ec      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9e:	4b53      	ldr	r3, [pc, #332]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x10c>
 8004caa:	e000      	b.n	8004cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d063      	beq.n	8004d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cba:	4b4c      	ldr	r3, [pc, #304]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cc6:	4b49      	ldr	r3, [pc, #292]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d11c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x18c>
 8004cd2:	4b46      	ldr	r3, [pc, #280]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d116      	bne.n	8004d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cde:	4b43      	ldr	r3, [pc, #268]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x176>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1c0      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4939      	ldr	r1, [pc, #228]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0a:	e03a      	b.n	8004d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d020      	beq.n	8004d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d14:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7ff fc37 	bl	800458c <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7ff fc33 	bl	800458c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e1a1      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d34:	4b2d      	ldr	r3, [pc, #180]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4927      	ldr	r1, [pc, #156]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]
 8004d54:	e015      	b.n	8004d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d56:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7ff fc16 	bl	800458c <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d64:	f7ff fc12 	bl	800458c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e180      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d76:	4b1d      	ldr	r3, [pc, #116]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03a      	beq.n	8004e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d019      	beq.n	8004dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d96:	4b17      	ldr	r3, [pc, #92]	@ (8004df4 <HAL_RCC_OscConfig+0x274>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9c:	f7ff fbf6 	bl	800458c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da4:	f7ff fbf2 	bl	800458c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e160      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	f000 face 	bl	8005364 <RCC_Delay>
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dca:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd0:	f7ff fbdc 	bl	800458c <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd6:	e00f      	b.n	8004df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd8:	f7ff fbd8 	bl	800458c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d908      	bls.n	8004df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e146      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	42420000 	.word	0x42420000
 8004df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df8:	4b92      	ldr	r3, [pc, #584]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e9      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80a6 	beq.w	8004f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e16:	4b8b      	ldr	r3, [pc, #556]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10d      	bne.n	8004e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	4b88      	ldr	r3, [pc, #544]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	4a87      	ldr	r2, [pc, #540]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	61d3      	str	r3, [r2, #28]
 8004e2e:	4b85      	ldr	r3, [pc, #532]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b82      	ldr	r3, [pc, #520]	@ (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d118      	bne.n	8004e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e56:	f7ff fb99 	bl	800458c <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5e:	f7ff fb95 	bl	800458c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b64      	cmp	r3, #100	@ 0x64
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e103      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	4b75      	ldr	r3, [pc, #468]	@ (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x312>
 8004e84:	4b6f      	ldr	r3, [pc, #444]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a6e      	ldr	r2, [pc, #440]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	e02d      	b.n	8004eee <HAL_RCC_OscConfig+0x36e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x334>
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	4a69      	ldr	r2, [pc, #420]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6213      	str	r3, [r2, #32]
 8004ea6:	4b67      	ldr	r3, [pc, #412]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4a66      	ldr	r2, [pc, #408]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6213      	str	r3, [r2, #32]
 8004eb2:	e01c      	b.n	8004eee <HAL_RCC_OscConfig+0x36e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b05      	cmp	r3, #5
 8004eba:	d10c      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x356>
 8004ebc:	4b61      	ldr	r3, [pc, #388]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	4a60      	ldr	r2, [pc, #384]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6213      	str	r3, [r2, #32]
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6213      	str	r3, [r2, #32]
 8004ed4:	e00b      	b.n	8004eee <HAL_RCC_OscConfig+0x36e>
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	4a5a      	ldr	r2, [pc, #360]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6213      	str	r3, [r2, #32]
 8004ee2:	4b58      	ldr	r3, [pc, #352]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	4a57      	ldr	r2, [pc, #348]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d015      	beq.n	8004f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef6:	f7ff fb49 	bl	800458c <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7ff fb45 	bl	800458c <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0b1      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	4b4b      	ldr	r3, [pc, #300]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ee      	beq.n	8004efe <HAL_RCC_OscConfig+0x37e>
 8004f20:	e014      	b.n	8004f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f22:	f7ff fb33 	bl	800458c <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	e00a      	b.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7ff fb2f 	bl	800458c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e09b      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f40:	4b40      	ldr	r3, [pc, #256]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ee      	bne.n	8004f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4b3c      	ldr	r3, [pc, #240]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	4a3b      	ldr	r2, [pc, #236]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8087 	beq.w	8005076 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f68:	4b36      	ldr	r3, [pc, #216]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d061      	beq.n	8005038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d146      	bne.n	800500a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7c:	4b33      	ldr	r3, [pc, #204]	@ (800504c <HAL_RCC_OscConfig+0x4cc>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7ff fb03 	bl	800458c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7ff faff 	bl	800458c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e06d      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9c:	4b29      	ldr	r3, [pc, #164]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f0      	bne.n	8004f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb0:	d108      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fb2:	4b24      	ldr	r3, [pc, #144]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	4921      	ldr	r1, [pc, #132]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a19      	ldr	r1, [r3, #32]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	491b      	ldr	r1, [pc, #108]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800504c <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7ff fad3 	bl	800458c <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fea:	f7ff facf 	bl	800458c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03d      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ffc:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x46a>
 8005008:	e035      	b.n	8005076 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b10      	ldr	r3, [pc, #64]	@ (800504c <HAL_RCC_OscConfig+0x4cc>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7ff fabc 	bl	800458c <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7ff fab8 	bl	800458c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e026      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_RCC_OscConfig+0x4c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x498>
 8005036:	e01e      	b.n	8005076 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d107      	bne.n	8005050 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e019      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
 8005044:	40021000 	.word	0x40021000
 8005048:	40007000 	.word	0x40007000
 800504c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_RCC_OscConfig+0x500>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	429a      	cmp	r2, r3
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000

08005084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d0      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b6a      	ldr	r3, [pc, #424]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d910      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b67      	ldr	r3, [pc, #412]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 0207 	bic.w	r2, r3, #7
 80050ae:	4965      	ldr	r1, [pc, #404]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b63      	ldr	r3, [pc, #396]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0b8      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d020      	beq.n	8005116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e0:	4b59      	ldr	r3, [pc, #356]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a58      	ldr	r2, [pc, #352]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f8:	4b53      	ldr	r3, [pc, #332]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a52      	ldr	r2, [pc, #328]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b50      	ldr	r3, [pc, #320]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	494d      	ldr	r1, [pc, #308]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d040      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	4b47      	ldr	r3, [pc, #284]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d115      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07f      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b41      	ldr	r3, [pc, #260]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e073      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	4b3d      	ldr	r3, [pc, #244]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e06b      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005162:	4b39      	ldr	r3, [pc, #228]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4936      	ldr	r1, [pc, #216]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005174:	f7ff fa0a 	bl	800458c <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7ff fa06 	bl	800458c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e053      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b2d      	ldr	r3, [pc, #180]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1eb      	bne.n	800517c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b27      	ldr	r3, [pc, #156]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d210      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	4922      	ldr	r1, [pc, #136]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b20      	ldr	r3, [pc, #128]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e032      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e0:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4916      	ldr	r1, [pc, #88]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051fe:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	490e      	ldr	r1, [pc, #56]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005212:	f000 f821 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005216:	4602      	mov	r2, r0
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	490a      	ldr	r1, [pc, #40]	@ (800524c <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	5ccb      	ldrb	r3, [r1, r3]
 8005226:	fa22 f303 	lsr.w	r3, r2, r3
 800522a:	4a09      	ldr	r2, [pc, #36]	@ (8005250 <HAL_RCC_ClockConfig+0x1cc>)
 800522c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800522e:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_ClockConfig+0x1d0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f968 	bl	8004508 <HAL_InitTick>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40022000 	.word	0x40022000
 8005248:	40021000 	.word	0x40021000
 800524c:	08006f28 	.word	0x08006f28
 8005250:	2000002c 	.word	0x2000002c
 8005254:	2000007c 	.word	0x2000007c

08005258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	2300      	movs	r3, #0
 800526c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005272:	4b1e      	ldr	r3, [pc, #120]	@ (80052ec <HAL_RCC_GetSysClockFreq+0x94>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b04      	cmp	r3, #4
 8005280:	d002      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x30>
 8005282:	2b08      	cmp	r3, #8
 8005284:	d003      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x36>
 8005286:	e027      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005288:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800528a:	613b      	str	r3, [r7, #16]
      break;
 800528c:	e027      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	0c9b      	lsrs	r3, r3, #18
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	4a17      	ldr	r2, [pc, #92]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005298:	5cd3      	ldrb	r3, [r2, r3]
 800529a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052a6:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <HAL_RCC_GetSysClockFreq+0x94>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	0c5b      	lsrs	r3, r3, #17
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	4a11      	ldr	r2, [pc, #68]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80052b2:	5cd3      	ldrb	r3, [r2, r3]
 80052b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a0d      	ldr	r2, [pc, #52]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80052ba:	fb03 f202 	mul.w	r2, r3, r2
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e004      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0c      	ldr	r2, [pc, #48]	@ (80052fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80052cc:	fb02 f303 	mul.w	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	613b      	str	r3, [r7, #16]
      break;
 80052d6:	e002      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80052da:	613b      	str	r3, [r7, #16]
      break;
 80052dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052de:	693b      	ldr	r3, [r7, #16]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	007a1200 	.word	0x007a1200
 80052f4:	08006f40 	.word	0x08006f40
 80052f8:	08006f50 	.word	0x08006f50
 80052fc:	003d0900 	.word	0x003d0900

08005300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005304:	4b02      	ldr	r3, [pc, #8]	@ (8005310 <HAL_RCC_GetHCLKFreq+0x10>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr
 8005310:	2000002c 	.word	0x2000002c

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005318:	f7ff fff2 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	@ (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	08006f38 	.word	0x08006f38

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005340:	f7ff ffde 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	0adb      	lsrs	r3, r3, #11
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	@ (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000
 8005360:	08006f38 	.word	0x08006f38

08005364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <RCC_Delay+0x34>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <RCC_Delay+0x38>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	0a5b      	lsrs	r3, r3, #9
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005380:	bf00      	nop
  }
  while (Delay --);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1e5a      	subs	r2, r3, #1
 8005386:	60fa      	str	r2, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f9      	bne.n	8005380 <RCC_Delay+0x1c>
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr
 8005398:	2000002c 	.word	0x2000002c
 800539c:	10624dd3 	.word	0x10624dd3

080053a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e076      	b.n	80054a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d108      	bne.n	80053cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053c2:	d009      	beq.n	80053d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	61da      	str	r2, [r3, #28]
 80053ca:	e005      	b.n	80053d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fb f9b8 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800540e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545c:	ea42 0103 	orr.w	r1, r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005464:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	0c1a      	lsrs	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f002 0204 	and.w	r2, r2, #4
 800547e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800548e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	@ 0x30
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054b6:	2301      	movs	r3, #1
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_SPI_TransmitReceive+0x26>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e198      	b.n	8005800 <HAL_SPI_TransmitReceive+0x358>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d6:	f7ff f859 	bl	800458c <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054ec:	887b      	ldrh	r3, [r7, #2]
 80054ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d00f      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x70>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fe:	d107      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x68>
 8005508:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800550c:	2b04      	cmp	r3, #4
 800550e:	d003      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005510:	2302      	movs	r3, #2
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005516:	e16d      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_SPI_TransmitReceive+0x82>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_SPI_TransmitReceive+0x82>
 8005524:	887b      	ldrh	r3, [r7, #2]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005530:	e160      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b04      	cmp	r3, #4
 800553c:	d003      	beq.n	8005546 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2205      	movs	r2, #5
 8005542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	887a      	ldrh	r2, [r7, #2]
 8005556:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	887a      	ldrh	r2, [r7, #2]
 800555c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	887a      	ldrh	r2, [r7, #2]
 8005568:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	887a      	ldrh	r2, [r7, #2]
 800556e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d007      	beq.n	800559a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a2:	d17c      	bne.n	800569e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_TransmitReceive+0x10a>
 80055ac:	8b7b      	ldrh	r3, [r7, #26]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d16a      	bne.n	8005688 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055d6:	e057      	b.n	8005688 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d11b      	bne.n	800561e <HAL_SPI_TransmitReceive+0x176>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d016      	beq.n	800561e <HAL_SPI_TransmitReceive+0x176>
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d113      	bne.n	800561e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	881a      	ldrh	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005606:	1c9a      	adds	r2, r3, #2
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b01      	cmp	r3, #1
 800562a:	d119      	bne.n	8005660 <HAL_SPI_TransmitReceive+0x1b8>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d014      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005640:	b292      	uxth	r2, r2
 8005642:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	1c9a      	adds	r2, r3, #2
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800565c:	2301      	movs	r3, #1
 800565e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005660:	f7fe ff94 	bl	800458c <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800566c:	429a      	cmp	r2, r3
 800566e:	d80b      	bhi.n	8005688 <HAL_SPI_TransmitReceive+0x1e0>
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d007      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005686:	e0b5      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1a2      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x130>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d19d      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x130>
 800569c:	e080      	b.n	80057a0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x204>
 80056a6:	8b7b      	ldrh	r3, [r7, #26]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d16f      	bne.n	800578c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d2:	e05b      	b.n	800578c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d11c      	bne.n	800571c <HAL_SPI_TransmitReceive+0x274>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d017      	beq.n	800571c <HAL_SPI_TransmitReceive+0x274>
 80056ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d114      	bne.n	800571c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	7812      	ldrb	r2, [r2, #0]
 80056fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d119      	bne.n	800575e <HAL_SPI_TransmitReceive+0x2b6>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d014      	beq.n	800575e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800575a:	2301      	movs	r3, #1
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800575e:	f7fe ff15 	bl	800458c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800576a:	429a      	cmp	r2, r3
 800576c:	d803      	bhi.n	8005776 <HAL_SPI_TransmitReceive+0x2ce>
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d102      	bne.n	800577c <HAL_SPI_TransmitReceive+0x2d4>
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800578a:	e033      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d19e      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x22c>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d199      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f8b7 	bl	8005918 <SPI_EndRxTxTransaction>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80057bc:	e01a      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e003      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80057fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005800:	4618      	mov	r0, r3
 8005802:	3730      	adds	r7, #48	@ 0x30
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005818:	f7fe feb8 	bl	800458c <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	4413      	add	r3, r2
 8005826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005828:	f7fe feb0 	bl	800458c <HAL_GetTick>
 800582c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800582e:	4b39      	ldr	r3, [pc, #228]	@ (8005914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	015b      	lsls	r3, r3, #5
 8005834:	0d1b      	lsrs	r3, r3, #20
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	fb02 f303 	mul.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800583e:	e054      	b.n	80058ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d050      	beq.n	80058ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005848:	f7fe fea0 	bl	800458c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	429a      	cmp	r2, r3
 8005856:	d902      	bls.n	800585e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d13d      	bne.n	80058da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800586c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005876:	d111      	bne.n	800589c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005880:	d004      	beq.n	800588c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588a:	d107      	bne.n	800589c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800589a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058a4:	d10f      	bne.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e017      	b.n	800590a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	429a      	cmp	r2, r3
 8005906:	d19b      	bne.n	8005840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	2000002c 	.word	0x2000002c

08005918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2200      	movs	r2, #0
 800592c:	2180      	movs	r1, #128	@ 0x80
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff ff6a 	bl	8005808 <SPI_WaitFlagStateUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e000      	b.n	800594c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e042      	b.n	80059ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fa ff40 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2224      	movs	r2, #36	@ 0x24
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f91d 	bl	8005bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	@ 0x28
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d16d      	bne.n	8005af0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_UART_Transmit+0x2c>
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e066      	b.n	8005af2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2221      	movs	r2, #33	@ 0x21
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a32:	f7fe fdab 	bl	800458c <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4c:	d108      	bne.n	8005a60 <HAL_UART_Transmit+0x6c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e003      	b.n	8005a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a68:	e02a      	b.n	8005ac0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f840 	bl	8005afa <UART_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e036      	b.n	8005af2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	61bb      	str	r3, [r7, #24]
 8005aa0:	e007      	b.n	8005ab2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1cf      	bne.n	8005a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2140      	movs	r1, #64	@ 0x40
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f810 	bl	8005afa <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e006      	b.n	8005af2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e000      	b.n	8005af2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b090      	sub	sp, #64	@ 0x40
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	603b      	str	r3, [r7, #0]
 8005b06:	4613      	mov	r3, r2
 8005b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0a:	e050      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d04c      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b1a:	f7fe fd37 	bl	800458c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d241      	bcs.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b4a:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e5      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b7e:	623a      	str	r2, [r7, #32]
 8005b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	69f9      	ldr	r1, [r7, #28]
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e5      	bne.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e00f      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d09f      	beq.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3740      	adds	r7, #64	@ 0x40
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c12:	f023 030c 	bic.w	r3, r3, #12
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cec <UART_SetConfig+0x114>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c40:	f7ff fb7c 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	e002      	b.n	8005c4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c48:	f7ff fb64 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8005c4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009a      	lsls	r2, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	4a22      	ldr	r2, [pc, #136]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	0119      	lsls	r1, r3, #4
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c84:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005c86:	fba3 0302 	umull	r0, r3, r3, r2
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2064      	movs	r0, #100	@ 0x64
 8005c8e:	fb00 f303 	mul.w	r3, r0, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	3332      	adds	r3, #50	@ 0x32
 8005c98:	4a15      	ldr	r2, [pc, #84]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ca4:	4419      	add	r1, r3
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009a      	lsls	r2, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2064      	movs	r0, #100	@ 0x64
 8005cc6:	fb00 f303 	mul.w	r3, r0, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	3332      	adds	r3, #50	@ 0x32
 8005cd0:	4a07      	ldr	r2, [pc, #28]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40013800 	.word	0x40013800
 8005cf0:	51eb851f 	.word	0x51eb851f

08005cf4 <std>:
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8005cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d02:	6083      	str	r3, [r0, #8]
 8005d04:	8181      	strh	r1, [r0, #12]
 8005d06:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d08:	81c2      	strh	r2, [r0, #14]
 8005d0a:	6183      	str	r3, [r0, #24]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	2208      	movs	r2, #8
 8005d10:	305c      	adds	r0, #92	@ 0x5c
 8005d12:	f000 f9f9 	bl	8006108 <memset>
 8005d16:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <std+0x58>)
 8005d18:	6224      	str	r4, [r4, #32]
 8005d1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <std+0x5c>)
 8005d1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <std+0x60>)
 8005d22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d24:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <std+0x64>)
 8005d26:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d28:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <std+0x68>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d006      	beq.n	8005d3c <std+0x48>
 8005d2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d32:	4294      	cmp	r4, r2
 8005d34:	d002      	beq.n	8005d3c <std+0x48>
 8005d36:	33d0      	adds	r3, #208	@ 0xd0
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d105      	bne.n	8005d48 <std+0x54>
 8005d3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f000 ba78 	b.w	8006238 <__retarget_lock_init_recursive>
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08005f59 	.word	0x08005f59
 8005d50:	08005f7b 	.word	0x08005f7b
 8005d54:	08005fb3 	.word	0x08005fb3
 8005d58:	08005fd7 	.word	0x08005fd7
 8005d5c:	20000a18 	.word	0x20000a18

08005d60 <stdio_exit_handler>:
 8005d60:	4a02      	ldr	r2, [pc, #8]	@ (8005d6c <stdio_exit_handler+0xc>)
 8005d62:	4903      	ldr	r1, [pc, #12]	@ (8005d70 <stdio_exit_handler+0x10>)
 8005d64:	4803      	ldr	r0, [pc, #12]	@ (8005d74 <stdio_exit_handler+0x14>)
 8005d66:	f000 b869 	b.w	8005e3c <_fwalk_sglue>
 8005d6a:	bf00      	nop
 8005d6c:	20000084 	.word	0x20000084
 8005d70:	08006ae1 	.word	0x08006ae1
 8005d74:	20000094 	.word	0x20000094

08005d78 <cleanup_stdio>:
 8005d78:	6841      	ldr	r1, [r0, #4]
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dac <cleanup_stdio+0x34>)
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	4604      	mov	r4, r0
 8005d82:	d001      	beq.n	8005d88 <cleanup_stdio+0x10>
 8005d84:	f000 feac 	bl	8006ae0 <_fflush_r>
 8005d88:	68a1      	ldr	r1, [r4, #8]
 8005d8a:	4b09      	ldr	r3, [pc, #36]	@ (8005db0 <cleanup_stdio+0x38>)
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	d002      	beq.n	8005d96 <cleanup_stdio+0x1e>
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fea5 	bl	8006ae0 <_fflush_r>
 8005d96:	68e1      	ldr	r1, [r4, #12]
 8005d98:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <cleanup_stdio+0x3c>)
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	d004      	beq.n	8005da8 <cleanup_stdio+0x30>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f000 be9c 	b.w	8006ae0 <_fflush_r>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	20000a18 	.word	0x20000a18
 8005db0:	20000a80 	.word	0x20000a80
 8005db4:	20000ae8 	.word	0x20000ae8

08005db8 <global_stdio_init.part.0>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4b0b      	ldr	r3, [pc, #44]	@ (8005de8 <global_stdio_init.part.0+0x30>)
 8005dbc:	4c0b      	ldr	r4, [pc, #44]	@ (8005dec <global_stdio_init.part.0+0x34>)
 8005dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8005df0 <global_stdio_init.part.0+0x38>)
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	2104      	movs	r1, #4
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f7ff ff94 	bl	8005cf4 <std>
 8005dcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	2109      	movs	r1, #9
 8005dd4:	f7ff ff8e 	bl	8005cf4 <std>
 8005dd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ddc:	2202      	movs	r2, #2
 8005dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de2:	2112      	movs	r1, #18
 8005de4:	f7ff bf86 	b.w	8005cf4 <std>
 8005de8:	20000b50 	.word	0x20000b50
 8005dec:	20000a18 	.word	0x20000a18
 8005df0:	08005d61 	.word	0x08005d61

08005df4 <__sfp_lock_acquire>:
 8005df4:	4801      	ldr	r0, [pc, #4]	@ (8005dfc <__sfp_lock_acquire+0x8>)
 8005df6:	f000 ba20 	b.w	800623a <__retarget_lock_acquire_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	20000b59 	.word	0x20000b59

08005e00 <__sfp_lock_release>:
 8005e00:	4801      	ldr	r0, [pc, #4]	@ (8005e08 <__sfp_lock_release+0x8>)
 8005e02:	f000 ba1b 	b.w	800623c <__retarget_lock_release_recursive>
 8005e06:	bf00      	nop
 8005e08:	20000b59 	.word	0x20000b59

08005e0c <__sinit>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4604      	mov	r4, r0
 8005e10:	f7ff fff0 	bl	8005df4 <__sfp_lock_acquire>
 8005e14:	6a23      	ldr	r3, [r4, #32]
 8005e16:	b11b      	cbz	r3, 8005e20 <__sinit+0x14>
 8005e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1c:	f7ff bff0 	b.w	8005e00 <__sfp_lock_release>
 8005e20:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <__sinit+0x28>)
 8005e22:	6223      	str	r3, [r4, #32]
 8005e24:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <__sinit+0x2c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f5      	bne.n	8005e18 <__sinit+0xc>
 8005e2c:	f7ff ffc4 	bl	8005db8 <global_stdio_init.part.0>
 8005e30:	e7f2      	b.n	8005e18 <__sinit+0xc>
 8005e32:	bf00      	nop
 8005e34:	08005d79 	.word	0x08005d79
 8005e38:	20000b50 	.word	0x20000b50

08005e3c <_fwalk_sglue>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	4607      	mov	r7, r0
 8005e42:	4688      	mov	r8, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	2600      	movs	r6, #0
 8005e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e50:	d505      	bpl.n	8005e5e <_fwalk_sglue+0x22>
 8005e52:	6824      	ldr	r4, [r4, #0]
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d1f7      	bne.n	8005e48 <_fwalk_sglue+0xc>
 8005e58:	4630      	mov	r0, r6
 8005e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d907      	bls.n	8005e74 <_fwalk_sglue+0x38>
 8005e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	d003      	beq.n	8005e74 <_fwalk_sglue+0x38>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c0      	blx	r8
 8005e72:	4306      	orrs	r6, r0
 8005e74:	3568      	adds	r5, #104	@ 0x68
 8005e76:	e7e9      	b.n	8005e4c <_fwalk_sglue+0x10>

08005e78 <iprintf>:
 8005e78:	b40f      	push	{r0, r1, r2, r3}
 8005e7a:	b507      	push	{r0, r1, r2, lr}
 8005e7c:	4906      	ldr	r1, [pc, #24]	@ (8005e98 <iprintf+0x20>)
 8005e7e:	ab04      	add	r3, sp, #16
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e86:	6881      	ldr	r1, [r0, #8]
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	f000 faff 	bl	800648c <_vfiprintf_r>
 8005e8e:	b003      	add	sp, #12
 8005e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e94:	b004      	add	sp, #16
 8005e96:	4770      	bx	lr
 8005e98:	20000090 	.word	0x20000090

08005e9c <_puts_r>:
 8005e9c:	6a03      	ldr	r3, [r0, #32]
 8005e9e:	b570      	push	{r4, r5, r6, lr}
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	460e      	mov	r6, r1
 8005ea4:	6884      	ldr	r4, [r0, #8]
 8005ea6:	b90b      	cbnz	r3, 8005eac <_puts_r+0x10>
 8005ea8:	f7ff ffb0 	bl	8005e0c <__sinit>
 8005eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eae:	07db      	lsls	r3, r3, #31
 8005eb0:	d405      	bmi.n	8005ebe <_puts_r+0x22>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	0598      	lsls	r0, r3, #22
 8005eb6:	d402      	bmi.n	8005ebe <_puts_r+0x22>
 8005eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eba:	f000 f9be 	bl	800623a <__retarget_lock_acquire_recursive>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	0719      	lsls	r1, r3, #28
 8005ec2:	d502      	bpl.n	8005eca <_puts_r+0x2e>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d135      	bne.n	8005f36 <_puts_r+0x9a>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 f8c5 	bl	800605c <__swsetup_r>
 8005ed2:	b380      	cbz	r0, 8005f36 <_puts_r+0x9a>
 8005ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eda:	07da      	lsls	r2, r3, #31
 8005edc:	d405      	bmi.n	8005eea <_puts_r+0x4e>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_puts_r+0x4e>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ee6:	f000 f9a9 	bl	800623c <__retarget_lock_release_recursive>
 8005eea:	4628      	mov	r0, r5
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da04      	bge.n	8005efc <_puts_r+0x60>
 8005ef2:	69a2      	ldr	r2, [r4, #24]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	dc17      	bgt.n	8005f28 <_puts_r+0x8c>
 8005ef8:	290a      	cmp	r1, #10
 8005efa:	d015      	beq.n	8005f28 <_puts_r+0x8c>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	7019      	strb	r1, [r3, #0]
 8005f04:	68a3      	ldr	r3, [r4, #8]
 8005f06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	60a3      	str	r3, [r4, #8]
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d1ed      	bne.n	8005eee <_puts_r+0x52>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da11      	bge.n	8005f3a <_puts_r+0x9e>
 8005f16:	4622      	mov	r2, r4
 8005f18:	210a      	movs	r1, #10
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 f85f 	bl	8005fde <__swbuf_r>
 8005f20:	3001      	adds	r0, #1
 8005f22:	d0d7      	beq.n	8005ed4 <_puts_r+0x38>
 8005f24:	250a      	movs	r5, #10
 8005f26:	e7d7      	b.n	8005ed8 <_puts_r+0x3c>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 f857 	bl	8005fde <__swbuf_r>
 8005f30:	3001      	adds	r0, #1
 8005f32:	d1e7      	bne.n	8005f04 <_puts_r+0x68>
 8005f34:	e7ce      	b.n	8005ed4 <_puts_r+0x38>
 8005f36:	3e01      	subs	r6, #1
 8005f38:	e7e4      	b.n	8005f04 <_puts_r+0x68>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	6022      	str	r2, [r4, #0]
 8005f40:	220a      	movs	r2, #10
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e7ee      	b.n	8005f24 <_puts_r+0x88>
	...

08005f48 <puts>:
 8005f48:	4b02      	ldr	r3, [pc, #8]	@ (8005f54 <puts+0xc>)
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f7ff bfa5 	b.w	8005e9c <_puts_r>
 8005f52:	bf00      	nop
 8005f54:	20000090 	.word	0x20000090

08005f58 <__sread>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f60:	f000 f91c 	bl	800619c <_read_r>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	bfab      	itete	ge
 8005f68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f6c:	181b      	addge	r3, r3, r0
 8005f6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f72:	bfac      	ite	ge
 8005f74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f76:	81a3      	strhlt	r3, [r4, #12]
 8005f78:	bd10      	pop	{r4, pc}

08005f7a <__swrite>:
 8005f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7e:	461f      	mov	r7, r3
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	4605      	mov	r5, r0
 8005f84:	05db      	lsls	r3, r3, #23
 8005f86:	460c      	mov	r4, r1
 8005f88:	4616      	mov	r6, r2
 8005f8a:	d505      	bpl.n	8005f98 <__swrite+0x1e>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f94:	f000 f8f0 	bl	8006178 <_lseek_r>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fae:	f000 b907 	b.w	80061c0 <_write_r>

08005fb2 <__sseek>:
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fba:	f000 f8dd 	bl	8006178 <_lseek_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	bf15      	itete	ne
 8005fc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fce:	81a3      	strheq	r3, [r4, #12]
 8005fd0:	bf18      	it	ne
 8005fd2:	81a3      	strhne	r3, [r4, #12]
 8005fd4:	bd10      	pop	{r4, pc}

08005fd6 <__sclose>:
 8005fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fda:	f000 b8bd 	b.w	8006158 <_close_r>

08005fde <__swbuf_r>:
 8005fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe0:	460e      	mov	r6, r1
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	b118      	cbz	r0, 8005ff0 <__swbuf_r+0x12>
 8005fe8:	6a03      	ldr	r3, [r0, #32]
 8005fea:	b90b      	cbnz	r3, 8005ff0 <__swbuf_r+0x12>
 8005fec:	f7ff ff0e 	bl	8005e0c <__sinit>
 8005ff0:	69a3      	ldr	r3, [r4, #24]
 8005ff2:	60a3      	str	r3, [r4, #8]
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	071a      	lsls	r2, r3, #28
 8005ff8:	d501      	bpl.n	8005ffe <__swbuf_r+0x20>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	b943      	cbnz	r3, 8006010 <__swbuf_r+0x32>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 f82b 	bl	800605c <__swsetup_r>
 8006006:	b118      	cbz	r0, 8006010 <__swbuf_r+0x32>
 8006008:	f04f 37ff 	mov.w	r7, #4294967295
 800600c:	4638      	mov	r0, r7
 800600e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	6922      	ldr	r2, [r4, #16]
 8006014:	b2f6      	uxtb	r6, r6
 8006016:	1a98      	subs	r0, r3, r2
 8006018:	6963      	ldr	r3, [r4, #20]
 800601a:	4637      	mov	r7, r6
 800601c:	4283      	cmp	r3, r0
 800601e:	dc05      	bgt.n	800602c <__swbuf_r+0x4e>
 8006020:	4621      	mov	r1, r4
 8006022:	4628      	mov	r0, r5
 8006024:	f000 fd5c 	bl	8006ae0 <_fflush_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	d1ed      	bne.n	8006008 <__swbuf_r+0x2a>
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	3b01      	subs	r3, #1
 8006030:	60a3      	str	r3, [r4, #8]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	701e      	strb	r6, [r3, #0]
 800603a:	6962      	ldr	r2, [r4, #20]
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	429a      	cmp	r2, r3
 8006040:	d004      	beq.n	800604c <__swbuf_r+0x6e>
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	07db      	lsls	r3, r3, #31
 8006046:	d5e1      	bpl.n	800600c <__swbuf_r+0x2e>
 8006048:	2e0a      	cmp	r6, #10
 800604a:	d1df      	bne.n	800600c <__swbuf_r+0x2e>
 800604c:	4621      	mov	r1, r4
 800604e:	4628      	mov	r0, r5
 8006050:	f000 fd46 	bl	8006ae0 <_fflush_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	d0d9      	beq.n	800600c <__swbuf_r+0x2e>
 8006058:	e7d6      	b.n	8006008 <__swbuf_r+0x2a>
	...

0800605c <__swsetup_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4b29      	ldr	r3, [pc, #164]	@ (8006104 <__swsetup_r+0xa8>)
 8006060:	4605      	mov	r5, r0
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	460c      	mov	r4, r1
 8006066:	b118      	cbz	r0, 8006070 <__swsetup_r+0x14>
 8006068:	6a03      	ldr	r3, [r0, #32]
 800606a:	b90b      	cbnz	r3, 8006070 <__swsetup_r+0x14>
 800606c:	f7ff fece 	bl	8005e0c <__sinit>
 8006070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006074:	0719      	lsls	r1, r3, #28
 8006076:	d422      	bmi.n	80060be <__swsetup_r+0x62>
 8006078:	06da      	lsls	r2, r3, #27
 800607a:	d407      	bmi.n	800608c <__swsetup_r+0x30>
 800607c:	2209      	movs	r2, #9
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	81a3      	strh	r3, [r4, #12]
 800608a:	e033      	b.n	80060f4 <__swsetup_r+0x98>
 800608c:	0758      	lsls	r0, r3, #29
 800608e:	d512      	bpl.n	80060b6 <__swsetup_r+0x5a>
 8006090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006092:	b141      	cbz	r1, 80060a6 <__swsetup_r+0x4a>
 8006094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006098:	4299      	cmp	r1, r3
 800609a:	d002      	beq.n	80060a2 <__swsetup_r+0x46>
 800609c:	4628      	mov	r0, r5
 800609e:	f000 f8d7 	bl	8006250 <_free_r>
 80060a2:	2300      	movs	r3, #0
 80060a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	2300      	movs	r3, #0
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f043 0308 	orr.w	r3, r3, #8
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	b94b      	cbnz	r3, 80060d6 <__swsetup_r+0x7a>
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060cc:	d003      	beq.n	80060d6 <__swsetup_r+0x7a>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 fd52 	bl	8006b7a <__smakebuf_r>
 80060d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060da:	f013 0201 	ands.w	r2, r3, #1
 80060de:	d00a      	beq.n	80060f6 <__swsetup_r+0x9a>
 80060e0:	2200      	movs	r2, #0
 80060e2:	60a2      	str	r2, [r4, #8]
 80060e4:	6962      	ldr	r2, [r4, #20]
 80060e6:	4252      	negs	r2, r2
 80060e8:	61a2      	str	r2, [r4, #24]
 80060ea:	6922      	ldr	r2, [r4, #16]
 80060ec:	b942      	cbnz	r2, 8006100 <__swsetup_r+0xa4>
 80060ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060f2:	d1c5      	bne.n	8006080 <__swsetup_r+0x24>
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
 80060f6:	0799      	lsls	r1, r3, #30
 80060f8:	bf58      	it	pl
 80060fa:	6962      	ldrpl	r2, [r4, #20]
 80060fc:	60a2      	str	r2, [r4, #8]
 80060fe:	e7f4      	b.n	80060ea <__swsetup_r+0x8e>
 8006100:	2000      	movs	r0, #0
 8006102:	e7f7      	b.n	80060f4 <__swsetup_r+0x98>
 8006104:	20000090 	.word	0x20000090

08006108 <memset>:
 8006108:	4603      	mov	r3, r0
 800610a:	4402      	add	r2, r0
 800610c:	4293      	cmp	r3, r2
 800610e:	d100      	bne.n	8006112 <memset+0xa>
 8006110:	4770      	bx	lr
 8006112:	f803 1b01 	strb.w	r1, [r3], #1
 8006116:	e7f9      	b.n	800610c <memset+0x4>

08006118 <strchr>:
 8006118:	4603      	mov	r3, r0
 800611a:	b2c9      	uxtb	r1, r1
 800611c:	4618      	mov	r0, r3
 800611e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006122:	b112      	cbz	r2, 800612a <strchr+0x12>
 8006124:	428a      	cmp	r2, r1
 8006126:	d1f9      	bne.n	800611c <strchr+0x4>
 8006128:	4770      	bx	lr
 800612a:	2900      	cmp	r1, #0
 800612c:	bf18      	it	ne
 800612e:	2000      	movne	r0, #0
 8006130:	4770      	bx	lr

08006132 <strncpy>:
 8006132:	4603      	mov	r3, r0
 8006134:	b510      	push	{r4, lr}
 8006136:	3901      	subs	r1, #1
 8006138:	b132      	cbz	r2, 8006148 <strncpy+0x16>
 800613a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800613e:	3a01      	subs	r2, #1
 8006140:	f803 4b01 	strb.w	r4, [r3], #1
 8006144:	2c00      	cmp	r4, #0
 8006146:	d1f7      	bne.n	8006138 <strncpy+0x6>
 8006148:	2100      	movs	r1, #0
 800614a:	441a      	add	r2, r3
 800614c:	4293      	cmp	r3, r2
 800614e:	d100      	bne.n	8006152 <strncpy+0x20>
 8006150:	bd10      	pop	{r4, pc}
 8006152:	f803 1b01 	strb.w	r1, [r3], #1
 8006156:	e7f9      	b.n	800614c <strncpy+0x1a>

08006158 <_close_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	2300      	movs	r3, #0
 800615c:	4d05      	ldr	r5, [pc, #20]	@ (8006174 <_close_r+0x1c>)
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fa fbdb 	bl	800091e <_close>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_close_r+0x1a>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_close_r+0x1a>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000b54 	.word	0x20000b54

08006178 <_lseek_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	4611      	mov	r1, r2
 8006180:	2200      	movs	r2, #0
 8006182:	4d05      	ldr	r5, [pc, #20]	@ (8006198 <_lseek_r+0x20>)
 8006184:	602a      	str	r2, [r5, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f7fa fbed 	bl	8000966 <_lseek>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_lseek_r+0x1e>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_lseek_r+0x1e>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000b54 	.word	0x20000b54

0800619c <_read_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4604      	mov	r4, r0
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	2200      	movs	r2, #0
 80061a6:	4d05      	ldr	r5, [pc, #20]	@ (80061bc <_read_r+0x20>)
 80061a8:	602a      	str	r2, [r5, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f7fa fb9a 	bl	80008e4 <_read>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_read_r+0x1e>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_read_r+0x1e>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20000b54 	.word	0x20000b54

080061c0 <_write_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	2200      	movs	r2, #0
 80061ca:	4d05      	ldr	r5, [pc, #20]	@ (80061e0 <_write_r+0x20>)
 80061cc:	602a      	str	r2, [r5, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f7f9 ffc4 	bl	800015c <_write>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_write_r+0x1e>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_write_r+0x1e>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000b54 	.word	0x20000b54

080061e4 <__errno>:
 80061e4:	4b01      	ldr	r3, [pc, #4]	@ (80061ec <__errno+0x8>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000090 	.word	0x20000090

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	2600      	movs	r6, #0
 80061f4:	4d0c      	ldr	r5, [pc, #48]	@ (8006228 <__libc_init_array+0x38>)
 80061f6:	4c0d      	ldr	r4, [pc, #52]	@ (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	f000 fd38 	bl	8006c74 <_init>
 8006204:	2600      	movs	r6, #0
 8006206:	4d0a      	ldr	r5, [pc, #40]	@ (8006230 <__libc_init_array+0x40>)
 8006208:	4c0a      	ldr	r4, [pc, #40]	@ (8006234 <__libc_init_array+0x44>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	f855 3b04 	ldr.w	r3, [r5], #4
 8006218:	4798      	blx	r3
 800621a:	3601      	adds	r6, #1
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006222:	4798      	blx	r3
 8006224:	3601      	adds	r6, #1
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	08006f90 	.word	0x08006f90
 800622c:	08006f90 	.word	0x08006f90
 8006230:	08006f90 	.word	0x08006f90
 8006234:	08006f94 	.word	0x08006f94

08006238 <__retarget_lock_init_recursive>:
 8006238:	4770      	bx	lr

0800623a <__retarget_lock_acquire_recursive>:
 800623a:	4770      	bx	lr

0800623c <__retarget_lock_release_recursive>:
 800623c:	4770      	bx	lr

0800623e <strcpy>:
 800623e:	4603      	mov	r3, r0
 8006240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006244:	f803 2b01 	strb.w	r2, [r3], #1
 8006248:	2a00      	cmp	r2, #0
 800624a:	d1f9      	bne.n	8006240 <strcpy+0x2>
 800624c:	4770      	bx	lr
	...

08006250 <_free_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4605      	mov	r5, r0
 8006254:	2900      	cmp	r1, #0
 8006256:	d040      	beq.n	80062da <_free_r+0x8a>
 8006258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625c:	1f0c      	subs	r4, r1, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfb8      	it	lt
 8006262:	18e4      	addlt	r4, r4, r3
 8006264:	f000 f8de 	bl	8006424 <__malloc_lock>
 8006268:	4a1c      	ldr	r2, [pc, #112]	@ (80062dc <_free_r+0x8c>)
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	b933      	cbnz	r3, 800627c <_free_r+0x2c>
 800626e:	6063      	str	r3, [r4, #4]
 8006270:	6014      	str	r4, [r2, #0]
 8006272:	4628      	mov	r0, r5
 8006274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006278:	f000 b8da 	b.w	8006430 <__malloc_unlock>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d908      	bls.n	8006292 <_free_r+0x42>
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	1821      	adds	r1, r4, r0
 8006284:	428b      	cmp	r3, r1
 8006286:	bf01      	itttt	eq
 8006288:	6819      	ldreq	r1, [r3, #0]
 800628a:	685b      	ldreq	r3, [r3, #4]
 800628c:	1809      	addeq	r1, r1, r0
 800628e:	6021      	streq	r1, [r4, #0]
 8006290:	e7ed      	b.n	800626e <_free_r+0x1e>
 8006292:	461a      	mov	r2, r3
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b10b      	cbz	r3, 800629c <_free_r+0x4c>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d9fa      	bls.n	8006292 <_free_r+0x42>
 800629c:	6811      	ldr	r1, [r2, #0]
 800629e:	1850      	adds	r0, r2, r1
 80062a0:	42a0      	cmp	r0, r4
 80062a2:	d10b      	bne.n	80062bc <_free_r+0x6c>
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	4401      	add	r1, r0
 80062a8:	1850      	adds	r0, r2, r1
 80062aa:	4283      	cmp	r3, r0
 80062ac:	6011      	str	r1, [r2, #0]
 80062ae:	d1e0      	bne.n	8006272 <_free_r+0x22>
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	4408      	add	r0, r1
 80062b6:	6010      	str	r0, [r2, #0]
 80062b8:	6053      	str	r3, [r2, #4]
 80062ba:	e7da      	b.n	8006272 <_free_r+0x22>
 80062bc:	d902      	bls.n	80062c4 <_free_r+0x74>
 80062be:	230c      	movs	r3, #12
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	e7d6      	b.n	8006272 <_free_r+0x22>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	1821      	adds	r1, r4, r0
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1809      	addeq	r1, r1, r0
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	6063      	str	r3, [r4, #4]
 80062d6:	6054      	str	r4, [r2, #4]
 80062d8:	e7cb      	b.n	8006272 <_free_r+0x22>
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	20000b60 	.word	0x20000b60

080062e0 <sbrk_aligned>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006320 <sbrk_aligned+0x40>)
 80062e4:	460c      	mov	r4, r1
 80062e6:	6831      	ldr	r1, [r6, #0]
 80062e8:	4605      	mov	r5, r0
 80062ea:	b911      	cbnz	r1, 80062f2 <sbrk_aligned+0x12>
 80062ec:	f000 fca4 	bl	8006c38 <_sbrk_r>
 80062f0:	6030      	str	r0, [r6, #0]
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 fc9f 	bl	8006c38 <_sbrk_r>
 80062fa:	1c43      	adds	r3, r0, #1
 80062fc:	d103      	bne.n	8006306 <sbrk_aligned+0x26>
 80062fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006302:	4620      	mov	r0, r4
 8006304:	bd70      	pop	{r4, r5, r6, pc}
 8006306:	1cc4      	adds	r4, r0, #3
 8006308:	f024 0403 	bic.w	r4, r4, #3
 800630c:	42a0      	cmp	r0, r4
 800630e:	d0f8      	beq.n	8006302 <sbrk_aligned+0x22>
 8006310:	1a21      	subs	r1, r4, r0
 8006312:	4628      	mov	r0, r5
 8006314:	f000 fc90 	bl	8006c38 <_sbrk_r>
 8006318:	3001      	adds	r0, #1
 800631a:	d1f2      	bne.n	8006302 <sbrk_aligned+0x22>
 800631c:	e7ef      	b.n	80062fe <sbrk_aligned+0x1e>
 800631e:	bf00      	nop
 8006320:	20000b5c 	.word	0x20000b5c

08006324 <_malloc_r>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	1ccd      	adds	r5, r1, #3
 800632a:	f025 0503 	bic.w	r5, r5, #3
 800632e:	3508      	adds	r5, #8
 8006330:	2d0c      	cmp	r5, #12
 8006332:	bf38      	it	cc
 8006334:	250c      	movcc	r5, #12
 8006336:	2d00      	cmp	r5, #0
 8006338:	4606      	mov	r6, r0
 800633a:	db01      	blt.n	8006340 <_malloc_r+0x1c>
 800633c:	42a9      	cmp	r1, r5
 800633e:	d904      	bls.n	800634a <_malloc_r+0x26>
 8006340:	230c      	movs	r3, #12
 8006342:	6033      	str	r3, [r6, #0]
 8006344:	2000      	movs	r0, #0
 8006346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006420 <_malloc_r+0xfc>
 800634e:	f000 f869 	bl	8006424 <__malloc_lock>
 8006352:	f8d8 3000 	ldr.w	r3, [r8]
 8006356:	461c      	mov	r4, r3
 8006358:	bb44      	cbnz	r4, 80063ac <_malloc_r+0x88>
 800635a:	4629      	mov	r1, r5
 800635c:	4630      	mov	r0, r6
 800635e:	f7ff ffbf 	bl	80062e0 <sbrk_aligned>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	4604      	mov	r4, r0
 8006366:	d158      	bne.n	800641a <_malloc_r+0xf6>
 8006368:	f8d8 4000 	ldr.w	r4, [r8]
 800636c:	4627      	mov	r7, r4
 800636e:	2f00      	cmp	r7, #0
 8006370:	d143      	bne.n	80063fa <_malloc_r+0xd6>
 8006372:	2c00      	cmp	r4, #0
 8006374:	d04b      	beq.n	800640e <_malloc_r+0xea>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	4639      	mov	r1, r7
 800637a:	4630      	mov	r0, r6
 800637c:	eb04 0903 	add.w	r9, r4, r3
 8006380:	f000 fc5a 	bl	8006c38 <_sbrk_r>
 8006384:	4581      	cmp	r9, r0
 8006386:	d142      	bne.n	800640e <_malloc_r+0xea>
 8006388:	6821      	ldr	r1, [r4, #0]
 800638a:	4630      	mov	r0, r6
 800638c:	1a6d      	subs	r5, r5, r1
 800638e:	4629      	mov	r1, r5
 8006390:	f7ff ffa6 	bl	80062e0 <sbrk_aligned>
 8006394:	3001      	adds	r0, #1
 8006396:	d03a      	beq.n	800640e <_malloc_r+0xea>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	442b      	add	r3, r5
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	f8d8 3000 	ldr.w	r3, [r8]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	bb62      	cbnz	r2, 8006400 <_malloc_r+0xdc>
 80063a6:	f8c8 7000 	str.w	r7, [r8]
 80063aa:	e00f      	b.n	80063cc <_malloc_r+0xa8>
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	1b52      	subs	r2, r2, r5
 80063b0:	d420      	bmi.n	80063f4 <_malloc_r+0xd0>
 80063b2:	2a0b      	cmp	r2, #11
 80063b4:	d917      	bls.n	80063e6 <_malloc_r+0xc2>
 80063b6:	1961      	adds	r1, r4, r5
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	6025      	str	r5, [r4, #0]
 80063bc:	bf18      	it	ne
 80063be:	6059      	strne	r1, [r3, #4]
 80063c0:	6863      	ldr	r3, [r4, #4]
 80063c2:	bf08      	it	eq
 80063c4:	f8c8 1000 	streq.w	r1, [r8]
 80063c8:	5162      	str	r2, [r4, r5]
 80063ca:	604b      	str	r3, [r1, #4]
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f82f 	bl	8006430 <__malloc_unlock>
 80063d2:	f104 000b 	add.w	r0, r4, #11
 80063d6:	1d23      	adds	r3, r4, #4
 80063d8:	f020 0007 	bic.w	r0, r0, #7
 80063dc:	1ac2      	subs	r2, r0, r3
 80063de:	bf1c      	itt	ne
 80063e0:	1a1b      	subne	r3, r3, r0
 80063e2:	50a3      	strne	r3, [r4, r2]
 80063e4:	e7af      	b.n	8006346 <_malloc_r+0x22>
 80063e6:	6862      	ldr	r2, [r4, #4]
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	bf0c      	ite	eq
 80063ec:	f8c8 2000 	streq.w	r2, [r8]
 80063f0:	605a      	strne	r2, [r3, #4]
 80063f2:	e7eb      	b.n	80063cc <_malloc_r+0xa8>
 80063f4:	4623      	mov	r3, r4
 80063f6:	6864      	ldr	r4, [r4, #4]
 80063f8:	e7ae      	b.n	8006358 <_malloc_r+0x34>
 80063fa:	463c      	mov	r4, r7
 80063fc:	687f      	ldr	r7, [r7, #4]
 80063fe:	e7b6      	b.n	800636e <_malloc_r+0x4a>
 8006400:	461a      	mov	r2, r3
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	d1fb      	bne.n	8006400 <_malloc_r+0xdc>
 8006408:	2300      	movs	r3, #0
 800640a:	6053      	str	r3, [r2, #4]
 800640c:	e7de      	b.n	80063cc <_malloc_r+0xa8>
 800640e:	230c      	movs	r3, #12
 8006410:	4630      	mov	r0, r6
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	f000 f80c 	bl	8006430 <__malloc_unlock>
 8006418:	e794      	b.n	8006344 <_malloc_r+0x20>
 800641a:	6005      	str	r5, [r0, #0]
 800641c:	e7d6      	b.n	80063cc <_malloc_r+0xa8>
 800641e:	bf00      	nop
 8006420:	20000b60 	.word	0x20000b60

08006424 <__malloc_lock>:
 8006424:	4801      	ldr	r0, [pc, #4]	@ (800642c <__malloc_lock+0x8>)
 8006426:	f7ff bf08 	b.w	800623a <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	20000b58 	.word	0x20000b58

08006430 <__malloc_unlock>:
 8006430:	4801      	ldr	r0, [pc, #4]	@ (8006438 <__malloc_unlock+0x8>)
 8006432:	f7ff bf03 	b.w	800623c <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	20000b58 	.word	0x20000b58

0800643c <__sfputc_r>:
 800643c:	6893      	ldr	r3, [r2, #8]
 800643e:	b410      	push	{r4}
 8006440:	3b01      	subs	r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	6093      	str	r3, [r2, #8]
 8006446:	da07      	bge.n	8006458 <__sfputc_r+0x1c>
 8006448:	6994      	ldr	r4, [r2, #24]
 800644a:	42a3      	cmp	r3, r4
 800644c:	db01      	blt.n	8006452 <__sfputc_r+0x16>
 800644e:	290a      	cmp	r1, #10
 8006450:	d102      	bne.n	8006458 <__sfputc_r+0x1c>
 8006452:	bc10      	pop	{r4}
 8006454:	f7ff bdc3 	b.w	8005fde <__swbuf_r>
 8006458:	6813      	ldr	r3, [r2, #0]
 800645a:	1c58      	adds	r0, r3, #1
 800645c:	6010      	str	r0, [r2, #0]
 800645e:	7019      	strb	r1, [r3, #0]
 8006460:	4608      	mov	r0, r1
 8006462:	bc10      	pop	{r4}
 8006464:	4770      	bx	lr

08006466 <__sfputs_r>:
 8006466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006468:	4606      	mov	r6, r0
 800646a:	460f      	mov	r7, r1
 800646c:	4614      	mov	r4, r2
 800646e:	18d5      	adds	r5, r2, r3
 8006470:	42ac      	cmp	r4, r5
 8006472:	d101      	bne.n	8006478 <__sfputs_r+0x12>
 8006474:	2000      	movs	r0, #0
 8006476:	e007      	b.n	8006488 <__sfputs_r+0x22>
 8006478:	463a      	mov	r2, r7
 800647a:	4630      	mov	r0, r6
 800647c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006480:	f7ff ffdc 	bl	800643c <__sfputc_r>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d1f3      	bne.n	8006470 <__sfputs_r+0xa>
 8006488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800648c <_vfiprintf_r>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	460d      	mov	r5, r1
 8006492:	4614      	mov	r4, r2
 8006494:	4698      	mov	r8, r3
 8006496:	4606      	mov	r6, r0
 8006498:	b09d      	sub	sp, #116	@ 0x74
 800649a:	b118      	cbz	r0, 80064a4 <_vfiprintf_r+0x18>
 800649c:	6a03      	ldr	r3, [r0, #32]
 800649e:	b90b      	cbnz	r3, 80064a4 <_vfiprintf_r+0x18>
 80064a0:	f7ff fcb4 	bl	8005e0c <__sinit>
 80064a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064a6:	07d9      	lsls	r1, r3, #31
 80064a8:	d405      	bmi.n	80064b6 <_vfiprintf_r+0x2a>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	059a      	lsls	r2, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_vfiprintf_r+0x2a>
 80064b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064b2:	f7ff fec2 	bl	800623a <__retarget_lock_acquire_recursive>
 80064b6:	89ab      	ldrh	r3, [r5, #12]
 80064b8:	071b      	lsls	r3, r3, #28
 80064ba:	d501      	bpl.n	80064c0 <_vfiprintf_r+0x34>
 80064bc:	692b      	ldr	r3, [r5, #16]
 80064be:	b99b      	cbnz	r3, 80064e8 <_vfiprintf_r+0x5c>
 80064c0:	4629      	mov	r1, r5
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff fdca 	bl	800605c <__swsetup_r>
 80064c8:	b170      	cbz	r0, 80064e8 <_vfiprintf_r+0x5c>
 80064ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064cc:	07dc      	lsls	r4, r3, #31
 80064ce:	d504      	bpl.n	80064da <_vfiprintf_r+0x4e>
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	b01d      	add	sp, #116	@ 0x74
 80064d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	0598      	lsls	r0, r3, #22
 80064de:	d4f7      	bmi.n	80064d0 <_vfiprintf_r+0x44>
 80064e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064e2:	f7ff feab 	bl	800623c <__retarget_lock_release_recursive>
 80064e6:	e7f3      	b.n	80064d0 <_vfiprintf_r+0x44>
 80064e8:	2300      	movs	r3, #0
 80064ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ec:	2320      	movs	r3, #32
 80064ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064f2:	2330      	movs	r3, #48	@ 0x30
 80064f4:	f04f 0901 	mov.w	r9, #1
 80064f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80064fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80066a8 <_vfiprintf_r+0x21c>
 8006500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006504:	4623      	mov	r3, r4
 8006506:	469a      	mov	sl, r3
 8006508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800650c:	b10a      	cbz	r2, 8006512 <_vfiprintf_r+0x86>
 800650e:	2a25      	cmp	r2, #37	@ 0x25
 8006510:	d1f9      	bne.n	8006506 <_vfiprintf_r+0x7a>
 8006512:	ebba 0b04 	subs.w	fp, sl, r4
 8006516:	d00b      	beq.n	8006530 <_vfiprintf_r+0xa4>
 8006518:	465b      	mov	r3, fp
 800651a:	4622      	mov	r2, r4
 800651c:	4629      	mov	r1, r5
 800651e:	4630      	mov	r0, r6
 8006520:	f7ff ffa1 	bl	8006466 <__sfputs_r>
 8006524:	3001      	adds	r0, #1
 8006526:	f000 80a7 	beq.w	8006678 <_vfiprintf_r+0x1ec>
 800652a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800652c:	445a      	add	r2, fp
 800652e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006530:	f89a 3000 	ldrb.w	r3, [sl]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 809f 	beq.w	8006678 <_vfiprintf_r+0x1ec>
 800653a:	2300      	movs	r3, #0
 800653c:	f04f 32ff 	mov.w	r2, #4294967295
 8006540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006544:	f10a 0a01 	add.w	sl, sl, #1
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	9307      	str	r3, [sp, #28]
 800654c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006550:	931a      	str	r3, [sp, #104]	@ 0x68
 8006552:	4654      	mov	r4, sl
 8006554:	2205      	movs	r2, #5
 8006556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800655a:	4853      	ldr	r0, [pc, #332]	@ (80066a8 <_vfiprintf_r+0x21c>)
 800655c:	f000 fb7c 	bl	8006c58 <memchr>
 8006560:	9a04      	ldr	r2, [sp, #16]
 8006562:	b9d8      	cbnz	r0, 800659c <_vfiprintf_r+0x110>
 8006564:	06d1      	lsls	r1, r2, #27
 8006566:	bf44      	itt	mi
 8006568:	2320      	movmi	r3, #32
 800656a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800656e:	0713      	lsls	r3, r2, #28
 8006570:	bf44      	itt	mi
 8006572:	232b      	movmi	r3, #43	@ 0x2b
 8006574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006578:	f89a 3000 	ldrb.w	r3, [sl]
 800657c:	2b2a      	cmp	r3, #42	@ 0x2a
 800657e:	d015      	beq.n	80065ac <_vfiprintf_r+0x120>
 8006580:	4654      	mov	r4, sl
 8006582:	2000      	movs	r0, #0
 8006584:	f04f 0c0a 	mov.w	ip, #10
 8006588:	9a07      	ldr	r2, [sp, #28]
 800658a:	4621      	mov	r1, r4
 800658c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006590:	3b30      	subs	r3, #48	@ 0x30
 8006592:	2b09      	cmp	r3, #9
 8006594:	d94b      	bls.n	800662e <_vfiprintf_r+0x1a2>
 8006596:	b1b0      	cbz	r0, 80065c6 <_vfiprintf_r+0x13a>
 8006598:	9207      	str	r2, [sp, #28]
 800659a:	e014      	b.n	80065c6 <_vfiprintf_r+0x13a>
 800659c:	eba0 0308 	sub.w	r3, r0, r8
 80065a0:	fa09 f303 	lsl.w	r3, r9, r3
 80065a4:	4313      	orrs	r3, r2
 80065a6:	46a2      	mov	sl, r4
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	e7d2      	b.n	8006552 <_vfiprintf_r+0xc6>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	1d19      	adds	r1, r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	9103      	str	r1, [sp, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bfbb      	ittet	lt
 80065b8:	425b      	neglt	r3, r3
 80065ba:	f042 0202 	orrlt.w	r2, r2, #2
 80065be:	9307      	strge	r3, [sp, #28]
 80065c0:	9307      	strlt	r3, [sp, #28]
 80065c2:	bfb8      	it	lt
 80065c4:	9204      	strlt	r2, [sp, #16]
 80065c6:	7823      	ldrb	r3, [r4, #0]
 80065c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ca:	d10a      	bne.n	80065e2 <_vfiprintf_r+0x156>
 80065cc:	7863      	ldrb	r3, [r4, #1]
 80065ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80065d0:	d132      	bne.n	8006638 <_vfiprintf_r+0x1ac>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	3402      	adds	r4, #2
 80065d6:	1d1a      	adds	r2, r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	9203      	str	r2, [sp, #12]
 80065dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80066ac <_vfiprintf_r+0x220>
 80065e6:	2203      	movs	r2, #3
 80065e8:	4650      	mov	r0, sl
 80065ea:	7821      	ldrb	r1, [r4, #0]
 80065ec:	f000 fb34 	bl	8006c58 <memchr>
 80065f0:	b138      	cbz	r0, 8006602 <_vfiprintf_r+0x176>
 80065f2:	2240      	movs	r2, #64	@ 0x40
 80065f4:	9b04      	ldr	r3, [sp, #16]
 80065f6:	eba0 000a 	sub.w	r0, r0, sl
 80065fa:	4082      	lsls	r2, r0
 80065fc:	4313      	orrs	r3, r2
 80065fe:	3401      	adds	r4, #1
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006606:	2206      	movs	r2, #6
 8006608:	4829      	ldr	r0, [pc, #164]	@ (80066b0 <_vfiprintf_r+0x224>)
 800660a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800660e:	f000 fb23 	bl	8006c58 <memchr>
 8006612:	2800      	cmp	r0, #0
 8006614:	d03f      	beq.n	8006696 <_vfiprintf_r+0x20a>
 8006616:	4b27      	ldr	r3, [pc, #156]	@ (80066b4 <_vfiprintf_r+0x228>)
 8006618:	bb1b      	cbnz	r3, 8006662 <_vfiprintf_r+0x1d6>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	3307      	adds	r3, #7
 800661e:	f023 0307 	bic.w	r3, r3, #7
 8006622:	3308      	adds	r3, #8
 8006624:	9303      	str	r3, [sp, #12]
 8006626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006628:	443b      	add	r3, r7
 800662a:	9309      	str	r3, [sp, #36]	@ 0x24
 800662c:	e76a      	b.n	8006504 <_vfiprintf_r+0x78>
 800662e:	460c      	mov	r4, r1
 8006630:	2001      	movs	r0, #1
 8006632:	fb0c 3202 	mla	r2, ip, r2, r3
 8006636:	e7a8      	b.n	800658a <_vfiprintf_r+0xfe>
 8006638:	2300      	movs	r3, #0
 800663a:	f04f 0c0a 	mov.w	ip, #10
 800663e:	4619      	mov	r1, r3
 8006640:	3401      	adds	r4, #1
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	4620      	mov	r0, r4
 8006646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800664a:	3a30      	subs	r2, #48	@ 0x30
 800664c:	2a09      	cmp	r2, #9
 800664e:	d903      	bls.n	8006658 <_vfiprintf_r+0x1cc>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0c6      	beq.n	80065e2 <_vfiprintf_r+0x156>
 8006654:	9105      	str	r1, [sp, #20]
 8006656:	e7c4      	b.n	80065e2 <_vfiprintf_r+0x156>
 8006658:	4604      	mov	r4, r0
 800665a:	2301      	movs	r3, #1
 800665c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006660:	e7f0      	b.n	8006644 <_vfiprintf_r+0x1b8>
 8006662:	ab03      	add	r3, sp, #12
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	462a      	mov	r2, r5
 8006668:	4630      	mov	r0, r6
 800666a:	4b13      	ldr	r3, [pc, #76]	@ (80066b8 <_vfiprintf_r+0x22c>)
 800666c:	a904      	add	r1, sp, #16
 800666e:	f3af 8000 	nop.w
 8006672:	4607      	mov	r7, r0
 8006674:	1c78      	adds	r0, r7, #1
 8006676:	d1d6      	bne.n	8006626 <_vfiprintf_r+0x19a>
 8006678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800667a:	07d9      	lsls	r1, r3, #31
 800667c:	d405      	bmi.n	800668a <_vfiprintf_r+0x1fe>
 800667e:	89ab      	ldrh	r3, [r5, #12]
 8006680:	059a      	lsls	r2, r3, #22
 8006682:	d402      	bmi.n	800668a <_vfiprintf_r+0x1fe>
 8006684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006686:	f7ff fdd9 	bl	800623c <__retarget_lock_release_recursive>
 800668a:	89ab      	ldrh	r3, [r5, #12]
 800668c:	065b      	lsls	r3, r3, #25
 800668e:	f53f af1f 	bmi.w	80064d0 <_vfiprintf_r+0x44>
 8006692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006694:	e71e      	b.n	80064d4 <_vfiprintf_r+0x48>
 8006696:	ab03      	add	r3, sp, #12
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	462a      	mov	r2, r5
 800669c:	4630      	mov	r0, r6
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <_vfiprintf_r+0x22c>)
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	f000 f87d 	bl	80067a0 <_printf_i>
 80066a6:	e7e4      	b.n	8006672 <_vfiprintf_r+0x1e6>
 80066a8:	08006f52 	.word	0x08006f52
 80066ac:	08006f58 	.word	0x08006f58
 80066b0:	08006f5c 	.word	0x08006f5c
 80066b4:	00000000 	.word	0x00000000
 80066b8:	08006467 	.word	0x08006467

080066bc <_printf_common>:
 80066bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	4616      	mov	r6, r2
 80066c2:	4698      	mov	r8, r3
 80066c4:	688a      	ldr	r2, [r1, #8]
 80066c6:	690b      	ldr	r3, [r1, #16]
 80066c8:	4607      	mov	r7, r0
 80066ca:	4293      	cmp	r3, r2
 80066cc:	bfb8      	it	lt
 80066ce:	4613      	movlt	r3, r2
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066d6:	460c      	mov	r4, r1
 80066d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066dc:	b10a      	cbz	r2, 80066e2 <_printf_common+0x26>
 80066de:	3301      	adds	r3, #1
 80066e0:	6033      	str	r3, [r6, #0]
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	0699      	lsls	r1, r3, #26
 80066e6:	bf42      	ittt	mi
 80066e8:	6833      	ldrmi	r3, [r6, #0]
 80066ea:	3302      	addmi	r3, #2
 80066ec:	6033      	strmi	r3, [r6, #0]
 80066ee:	6825      	ldr	r5, [r4, #0]
 80066f0:	f015 0506 	ands.w	r5, r5, #6
 80066f4:	d106      	bne.n	8006704 <_printf_common+0x48>
 80066f6:	f104 0a19 	add.w	sl, r4, #25
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	6832      	ldr	r2, [r6, #0]
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	42ab      	cmp	r3, r5
 8006702:	dc2b      	bgt.n	800675c <_printf_common+0xa0>
 8006704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	3b00      	subs	r3, #0
 800670c:	bf18      	it	ne
 800670e:	2301      	movne	r3, #1
 8006710:	0692      	lsls	r2, r2, #26
 8006712:	d430      	bmi.n	8006776 <_printf_common+0xba>
 8006714:	4641      	mov	r1, r8
 8006716:	4638      	mov	r0, r7
 8006718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800671c:	47c8      	blx	r9
 800671e:	3001      	adds	r0, #1
 8006720:	d023      	beq.n	800676a <_printf_common+0xae>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	f003 0306 	and.w	r3, r3, #6
 800672a:	2b04      	cmp	r3, #4
 800672c:	bf14      	ite	ne
 800672e:	2500      	movne	r5, #0
 8006730:	6833      	ldreq	r3, [r6, #0]
 8006732:	f04f 0600 	mov.w	r6, #0
 8006736:	bf08      	it	eq
 8006738:	68e5      	ldreq	r5, [r4, #12]
 800673a:	f104 041a 	add.w	r4, r4, #26
 800673e:	bf08      	it	eq
 8006740:	1aed      	subeq	r5, r5, r3
 8006742:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006746:	bf08      	it	eq
 8006748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800674c:	4293      	cmp	r3, r2
 800674e:	bfc4      	itt	gt
 8006750:	1a9b      	subgt	r3, r3, r2
 8006752:	18ed      	addgt	r5, r5, r3
 8006754:	42b5      	cmp	r5, r6
 8006756:	d11a      	bne.n	800678e <_printf_common+0xd2>
 8006758:	2000      	movs	r0, #0
 800675a:	e008      	b.n	800676e <_printf_common+0xb2>
 800675c:	2301      	movs	r3, #1
 800675e:	4652      	mov	r2, sl
 8006760:	4641      	mov	r1, r8
 8006762:	4638      	mov	r0, r7
 8006764:	47c8      	blx	r9
 8006766:	3001      	adds	r0, #1
 8006768:	d103      	bne.n	8006772 <_printf_common+0xb6>
 800676a:	f04f 30ff 	mov.w	r0, #4294967295
 800676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006772:	3501      	adds	r5, #1
 8006774:	e7c1      	b.n	80066fa <_printf_common+0x3e>
 8006776:	2030      	movs	r0, #48	@ 0x30
 8006778:	18e1      	adds	r1, r4, r3
 800677a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006784:	4422      	add	r2, r4
 8006786:	3302      	adds	r3, #2
 8006788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800678c:	e7c2      	b.n	8006714 <_printf_common+0x58>
 800678e:	2301      	movs	r3, #1
 8006790:	4622      	mov	r2, r4
 8006792:	4641      	mov	r1, r8
 8006794:	4638      	mov	r0, r7
 8006796:	47c8      	blx	r9
 8006798:	3001      	adds	r0, #1
 800679a:	d0e6      	beq.n	800676a <_printf_common+0xae>
 800679c:	3601      	adds	r6, #1
 800679e:	e7d9      	b.n	8006754 <_printf_common+0x98>

080067a0 <_printf_i>:
 80067a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	7e0f      	ldrb	r7, [r1, #24]
 80067a6:	4691      	mov	r9, r2
 80067a8:	2f78      	cmp	r7, #120	@ 0x78
 80067aa:	4680      	mov	r8, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	469a      	mov	sl, r3
 80067b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067b6:	d807      	bhi.n	80067c8 <_printf_i+0x28>
 80067b8:	2f62      	cmp	r7, #98	@ 0x62
 80067ba:	d80a      	bhi.n	80067d2 <_printf_i+0x32>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	f000 80d3 	beq.w	8006968 <_printf_i+0x1c8>
 80067c2:	2f58      	cmp	r7, #88	@ 0x58
 80067c4:	f000 80ba 	beq.w	800693c <_printf_i+0x19c>
 80067c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067d0:	e03a      	b.n	8006848 <_printf_i+0xa8>
 80067d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067d6:	2b15      	cmp	r3, #21
 80067d8:	d8f6      	bhi.n	80067c8 <_printf_i+0x28>
 80067da:	a101      	add	r1, pc, #4	@ (adr r1, 80067e0 <_printf_i+0x40>)
 80067dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067e0:	08006839 	.word	0x08006839
 80067e4:	0800684d 	.word	0x0800684d
 80067e8:	080067c9 	.word	0x080067c9
 80067ec:	080067c9 	.word	0x080067c9
 80067f0:	080067c9 	.word	0x080067c9
 80067f4:	080067c9 	.word	0x080067c9
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	080067c9 	.word	0x080067c9
 8006800:	080067c9 	.word	0x080067c9
 8006804:	080067c9 	.word	0x080067c9
 8006808:	080067c9 	.word	0x080067c9
 800680c:	0800694f 	.word	0x0800694f
 8006810:	08006877 	.word	0x08006877
 8006814:	08006909 	.word	0x08006909
 8006818:	080067c9 	.word	0x080067c9
 800681c:	080067c9 	.word	0x080067c9
 8006820:	08006971 	.word	0x08006971
 8006824:	080067c9 	.word	0x080067c9
 8006828:	08006877 	.word	0x08006877
 800682c:	080067c9 	.word	0x080067c9
 8006830:	080067c9 	.word	0x080067c9
 8006834:	08006911 	.word	0x08006911
 8006838:	6833      	ldr	r3, [r6, #0]
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6032      	str	r2, [r6, #0]
 8006840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006848:	2301      	movs	r3, #1
 800684a:	e09e      	b.n	800698a <_printf_i+0x1ea>
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	6820      	ldr	r0, [r4, #0]
 8006850:	1d19      	adds	r1, r3, #4
 8006852:	6031      	str	r1, [r6, #0]
 8006854:	0606      	lsls	r6, r0, #24
 8006856:	d501      	bpl.n	800685c <_printf_i+0xbc>
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	e003      	b.n	8006864 <_printf_i+0xc4>
 800685c:	0645      	lsls	r5, r0, #25
 800685e:	d5fb      	bpl.n	8006858 <_printf_i+0xb8>
 8006860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006864:	2d00      	cmp	r5, #0
 8006866:	da03      	bge.n	8006870 <_printf_i+0xd0>
 8006868:	232d      	movs	r3, #45	@ 0x2d
 800686a:	426d      	negs	r5, r5
 800686c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006870:	230a      	movs	r3, #10
 8006872:	4859      	ldr	r0, [pc, #356]	@ (80069d8 <_printf_i+0x238>)
 8006874:	e011      	b.n	800689a <_printf_i+0xfa>
 8006876:	6821      	ldr	r1, [r4, #0]
 8006878:	6833      	ldr	r3, [r6, #0]
 800687a:	0608      	lsls	r0, r1, #24
 800687c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006880:	d402      	bmi.n	8006888 <_printf_i+0xe8>
 8006882:	0649      	lsls	r1, r1, #25
 8006884:	bf48      	it	mi
 8006886:	b2ad      	uxthmi	r5, r5
 8006888:	2f6f      	cmp	r7, #111	@ 0x6f
 800688a:	6033      	str	r3, [r6, #0]
 800688c:	bf14      	ite	ne
 800688e:	230a      	movne	r3, #10
 8006890:	2308      	moveq	r3, #8
 8006892:	4851      	ldr	r0, [pc, #324]	@ (80069d8 <_printf_i+0x238>)
 8006894:	2100      	movs	r1, #0
 8006896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800689a:	6866      	ldr	r6, [r4, #4]
 800689c:	2e00      	cmp	r6, #0
 800689e:	bfa8      	it	ge
 80068a0:	6821      	ldrge	r1, [r4, #0]
 80068a2:	60a6      	str	r6, [r4, #8]
 80068a4:	bfa4      	itt	ge
 80068a6:	f021 0104 	bicge.w	r1, r1, #4
 80068aa:	6021      	strge	r1, [r4, #0]
 80068ac:	b90d      	cbnz	r5, 80068b2 <_printf_i+0x112>
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d04b      	beq.n	800694a <_printf_i+0x1aa>
 80068b2:	4616      	mov	r6, r2
 80068b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80068b8:	fb03 5711 	mls	r7, r3, r1, r5
 80068bc:	5dc7      	ldrb	r7, [r0, r7]
 80068be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068c2:	462f      	mov	r7, r5
 80068c4:	42bb      	cmp	r3, r7
 80068c6:	460d      	mov	r5, r1
 80068c8:	d9f4      	bls.n	80068b4 <_printf_i+0x114>
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d10b      	bne.n	80068e6 <_printf_i+0x146>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	07df      	lsls	r7, r3, #31
 80068d2:	d508      	bpl.n	80068e6 <_printf_i+0x146>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	6861      	ldr	r1, [r4, #4]
 80068d8:	4299      	cmp	r1, r3
 80068da:	bfde      	ittt	le
 80068dc:	2330      	movle	r3, #48	@ 0x30
 80068de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068e6:	1b92      	subs	r2, r2, r6
 80068e8:	6122      	str	r2, [r4, #16]
 80068ea:	464b      	mov	r3, r9
 80068ec:	4621      	mov	r1, r4
 80068ee:	4640      	mov	r0, r8
 80068f0:	f8cd a000 	str.w	sl, [sp]
 80068f4:	aa03      	add	r2, sp, #12
 80068f6:	f7ff fee1 	bl	80066bc <_printf_common>
 80068fa:	3001      	adds	r0, #1
 80068fc:	d14a      	bne.n	8006994 <_printf_i+0x1f4>
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	b004      	add	sp, #16
 8006904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	f043 0320 	orr.w	r3, r3, #32
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	2778      	movs	r7, #120	@ 0x78
 8006912:	4832      	ldr	r0, [pc, #200]	@ (80069dc <_printf_i+0x23c>)
 8006914:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	6831      	ldr	r1, [r6, #0]
 800691c:	061f      	lsls	r7, r3, #24
 800691e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006922:	d402      	bmi.n	800692a <_printf_i+0x18a>
 8006924:	065f      	lsls	r7, r3, #25
 8006926:	bf48      	it	mi
 8006928:	b2ad      	uxthmi	r5, r5
 800692a:	6031      	str	r1, [r6, #0]
 800692c:	07d9      	lsls	r1, r3, #31
 800692e:	bf44      	itt	mi
 8006930:	f043 0320 	orrmi.w	r3, r3, #32
 8006934:	6023      	strmi	r3, [r4, #0]
 8006936:	b11d      	cbz	r5, 8006940 <_printf_i+0x1a0>
 8006938:	2310      	movs	r3, #16
 800693a:	e7ab      	b.n	8006894 <_printf_i+0xf4>
 800693c:	4826      	ldr	r0, [pc, #152]	@ (80069d8 <_printf_i+0x238>)
 800693e:	e7e9      	b.n	8006914 <_printf_i+0x174>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	f023 0320 	bic.w	r3, r3, #32
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	e7f6      	b.n	8006938 <_printf_i+0x198>
 800694a:	4616      	mov	r6, r2
 800694c:	e7bd      	b.n	80068ca <_printf_i+0x12a>
 800694e:	6833      	ldr	r3, [r6, #0]
 8006950:	6825      	ldr	r5, [r4, #0]
 8006952:	1d18      	adds	r0, r3, #4
 8006954:	6961      	ldr	r1, [r4, #20]
 8006956:	6030      	str	r0, [r6, #0]
 8006958:	062e      	lsls	r6, r5, #24
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	d501      	bpl.n	8006962 <_printf_i+0x1c2>
 800695e:	6019      	str	r1, [r3, #0]
 8006960:	e002      	b.n	8006968 <_printf_i+0x1c8>
 8006962:	0668      	lsls	r0, r5, #25
 8006964:	d5fb      	bpl.n	800695e <_printf_i+0x1be>
 8006966:	8019      	strh	r1, [r3, #0]
 8006968:	2300      	movs	r3, #0
 800696a:	4616      	mov	r6, r2
 800696c:	6123      	str	r3, [r4, #16]
 800696e:	e7bc      	b.n	80068ea <_printf_i+0x14a>
 8006970:	6833      	ldr	r3, [r6, #0]
 8006972:	2100      	movs	r1, #0
 8006974:	1d1a      	adds	r2, r3, #4
 8006976:	6032      	str	r2, [r6, #0]
 8006978:	681e      	ldr	r6, [r3, #0]
 800697a:	6862      	ldr	r2, [r4, #4]
 800697c:	4630      	mov	r0, r6
 800697e:	f000 f96b 	bl	8006c58 <memchr>
 8006982:	b108      	cbz	r0, 8006988 <_printf_i+0x1e8>
 8006984:	1b80      	subs	r0, r0, r6
 8006986:	6060      	str	r0, [r4, #4]
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	2300      	movs	r3, #0
 800698e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006992:	e7aa      	b.n	80068ea <_printf_i+0x14a>
 8006994:	4632      	mov	r2, r6
 8006996:	4649      	mov	r1, r9
 8006998:	4640      	mov	r0, r8
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	47d0      	blx	sl
 800699e:	3001      	adds	r0, #1
 80069a0:	d0ad      	beq.n	80068fe <_printf_i+0x15e>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	079b      	lsls	r3, r3, #30
 80069a6:	d413      	bmi.n	80069d0 <_printf_i+0x230>
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	4298      	cmp	r0, r3
 80069ae:	bfb8      	it	lt
 80069b0:	4618      	movlt	r0, r3
 80069b2:	e7a6      	b.n	8006902 <_printf_i+0x162>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4632      	mov	r2, r6
 80069b8:	4649      	mov	r1, r9
 80069ba:	4640      	mov	r0, r8
 80069bc:	47d0      	blx	sl
 80069be:	3001      	adds	r0, #1
 80069c0:	d09d      	beq.n	80068fe <_printf_i+0x15e>
 80069c2:	3501      	adds	r5, #1
 80069c4:	68e3      	ldr	r3, [r4, #12]
 80069c6:	9903      	ldr	r1, [sp, #12]
 80069c8:	1a5b      	subs	r3, r3, r1
 80069ca:	42ab      	cmp	r3, r5
 80069cc:	dcf2      	bgt.n	80069b4 <_printf_i+0x214>
 80069ce:	e7eb      	b.n	80069a8 <_printf_i+0x208>
 80069d0:	2500      	movs	r5, #0
 80069d2:	f104 0619 	add.w	r6, r4, #25
 80069d6:	e7f5      	b.n	80069c4 <_printf_i+0x224>
 80069d8:	08006f63 	.word	0x08006f63
 80069dc:	08006f74 	.word	0x08006f74

080069e0 <__sflush_r>:
 80069e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	0716      	lsls	r6, r2, #28
 80069e8:	4605      	mov	r5, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	d454      	bmi.n	8006a98 <__sflush_r+0xb8>
 80069ee:	684b      	ldr	r3, [r1, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dc02      	bgt.n	80069fa <__sflush_r+0x1a>
 80069f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dd48      	ble.n	8006a8c <__sflush_r+0xac>
 80069fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069fc:	2e00      	cmp	r6, #0
 80069fe:	d045      	beq.n	8006a8c <__sflush_r+0xac>
 8006a00:	2300      	movs	r3, #0
 8006a02:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a06:	682f      	ldr	r7, [r5, #0]
 8006a08:	6a21      	ldr	r1, [r4, #32]
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	d030      	beq.n	8006a70 <__sflush_r+0x90>
 8006a0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	0759      	lsls	r1, r3, #29
 8006a14:	d505      	bpl.n	8006a22 <__sflush_r+0x42>
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	1ad2      	subs	r2, r2, r3
 8006a1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a1c:	b10b      	cbz	r3, 8006a22 <__sflush_r+0x42>
 8006a1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a20:	1ad2      	subs	r2, r2, r3
 8006a22:	2300      	movs	r3, #0
 8006a24:	4628      	mov	r0, r5
 8006a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a28:	6a21      	ldr	r1, [r4, #32]
 8006a2a:	47b0      	blx	r6
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	d106      	bne.n	8006a40 <__sflush_r+0x60>
 8006a32:	6829      	ldr	r1, [r5, #0]
 8006a34:	291d      	cmp	r1, #29
 8006a36:	d82b      	bhi.n	8006a90 <__sflush_r+0xb0>
 8006a38:	4a28      	ldr	r2, [pc, #160]	@ (8006adc <__sflush_r+0xfc>)
 8006a3a:	410a      	asrs	r2, r1
 8006a3c:	07d6      	lsls	r6, r2, #31
 8006a3e:	d427      	bmi.n	8006a90 <__sflush_r+0xb0>
 8006a40:	2200      	movs	r2, #0
 8006a42:	6062      	str	r2, [r4, #4]
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	04d9      	lsls	r1, r3, #19
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	d504      	bpl.n	8006a56 <__sflush_r+0x76>
 8006a4c:	1c42      	adds	r2, r0, #1
 8006a4e:	d101      	bne.n	8006a54 <__sflush_r+0x74>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	b903      	cbnz	r3, 8006a56 <__sflush_r+0x76>
 8006a54:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a58:	602f      	str	r7, [r5, #0]
 8006a5a:	b1b9      	cbz	r1, 8006a8c <__sflush_r+0xac>
 8006a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a60:	4299      	cmp	r1, r3
 8006a62:	d002      	beq.n	8006a6a <__sflush_r+0x8a>
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff fbf3 	bl	8006250 <_free_r>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a6e:	e00d      	b.n	8006a8c <__sflush_r+0xac>
 8006a70:	2301      	movs	r3, #1
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b0      	blx	r6
 8006a76:	4602      	mov	r2, r0
 8006a78:	1c50      	adds	r0, r2, #1
 8006a7a:	d1c9      	bne.n	8006a10 <__sflush_r+0x30>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0c6      	beq.n	8006a10 <__sflush_r+0x30>
 8006a82:	2b1d      	cmp	r3, #29
 8006a84:	d001      	beq.n	8006a8a <__sflush_r+0xaa>
 8006a86:	2b16      	cmp	r3, #22
 8006a88:	d11d      	bne.n	8006ac6 <__sflush_r+0xe6>
 8006a8a:	602f      	str	r7, [r5, #0]
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e021      	b.n	8006ad4 <__sflush_r+0xf4>
 8006a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a94:	b21b      	sxth	r3, r3
 8006a96:	e01a      	b.n	8006ace <__sflush_r+0xee>
 8006a98:	690f      	ldr	r7, [r1, #16]
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	d0f6      	beq.n	8006a8c <__sflush_r+0xac>
 8006a9e:	0793      	lsls	r3, r2, #30
 8006aa0:	bf18      	it	ne
 8006aa2:	2300      	movne	r3, #0
 8006aa4:	680e      	ldr	r6, [r1, #0]
 8006aa6:	bf08      	it	eq
 8006aa8:	694b      	ldreq	r3, [r1, #20]
 8006aaa:	1bf6      	subs	r6, r6, r7
 8006aac:	600f      	str	r7, [r1, #0]
 8006aae:	608b      	str	r3, [r1, #8]
 8006ab0:	2e00      	cmp	r6, #0
 8006ab2:	ddeb      	ble.n	8006a8c <__sflush_r+0xac>
 8006ab4:	4633      	mov	r3, r6
 8006ab6:	463a      	mov	r2, r7
 8006ab8:	4628      	mov	r0, r5
 8006aba:	6a21      	ldr	r1, [r4, #32]
 8006abc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ac0:	47e0      	blx	ip
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	dc07      	bgt.n	8006ad6 <__sflush_r+0xf6>
 8006ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ace:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad6:	4407      	add	r7, r0
 8006ad8:	1a36      	subs	r6, r6, r0
 8006ada:	e7e9      	b.n	8006ab0 <__sflush_r+0xd0>
 8006adc:	dfbffffe 	.word	0xdfbffffe

08006ae0 <_fflush_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	b913      	cbnz	r3, 8006af0 <_fflush_r+0x10>
 8006aea:	2500      	movs	r5, #0
 8006aec:	4628      	mov	r0, r5
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	b118      	cbz	r0, 8006afa <_fflush_r+0x1a>
 8006af2:	6a03      	ldr	r3, [r0, #32]
 8006af4:	b90b      	cbnz	r3, 8006afa <_fflush_r+0x1a>
 8006af6:	f7ff f989 	bl	8005e0c <__sinit>
 8006afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f3      	beq.n	8006aea <_fflush_r+0xa>
 8006b02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b04:	07d0      	lsls	r0, r2, #31
 8006b06:	d404      	bmi.n	8006b12 <_fflush_r+0x32>
 8006b08:	0599      	lsls	r1, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <_fflush_r+0x32>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b0e:	f7ff fb94 	bl	800623a <__retarget_lock_acquire_recursive>
 8006b12:	4628      	mov	r0, r5
 8006b14:	4621      	mov	r1, r4
 8006b16:	f7ff ff63 	bl	80069e0 <__sflush_r>
 8006b1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	07da      	lsls	r2, r3, #31
 8006b20:	d4e4      	bmi.n	8006aec <_fflush_r+0xc>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	059b      	lsls	r3, r3, #22
 8006b26:	d4e1      	bmi.n	8006aec <_fflush_r+0xc>
 8006b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b2a:	f7ff fb87 	bl	800623c <__retarget_lock_release_recursive>
 8006b2e:	e7dd      	b.n	8006aec <_fflush_r+0xc>

08006b30 <__swhatbuf_r>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	460c      	mov	r4, r1
 8006b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b38:	4615      	mov	r5, r2
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	461e      	mov	r6, r3
 8006b3e:	b096      	sub	sp, #88	@ 0x58
 8006b40:	da0c      	bge.n	8006b5c <__swhatbuf_r+0x2c>
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	2100      	movs	r1, #0
 8006b46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b4a:	bf14      	ite	ne
 8006b4c:	2340      	movne	r3, #64	@ 0x40
 8006b4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b52:	2000      	movs	r0, #0
 8006b54:	6031      	str	r1, [r6, #0]
 8006b56:	602b      	str	r3, [r5, #0]
 8006b58:	b016      	add	sp, #88	@ 0x58
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	466a      	mov	r2, sp
 8006b5e:	f000 f849 	bl	8006bf4 <_fstat_r>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	dbed      	blt.n	8006b42 <__swhatbuf_r+0x12>
 8006b66:	9901      	ldr	r1, [sp, #4]
 8006b68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b70:	4259      	negs	r1, r3
 8006b72:	4159      	adcs	r1, r3
 8006b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b78:	e7eb      	b.n	8006b52 <__swhatbuf_r+0x22>

08006b7a <__smakebuf_r>:
 8006b7a:	898b      	ldrh	r3, [r1, #12]
 8006b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7e:	079d      	lsls	r5, r3, #30
 8006b80:	4606      	mov	r6, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	d507      	bpl.n	8006b96 <__smakebuf_r+0x1c>
 8006b86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b8a:	6023      	str	r3, [r4, #0]
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	2301      	movs	r3, #1
 8006b90:	6163      	str	r3, [r4, #20]
 8006b92:	b003      	add	sp, #12
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	466a      	mov	r2, sp
 8006b98:	ab01      	add	r3, sp, #4
 8006b9a:	f7ff ffc9 	bl	8006b30 <__swhatbuf_r>
 8006b9e:	9f00      	ldr	r7, [sp, #0]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f7ff fbbd 	bl	8006324 <_malloc_r>
 8006baa:	b948      	cbnz	r0, 8006bc0 <__smakebuf_r+0x46>
 8006bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb0:	059a      	lsls	r2, r3, #22
 8006bb2:	d4ee      	bmi.n	8006b92 <__smakebuf_r+0x18>
 8006bb4:	f023 0303 	bic.w	r3, r3, #3
 8006bb8:	f043 0302 	orr.w	r3, r3, #2
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	e7e2      	b.n	8006b86 <__smakebuf_r+0xc>
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	6020      	str	r0, [r4, #0]
 8006bd0:	b15b      	cbz	r3, 8006bea <__smakebuf_r+0x70>
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd8:	f000 f81e 	bl	8006c18 <_isatty_r>
 8006bdc:	b128      	cbz	r0, 8006bea <__smakebuf_r+0x70>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f023 0303 	bic.w	r3, r3, #3
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	431d      	orrs	r5, r3
 8006bee:	81a5      	strh	r5, [r4, #12]
 8006bf0:	e7cf      	b.n	8006b92 <__smakebuf_r+0x18>
	...

08006bf4 <_fstat_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4d06      	ldr	r5, [pc, #24]	@ (8006c14 <_fstat_r+0x20>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	f7f9 fe97 	bl	8000934 <_fstat>
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	d102      	bne.n	8006c10 <_fstat_r+0x1c>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	b103      	cbz	r3, 8006c10 <_fstat_r+0x1c>
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	bd38      	pop	{r3, r4, r5, pc}
 8006c12:	bf00      	nop
 8006c14:	20000b54 	.word	0x20000b54

08006c18 <_isatty_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4d05      	ldr	r5, [pc, #20]	@ (8006c34 <_isatty_r+0x1c>)
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7f9 fe95 	bl	8000952 <_isatty>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_isatty_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_isatty_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	20000b54 	.word	0x20000b54

08006c38 <_sbrk_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4d05      	ldr	r5, [pc, #20]	@ (8006c54 <_sbrk_r+0x1c>)
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7f9 fe9c 	bl	8000980 <_sbrk>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_sbrk_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_sbrk_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	20000b54 	.word	0x20000b54

08006c58 <memchr>:
 8006c58:	4603      	mov	r3, r0
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	b2c9      	uxtb	r1, r1
 8006c5e:	4402      	add	r2, r0
 8006c60:	4293      	cmp	r3, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	d101      	bne.n	8006c6a <memchr+0x12>
 8006c66:	2000      	movs	r0, #0
 8006c68:	e003      	b.n	8006c72 <memchr+0x1a>
 8006c6a:	7804      	ldrb	r4, [r0, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	428c      	cmp	r4, r1
 8006c70:	d1f6      	bne.n	8006c60 <memchr+0x8>
 8006c72:	bd10      	pop	{r4, pc}

08006c74 <_init>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr

08006c80 <_fini>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr
