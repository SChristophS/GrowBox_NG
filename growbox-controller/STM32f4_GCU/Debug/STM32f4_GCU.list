
STM32f4_GCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c41c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800c5ac  0800c5ac  0000d5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce70  0800ce70  0000e0e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce70  0800ce70  0000de70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce78  0800ce78  0000e0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce78  0800ce78  0000de78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce7c  0800ce7c  0000de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800ce80  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0e8  2**0
                  CONTENTS
 10 .bss          0000555c  200000e8  200000e8  0000e0e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005644  20005644  0000e0e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e35c  00000000  00000000  0000e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048ab  00000000  00000000  0002c474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ba  00000000  00000000  000327d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000606f  00000000  00000000  00033c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecdd  00000000  00000000  00039cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de58f  00000000  00000000  000589d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136f65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a58  00000000  00000000  00136fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c594 	.word	0x0800c594

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	0800c594 	.word	0x0800c594

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	429a      	cmp	r2, r3
 8000584:	d801      	bhi.n	800058a <jsmn_alloc_token+0x1a>
    return NULL;
 8000586:	2300      	movs	r3, #0
 8000588:	e014      	b.n	80005b4 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	1c59      	adds	r1, r3, #1
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	6051      	str	r1, [r2, #4]
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	4413      	add	r3, r2
 800059a:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f04f 32ff 	mov.w	r2, #4294967295
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 80005b2:	697b      	ldr	r3, [r7, #20]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	371c      	adds	r7, #28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	460b      	mov	r3, r1
 80005ce:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	7afa      	ldrb	r2, [r7, #11]
 80005d4:	701a      	strb	r2, [r3, #0]
  token->start = start;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	605a      	str	r2, [r3, #4]
  token->end = end;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	609a      	str	r2, [r3, #8]
  token->size = 0;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000608:	e03f      	b.n	800068a <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b7d      	cmp	r3, #125	@ 0x7d
 8000616:	d045      	beq.n	80006a4 <jsmn_parse_primitive+0xb0>
 8000618:	2b7d      	cmp	r3, #125	@ 0x7d
 800061a:	dc1c      	bgt.n	8000656 <jsmn_parse_primitive+0x62>
 800061c:	2b5d      	cmp	r3, #93	@ 0x5d
 800061e:	d041      	beq.n	80006a4 <jsmn_parse_primitive+0xb0>
 8000620:	2b5d      	cmp	r3, #93	@ 0x5d
 8000622:	dc18      	bgt.n	8000656 <jsmn_parse_primitive+0x62>
 8000624:	2b3a      	cmp	r3, #58	@ 0x3a
 8000626:	dc16      	bgt.n	8000656 <jsmn_parse_primitive+0x62>
 8000628:	2b20      	cmp	r3, #32
 800062a:	da04      	bge.n	8000636 <jsmn_parse_primitive+0x42>
 800062c:	2b0a      	cmp	r3, #10
 800062e:	dc10      	bgt.n	8000652 <jsmn_parse_primitive+0x5e>
 8000630:	2b09      	cmp	r3, #9
 8000632:	da37      	bge.n	80006a4 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000634:	e00f      	b.n	8000656 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8000636:	3b20      	subs	r3, #32
 8000638:	4a31      	ldr	r2, [pc, #196]	@ (8000700 <jsmn_parse_primitive+0x10c>)
 800063a:	fa22 f303 	lsr.w	r3, r2, r3
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d129      	bne.n	80006a4 <jsmn_parse_primitive+0xb0>
      break;
 8000650:	e001      	b.n	8000656 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8000652:	2b0d      	cmp	r3, #13
 8000654:	d026      	beq.n	80006a4 <jsmn_parse_primitive+0xb0>
      break;
 8000656:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b1f      	cmp	r3, #31
 8000664:	d906      	bls.n	8000674 <jsmn_parse_primitive+0x80>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b7e      	cmp	r3, #126	@ 0x7e
 8000672:	d905      	bls.n	8000680 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 800067a:	f06f 0301 	mvn.w	r3, #1
 800067e:	e03a      	b.n	80006f6 <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	d909      	bls.n	80006a8 <jsmn_parse_primitive+0xb4>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1b3      	bne.n	800060a <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80006a2:	e001      	b.n	80006a8 <jsmn_parse_primitive+0xb4>
      goto found;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <jsmn_parse_primitive+0xb6>
found:
 80006a8:	bf00      	nop
  if (tokens == NULL) {
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d106      	bne.n	80006be <jsmn_parse_primitive+0xca>
    parser->pos--;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	601a      	str	r2, [r3, #0]
    return 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e01b      	b.n	80006f6 <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 80006be:	6a3a      	ldr	r2, [r7, #32]
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f7ff ff54 	bl	8000570 <jsmn_alloc_token>
 80006c8:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d105      	bne.n	80006dc <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	e00c      	b.n	80006f6 <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	2108      	movs	r1, #8
 80006e4:	6938      	ldr	r0, [r7, #16]
 80006e6:	f7ff ff6b 	bl	80005c0 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	601a      	str	r2, [r3, #0]
  return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	04001001 	.word	0x04001001

08000704 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000722:	e0ba      	b.n	800089a <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	2b22      	cmp	r3, #34	@ 0x22
 8000734:	d11d      	bne.n	8000772 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <jsmn_parse_string+0x3c>
        return 0;
 800073c:	2300      	movs	r3, #0
 800073e:	e0be      	b.n	80008be <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000742:	6839      	ldr	r1, [r7, #0]
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff ff13 	bl	8000570 <jsmn_alloc_token>
 800074a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000752:	69ba      	ldr	r2, [r7, #24]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	e0af      	b.n	80008be <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2104      	movs	r1, #4
 8000768:	6938      	ldr	r0, [r7, #16]
 800076a:	f7ff ff29 	bl	80005c0 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 800076e:	2300      	movs	r3, #0
 8000770:	e0a5      	b.n	80008be <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000772:	7dfb      	ldrb	r3, [r7, #23]
 8000774:	2b5c      	cmp	r3, #92	@ 0x5c
 8000776:	f040 808b 	bne.w	8000890 <jsmn_parse_string+0x18c>
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	429a      	cmp	r2, r3
 8000784:	f240 8084 	bls.w	8000890 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b75      	cmp	r3, #117	@ 0x75
 800079e:	dc70      	bgt.n	8000882 <jsmn_parse_string+0x17e>
 80007a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80007a2:	da04      	bge.n	80007ae <jsmn_parse_string+0xaa>
 80007a4:	2b22      	cmp	r3, #34	@ 0x22
 80007a6:	d072      	beq.n	800088e <jsmn_parse_string+0x18a>
 80007a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80007aa:	d070      	beq.n	800088e <jsmn_parse_string+0x18a>
 80007ac:	e069      	b.n	8000882 <jsmn_parse_string+0x17e>
 80007ae:	3b5c      	subs	r3, #92	@ 0x5c
 80007b0:	2201      	movs	r2, #1
 80007b2:	409a      	lsls	r2, r3
 80007b4:	4b44      	ldr	r3, [pc, #272]	@ (80008c8 <jsmn_parse_string+0x1c4>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf14      	ite	ne
 80007bc:	2301      	movne	r3, #1
 80007be:	2300      	moveq	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d163      	bne.n	800088e <jsmn_parse_string+0x18a>
 80007c6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d054      	beq.n	8000882 <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
 80007e6:	e037      	b.n	8000858 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007f4:	d906      	bls.n	8000804 <jsmn_parse_string+0x100>
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b39      	cmp	r3, #57	@ 0x39
 8000802:	d921      	bls.n	8000848 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68ba      	ldr	r2, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800080e:	2b40      	cmp	r3, #64	@ 0x40
 8000810:	d906      	bls.n	8000820 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b46      	cmp	r3, #70	@ 0x46
 800081e:	d913      	bls.n	8000848 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800082a:	2b60      	cmp	r3, #96	@ 0x60
 800082c:	d906      	bls.n	800083c <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b66      	cmp	r3, #102	@ 0x66
 800083a:	d905      	bls.n	8000848 <jsmn_parse_string+0x144>
            parser->pos = start;
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8000842:	f06f 0301 	mvn.w	r3, #1
 8000846:	e03a      	b.n	80008be <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	601a      	str	r2, [r3, #0]
             i++) {
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3301      	adds	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	2b03      	cmp	r3, #3
 800085c:	dc0b      	bgt.n	8000876 <jsmn_parse_string+0x172>
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	d906      	bls.n	8000876 <jsmn_parse_string+0x172>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1b8      	bne.n	80007e8 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	601a      	str	r2, [r3, #0]
        break;
 8000880:	e006      	b.n	8000890 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8000888:	f06f 0301 	mvn.w	r3, #1
 800088c:	e017      	b.n	80008be <jsmn_parse_string+0x1ba>
        break;
 800088e:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d907      	bls.n	80008b4 <jsmn_parse_string+0x1b0>
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f47f af38 	bne.w	8000724 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 80008ba:	f06f 0302 	mvn.w	r3, #2
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	01440441 	.word	0x01440441

080008cc <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	@ 0x30
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80008e0:	e176      	b.n	8000bd0 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 80008ee:	7ffb      	ldrb	r3, [r7, #31]
 80008f0:	2b7d      	cmp	r3, #125	@ 0x7d
 80008f2:	d06c      	beq.n	80009ce <jsmn_parse+0x102>
 80008f4:	2b7d      	cmp	r3, #125	@ 0x7d
 80008f6:	f300 8136 	bgt.w	8000b66 <jsmn_parse+0x29a>
 80008fa:	2b7b      	cmp	r3, #123	@ 0x7b
 80008fc:	d030      	beq.n	8000960 <jsmn_parse+0x94>
 80008fe:	2b7b      	cmp	r3, #123	@ 0x7b
 8000900:	f300 8131 	bgt.w	8000b66 <jsmn_parse+0x29a>
 8000904:	2b5d      	cmp	r3, #93	@ 0x5d
 8000906:	d062      	beq.n	80009ce <jsmn_parse+0x102>
 8000908:	2b5d      	cmp	r3, #93	@ 0x5d
 800090a:	f300 812c 	bgt.w	8000b66 <jsmn_parse+0x29a>
 800090e:	2b5b      	cmp	r3, #91	@ 0x5b
 8000910:	d026      	beq.n	8000960 <jsmn_parse+0x94>
 8000912:	2b5b      	cmp	r3, #91	@ 0x5b
 8000914:	f300 8127 	bgt.w	8000b66 <jsmn_parse+0x29a>
 8000918:	2b3a      	cmp	r3, #58	@ 0x3a
 800091a:	f000 80d6 	beq.w	8000aca <jsmn_parse+0x1fe>
 800091e:	2b3a      	cmp	r3, #58	@ 0x3a
 8000920:	f300 8121 	bgt.w	8000b66 <jsmn_parse+0x29a>
 8000924:	2b2c      	cmp	r3, #44	@ 0x2c
 8000926:	f000 80d7 	beq.w	8000ad8 <jsmn_parse+0x20c>
 800092a:	2b2c      	cmp	r3, #44	@ 0x2c
 800092c:	f300 811b 	bgt.w	8000b66 <jsmn_parse+0x29a>
 8000930:	2b20      	cmp	r3, #32
 8000932:	dc11      	bgt.n	8000958 <jsmn_parse+0x8c>
 8000934:	2b09      	cmp	r3, #9
 8000936:	f2c0 8116 	blt.w	8000b66 <jsmn_parse+0x29a>
 800093a:	3b09      	subs	r3, #9
 800093c:	4a91      	ldr	r2, [pc, #580]	@ (8000b84 <jsmn_parse+0x2b8>)
 800093e:	fa22 f303 	lsr.w	r3, r2, r3
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf14      	ite	ne
 800094a:	2301      	movne	r3, #1
 800094c:	2300      	moveq	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	f040 812d 	bne.w	8000bb0 <jsmn_parse+0x2e4>
 8000956:	e106      	b.n	8000b66 <jsmn_parse+0x29a>
 8000958:	2b22      	cmp	r3, #34	@ 0x22
 800095a:	f000 8092 	beq.w	8000a82 <jsmn_parse+0x1b6>
 800095e:	e102      	b.n	8000b66 <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	3301      	adds	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	f000 8123 	beq.w	8000bb4 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 800096e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f7ff fdfc 	bl	8000570 <jsmn_alloc_token>
 8000978:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	e153      	b.n	8000c2e <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098e:	d00a      	beq.n	80009a6 <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80009a6:	7ffb      	ldrb	r3, [r7, #31]
 80009a8:	2b7b      	cmp	r3, #123	@ 0x7b
 80009aa:	d101      	bne.n	80009b0 <jsmn_parse+0xe4>
 80009ac:	2201      	movs	r2, #1
 80009ae:	e000      	b.n	80009b2 <jsmn_parse+0xe6>
 80009b0:	2202      	movs	r2, #2
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	609a      	str	r2, [r3, #8]
      break;
 80009cc:	e0fb      	b.n	8000bc6 <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80f1 	beq.w	8000bb8 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80009d6:	7ffb      	ldrb	r3, [r7, #31]
 80009d8:	2b7d      	cmp	r3, #125	@ 0x7d
 80009da:	d101      	bne.n	80009e0 <jsmn_parse+0x114>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <jsmn_parse+0x116>
 80009e0:	2302      	movs	r3, #2
 80009e2:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ec:	e024      	b.n	8000a38 <jsmn_parse+0x16c>
        token = &tokens[i];
 80009ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d017      	beq.n	8000a32 <jsmn_parse+0x166>
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0a:	d112      	bne.n	8000a32 <jsmn_parse+0x166>
          if (token->type != type) {
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	7fba      	ldrb	r2, [r7, #30]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d002      	beq.n	8000a1c <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 8000a16:	f06f 0301 	mvn.w	r3, #1
 8000a1a:	e108      	b.n	8000c2e <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a22:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	609a      	str	r2, [r3, #8]
          break;
 8000a30:	e005      	b.n	8000a3e <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	3b01      	subs	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	dad7      	bge.n	80009ee <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d119      	bne.n	8000a7a <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 8000a46:	f06f 0301 	mvn.w	r3, #1
 8000a4a:	e0f0      	b.n	8000c2e <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5e:	d009      	beq.n	8000a74 <jsmn_parse+0x1a8>
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d104      	bne.n	8000a74 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a6e:	609a      	str	r2, [r3, #8]
          break;
 8000a70:	bf00      	nop
        }
      }
#endif
      break;
 8000a72:	e0a8      	b.n	8000bc6 <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a76:	3b01      	subs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dae5      	bge.n	8000a4c <jsmn_parse+0x180>
      break;
 8000a80:	e0a1      	b.n	8000bc6 <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8000a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	68b9      	ldr	r1, [r7, #8]
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff fe39 	bl	8000704 <jsmn_parse_string>
 8000a92:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da01      	bge.n	8000a9e <jsmn_parse+0x1d2>
        return r;
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	e0c7      	b.n	8000c2e <jsmn_parse+0x362>
      }
      count++;
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	f000 8086 	beq.w	8000bbc <jsmn_parse+0x2f0>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 8082 	beq.w	8000bbc <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	3201      	adds	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
      }
      break;
 8000ac8:	e078      	b.n	8000bbc <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	609a      	str	r2, [r3, #8]
      break;
 8000ad6:	e076      	b.n	8000bc6 <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d070      	beq.n	8000bc0 <jsmn_parse+0x2f4>
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae6:	d06b      	beq.n	8000bc0 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d063      	beq.n	8000bc0 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d05b      	beq.n	8000bc0 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b10:	e025      	b.n	8000b5e <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d006      	beq.n	8000b2e <jsmn_parse+0x262>
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d114      	bne.n	8000b58 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d00c      	beq.n	8000b58 <jsmn_parse+0x28c>
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d104      	bne.n	8000b58 <jsmn_parse+0x28c>
              parser->toksuper = i;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b52:	609a      	str	r2, [r3, #8]
              break;
 8000b54:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8000b56:	e033      	b.n	8000bc0 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dad6      	bge.n	8000b12 <jsmn_parse+0x246>
      break;
 8000b64:	e02c      	b.n	8000bc0 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8000b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f7ff fd3f 	bl	80005f4 <jsmn_parse_primitive>
 8000b76:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da04      	bge.n	8000b88 <jsmn_parse+0x2bc>
        return r;
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	e055      	b.n	8000c2e <jsmn_parse+0x362>
 8000b82:	bf00      	nop
 8000b84:	00800013 	.word	0x00800013
      }
      count++;
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b96:	d015      	beq.n	8000bc4 <jsmn_parse+0x2f8>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d012      	beq.n	8000bc4 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	3201      	adds	r2, #1
 8000bac:	60da      	str	r2, [r3, #12]
      }
      break;
 8000bae:	e009      	b.n	8000bc4 <jsmn_parse+0x2f8>
      break;
 8000bb0:	bf00      	nop
 8000bb2:	e008      	b.n	8000bc6 <jsmn_parse+0x2fa>
        break;
 8000bb4:	bf00      	nop
 8000bb6:	e006      	b.n	8000bc6 <jsmn_parse+0x2fa>
        break;
 8000bb8:	bf00      	nop
 8000bba:	e004      	b.n	8000bc6 <jsmn_parse+0x2fa>
      break;
 8000bbc:	bf00      	nop
 8000bbe:	e002      	b.n	8000bc6 <jsmn_parse+0x2fa>
      break;
 8000bc0:	bf00      	nop
 8000bc2:	e000      	b.n	8000bc6 <jsmn_parse+0x2fa>
      break;
 8000bc4:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d907      	bls.n	8000bea <jsmn_parse+0x31e>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	4413      	add	r3, r2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f47f ae7c 	bne.w	80008e2 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d01d      	beq.n	8000c2c <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bf8:	e015      	b.n	8000c26 <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d00a      	beq.n	8000c20 <jsmn_parse+0x354>
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d102      	bne.n	8000c20 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 8000c1a:	f06f 0302 	mvn.w	r3, #2
 8000c1e:	e006      	b.n	8000c2e <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8000c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c22:	3b01      	subs	r3, #1
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dae6      	bge.n	8000bfa <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop

08000c38 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c52:	609a      	str	r2, [r3, #8]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c64:	f005 fac6 	bl	80061f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c68:	f000 f85e 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6c:	f000 f986 	bl	8000f7c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c70:	f000 f8c4 	bl	8000dfc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c74:	f000 f92e 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c78:	f000 f956 	bl	8000f28 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000c7c:	f000 f8f4 	bl	8000e68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  printf("\t - W5x00 Project - \r\n");
 8000c80:	481e      	ldr	r0, [pc, #120]	@ (8000cfc <main+0x9c>)
 8000c82:	f00a fc21 	bl	800b4c8 <puts>
  resetAssert();
 8000c86:	f001 faeb 	bl	8002260 <resetAssert>
  HAL_Delay(300);
 8000c8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c8e:	f005 faf3 	bl	8006278 <HAL_Delay>
  resetDeassert();
 8000c92:	f001 faf1 	bl	8002278 <resetDeassert>
  HAL_Delay(300);
 8000c96:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c9a:	f005 faed 	bl	8006278 <HAL_Delay>

  // configure network
  initialize_network();
 8000c9e:	f000 fec1 	bl	8001a24 <initialize_network>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ca2:	f007 fc91 	bl	80085c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AliveTask */
  AliveTaskHandle = osThreadNew(StartAliveTask, NULL, &AliveTask_attributes);
 8000ca6:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <main+0xa0>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4816      	ldr	r0, [pc, #88]	@ (8000d04 <main+0xa4>)
 8000cac:	f007 fcd6 	bl	800865c <osThreadNew>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <main+0xa8>)
 8000cb4:	6013      	str	r3, [r2, #0]

  /* creation of NetworkTask */
  NetworkTaskHandle = osThreadNew(StartNetworkTask, NULL, &NetworkTask_attributes);
 8000cb6:	4a15      	ldr	r2, [pc, #84]	@ (8000d0c <main+0xac>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <main+0xb0>)
 8000cbc:	f007 fcce 	bl	800865c <osThreadNew>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <main+0xb4>)
 8000cc4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if (AliveTaskHandle == NULL) {
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <main+0xa8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <main+0x76>
      printf("Failed to create aliveTask.\r\n");
 8000cce:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <main+0xb8>)
 8000cd0:	f00a fbfa 	bl	800b4c8 <puts>
 8000cd4:	e002      	b.n	8000cdc <main+0x7c>
  } else {
      printf("aliveTask created successfully.\r\n");
 8000cd6:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <main+0xbc>)
 8000cd8:	f00a fbf6 	bl	800b4c8 <puts>
  }

  /* creation of webSocketTask */
  if (NetworkTaskHandle == NULL) {
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <main+0xb4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d103      	bne.n	8000cec <main+0x8c>
      printf("Failed to create NetworkTask.\r\n");
 8000ce4:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <main+0xc0>)
 8000ce6:	f00a fbef 	bl	800b4c8 <puts>
 8000cea:	e002      	b.n	8000cf2 <main+0x92>
  } else {
      printf("NetworkTask created successfully.\r\n");
 8000cec:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <main+0xc4>)
 8000cee:	f00a fbeb 	bl	800b4c8 <puts>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cf2:	f007 fc8d 	bl	8008610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf6:	bf00      	nop
 8000cf8:	e7fd      	b.n	8000cf6 <main+0x96>
 8000cfa:	bf00      	nop
 8000cfc:	0800c5c4 	.word	0x0800c5c4
 8000d00:	0800cddc 	.word	0x0800cddc
 8000d04:	08001415 	.word	0x08001415
 8000d08:	20000244 	.word	0x20000244
 8000d0c:	0800ce00 	.word	0x0800ce00
 8000d10:	08001461 	.word	0x08001461
 8000d14:	20000248 	.word	0x20000248
 8000d18:	0800c5dc 	.word	0x0800c5dc
 8000d1c:	0800c5fc 	.word	0x0800c5fc
 8000d20:	0800c620 	.word	0x0800c620
 8000d24:	0800c640 	.word	0x0800c640

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	@ 0x50
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	2230      	movs	r2, #48	@ 0x30
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00a fcc6 	bl	800b6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <SystemClock_Config+0xcc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	4a27      	ldr	r2, [pc, #156]	@ (8000df4 <SystemClock_Config+0xcc>)
 8000d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <SystemClock_Config+0xd0>)
 8000d72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000da0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000da6:	2307      	movs	r3, #7
 8000da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fd38 	bl	8006824 <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dba:	f000 fd0f 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2105      	movs	r1, #5
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 ff99 	bl	8006d14 <HAL_RCC_ClockConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000de8:	f000 fcf8 	bl	80017dc <Error_Handler>
  }
}
 8000dec:	bf00      	nop
 8000dee:	3750      	adds	r7, #80	@ 0x50
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000

08000dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e02:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <MX_SPI1_Init+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e48:	220a      	movs	r2, #10
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e4e:	f006 f9b3 	bl	80071b8 <HAL_SPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e58:	f000 fcc0 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000104 	.word	0x20000104
 8000e64:	40013000 	.word	0x40013000

08000e68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ed0 <MX_SPI2_Init+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000eb4:	220a      	movs	r2, #10
 8000eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <MX_SPI2_Init+0x64>)
 8000eba:	f006 f97d 	bl	80071b8 <HAL_SPI_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ec4:	f000 fc8a 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000015c 	.word	0x2000015c
 8000ed0:	40003800 	.word	0x40003800

08000ed4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_USART2_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f006 ff0c 	bl	8007d28 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 fc61 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001b4 	.word	0x200001b4
 8000f24:	40004400 	.word	0x40004400

08000f28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <MX_USART3_UART_Init+0x50>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_USART3_UART_Init+0x4c>)
 8000f60:	f006 fee2 	bl	8007d28 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f6a:	f000 fc37 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001fc 	.word	0x200001fc
 8000f78:	40004800 	.word	0x40004800

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	@ 0x30
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	4b9c      	ldr	r3, [pc, #624]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a9b      	ldr	r2, [pc, #620]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b99      	ldr	r3, [pc, #612]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	4b95      	ldr	r3, [pc, #596]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a94      	ldr	r2, [pc, #592]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b92      	ldr	r3, [pc, #584]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b8e      	ldr	r3, [pc, #568]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a8d      	ldr	r2, [pc, #564]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b8b      	ldr	r3, [pc, #556]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b87      	ldr	r3, [pc, #540]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a86      	ldr	r2, [pc, #536]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b84      	ldr	r3, [pc, #528]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b80      	ldr	r3, [pc, #512]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a7f      	ldr	r2, [pc, #508]	@ (8001208 <MX_GPIO_Init+0x28c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b7d      	ldr	r3, [pc, #500]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b79      	ldr	r3, [pc, #484]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a78      	ldr	r2, [pc, #480]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b76      	ldr	r3, [pc, #472]	@ (8001208 <MX_GPIO_Init+0x28c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2108      	movs	r1, #8
 800103e:	4873      	ldr	r0, [pc, #460]	@ (800120c <MX_GPIO_Init+0x290>)
 8001040:	f005 fbbc 	bl	80067bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	4871      	ldr	r0, [pc, #452]	@ (8001210 <MX_GPIO_Init+0x294>)
 800104a:	f005 fbb7 	bl	80067bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, W5500_ChipSelect_Pin|W5500_ChipReset_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2130      	movs	r1, #48	@ 0x30
 8001052:	486f      	ldr	r0, [pc, #444]	@ (8001210 <MX_GPIO_Init+0x294>)
 8001054:	f005 fbb2 	bl	80067bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001058:	2200      	movs	r2, #0
 800105a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800105e:	486d      	ldr	r0, [pc, #436]	@ (8001214 <MX_GPIO_Init+0x298>)
 8001060:	f005 fbac 	bl	80067bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001064:	2308      	movs	r3, #8
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4864      	ldr	r0, [pc, #400]	@ (800120c <MX_GPIO_Init+0x290>)
 800107c:	f005 fa02 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin W5500_ChipSelect_Pin W5500_ChipReset_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|W5500_ChipSelect_Pin|W5500_ChipReset_Pin;
 8001080:	2331      	movs	r3, #49	@ 0x31
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	485e      	ldr	r0, [pc, #376]	@ (8001210 <MX_GPIO_Init+0x294>)
 8001098:	f005 f9f4 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800109c:	2308      	movs	r3, #8
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ac:	2305      	movs	r3, #5
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4856      	ldr	r0, [pc, #344]	@ (8001210 <MX_GPIO_Init+0x294>)
 80010b8:	f005 f9e4 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010bc:	2301      	movs	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010c0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4851      	ldr	r0, [pc, #324]	@ (8001218 <MX_GPIO_Init+0x29c>)
 80010d2:	f005 f9d7 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010d6:	2310      	movs	r3, #16
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e6:	2306      	movs	r3, #6
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4849      	ldr	r0, [pc, #292]	@ (8001218 <MX_GPIO_Init+0x29c>)
 80010f2:	f005 f9c7 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010f6:	2304      	movs	r3, #4
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4844      	ldr	r0, [pc, #272]	@ (800121c <MX_GPIO_Init+0x2a0>)
 800110a:	f005 f9bb 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800110e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001120:	2305      	movs	r3, #5
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	483c      	ldr	r0, [pc, #240]	@ (800121c <MX_GPIO_Init+0x2a0>)
 800112c:	f005 f9aa 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001130:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001134:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4832      	ldr	r0, [pc, #200]	@ (8001214 <MX_GPIO_Init+0x298>)
 800114a:	f005 f99b 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800114e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001160:	2306      	movs	r3, #6
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4829      	ldr	r0, [pc, #164]	@ (8001210 <MX_GPIO_Init+0x294>)
 800116c:	f005 f98a 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4824      	ldr	r0, [pc, #144]	@ (8001218 <MX_GPIO_Init+0x29c>)
 8001186:	f005 f97d 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800118a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800119c:	230a      	movs	r3, #10
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	481c      	ldr	r0, [pc, #112]	@ (8001218 <MX_GPIO_Init+0x29c>)
 80011a8:	f005 f96c 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011ac:	2320      	movs	r3, #32
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4815      	ldr	r0, [pc, #84]	@ (8001214 <MX_GPIO_Init+0x298>)
 80011c0:	f005 f960 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011c4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ca:	2312      	movs	r3, #18
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d6:	2304      	movs	r3, #4
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	480e      	ldr	r0, [pc, #56]	@ (800121c <MX_GPIO_Init+0x2a0>)
 80011e2:	f005 f94f 	bl	8006484 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_GPIO_Init+0x290>)
 80011fc:	f005 f942 	bl	8006484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001200:	bf00      	nop
 8001202:	3730      	adds	r7, #48	@ 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40021000 	.word	0x40021000
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400

08001220 <jsoneq>:

    send(socket, frame, sizeof(frame));
}

// Hilfsfunktion zum Vergleichen von JSON-Schlüsseln
int jsoneq(const char* json, jsmntok_t* tok, const char* s) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d11e      	bne.n	8001272 <jsoneq+0x52>
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7fe ffcb 	bl	80001d0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	4619      	mov	r1, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	4299      	cmp	r1, r3
 800124a:	d112      	bne.n	8001272 <jsoneq+0x52>
        strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1898      	adds	r0, r3, r2
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	461a      	mov	r2, r3
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f00a fa45 	bl	800b6f2 <strncmp>
 8001268:	4603      	mov	r3, r0
    if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <jsoneq+0x52>
        return 0;
 800126e:	2300      	movs	r3, #0
 8001270:	e001      	b.n	8001276 <jsoneq+0x56>
    }
    return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <process_received_data>:


void process_received_data(const char* data) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	f6ad 0d2c 	subw	sp, sp, #2092	@ 0x82c
 8001286:	af02      	add	r7, sp, #8
 8001288:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800128c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001290:	6018      	str	r0, [r3, #0]
    jsmn_parser parser;
    jsmntok_t tokens[JSON_TOKENS];
    int token_count;

    printf("Raw data: %s\n", data); // Ausgabe der empfangenen Rohdaten
 8001292:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001296:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800129a:	6819      	ldr	r1, [r3, #0]
 800129c:	4847      	ldr	r0, [pc, #284]	@ (80013bc <process_received_data+0x13c>)
 800129e:	f00a f8a3 	bl	800b3e8 <iprintf>

    jsmn_init(&parser);
 80012a2:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fcc6 	bl	8000c38 <jsmn_init>
    token_count = jsmn_parse(&parser, data, strlen(data), tokens, JSON_TOKENS);
 80012ac:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80012b0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f7fe ff8b 	bl	80001d0 <strlen>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80012c4:	f6a2 011c 	subw	r1, r2, #2076	@ 0x81c
 80012c8:	f607 000c 	addw	r0, r7, #2060	@ 0x80c
 80012cc:	2280      	movs	r2, #128	@ 0x80
 80012ce:	9200      	str	r2, [sp, #0]
 80012d0:	4622      	mov	r2, r4
 80012d2:	6809      	ldr	r1, [r1, #0]
 80012d4:	f7ff fafa 	bl	80008cc <jsmn_parse>
 80012d8:	f8c7 0818 	str.w	r0, [r7, #2072]	@ 0x818

    if (token_count < 0) {
 80012dc:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da05      	bge.n	80012f0 <process_received_data+0x70>
        printf("Failed to parse JSON: %d\n", token_count);
 80012e4:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 80012e8:	4835      	ldr	r0, [pc, #212]	@ (80013c0 <process_received_data+0x140>)
 80012ea:	f00a f87d 	bl	800b3e8 <iprintf>
        return;
 80012ee:	e060      	b.n	80013b2 <process_received_data+0x132>
    }

    // Prüfe, ob das erste Token ein Objekt ist
    if (token_count < 1 || tokens[0].type != JSMN_OBJECT) {
 80012f0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dd06      	ble.n	8001306 <process_received_data+0x86>
 80012f8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80012fc:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d003      	beq.n	800130e <process_received_data+0x8e>
        printf("Object expected\n");
 8001306:	482f      	ldr	r0, [pc, #188]	@ (80013c4 <process_received_data+0x144>)
 8001308:	f00a f8de 	bl	800b4c8 <puts>
        return;
 800130c:	e051      	b.n	80013b2 <process_received_data+0x132>
    }


    for (int i = 1; i < token_count; i++) {
 800130e:	2301      	movs	r3, #1
 8001310:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8001314:	e047      	b.n	80013a6 <process_received_data+0x126>
        if (jsoneq(data, &tokens[i], "message_type") == 0) {
 8001316:	f107 020c 	add.w	r2, r7, #12
 800131a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	18d1      	adds	r1, r2, r3
 8001322:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001326:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800132a:	4a27      	ldr	r2, [pc, #156]	@ (80013c8 <process_received_data+0x148>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f7ff ff77 	bl	8001220 <jsoneq>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d131      	bne.n	800139c <process_received_data+0x11c>
            printf("Message Type: %.*s\n", tokens[i + 1].end - tokens[i + 1].start, data + tokens[i + 1].start);
 8001338:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800133c:	3301      	adds	r3, #1
 800133e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001342:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4413      	add	r3, r2
 800134a:	3308      	adds	r3, #8
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001352:	3301      	adds	r3, #1
 8001354:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 8001358:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	3304      	adds	r3, #4
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	1ad1      	subs	r1, r2, r3
 8001366:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800136a:	3301      	adds	r3, #1
 800136c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001370:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	3304      	adds	r3, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001382:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	461a      	mov	r2, r3
 800138c:	480f      	ldr	r0, [pc, #60]	@ (80013cc <process_received_data+0x14c>)
 800138e:	f00a f82b 	bl	800b3e8 <iprintf>
            i++;
 8001392:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001396:	3301      	adds	r3, #1
 8001398:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    for (int i = 1; i < token_count; i++) {
 800139c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80013a0:	3301      	adds	r3, #1
 80013a2:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 80013a6:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80013aa:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbb1      	blt.n	8001316 <process_received_data+0x96>
        }
    }
}
 80013b2:	f607 0724 	addw	r7, r7, #2084	@ 0x824
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800c67c 	.word	0x0800c67c
 80013c0:	0800c68c 	.word	0x0800c68c
 80013c4:	0800c6a8 	.word	0x0800c6a8
 80013c8:	0800c6b8 	.word	0x0800c6b8
 80013cc:	0800c6c8 	.word	0x0800c6c8

080013d0 <print_hex>:

// Funktion zum Hex-Dump
void print_hex(const uint8_t *data, uint16_t len) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	81fb      	strh	r3, [r7, #14]
 80013e0:	e00a      	b.n	80013f8 <print_hex+0x28>
        printf("%02X ", data[i]);
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <print_hex+0x40>)
 80013ee:	f009 fffb 	bl	800b3e8 <iprintf>
    for (uint16_t i = 0; i < len; i++) {
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	3301      	adds	r3, #1
 80013f6:	81fb      	strh	r3, [r7, #14]
 80013f8:	89fa      	ldrh	r2, [r7, #14]
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3f0      	bcc.n	80013e2 <print_hex+0x12>
    }
    printf("\n");
 8001400:	200a      	movs	r0, #10
 8001402:	f00a f803 	bl	800b40c <putchar>
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	0800c6dc 	.word	0x0800c6dc

08001414 <StartAliveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAliveTask */
void StartAliveTask(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    printf("ToggleLED\r\n");
 800141c:	480e      	ldr	r0, [pc, #56]	@ (8001458 <StartAliveTask+0x44>)
 800141e:	f00a f853 	bl	800b4c8 <puts>
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001422:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001426:	480d      	ldr	r0, [pc, #52]	@ (800145c <StartAliveTask+0x48>)
 8001428:	f005 f9e1 	bl	80067ee <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800142c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001430:	480a      	ldr	r0, [pc, #40]	@ (800145c <StartAliveTask+0x48>)
 8001432:	f005 f9dc 	bl	80067ee <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001436:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143a:	4808      	ldr	r0, [pc, #32]	@ (800145c <StartAliveTask+0x48>)
 800143c:	f005 f9d7 	bl	80067ee <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001440:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <StartAliveTask+0x48>)
 8001446:	f005 f9d2 	bl	80067ee <HAL_GPIO_TogglePin>

		//osDelay(999); // Warte 1 Sekunde
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 800144a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800144e:	f008 f937 	bl	80096c0 <vTaskDelay>
	    printf("ToggleLED\r\n");
 8001452:	bf00      	nop
 8001454:	e7e2      	b.n	800141c <StartAliveTask+0x8>
 8001456:	bf00      	nop
 8001458:	0800c6e4 	.word	0x0800c6e4
 800145c:	40020c00 	.word	0x40020c00

08001460 <StartNetworkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNetworkTask */
void StartNetworkTask(void *argument)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b08f      	sub	sp, #60	@ 0x3c
 8001464:	af04      	add	r7, sp, #16
 8001466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartwebSocketTask */
	printf("StartwebSocketTask\r\n");
 8001468:	48bc      	ldr	r0, [pc, #752]	@ (800175c <StartNetworkTask+0x2fc>)
 800146a:	f00a f82d 	bl	800b4c8 <puts>
	// otherwise the task freeze
    uint8_t *buf = (uint8_t *)malloc(DATA_BUF_SIZE);
 800146e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001472:	f009 fe39 	bl	800b0e8 <malloc>
 8001476:	4603      	mov	r3, r0
 8001478:	61fb      	str	r3, [r7, #28]
    if (buf == NULL) {
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <StartNetworkTask+0x28>
        printf("Failed to allocate memory for buffer\n");
 8001480:	48b7      	ldr	r0, [pc, #732]	@ (8001760 <StartNetworkTask+0x300>)
 8001482:	f00a f821 	bl	800b4c8 <puts>
        return;
 8001486:	e166      	b.n	8001756 <StartNetworkTask+0x2f6>
    }

  uint8_t destip[4] = {192, 168, 178, 25}; // Beispiel-IP-Adresse
 8001488:	4bb6      	ldr	r3, [pc, #728]	@ (8001764 <StartNetworkTask+0x304>)
 800148a:	60fb      	str	r3, [r7, #12]
  uint16_t destport = 8085; // port
 800148c:	f641 7395 	movw	r3, #8085	@ 0x1f95
 8001490:	837b      	strh	r3, [r7, #26]

  //uint32_t last_ping_time = 0;
  static uint16_t any_port = 50000;
  uint8_t currentSocketStatus = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	767b      	strb	r3, [r7, #25]

  int websocket_upgraded = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {

      currentSocketStatus = getSn_SR(SOCK_DHCP);
 800149a:	f44f 705a 	mov.w	r0, #872	@ 0x368
 800149e:	f002 ff0b 	bl	80042b8 <WIZCHIP_READ>
 80014a2:	4603      	mov	r3, r0
 80014a4:	767b      	strb	r3, [r7, #25]
	  //printf("Status of Socket %d is: %d\r\n", SOCK_DHCP, currentSocketStatus);

	  switch (currentSocketStatus) {
 80014a6:	7e7b      	ldrb	r3, [r7, #25]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d06f      	beq.n	800158c <StartNetworkTask+0x12c>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f2c0 8146 	blt.w	800173e <StartNetworkTask+0x2de>
 80014b2:	2b42      	cmp	r3, #66	@ 0x42
 80014b4:	f300 8143 	bgt.w	800173e <StartNetworkTask+0x2de>
 80014b8:	2b13      	cmp	r3, #19
 80014ba:	f2c0 8140 	blt.w	800173e <StartNetworkTask+0x2de>
 80014be:	3b13      	subs	r3, #19
 80014c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80014c2:	f200 813c 	bhi.w	800173e <StartNetworkTask+0x2de>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <StartNetworkTask+0x6c>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080015cf 	.word	0x080015cf
 80014d0:	08001617 	.word	0x08001617
 80014d4:	0800173f 	.word	0x0800173f
 80014d8:	0800173f 	.word	0x0800173f
 80014dc:	0800161f 	.word	0x0800161f
 80014e0:	0800173f 	.word	0x0800173f
 80014e4:	0800173f 	.word	0x0800173f
 80014e8:	0800173f 	.word	0x0800173f
 80014ec:	0800173f 	.word	0x0800173f
 80014f0:	0800171f 	.word	0x0800171f
 80014f4:	0800173f 	.word	0x0800173f
 80014f8:	0800173f 	.word	0x0800173f
 80014fc:	0800173f 	.word	0x0800173f
 8001500:	0800173f 	.word	0x0800173f
 8001504:	0800173f 	.word	0x0800173f
 8001508:	08001727 	.word	0x08001727
 800150c:	0800173f 	.word	0x0800173f
 8001510:	0800173f 	.word	0x0800173f
 8001514:	0800173f 	.word	0x0800173f
 8001518:	0800173f 	.word	0x0800173f
 800151c:	0800173f 	.word	0x0800173f
 8001520:	0800173f 	.word	0x0800173f
 8001524:	0800173f 	.word	0x0800173f
 8001528:	0800173f 	.word	0x0800173f
 800152c:	0800173f 	.word	0x0800173f
 8001530:	0800173f 	.word	0x0800173f
 8001534:	0800173f 	.word	0x0800173f
 8001538:	0800173f 	.word	0x0800173f
 800153c:	0800173f 	.word	0x0800173f
 8001540:	0800173f 	.word	0x0800173f
 8001544:	0800173f 	.word	0x0800173f
 8001548:	0800172f 	.word	0x0800172f
 800154c:	0800173f 	.word	0x0800173f
 8001550:	0800173f 	.word	0x0800173f
 8001554:	0800173f 	.word	0x0800173f
 8001558:	0800173f 	.word	0x0800173f
 800155c:	0800173f 	.word	0x0800173f
 8001560:	0800173f 	.word	0x0800173f
 8001564:	0800173f 	.word	0x0800173f
 8001568:	0800173f 	.word	0x0800173f
 800156c:	0800173f 	.word	0x0800173f
 8001570:	0800173f 	.word	0x0800173f
 8001574:	0800173f 	.word	0x0800173f
 8001578:	0800173f 	.word	0x0800173f
 800157c:	0800173f 	.word	0x0800173f
 8001580:	0800173f 	.word	0x0800173f
 8001584:	0800173f 	.word	0x0800173f
 8001588:	08001737 	.word	0x08001737
	      case SOCK_CLOSED:
	         printf("%d:Socket closed, reopening...\r\n", SOCK_DHCP);
 800158c:	2103      	movs	r1, #3
 800158e:	4876      	ldr	r0, [pc, #472]	@ (8001768 <StartNetworkTask+0x308>)
 8001590:	f009 ff2a 	bl	800b3e8 <iprintf>

	         if((socket(SOCK_DHCP, Sn_MR_TCP, any_port++, 0x00)) != SOCK_DHCP)
 8001594:	4b75      	ldr	r3, [pc, #468]	@ (800176c <StartNetworkTask+0x30c>)
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	1c53      	adds	r3, r2, #1
 800159a:	b299      	uxth	r1, r3
 800159c:	4b73      	ldr	r3, [pc, #460]	@ (800176c <StartNetworkTask+0x30c>)
 800159e:	8019      	strh	r1, [r3, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	2101      	movs	r1, #1
 80015a4:	2003      	movs	r0, #3
 80015a6:	f003 f96d 	bl	8004884 <socket>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d009      	beq.n	80015c4 <StartNetworkTask+0x164>
	         {
	            if(any_port == 0xffff) any_port = 50000;
 80015b0:	4b6e      	ldr	r3, [pc, #440]	@ (800176c <StartNetworkTask+0x30c>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d103      	bne.n	80015c4 <StartNetworkTask+0x164>
 80015bc:	4b6b      	ldr	r3, [pc, #428]	@ (800176c <StartNetworkTask+0x30c>)
 80015be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80015c2:	801a      	strh	r2, [r3, #0]
	         }
	         printf("%d:Socket opened\r\n", SOCK_DHCP);
 80015c4:	2103      	movs	r1, #3
 80015c6:	486a      	ldr	r0, [pc, #424]	@ (8001770 <StartNetworkTask+0x310>)
 80015c8:	f009 ff0e 	bl	800b3e8 <iprintf>
	         break;
 80015cc:	e0be      	b.n	800174c <StartNetworkTask+0x2ec>

	      case SOCK_INIT:
	          printf("Socket is initialized.\r\n");
 80015ce:	4869      	ldr	r0, [pc, #420]	@ (8001774 <StartNetworkTask+0x314>)
 80015d0:	f009 ff7a 	bl	800b4c8 <puts>

	          printf("%d:Try to connect to the %d.%d.%d.%d : %d\r\n", SOCK_DHCP, destip[0], destip[1], destip[2], destip[3], destport);
 80015d4:	7b3b      	ldrb	r3, [r7, #12]
 80015d6:	4618      	mov	r0, r3
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	461c      	mov	r4, r3
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	461a      	mov	r2, r3
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	4619      	mov	r1, r3
 80015e4:	8b7b      	ldrh	r3, [r7, #26]
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	9101      	str	r1, [sp, #4]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	4623      	mov	r3, r4
 80015ee:	4602      	mov	r2, r0
 80015f0:	2103      	movs	r1, #3
 80015f2:	4861      	ldr	r0, [pc, #388]	@ (8001778 <StartNetworkTask+0x318>)
 80015f4:	f009 fef8 	bl	800b3e8 <iprintf>

	          if(connect(SOCK_DHCP, destip, destport) != SOCK_OK){
 80015f8:	8b7a      	ldrh	r2, [r7, #26]
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4619      	mov	r1, r3
 8001600:	2003      	movs	r0, #3
 8001602:	f003 fac1 	bl	8004b88 <connect>
 8001606:	4603      	mov	r3, r0
 8001608:	2b01      	cmp	r3, #1
 800160a:	f000 809e 	beq.w	800174a <StartNetworkTask+0x2ea>
	        	  printf("PROBLEM\r\n");
 800160e:	485b      	ldr	r0, [pc, #364]	@ (800177c <StartNetworkTask+0x31c>)
 8001610:	f009 ff5a 	bl	800b4c8 <puts>
	          }

	          break;
 8001614:	e099      	b.n	800174a <StartNetworkTask+0x2ea>
	      case SOCK_LISTEN:
	          printf("Socket is in listen state.\n");
 8001616:	485a      	ldr	r0, [pc, #360]	@ (8001780 <StartNetworkTask+0x320>)
 8001618:	f009 ff56 	bl	800b4c8 <puts>
	          break;
 800161c:	e096      	b.n	800174c <StartNetworkTask+0x2ec>




	      case SOCK_ESTABLISHED:
	          printf("Socket is established.\r\n");
 800161e:	4859      	ldr	r0, [pc, #356]	@ (8001784 <StartNetworkTask+0x324>)
 8001620:	f009 ff52 	bl	800b4c8 <puts>



	          if (getSn_IR(SOCK_DHCP) & Sn_IR_CON) {
 8001624:	f44f 701a 	mov.w	r0, #616	@ 0x268
 8001628:	f002 fe46 	bl	80042b8 <WIZCHIP_READ>
 800162c:	4603      	mov	r3, r0
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d016      	beq.n	8001664 <StartNetworkTask+0x204>
	              printf("%d: Connected to - %d.%d.%d.%d : %d\r\n", SOCK_DHCP, destip[0], destip[1], destip[2], destip[3], destport);
 8001636:	7b3b      	ldrb	r3, [r7, #12]
 8001638:	4618      	mov	r0, r3
 800163a:	7b7b      	ldrb	r3, [r7, #13]
 800163c:	461c      	mov	r4, r3
 800163e:	7bbb      	ldrb	r3, [r7, #14]
 8001640:	461a      	mov	r2, r3
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	4619      	mov	r1, r3
 8001646:	8b7b      	ldrh	r3, [r7, #26]
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	9101      	str	r1, [sp, #4]
 800164c:	9200      	str	r2, [sp, #0]
 800164e:	4623      	mov	r3, r4
 8001650:	4602      	mov	r2, r0
 8001652:	2103      	movs	r1, #3
 8001654:	484c      	ldr	r0, [pc, #304]	@ (8001788 <StartNetworkTask+0x328>)
 8001656:	f009 fec7 	bl	800b3e8 <iprintf>
	              setSn_IR(SOCK_DHCP, Sn_IR_CON);
 800165a:	2101      	movs	r1, #1
 800165c:	f44f 701a 	mov.w	r0, #616	@ 0x268
 8001660:	f002 fe76 	bl	8004350 <WIZCHIP_WRITE>
//	              //upgrade_to_websocket(SOCK_DHCP);
	          }



              if (!websocket_upgraded) {
 8001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001666:	2b00      	cmp	r3, #0
 8001668:	d111      	bne.n	800168e <StartNetworkTask+0x22e>
                  if (upgrade_to_websocket(SOCK_DHCP) == 0) {
 800166a:	2003      	movs	r0, #3
 800166c:	f000 fa5c 	bl	8001b28 <upgrade_to_websocket>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d105      	bne.n	8001682 <StartNetworkTask+0x222>
                      printf("WebSocket upgrade successful.\n");
 8001676:	4845      	ldr	r0, [pc, #276]	@ (800178c <StartNetworkTask+0x32c>)
 8001678:	f009 ff26 	bl	800b4c8 <puts>
                      websocket_upgraded = 1; // Upgrade als durchgeführt markieren
 800167c:	2301      	movs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001680:	e005      	b.n	800168e <StartNetworkTask+0x22e>
                  } else {
                      printf("WebSocket upgrade failed.\n");
 8001682:	4843      	ldr	r0, [pc, #268]	@ (8001790 <StartNetworkTask+0x330>)
 8001684:	f009 ff20 	bl	800b4c8 <puts>
                      close(SOCK_DHCP);
 8001688:	2003      	movs	r0, #3
 800168a:	f003 fa0f 	bl	8004aac <close>
//              }


              // Empfang von WebSocket-Daten
              int32_t ret;
              uint16_t size = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	847b      	strh	r3, [r7, #34]	@ 0x22

              if ((size = getSn_RX_RSR(SOCK_DHCP)) > 0) {
 8001692:	2003      	movs	r0, #3
 8001694:	f002 ffb3 	bl	80045fe <getSn_RX_RSR>
 8001698:	4603      	mov	r3, r0
 800169a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800169c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d039      	beq.n	8001716 <StartNetworkTask+0x2b6>
                  if (size > DATA_BUF_SIZE - 1) size = DATA_BUF_SIZE - 1; // Reserve 1 byte for null termination
 80016a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016a8:	d302      	bcc.n	80016b0 <StartNetworkTask+0x250>
 80016aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016ae:	847b      	strh	r3, [r7, #34]	@ 0x22

                  // Clear the buffer before receiving data
                  memset(buf, 0, DATA_BUF_SIZE);
 80016b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016b4:	2100      	movs	r1, #0
 80016b6:	69f8      	ldr	r0, [r7, #28]
 80016b8:	f00a f806 	bl	800b6c8 <memset>

                  ret = recv(SOCK_DHCP, buf, size);
 80016bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016be:	461a      	mov	r2, r3
 80016c0:	69f9      	ldr	r1, [r7, #28]
 80016c2:	2003      	movs	r0, #3
 80016c4:	f003 fc34 	bl	8004f30 <recv>
 80016c8:	6178      	str	r0, [r7, #20]
                  if (ret <= 0) {
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dc06      	bgt.n	80016de <StartNetworkTask+0x27e>
                      printf("Error receiving data. Socket closed.\n");
 80016d0:	4830      	ldr	r0, [pc, #192]	@ (8001794 <StartNetworkTask+0x334>)
 80016d2:	f009 fef9 	bl	800b4c8 <puts>
                      close(SOCK_DHCP);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f003 f9e8 	bl	8004aac <close>
 80016dc:	e01b      	b.n	8001716 <StartNetworkTask+0x2b6>
                  } else {
                      buf[ret] = '\0'; // Null termination
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
                      printf("Empfangene Nachricht: %s\r\n", buf);
 80016e8:	69f9      	ldr	r1, [r7, #28]
 80016ea:	482b      	ldr	r0, [pc, #172]	@ (8001798 <StartNetworkTask+0x338>)
 80016ec:	f009 fe7c 	bl	800b3e8 <iprintf>

                      // Print hex dump of the received data
                      printf("Hex-Dump der empfangenen Daten: ");
 80016f0:	482a      	ldr	r0, [pc, #168]	@ (800179c <StartNetworkTask+0x33c>)
 80016f2:	f009 fe79 	bl	800b3e8 <iprintf>
                      print_hex(buf, ret);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	69f8      	ldr	r0, [r7, #28]
 80016fe:	f7ff fe67 	bl	80013d0 <print_hex>

                      // Skip the first two bytes which might be WebSocket protocol headers
                      char *payload = (char *)(buf + 2);
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3302      	adds	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
                      printf("Bereinigte Nachricht: %s\r\n", payload);
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	4825      	ldr	r0, [pc, #148]	@ (80017a0 <StartNetworkTask+0x340>)
 800170c:	f009 fe6c 	bl	800b3e8 <iprintf>

                      process_received_data(payload);
 8001710:	6938      	ldr	r0, [r7, #16]
 8001712:	f7ff fdb5 	bl	8001280 <process_received_data>

                  }
              }
              free(buf);
 8001716:	69f8      	ldr	r0, [r7, #28]
 8001718:	f009 fcee 	bl	800b0f8 <free>



	          break;
 800171c:	e016      	b.n	800174c <StartNetworkTask+0x2ec>
	      case SOCK_CLOSE_WAIT:
	          printf("Socket is closing.\n");
 800171e:	4821      	ldr	r0, [pc, #132]	@ (80017a4 <StartNetworkTask+0x344>)
 8001720:	f009 fed2 	bl	800b4c8 <puts>
	          break;
 8001724:	e012      	b.n	800174c <StartNetworkTask+0x2ec>
	      case SOCK_UDP:
	          printf("Socket is in UDP mode.\n");
 8001726:	4820      	ldr	r0, [pc, #128]	@ (80017a8 <StartNetworkTask+0x348>)
 8001728:	f009 fece 	bl	800b4c8 <puts>
	          break;
 800172c:	e00e      	b.n	800174c <StartNetworkTask+0x2ec>
	      case SOCK_IPRAW:
	          printf("Socket is in IP RAW mode.\n");
 800172e:	481f      	ldr	r0, [pc, #124]	@ (80017ac <StartNetworkTask+0x34c>)
 8001730:	f009 feca 	bl	800b4c8 <puts>
	          break;
 8001734:	e00a      	b.n	800174c <StartNetworkTask+0x2ec>
	      case SOCK_MACRAW:
	          printf("Socket is in MAC RAW mode.\n");
 8001736:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <StartNetworkTask+0x350>)
 8001738:	f009 fec6 	bl	800b4c8 <puts>
	          break;
 800173c:	e006      	b.n	800174c <StartNetworkTask+0x2ec>
	      default:
	          printf("Unknown socket status: %d\n", currentSocketStatus);
 800173e:	7e7b      	ldrb	r3, [r7, #25]
 8001740:	4619      	mov	r1, r3
 8001742:	481c      	ldr	r0, [pc, #112]	@ (80017b4 <StartNetworkTask+0x354>)
 8001744:	f009 fe50 	bl	800b3e8 <iprintf>
	          break;
 8001748:	e000      	b.n	800174c <StartNetworkTask+0x2ec>
	          break;
 800174a:	bf00      	nop
	  }




	  vTaskDelay(1000 / portTICK_PERIOD_MS); // Vermeide eine enge Schleife
 800174c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001750:	f007 ffb6 	bl	80096c0 <vTaskDelay>
      currentSocketStatus = getSn_SR(SOCK_DHCP);
 8001754:	e6a1      	b.n	800149a <StartNetworkTask+0x3a>
//    }

//    osDelay(100); // Vermeide eine enge Schleife

  /* USER CODE END StartNetworkTask */
}
 8001756:	372c      	adds	r7, #44	@ 0x2c
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	0800c6f0 	.word	0x0800c6f0
 8001760:	0800c704 	.word	0x0800c704
 8001764:	19b2a8c0 	.word	0x19b2a8c0
 8001768:	0800c72c 	.word	0x0800c72c
 800176c:	20000000 	.word	0x20000000
 8001770:	0800c750 	.word	0x0800c750
 8001774:	0800c764 	.word	0x0800c764
 8001778:	0800c77c 	.word	0x0800c77c
 800177c:	0800c7a8 	.word	0x0800c7a8
 8001780:	0800c7b4 	.word	0x0800c7b4
 8001784:	0800c7d0 	.word	0x0800c7d0
 8001788:	0800c7e8 	.word	0x0800c7e8
 800178c:	0800c810 	.word	0x0800c810
 8001790:	0800c830 	.word	0x0800c830
 8001794:	0800c84c 	.word	0x0800c84c
 8001798:	0800c874 	.word	0x0800c874
 800179c:	0800c890 	.word	0x0800c890
 80017a0:	0800c8b4 	.word	0x0800c8b4
 80017a4:	0800c8d0 	.word	0x0800c8d0
 80017a8:	0800c8e4 	.word	0x0800c8e4
 80017ac:	0800c8fc 	.word	0x0800c8fc
 80017b0:	0800c918 	.word	0x0800c918
 80017b4:	0800c934 	.word	0x0800c934

080017b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ca:	f004 fd35 	bl	8006238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40010000 	.word	0x40010000

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <Error_Handler+0x8>

080017e8 <GetSTM32UID>:
uint8_t Domain_name[] = "www.google.com";

uint8_t flag_process_dhcp_success = OFF;
uint8_t flag_process_dns_success = OFF;

void GetSTM32UID(char *uidStr) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
    uint32_t uid[3];
    uid[0] = *(uint32_t *)0x1FFF7A10;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <GetSTM32UID+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
    uid[1] = *(uint32_t *)0x1FFF7A14;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <GetSTM32UID+0x38>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
    uid[2] = *(uint32_t *)0x1FFF7A18;
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <GetSTM32UID+0x3c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	617b      	str	r3, [r7, #20]

    sprintf(uidStr, "%08lX%08lX%08lX", uid[0], uid[1], uid[2]);
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	460b      	mov	r3, r1
 800180c:	4906      	ldr	r1, [pc, #24]	@ (8001828 <GetSTM32UID+0x40>)
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f009 fe62 	bl	800b4d8 <siprintf>
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	1fff7a10 	.word	0x1fff7a10
 8001820:	1fff7a14 	.word	0x1fff7a14
 8001824:	1fff7a18 	.word	0x1fff7a18
 8001828:	0800c950 	.word	0x0800c950

0800182c <print_network_information>:


void print_network_information(void) {
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(&defaultNetInfo);
 8001832:	4830      	ldr	r0, [pc, #192]	@ (80018f4 <print_network_information+0xc8>)
 8001834:	f004 fc08 	bl	8006048 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", defaultNetInfo.mac[0], defaultNetInfo.mac[1], defaultNetInfo.mac[2], defaultNetInfo.mac[3], defaultNetInfo.mac[4], defaultNetInfo.mac[5]);
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <print_network_information+0xc8>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <print_network_information+0xc8>)
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	461c      	mov	r4, r3
 8001844:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <print_network_information+0xc8>)
 8001846:	789b      	ldrb	r3, [r3, #2]
 8001848:	461d      	mov	r5, r3
 800184a:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <print_network_information+0xc8>)
 800184c:	78db      	ldrb	r3, [r3, #3]
 800184e:	461a      	mov	r2, r3
 8001850:	4b28      	ldr	r3, [pc, #160]	@ (80018f4 <print_network_information+0xc8>)
 8001852:	791b      	ldrb	r3, [r3, #4]
 8001854:	4619      	mov	r1, r3
 8001856:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <print_network_information+0xc8>)
 8001858:	795b      	ldrb	r3, [r3, #5]
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	9101      	str	r1, [sp, #4]
 800185e:	9200      	str	r2, [sp, #0]
 8001860:	462b      	mov	r3, r5
 8001862:	4622      	mov	r2, r4
 8001864:	4601      	mov	r1, r0
 8001866:	4824      	ldr	r0, [pc, #144]	@ (80018f8 <print_network_information+0xcc>)
 8001868:	f009 fdbe 	bl	800b3e8 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r", defaultNetInfo.ip[0], defaultNetInfo.ip[1], defaultNetInfo.ip[2], defaultNetInfo.ip[3]);
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <print_network_information+0xc8>)
 800186e:	799b      	ldrb	r3, [r3, #6]
 8001870:	4619      	mov	r1, r3
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <print_network_information+0xc8>)
 8001874:	79db      	ldrb	r3, [r3, #7]
 8001876:	461a      	mov	r2, r3
 8001878:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <print_network_information+0xc8>)
 800187a:	7a1b      	ldrb	r3, [r3, #8]
 800187c:	4618      	mov	r0, r3
 800187e:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <print_network_information+0xc8>)
 8001880:	7a5b      	ldrb	r3, [r3, #9]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	4603      	mov	r3, r0
 8001886:	481d      	ldr	r0, [pc, #116]	@ (80018fc <print_network_information+0xd0>)
 8001888:	f009 fdae 	bl	800b3e8 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r", defaultNetInfo.sn[0], defaultNetInfo.sn[1], defaultNetInfo.sn[2], defaultNetInfo.sn[3]);
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <print_network_information+0xc8>)
 800188e:	7a9b      	ldrb	r3, [r3, #10]
 8001890:	4619      	mov	r1, r3
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <print_network_information+0xc8>)
 8001894:	7adb      	ldrb	r3, [r3, #11]
 8001896:	461a      	mov	r2, r3
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <print_network_information+0xc8>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	4618      	mov	r0, r3
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <print_network_information+0xc8>)
 80018a0:	7b5b      	ldrb	r3, [r3, #13]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4603      	mov	r3, r0
 80018a6:	4816      	ldr	r0, [pc, #88]	@ (8001900 <print_network_information+0xd4>)
 80018a8:	f009 fd9e 	bl	800b3e8 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r", defaultNetInfo.gw[0], defaultNetInfo.gw[1], defaultNetInfo.gw[2], defaultNetInfo.gw[3]);
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <print_network_information+0xc8>)
 80018ae:	7b9b      	ldrb	r3, [r3, #14]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <print_network_information+0xc8>)
 80018b4:	7bdb      	ldrb	r3, [r3, #15]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <print_network_information+0xc8>)
 80018ba:	7c1b      	ldrb	r3, [r3, #16]
 80018bc:	4618      	mov	r0, r3
 80018be:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <print_network_information+0xc8>)
 80018c0:	7c5b      	ldrb	r3, [r3, #17]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4603      	mov	r3, r0
 80018c6:	480f      	ldr	r0, [pc, #60]	@ (8001904 <print_network_information+0xd8>)
 80018c8:	f009 fd8e 	bl	800b3e8 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r", defaultNetInfo.dns[0], defaultNetInfo.dns[1], defaultNetInfo.dns[2], defaultNetInfo.dns[3]);
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <print_network_information+0xc8>)
 80018ce:	7c9b      	ldrb	r3, [r3, #18]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <print_network_information+0xc8>)
 80018d4:	7cdb      	ldrb	r3, [r3, #19]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <print_network_information+0xc8>)
 80018da:	7d1b      	ldrb	r3, [r3, #20]
 80018dc:	4618      	mov	r0, r3
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <print_network_information+0xc8>)
 80018e0:	7d5b      	ldrb	r3, [r3, #21]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4603      	mov	r3, r0
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <print_network_information+0xdc>)
 80018e8:	f009 fd7e 	bl	800b3e8 <iprintf>
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bdb0      	pop	{r4, r5, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000004 	.word	0x20000004
 80018f8:	0800c960 	.word	0x0800c960
 80018fc:	0800c990 	.word	0x0800c990
 8001900:	0800c9ac 	.word	0x0800c9ac
 8001904:	0800c9c8 	.word	0x0800c9c8
 8001908:	0800c9e4 	.word	0x0800c9e4

0800190c <process_dhcp>:

int8_t process_dhcp(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
    uint8_t ret = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	71bb      	strb	r3, [r7, #6]
    uint8_t dhcp_retry = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	71fb      	strb	r3, [r7, #7]

    printf(" - DHCP Client running\r\n");
 800191a:	481a      	ldr	r0, [pc, #104]	@ (8001984 <process_dhcp+0x78>)
 800191c:	f009 fdd4 	bl	800b4c8 <puts>
    DHCP_init(SOCK_DHCP, data_buf);
 8001920:	4919      	ldr	r1, [pc, #100]	@ (8001988 <process_dhcp+0x7c>)
 8001922:	2003      	movs	r0, #3
 8001924:	f001 ffba 	bl	800389c <DHCP_init>

    printf(" - DHCP Init done\r\n");
 8001928:	4818      	ldr	r0, [pc, #96]	@ (800198c <process_dhcp+0x80>)
 800192a:	f009 fdcd 	bl	800b4c8 <puts>
    while (1) {
        ret = DHCP_run();
 800192e:	f001 fded 	bl	800350c <DHCP_run>
 8001932:	4603      	mov	r3, r0
 8001934:	71bb      	strb	r3, [r7, #6]
        if (ret == DHCP_IP_LEASED) {
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d103      	bne.n	8001944 <process_dhcp+0x38>
            printf(" - DHCP Success\r\n");
 800193c:	4814      	ldr	r0, [pc, #80]	@ (8001990 <process_dhcp+0x84>)
 800193e:	f009 fdc3 	bl	800b4c8 <puts>
            break;
 8001942:	e015      	b.n	8001970 <process_dhcp+0x64>
        } else if (ret == DHCP_FAILED) {
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <process_dhcp+0x54>
            dhcp_retry++;
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	3301      	adds	r3, #1
 800194e:	71fb      	strb	r3, [r7, #7]
            if (dhcp_retry <= 3) printf(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d804      	bhi.n	8001960 <process_dhcp+0x54>
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4619      	mov	r1, r3
 800195a:	480e      	ldr	r0, [pc, #56]	@ (8001994 <process_dhcp+0x88>)
 800195c:	f009 fd44 	bl	800b3e8 <iprintf>
        }
        if (dhcp_retry > 3) {
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d9e3      	bls.n	800192e <process_dhcp+0x22>
            printf(" - DHCP Failed\r\n\r\n");
 8001966:	480c      	ldr	r0, [pc, #48]	@ (8001998 <process_dhcp+0x8c>)
 8001968:	f009 fdae 	bl	800b4c8 <puts>
            DHCP_stop();
 800196c:	f001 fee8 	bl	8003740 <DHCP_stop>
            break;
        }
    }

    // Schließe den DHCP-Socket nach der Verwendung
    close(SOCK_DHCP);
 8001970:	2003      	movs	r0, #3
 8001972:	f003 f89b 	bl	8004aac <close>
    return ret;
 8001976:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	0800ca00 	.word	0x0800ca00
 8001988:	2000024c 	.word	0x2000024c
 800198c:	0800ca18 	.word	0x0800ca18
 8001990:	0800ca2c 	.word	0x0800ca2c
 8001994:	0800ca40 	.word	0x0800ca40
 8001998:	0800ca6c 	.word	0x0800ca6c

0800199c <process_dns>:

int8_t process_dns(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
    int8_t ret = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71bb      	strb	r3, [r7, #6]
    uint8_t dns_retry = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]

    printf(" - DNS Client running\r\n");
 80019aa:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <process_dns+0x68>)
 80019ac:	f009 fd8c 	bl	800b4c8 <puts>
    DNS_init(SOCK_DNS, data_buf);
 80019b0:	4915      	ldr	r1, [pc, #84]	@ (8001a08 <process_dns+0x6c>)
 80019b2:	2004      	movs	r0, #4
 80019b4:	f002 fbde 	bl	8004174 <DNS_init>
    while (1) {
        if ((ret = DNS_run(dns_server, (uint8_t *)Domain_name, Domain_IP)) == 1) {
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <process_dns+0x70>)
 80019ba:	4915      	ldr	r1, [pc, #84]	@ (8001a10 <process_dns+0x74>)
 80019bc:	4815      	ldr	r0, [pc, #84]	@ (8001a14 <process_dns+0x78>)
 80019be:	f002 fbf5 	bl	80041ac <DNS_run>
 80019c2:	4603      	mov	r3, r0
 80019c4:	71bb      	strb	r3, [r7, #6]
 80019c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d103      	bne.n	80019d6 <process_dns+0x3a>
            printf(" - DNS Success\r\n");
 80019ce:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <process_dns+0x7c>)
 80019d0:	f009 fd7a 	bl	800b4c8 <puts>
            break;
 80019d4:	e010      	b.n	80019f8 <process_dns+0x5c>
        } else {
            dns_retry++;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	3301      	adds	r3, #1
 80019da:	71fb      	strb	r3, [r7, #7]
            if (dns_retry <= 2) printf(" - DNS Timeout occurred and retry [%d]\r\n", dns_retry);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d804      	bhi.n	80019ec <process_dns+0x50>
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <process_dns+0x80>)
 80019e8:	f009 fcfe 	bl	800b3e8 <iprintf>
        }
        if (dns_retry > 2) {
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d9e2      	bls.n	80019b8 <process_dns+0x1c>
            printf(" - DNS Failed\r\n\r\n");
 80019f2:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <process_dns+0x84>)
 80019f4:	f009 fd68 	bl	800b4c8 <puts>
            break;
        }
    }
    return ret;
 80019f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800ca80 	.word	0x0800ca80
 8001a08:	2000024c 	.word	0x2000024c
 8001a0c:	20000a4c 	.word	0x20000a4c
 8001a10:	20000020 	.word	0x20000020
 8001a14:	2000001c 	.word	0x2000001c
 8001a18:	0800ca98 	.word	0x0800ca98
 8001a1c:	0800caa8 	.word	0x0800caa8
 8001a20:	0800cad4 	.word	0x0800cad4

08001a24 <initialize_network>:

void initialize_network(void) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af02      	add	r7, sp, #8
    printf("\t - WizChip Init - \r\n");
 8001a2a:	4832      	ldr	r0, [pc, #200]	@ (8001af4 <initialize_network+0xd0>)
 8001a2c:	f009 fd4c 	bl	800b4c8 <puts>
    WIZCHIPInitialize();
 8001a30:	f000 fbbc 	bl	80021ac <WIZCHIPInitialize>
    printf("version:%.2x\r\n", getVERSIONR());
 8001a34:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 8001a38:	f002 fc3e 	bl	80042b8 <WIZCHIP_READ>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	482d      	ldr	r0, [pc, #180]	@ (8001af8 <initialize_network+0xd4>)
 8001a42:	f009 fcd1 	bl	800b3e8 <iprintf>

    wizchip_setnetinfo(&defaultNetInfo);
 8001a46:	482d      	ldr	r0, [pc, #180]	@ (8001afc <initialize_network+0xd8>)
 8001a48:	f004 fabe 	bl	8005fc8 <wizchip_setnetinfo>
    print_network_information();
 8001a4c:	f7ff feee 	bl	800182c <print_network_information>

    if (process_dhcp() == DHCP_IP_LEASED) {
 8001a50:	f7ff ff5c 	bl	800190c <process_dhcp>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d103      	bne.n	8001a62 <initialize_network+0x3e>
        flag_process_dhcp_success = ON;
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <initialize_network+0xdc>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e003      	b.n	8001a6a <initialize_network+0x46>
    } else {
        ctlnetwork(CN_SET_NETINFO, &defaultNetInfo); // Set default static IP settings
 8001a62:	4926      	ldr	r1, [pc, #152]	@ (8001afc <initialize_network+0xd8>)
 8001a64:	2000      	movs	r0, #0
 8001a66:	f003 ffb5 	bl	80059d4 <ctlnetwork>
    }

    printf("Register value after W5x00 initialize!\r\n");
 8001a6a:	4826      	ldr	r0, [pc, #152]	@ (8001b04 <initialize_network+0xe0>)
 8001a6c:	f009 fd2c 	bl	800b4c8 <puts>
    print_network_information();
 8001a70:	f7ff fedc 	bl	800182c <print_network_information>

    if (process_dns()) {
 8001a74:	f7ff ff92 	bl	800199c <process_dns>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <initialize_network+0x60>
        flag_process_dns_success = ON;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <initialize_network+0xe4>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    }

    if (flag_process_dhcp_success == ENABLE) {
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <initialize_network+0xdc>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <initialize_network+0x78>
        printf(" # DHCP IP Leased time : %lu seconds\r\n", getDHCPLeasetime());
 8001a8c:	f001 ffb0 	bl	80039f0 <getDHCPLeasetime>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <initialize_network+0xe8>)
 8001a96:	f009 fca7 	bl	800b3e8 <iprintf>
 8001a9a:	e002      	b.n	8001aa2 <initialize_network+0x7e>
    } else {
        printf(" # DHCP Failed\r\n");
 8001a9c:	481c      	ldr	r0, [pc, #112]	@ (8001b10 <initialize_network+0xec>)
 8001a9e:	f009 fd13 	bl	800b4c8 <puts>
    }

    if (flag_process_dns_success == ENABLE) {
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <initialize_network+0xe4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d113      	bne.n	8001ad2 <initialize_network+0xae>
        printf(" # DNS: %s => %d.%d.%d.%d\r\n", Domain_name, Domain_IP[0], Domain_IP[1], Domain_IP[2], Domain_IP[3]);
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <initialize_network+0xf0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <initialize_network+0xf0>)
 8001ab2:	785b      	ldrb	r3, [r3, #1]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <initialize_network+0xf0>)
 8001ab8:	789b      	ldrb	r3, [r3, #2]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <initialize_network+0xf0>)
 8001abe:	78db      	ldrb	r3, [r3, #3]
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	4913      	ldr	r1, [pc, #76]	@ (8001b18 <initialize_network+0xf4>)
 8001aca:	4814      	ldr	r0, [pc, #80]	@ (8001b1c <initialize_network+0xf8>)
 8001acc:	f009 fc8c 	bl	800b3e8 <iprintf>
 8001ad0:	e002      	b.n	8001ad8 <initialize_network+0xb4>
    } else {
        printf(" # DNS Failed\r\n");
 8001ad2:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <initialize_network+0xfc>)
 8001ad4:	f009 fcf8 	bl	800b4c8 <puts>
    }

    // UID auslesen und anzeigen
    char uidStr[25];
    GetSTM32UID(uidStr);
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe84 	bl	80017e8 <GetSTM32UID>
    printf("STM32 UID: %s\r\n", uidStr);
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480f      	ldr	r0, [pc, #60]	@ (8001b24 <initialize_network+0x100>)
 8001ae6:	f009 fc7f 	bl	800b3e8 <iprintf>
}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	0800cae8 	.word	0x0800cae8
 8001af8:	0800cb00 	.word	0x0800cb00
 8001afc:	20000004 	.word	0x20000004
 8001b00:	20000a50 	.word	0x20000a50
 8001b04:	0800cb10 	.word	0x0800cb10
 8001b08:	20000a51 	.word	0x20000a51
 8001b0c:	0800cb38 	.word	0x0800cb38
 8001b10:	0800cb60 	.word	0x0800cb60
 8001b14:	20000a4c 	.word	0x20000a4c
 8001b18:	20000020 	.word	0x20000020
 8001b1c:	0800cb70 	.word	0x0800cb70
 8001b20:	0800cb8c 	.word	0x0800cb8c
 8001b24:	0800cb9c 	.word	0x0800cb9c

08001b28 <upgrade_to_websocket>:

// Definition der Funktion
int upgrade_to_websocket(uint8_t sn) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4602      	mov	r2, r0
 8001b32:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001b36:	f2a3 43a1 	subw	r3, r3, #1185	@ 0x4a1
 8001b3a:	701a      	strb	r2, [r3, #0]
    char request[] = "GET /chat HTTP/1.1\r\n"
 8001b3c:	4a34      	ldr	r2, [pc, #208]	@ (8001c10 <upgrade_to_websocket+0xe8>)
 8001b3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001b42:	4611      	mov	r1, r2
 8001b44:	229b      	movs	r2, #155	@ 0x9b
 8001b46:	4618      	mov	r0, r3
 8001b48:	f009 feef 	bl	800b92a <memcpy>
                     "Upgrade: websocket\r\n"
                     "Connection: Upgrade\r\n"
                     "Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\r\n"
                     "Sec-WebSocket-Version: 13\r\n\r\n";

    send(sn, (uint8_t*)request, strlen(request));
 8001b4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fb3d 	bl	80001d0 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8001b5e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001b62:	f2a3 43a1 	subw	r3, r3, #1185	@ 0x4a1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 f8e9 	bl	8004d40 <send>

    uint8_t response[1024];
    int32_t len = recv(sn, response, sizeof(response) - 1); // Platz für Nullterminator lassen
 8001b6e:	f107 0108 	add.w	r1, r7, #8
 8001b72:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001b76:	f2a3 43a1 	subw	r3, r3, #1185	@ 0x4a1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 f9d5 	bl	8004f30 <recv>
 8001b86:	f8c7 04a4 	str.w	r0, [r7, #1188]	@ 0x4a4
    if (len <= 0) {
 8001b8a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dc05      	bgt.n	8001b9e <upgrade_to_websocket+0x76>
        printf("Error receiving response.\r\n");
 8001b92:	4820      	ldr	r0, [pc, #128]	@ (8001c14 <upgrade_to_websocket+0xec>)
 8001b94:	f009 fc98 	bl	800b4c8 <puts>
        return -1; // Fehler beim Empfangen der Antwort
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	e033      	b.n	8001c06 <upgrade_to_websocket+0xde>
    }

    response[len] = '\0';
 8001b9e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001ba2:	f5a3 6294 	sub.w	r2, r3, #1184	@ 0x4a0
 8001ba6:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8001baa:	4413      	add	r3, r2
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    printf("Server response: %s\r\n", response);
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4818      	ldr	r0, [pc, #96]	@ (8001c18 <upgrade_to_websocket+0xf0>)
 8001bb8:	f009 fc16 	bl	800b3e8 <iprintf>

    // Überprüfe die Antwort auf Erfolg
    if (strstr((char *)response, "HTTP/1.1 101 Switching Protocols") != NULL &&
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	4916      	ldr	r1, [pc, #88]	@ (8001c1c <upgrade_to_websocket+0xf4>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f009 fdba 	bl	800b73c <strstr>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d016      	beq.n	8001bfc <upgrade_to_websocket+0xd4>
        strstr((char *)response, "Upgrade: websocket") != NULL &&
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4913      	ldr	r1, [pc, #76]	@ (8001c20 <upgrade_to_websocket+0xf8>)
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f009 fdb1 	bl	800b73c <strstr>
 8001bda:	4603      	mov	r3, r0
    if (strstr((char *)response, "HTTP/1.1 101 Switching Protocols") != NULL &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <upgrade_to_websocket+0xd4>
        strstr((char *)response, "Connection: Upgrade") != NULL) {
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	490f      	ldr	r1, [pc, #60]	@ (8001c24 <upgrade_to_websocket+0xfc>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f009 fda8 	bl	800b73c <strstr>
 8001bec:	4603      	mov	r3, r0
        strstr((char *)response, "Upgrade: websocket") != NULL &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <upgrade_to_websocket+0xd4>
        printf("WebSocket upgrade successful.\r\n");
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <upgrade_to_websocket+0x100>)
 8001bf4:	f009 fc68 	bl	800b4c8 <puts>
        return 0; // Erfolg
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e004      	b.n	8001c06 <upgrade_to_websocket+0xde>
    } else {
        printf("WebSocket upgrade failed.\r\n");
 8001bfc:	480b      	ldr	r0, [pc, #44]	@ (8001c2c <upgrade_to_websocket+0x104>)
 8001bfe:	f009 fc63 	bl	800b4c8 <puts>
        return -1; // Fehler
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	0800cc68 	.word	0x0800cc68
 8001c14:	0800cbac 	.word	0x0800cbac
 8001c18:	0800cbc8 	.word	0x0800cbc8
 8001c1c:	0800cbe0 	.word	0x0800cbe0
 8001c20:	0800cc04 	.word	0x0800cc04
 8001c24:	0800cc18 	.word	0x0800cc18
 8001c28:	0800cc2c 	.word	0x0800cc2c
 8001c2c:	0800cc4c 	.word	0x0800cc4c

08001c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_MspInit+0x54>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	4a11      	ldr	r2, [pc, #68]	@ (8001c84 <HAL_MspInit+0x54>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_MspInit+0x54>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_MspInit+0x54>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_MspInit+0x54>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <HAL_MspInit+0x54>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	210f      	movs	r1, #15
 8001c72:	f06f 0001 	mvn.w	r0, #1
 8001c76:	f004 fbdb 	bl	8006430 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	@ 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a41      	ldr	r2, [pc, #260]	@ (8001dac <HAL_SPI_MspInit+0x124>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12c      	bne.n	8001d04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4b40      	ldr	r3, [pc, #256]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001cb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b3d      	ldr	r3, [pc, #244]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b39      	ldr	r3, [pc, #228]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a38      	ldr	r2, [pc, #224]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ce2:	23e0      	movs	r3, #224	@ 0xe0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	482d      	ldr	r0, [pc, #180]	@ (8001db4 <HAL_SPI_MspInit+0x12c>)
 8001cfe:	f004 fbc1 	bl	8006484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d02:	e04f      	b.n	8001da4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2b      	ldr	r2, [pc, #172]	@ (8001db8 <HAL_SPI_MspInit+0x130>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d14a      	bne.n	8001da4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a26      	ldr	r2, [pc, #152]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <HAL_SPI_MspInit+0x128>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d62:	2304      	movs	r3, #4
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d72:	2305      	movs	r3, #5
 8001d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480f      	ldr	r0, [pc, #60]	@ (8001dbc <HAL_SPI_MspInit+0x134>)
 8001d7e:	f004 fb81 	bl	8006484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d82:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d94:	2305      	movs	r3, #5
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4808      	ldr	r0, [pc, #32]	@ (8001dc0 <HAL_SPI_MspInit+0x138>)
 8001da0:	f004 fb70 	bl	8006484 <HAL_GPIO_Init>
}
 8001da4:	bf00      	nop
 8001da6:	3730      	adds	r7, #48	@ 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40013000 	.word	0x40013000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40003800 	.word	0x40003800
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a42      	ldr	r2, [pc, #264]	@ (8001eec <HAL_UART_MspInit+0x128>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12c      	bne.n	8001e40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	4b41      	ldr	r3, [pc, #260]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a40      	ldr	r2, [pc, #256]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a39      	ldr	r2, [pc, #228]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e1e:	230c      	movs	r3, #12
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	482e      	ldr	r0, [pc, #184]	@ (8001ef4 <HAL_UART_MspInit+0x130>)
 8001e3a:	f004 fb23 	bl	8006484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e3e:	e050      	b.n	8001ee2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef8 <HAL_UART_MspInit+0x134>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d14b      	bne.n	8001ee2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	4a27      	ldr	r2, [pc, #156]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <HAL_UART_MspInit+0x12c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4810      	ldr	r0, [pc, #64]	@ (8001efc <HAL_UART_MspInit+0x138>)
 8001ebc:	f004 fae2 	bl	8006484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <HAL_UART_MspInit+0x13c>)
 8001ede:	f004 fad1 	bl	8006484 <HAL_GPIO_Init>
}
 8001ee2:	bf00      	nop
 8001ee4:	3730      	adds	r7, #48	@ 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40004400 	.word	0x40004400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40004800 	.word	0x40004800
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020c00 	.word	0x40020c00

08001f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <HAL_InitTick+0xd4>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <HAL_InitTick+0xd4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f24:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <HAL_InitTick+0xd4>)
 8001f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f30:	f107 020c 	add.w	r2, r7, #12
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f005 f90a 	bl	8007154 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f40:	f005 f8f4 	bl	800712c <HAL_RCC_GetPCLK2Freq>
 8001f44:	4603      	mov	r3, r0
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4c:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <HAL_InitTick+0xd8>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	3b01      	subs	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f5a:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <HAL_InitTick+0xe0>)
 8001f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f66:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f7e:	4818      	ldr	r0, [pc, #96]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f80:	f005 fc30 	bl	80077e4 <HAL_TIM_Base_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11b      	bne.n	8001fca <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f92:	4813      	ldr	r0, [pc, #76]	@ (8001fe0 <HAL_InitTick+0xdc>)
 8001f94:	f005 fc80 	bl	8007898 <HAL_TIM_Base_Start_IT>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d111      	bne.n	8001fca <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fa6:	2019      	movs	r0, #25
 8001fa8:	f004 fa5e 	bl	8006468 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	d808      	bhi.n	8001fc4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	2019      	movs	r0, #25
 8001fb8:	f004 fa3a 	bl	8006430 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_InitTick+0xe4>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e002      	b.n	8001fca <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3730      	adds	r7, #48	@ 0x30
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	20000a54 	.word	0x20000a54
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	20000080 	.word	0x20000080

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800202a:	f005 fca5 	bl	8007978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000a54 	.word	0x20000a54

08002038 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e00a      	b.n	8002060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800204a:	f3af 8000 	nop.w
 800204e:	4601      	mov	r1, r0
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf0      	blt.n	800204a <_read+0x12>
  }

  return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_close>:
//  }
//  return len;
//}

int _close(int file)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800209a:	605a      	str	r2, [r3, #4]
  return 0;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_isatty>:

int _isatty(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f009 fbd8 	bl	800b8c0 <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20020000 	.word	0x20020000
 800213c:	00000400 	.word	0x00000400
 8002140:	20000a9c 	.word	0x20000a9c
 8002144:	20005648 	.word	0x20005648

08002148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <_write>:
#include "uart_redirect.h"
#include "stm32f4xx_hal.h" // oder die entsprechende HAL Header-Datei

extern UART_HandleTypeDef huart2;

int _write(int fd, char *str, int len) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++) {
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00b      	b.n	8002196 <_write+0x2a>
    HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	18d1      	adds	r1, r2, r3
 8002184:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002188:	2201      	movs	r2, #1
 800218a:	4807      	ldr	r0, [pc, #28]	@ (80021a8 <_write+0x3c>)
 800218c:	f005 fe1c 	bl	8007dc8 <HAL_UART_Transmit>
  for (int i = 0; i < len; i++) {
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	dbef      	blt.n	800217e <_write+0x12>
  }
  return len;
 800219e:	687b      	ldr	r3, [r7, #4]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200001b4 	.word	0x200001b4

080021ac <WIZCHIPInitialize>:
 */

#include "wizchip_init.h"
#include <stdio.h>

void WIZCHIPInitialize(){
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
	printf("WIZCHIPInitialize\r\n");
 80021b2:	481f      	ldr	r0, [pc, #124]	@ (8002230 <WIZCHIPInitialize+0x84>)
 80021b4:	f009 f988 	bl	800b4c8 <puts>

	csDisable();
 80021b8:	f000 f876 	bl	80022a8 <csDisable>
	printf("WIZCHIPInitialize1\r\n");
 80021bc:	481d      	ldr	r0, [pc, #116]	@ (8002234 <WIZCHIPInitialize+0x88>)
 80021be:	f009 f983 	bl	800b4c8 <puts>
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 80021c2:	491d      	ldr	r1, [pc, #116]	@ (8002238 <WIZCHIPInitialize+0x8c>)
 80021c4:	481d      	ldr	r0, [pc, #116]	@ (800223c <WIZCHIPInitialize+0x90>)
 80021c6:	f003 faf9 	bl	80057bc <reg_wizchip_spi_cbfunc>
	printf("WIZCHIPInitialize2\r\n");
 80021ca:	481d      	ldr	r0, [pc, #116]	@ (8002240 <WIZCHIPInitialize+0x94>)
 80021cc:	f009 f97c 	bl	800b4c8 <puts>
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 80021d0:	491c      	ldr	r1, [pc, #112]	@ (8002244 <WIZCHIPInitialize+0x98>)
 80021d2:	481d      	ldr	r0, [pc, #116]	@ (8002248 <WIZCHIPInitialize+0x9c>)
 80021d4:	f003 facc 	bl	8005770 <reg_wizchip_cs_cbfunc>
	printf("WIZCHIPInitialize3\r\n");
 80021d8:	481c      	ldr	r0, [pc, #112]	@ (800224c <WIZCHIPInitialize+0xa0>)
 80021da:	f009 f975 	bl	800b4c8 <puts>

	uint8_t tmp;
	//w5500, w5200
#if _WIZCHIP_ >= W5200
	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <WIZCHIPInitialize+0xa4>)
 80021e0:	1d3c      	adds	r4, r7, #4
 80021e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
	uint8_t memsize[2][4] = { {2,2,2,2},{2,2,2,2}};
#endif
	printf("WIZCHIPInitialize4\r\n");
 80021e8:	481a      	ldr	r0, [pc, #104]	@ (8002254 <WIZCHIPInitialize+0xa8>)
 80021ea:	f009 f96d 	bl	800b4c8 <puts>
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	2001      	movs	r0, #1
 80021f4:	f003 fb0e 	bl	8005814 <ctlwizchip>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d103      	bne.n	8002208 <WIZCHIPInitialize+0x5c>
	{
		//myprintf("WIZCHIP Initialized fail.\r\n");
		printf("WIZCHIP Initialized fail.\r\n");
 8002200:	4815      	ldr	r0, [pc, #84]	@ (8002258 <WIZCHIPInitialize+0xac>)
 8002202:	f009 f961 	bl	800b4c8 <puts>
	  return;
 8002206:	e010      	b.n	800222a <WIZCHIPInitialize+0x7e>
	}
	/* PHY link status check */
	do {
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8002208:	f107 0317 	add.w	r3, r7, #23
 800220c:	4619      	mov	r1, r3
 800220e:	200f      	movs	r0, #15
 8002210:	f003 fb00 	bl	8005814 <ctlwizchip>
 8002214:	4603      	mov	r3, r0
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d103      	bne.n	8002224 <WIZCHIPInitialize+0x78>
		{
			printf("Unknown PHY Link status.\r\n");
 800221c:	480f      	ldr	r0, [pc, #60]	@ (800225c <WIZCHIPInitialize+0xb0>)
 800221e:	f009 f953 	bl	800b4c8 <puts>
		  return;
 8002222:	e002      	b.n	800222a <WIZCHIPInitialize+0x7e>
		}
	} while (tmp == PHY_LINK_OFF);
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <WIZCHIPInitialize+0x5c>



}
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd90      	pop	{r4, r7, pc}
 8002230:	0800cd04 	.word	0x0800cd04
 8002234:	0800cd18 	.word	0x0800cd18
 8002238:	080022c1 	.word	0x080022c1
 800223c:	080022e9 	.word	0x080022e9
 8002240:	0800cd2c 	.word	0x0800cd2c
 8002244:	080022a9 	.word	0x080022a9
 8002248:	08002291 	.word	0x08002291
 800224c:	0800cd40 	.word	0x0800cd40
 8002250:	0800cda0 	.word	0x0800cda0
 8002254:	0800cd54 	.word	0x0800cd54
 8002258:	0800cd68 	.word	0x0800cd68
 800225c:	0800cd84 	.word	0x0800cd84

08002260 <resetAssert>:


void resetAssert(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	2120      	movs	r1, #32
 8002268:	4802      	ldr	r0, [pc, #8]	@ (8002274 <resetAssert+0x14>)
 800226a:	f004 faa7 	bl	80067bc <HAL_GPIO_WritePin>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40020800 	.word	0x40020800

08002278 <resetDeassert>:

void resetDeassert(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 800227c:	2201      	movs	r2, #1
 800227e:	2120      	movs	r1, #32
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <resetDeassert+0x14>)
 8002282:	f004 fa9b 	bl	80067bc <HAL_GPIO_WritePin>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40020800 	.word	0x40020800

08002290 <csEnable>:

void csEnable(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_RESET);
 8002294:	2200      	movs	r2, #0
 8002296:	2110      	movs	r1, #16
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <csEnable+0x14>)
 800229a:	f004 fa8f 	bl	80067bc <HAL_GPIO_WritePin>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40020800 	.word	0x40020800

080022a8 <csDisable>:

void csDisable(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2110      	movs	r1, #16
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <csDisable+0x14>)
 80022b2:	f004 fa83 	bl	80067bc <HAL_GPIO_WritePin>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40020800 	.word	0x40020800

080022c0 <spiWriteByte>:

void spiWriteByte(uint8_t tx)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 80022ca:	f107 020f 	add.w	r2, r7, #15
 80022ce:	1df9      	adds	r1, r7, #7
 80022d0:	230a      	movs	r3, #10
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2301      	movs	r3, #1
 80022d6:	4803      	ldr	r0, [pc, #12]	@ (80022e4 <spiWriteByte+0x24>)
 80022d8:	f004 fff7 	bl	80072ca <HAL_SPI_TransmitReceive>
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000015c 	.word	0x2000015c

080022e8 <spiReadByte>:

uint8_t spiReadByte(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af02      	add	r7, sp, #8
	uint8_t rx = 0, tx = 0xFF;
 80022ee:	2300      	movs	r3, #0
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	23ff      	movs	r3, #255	@ 0xff
 80022f4:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 80022f6:	1dfa      	adds	r2, r7, #7
 80022f8:	1db9      	adds	r1, r7, #6
 80022fa:	230a      	movs	r3, #10
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2301      	movs	r3, #1
 8002300:	4803      	ldr	r0, [pc, #12]	@ (8002310 <spiReadByte+0x28>)
 8002302:	f004 ffe2 	bl	80072ca <HAL_SPI_TransmitReceive>
	return rx;
 8002306:	79fb      	ldrb	r3, [r7, #7]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	2000015c 	.word	0x2000015c

08002314 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8002318:	2204      	movs	r2, #4
 800231a:	4909      	ldr	r1, [pc, #36]	@ (8002340 <default_ip_assign+0x2c>)
 800231c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002320:	f002 f8c4 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002324:	2204      	movs	r2, #4
 8002326:	4907      	ldr	r1, [pc, #28]	@ (8002344 <default_ip_assign+0x30>)
 8002328:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800232c:	f002 f8be 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002330:	2204      	movs	r2, #4
 8002332:	4905      	ldr	r1, [pc, #20]	@ (8002348 <default_ip_assign+0x34>)
 8002334:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002338:	f002 f8b8 	bl	80044ac <WIZCHIP_WRITE_BUF>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000ab0 	.word	0x20000ab0
 8002344:	20000ab8 	.word	0x20000ab8
 8002348:	20000ab4 	.word	0x20000ab4

0800234c <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002350:	2180      	movs	r1, #128	@ 0x80
 8002352:	2000      	movs	r0, #0
 8002354:	f001 fffc 	bl	8004350 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002358:	2000      	movs	r0, #0
 800235a:	f001 ffad 	bl	80042b8 <WIZCHIP_READ>
   default_ip_assign();
 800235e:	f7ff ffd9 	bl	8002314 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002362:	2206      	movs	r2, #6
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <default_ip_update+0x28>)
 8002366:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800236a:	f002 f89f 	bl	80044ac <WIZCHIP_WRITE_BUF>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000ad0 	.word	0x20000ad0

08002378 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	2000      	movs	r0, #0
 8002380:	f001 ffe6 	bl	8004350 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002384:	2000      	movs	r0, #0
 8002386:	f001 ff97 	bl	80042b8 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800238a:	2206      	movs	r2, #6
 800238c:	4903      	ldr	r1, [pc, #12]	@ (800239c <default_ip_conflict+0x24>)
 800238e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002392:	f002 f88b 	bl	80044ac <WIZCHIP_WRITE_BUF>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000ad0 	.word	0x20000ad0

080023a0 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80023a6:	463b      	mov	r3, r7
 80023a8:	2206      	movs	r2, #6
 80023aa:	4619      	mov	r1, r3
 80023ac:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80023b0:	f002 f81c 	bl	80043ec <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 80023b4:	4b72      	ldr	r3, [pc, #456]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80023bc:	4b70      	ldr	r3, [pc, #448]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80023c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2206      	movs	r2, #6
 80023ca:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80023cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80023d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80023dc:	4b69      	ldr	r3, [pc, #420]	@ (8002584 <makeDHCPMSG+0x1e4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e1b      	lsrs	r3, r3, #24
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80023e8:	4b66      	ldr	r3, [pc, #408]	@ (8002584 <makeDHCPMSG+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0c1a      	lsrs	r2, r3, #16
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3301      	adds	r3, #1
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80023f6:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <makeDHCPMSG+0x1e4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0a1a      	lsrs	r2, r3, #8
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3302      	adds	r3, #2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002404:	4b5f      	ldr	r3, [pc, #380]	@ (8002584 <makeDHCPMSG+0x1e4>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3303      	adds	r3, #3
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002410:	4b5b      	ldr	r3, [pc, #364]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002418:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <makeDHCPMSG+0x1e0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330a      	adds	r3, #10
 800241e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3301      	adds	r3, #1
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 800242e:	4b54      	ldr	r3, [pc, #336]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002436:	4b52      	ldr	r3, [pc, #328]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2200      	movs	r2, #0
 800243c:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800243e:	4b50      	ldr	r3, [pc, #320]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002446:	4b4e      	ldr	r3, [pc, #312]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800244e:	4b4c      	ldr	r3, [pc, #304]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002456:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800245e:	4b48      	ldr	r3, [pc, #288]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002466:	4b46      	ldr	r3, [pc, #280]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800246e:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002476:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 800247e:	4b40      	ldr	r3, [pc, #256]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002486:	4b3e      	ldr	r3, [pc, #248]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 800248e:	4b3c      	ldr	r3, [pc, #240]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002496:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80024a6:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80024ae:	4b34      	ldr	r3, [pc, #208]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a35      	ldr	r2, [pc, #212]	@ (8002588 <makeDHCPMSG+0x1e8>)
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80024b8:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a32      	ldr	r2, [pc, #200]	@ (8002588 <makeDHCPMSG+0x1e8>)
 80024be:	7852      	ldrb	r2, [r2, #1]
 80024c0:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <makeDHCPMSG+0x1e8>)
 80024c8:	7892      	ldrb	r2, [r2, #2]
 80024ca:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80024cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002588 <makeDHCPMSG+0x1e8>)
 80024d2:	78d2      	ldrb	r2, [r2, #3]
 80024d4:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80024d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2b      	ldr	r2, [pc, #172]	@ (8002588 <makeDHCPMSG+0x1e8>)
 80024dc:	7912      	ldrb	r2, [r2, #4]
 80024de:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80024e2:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <makeDHCPMSG+0x1e8>)
 80024e8:	7952      	ldrb	r2, [r2, #5]
 80024ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80024ee:	2306      	movs	r3, #6
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e008      	b.n	8002506 <makeDHCPMSG+0x166>
 80024f4:	4b22      	ldr	r3, [pc, #136]	@ (8002580 <makeDHCPMSG+0x1e0>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d9f3      	bls.n	80024f4 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e009      	b.n	8002526 <makeDHCPMSG+0x186>
 8002512:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4413      	add	r3, r2
 800251a:	2200      	movs	r2, #0
 800251c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3301      	adds	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b3f      	cmp	r3, #63	@ 0x3f
 800252a:	d9f2      	bls.n	8002512 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e009      	b.n	8002546 <makeDHCPMSG+0x1a6>
 8002532:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	3301      	adds	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	daf1      	bge.n	8002532 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800254e:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2263      	movs	r2, #99	@ 0x63
 8002554:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <makeDHCPMSG+0x1e0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2282      	movs	r2, #130	@ 0x82
 800255e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002562:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <makeDHCPMSG+0x1e0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2253      	movs	r2, #83	@ 0x53
 8002568:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <makeDHCPMSG+0x1e0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2263      	movs	r2, #99	@ 0x63
 8002572:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000acc 	.word	0x20000acc
 8002584:	20000ac8 	.word	0x20000ac8
 8002588:	20000ad0 	.word	0x20000ad0

0800258c <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002596:	f7ff ff03 	bl	80023a0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 800259a:	4b56      	ldr	r3, [pc, #344]	@ (80026f4 <send_DHCP_DISCOVER+0x168>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80025a0:	4b54      	ldr	r3, [pc, #336]	@ (80026f4 <send_DHCP_DISCOVER+0x168>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80025a6:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <send_DHCP_DISCOVER+0x168>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80025ac:	4b51      	ldr	r3, [pc, #324]	@ (80026f4 <send_DHCP_DISCOVER+0x168>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80025b2:	4b51      	ldr	r3, [pc, #324]	@ (80026f8 <send_DHCP_DISCOVER+0x16c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80025b8:	4b4f      	ldr	r3, [pc, #316]	@ (80026f8 <send_DHCP_DISCOVER+0x16c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80025be:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <send_DHCP_DISCOVER+0x16c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80025c4:	4b4c      	ldr	r3, [pc, #304]	@ (80026f8 <send_DHCP_DISCOVER+0x16c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80025ca:	2304      	movs	r3, #4
 80025cc:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80025ce:	4b4b      	ldr	r3, [pc, #300]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	88bb      	ldrh	r3, [r7, #4]
 80025d4:	1c59      	adds	r1, r3, #1
 80025d6:	80b9      	strh	r1, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	2235      	movs	r2, #53	@ 0x35
 80025dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80025e0:	4b46      	ldr	r3, [pc, #280]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	88bb      	ldrh	r3, [r7, #4]
 80025e6:	1c59      	adds	r1, r3, #1
 80025e8:	80b9      	strh	r1, [r7, #4]
 80025ea:	4413      	add	r3, r2
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80025f2:	4b42      	ldr	r3, [pc, #264]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	88bb      	ldrh	r3, [r7, #4]
 80025f8:	1c59      	adds	r1, r3, #1
 80025fa:	80b9      	strh	r1, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002604:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	88bb      	ldrh	r3, [r7, #4]
 800260a:	1c59      	adds	r1, r3, #1
 800260c:	80b9      	strh	r1, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	223d      	movs	r2, #61	@ 0x3d
 8002612:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002616:	4b39      	ldr	r3, [pc, #228]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	88bb      	ldrh	r3, [r7, #4]
 800261c:	1c59      	adds	r1, r3, #1
 800261e:	80b9      	strh	r1, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	2207      	movs	r2, #7
 8002624:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002628:	4b34      	ldr	r3, [pc, #208]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	88bb      	ldrh	r3, [r7, #4]
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	80b9      	strh	r1, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	2201      	movs	r2, #1
 8002636:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800263a:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	88bb      	ldrh	r3, [r7, #4]
 8002640:	1c59      	adds	r1, r3, #1
 8002642:	80b9      	strh	r1, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	4b2e      	ldr	r3, [pc, #184]	@ (8002700 <send_DHCP_DISCOVER+0x174>)
 8002648:	7819      	ldrb	r1, [r3, #0]
 800264a:	1813      	adds	r3, r2, r0
 800264c:	460a      	mov	r2, r1
 800264e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002652:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	88bb      	ldrh	r3, [r7, #4]
 8002658:	1c59      	adds	r1, r3, #1
 800265a:	80b9      	strh	r1, [r7, #4]
 800265c:	4618      	mov	r0, r3
 800265e:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <send_DHCP_DISCOVER+0x174>)
 8002660:	7859      	ldrb	r1, [r3, #1]
 8002662:	1813      	adds	r3, r2, r0
 8002664:	460a      	mov	r2, r1
 8002666:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800266a:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	88bb      	ldrh	r3, [r7, #4]
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	80b9      	strh	r1, [r7, #4]
 8002674:	4618      	mov	r0, r3
 8002676:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <send_DHCP_DISCOVER+0x174>)
 8002678:	7899      	ldrb	r1, [r3, #2]
 800267a:	1813      	adds	r3, r2, r0
 800267c:	460a      	mov	r2, r1
 800267e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	88bb      	ldrh	r3, [r7, #4]
 8002688:	1c59      	adds	r1, r3, #1
 800268a:	80b9      	strh	r1, [r7, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <send_DHCP_DISCOVER+0x174>)
 8002690:	78d9      	ldrb	r1, [r3, #3]
 8002692:	1813      	adds	r3, r2, r0
 8002694:	460a      	mov	r2, r1
 8002696:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800269a:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	88bb      	ldrh	r3, [r7, #4]
 80026a0:	1c59      	adds	r1, r3, #1
 80026a2:	80b9      	strh	r1, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <send_DHCP_DISCOVER+0x174>)
 80026a8:	7919      	ldrb	r1, [r3, #4]
 80026aa:	1813      	adds	r3, r2, r0
 80026ac:	460a      	mov	r2, r1
 80026ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80026b2:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	88bb      	ldrh	r3, [r7, #4]
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	80b9      	strh	r1, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <send_DHCP_DISCOVER+0x174>)
 80026c0:	7959      	ldrb	r1, [r3, #5]
 80026c2:	1813      	adds	r3, r2, r0
 80026c4:	460a      	mov	r2, r1
 80026c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	88bb      	ldrh	r3, [r7, #4]
 80026d0:	1c59      	adds	r1, r3, #1
 80026d2:	80b9      	strh	r1, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	220c      	movs	r2, #12
 80026d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80026dc:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <send_DHCP_DISCOVER+0x170>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	80b9      	strh	r1, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	80fb      	strh	r3, [r7, #6]
 80026f2:	e017      	b.n	8002724 <send_DHCP_DISCOVER+0x198>
 80026f4:	20000aa4 	.word	0x20000aa4
 80026f8:	20000aa8 	.word	0x20000aa8
 80026fc:	20000acc 	.word	0x20000acc
 8002700:	20000ad0 	.word	0x20000ad0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002704:	88f9      	ldrh	r1, [r7, #6]
 8002706:	4b80      	ldr	r3, [pc, #512]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	88bb      	ldrh	r3, [r7, #4]
 800270c:	1c58      	adds	r0, r3, #1
 800270e:	80b8      	strh	r0, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	4b7e      	ldr	r3, [pc, #504]	@ (800290c <send_DHCP_DISCOVER+0x380>)
 8002714:	5c59      	ldrb	r1, [r3, r1]
 8002716:	1813      	adds	r3, r2, r0
 8002718:	460a      	mov	r2, r1
 800271a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	3301      	adds	r3, #1
 8002722:	80fb      	strh	r3, [r7, #6]
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4a79      	ldr	r2, [pc, #484]	@ (800290c <send_DHCP_DISCOVER+0x380>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1ea      	bne.n	8002704 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800272e:	4b78      	ldr	r3, [pc, #480]	@ (8002910 <send_DHCP_DISCOVER+0x384>)
 8002730:	78db      	ldrb	r3, [r3, #3]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b74      	ldr	r3, [pc, #464]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002738:	681c      	ldr	r4, [r3, #0]
 800273a:	88bb      	ldrh	r3, [r7, #4]
 800273c:	1c59      	adds	r1, r3, #1
 800273e:	80b9      	strh	r1, [r7, #4]
 8002740:	461d      	mov	r5, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f001 f960 	bl	8003a08 <NibbleToHex>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	1963      	adds	r3, r4, r5
 800274e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002752:	4b6f      	ldr	r3, [pc, #444]	@ (8002910 <send_DHCP_DISCOVER+0x384>)
 8002754:	78da      	ldrb	r2, [r3, #3]
 8002756:	4b6c      	ldr	r3, [pc, #432]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002758:	681c      	ldr	r4, [r3, #0]
 800275a:	88bb      	ldrh	r3, [r7, #4]
 800275c:	1c59      	adds	r1, r3, #1
 800275e:	80b9      	strh	r1, [r7, #4]
 8002760:	461d      	mov	r5, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f001 f950 	bl	8003a08 <NibbleToHex>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	1963      	adds	r3, r4, r5
 800276e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002772:	4b67      	ldr	r3, [pc, #412]	@ (8002910 <send_DHCP_DISCOVER+0x384>)
 8002774:	791b      	ldrb	r3, [r3, #4]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b63      	ldr	r3, [pc, #396]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 800277c:	681c      	ldr	r4, [r3, #0]
 800277e:	88bb      	ldrh	r3, [r7, #4]
 8002780:	1c59      	adds	r1, r3, #1
 8002782:	80b9      	strh	r1, [r7, #4]
 8002784:	461d      	mov	r5, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f001 f93e 	bl	8003a08 <NibbleToHex>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	1963      	adds	r3, r4, r5
 8002792:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002796:	4b5e      	ldr	r3, [pc, #376]	@ (8002910 <send_DHCP_DISCOVER+0x384>)
 8002798:	791a      	ldrb	r2, [r3, #4]
 800279a:	4b5b      	ldr	r3, [pc, #364]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 800279c:	681c      	ldr	r4, [r3, #0]
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	1c59      	adds	r1, r3, #1
 80027a2:	80b9      	strh	r1, [r7, #4]
 80027a4:	461d      	mov	r5, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f001 f92e 	bl	8003a08 <NibbleToHex>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	1963      	adds	r3, r4, r5
 80027b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80027b6:	4b56      	ldr	r3, [pc, #344]	@ (8002910 <send_DHCP_DISCOVER+0x384>)
 80027b8:	795b      	ldrb	r3, [r3, #5]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b52      	ldr	r3, [pc, #328]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 80027c0:	681c      	ldr	r4, [r3, #0]
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	80b9      	strh	r1, [r7, #4]
 80027c8:	461d      	mov	r5, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f001 f91c 	bl	8003a08 <NibbleToHex>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	1963      	adds	r3, r4, r5
 80027d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80027da:	4b4d      	ldr	r3, [pc, #308]	@ (8002910 <send_DHCP_DISCOVER+0x384>)
 80027dc:	795a      	ldrb	r2, [r3, #5]
 80027de:	4b4a      	ldr	r3, [pc, #296]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 80027e0:	681c      	ldr	r4, [r3, #0]
 80027e2:	88bb      	ldrh	r3, [r7, #4]
 80027e4:	1c59      	adds	r1, r3, #1
 80027e6:	80b9      	strh	r1, [r7, #4]
 80027e8:	461d      	mov	r5, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f001 f90c 	bl	8003a08 <NibbleToHex>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	1963      	adds	r3, r4, r5
 80027f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	b2d9      	uxtb	r1, r3
 80027fe:	4b42      	ldr	r3, [pc, #264]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	88b8      	ldrh	r0, [r7, #4]
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	3307      	adds	r3, #7
 8002808:	1ac3      	subs	r3, r0, r3
 800280a:	3106      	adds	r1, #6
 800280c:	b2c9      	uxtb	r1, r1
 800280e:	4413      	add	r3, r2
 8002810:	460a      	mov	r2, r1
 8002812:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8002816:	4b3c      	ldr	r3, [pc, #240]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	88bb      	ldrh	r3, [r7, #4]
 800281c:	1c59      	adds	r1, r3, #1
 800281e:	80b9      	strh	r1, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	2237      	movs	r2, #55	@ 0x37
 8002824:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8002828:	4b37      	ldr	r3, [pc, #220]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	88bb      	ldrh	r3, [r7, #4]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	80b9      	strh	r1, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	2206      	movs	r2, #6
 8002836:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800283a:	4b33      	ldr	r3, [pc, #204]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	88bb      	ldrh	r3, [r7, #4]
 8002840:	1c59      	adds	r1, r3, #1
 8002842:	80b9      	strh	r1, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	2201      	movs	r2, #1
 8002848:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800284c:	4b2e      	ldr	r3, [pc, #184]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	88bb      	ldrh	r3, [r7, #4]
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	80b9      	strh	r1, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	2203      	movs	r2, #3
 800285a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800285e:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	88bb      	ldrh	r3, [r7, #4]
 8002864:	1c59      	adds	r1, r3, #1
 8002866:	80b9      	strh	r1, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	2206      	movs	r2, #6
 800286c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002870:	4b25      	ldr	r3, [pc, #148]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	88bb      	ldrh	r3, [r7, #4]
 8002876:	1c59      	adds	r1, r3, #1
 8002878:	80b9      	strh	r1, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	220f      	movs	r2, #15
 800287e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	1c59      	adds	r1, r3, #1
 800288a:	80b9      	strh	r1, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	223a      	movs	r2, #58	@ 0x3a
 8002890:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002894:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	88bb      	ldrh	r3, [r7, #4]
 800289a:	1c59      	adds	r1, r3, #1
 800289c:	80b9      	strh	r1, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	223b      	movs	r2, #59	@ 0x3b
 80028a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	88bb      	ldrh	r3, [r7, #4]
 80028ac:	1c59      	adds	r1, r3, #1
 80028ae:	80b9      	strh	r1, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	22ff      	movs	r2, #255	@ 0xff
 80028b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80028b8:	88bb      	ldrh	r3, [r7, #4]
 80028ba:	80fb      	strh	r3, [r7, #6]
 80028bc:	e009      	b.n	80028d2 <send_DHCP_DISCOVER+0x346>
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	4413      	add	r3, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	3301      	adds	r3, #1
 80028d0:	80fb      	strh	r3, [r7, #6]
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80028d8:	d3f1      	bcc.n	80028be <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80028da:	23ff      	movs	r3, #255	@ 0xff
 80028dc:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80028de:	23ff      	movs	r3, #255	@ 0xff
 80028e0:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80028e2:	23ff      	movs	r3, #255	@ 0xff
 80028e4:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80028e6:	23ff      	movs	r3, #255	@ 0xff
 80028e8:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <send_DHCP_DISCOVER+0x388>)
 80028ec:	7818      	ldrb	r0, [r3, #0]
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <send_DHCP_DISCOVER+0x37c>)
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	463b      	mov	r3, r7
 80028f4:	2243      	movs	r2, #67	@ 0x43
 80028f6:	9200      	str	r2, [sp, #0]
 80028f8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80028fc:	f002 fbcc 	bl	8005098 <sendto>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bdb0      	pop	{r4, r5, r7, pc}
 8002908:	20000acc 	.word	0x20000acc
 800290c:	2000003c 	.word	0x2000003c
 8002910:	20000ad0 	.word	0x20000ad0
 8002914:	20000aa0 	.word	0x20000aa0

08002918 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8002922:	f7ff fd3d 	bl	80023a0 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8002926:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <send_DHCP_REQUEST+0x7c>)
 8002928:	f993 3000 	ldrsb.w	r3, [r3]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d004      	beq.n	800293a <send_DHCP_REQUEST+0x22>
 8002930:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <send_DHCP_REQUEST+0x7c>)
 8002932:	f993 3000 	ldrsb.w	r3, [r3]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d134      	bne.n	80029a4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <send_DHCP_REQUEST+0x80>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330a      	adds	r3, #10
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002944:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <send_DHCP_REQUEST+0x80>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330a      	adds	r3, #10
 800294a:	3301      	adds	r3, #1
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <send_DHCP_REQUEST+0x80>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a11      	ldr	r2, [pc, #68]	@ (800299c <send_DHCP_REQUEST+0x84>)
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <send_DHCP_REQUEST+0x80>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <send_DHCP_REQUEST+0x84>)
 8002960:	7852      	ldrb	r2, [r2, #1]
 8002962:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <send_DHCP_REQUEST+0x80>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <send_DHCP_REQUEST+0x84>)
 800296a:	7892      	ldrb	r2, [r2, #2]
 800296c:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <send_DHCP_REQUEST+0x80>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <send_DHCP_REQUEST+0x84>)
 8002974:	78d2      	ldrb	r2, [r2, #3]
 8002976:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <send_DHCP_REQUEST+0x88>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <send_DHCP_REQUEST+0x88>)
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <send_DHCP_REQUEST+0x88>)
 8002986:	789b      	ldrb	r3, [r3, #2]
 8002988:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <send_DHCP_REQUEST+0x88>)
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	e010      	b.n	80029b4 <send_DHCP_REQUEST+0x9c>
 8002992:	bf00      	nop
 8002994:	20000ac0 	.word	0x20000ac0
 8002998:	20000acc 	.word	0x20000acc
 800299c:	20000ab0 	.word	0x20000ab0
 80029a0:	20000aa4 	.word	0x20000aa4
   }
   else
   {
   	ip[0] = 255;
 80029a4:	23ff      	movs	r3, #255	@ 0xff
 80029a6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80029a8:	23ff      	movs	r3, #255	@ 0xff
 80029aa:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80029ac:	23ff      	movs	r3, #255	@ 0xff
 80029ae:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80029b0:	23ff      	movs	r3, #255	@ 0xff
 80029b2:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80029b4:	2304      	movs	r3, #4
 80029b6:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80029b8:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	897b      	ldrh	r3, [r7, #10]
 80029be:	1c59      	adds	r1, r3, #1
 80029c0:	8179      	strh	r1, [r7, #10]
 80029c2:	4413      	add	r3, r2
 80029c4:	2235      	movs	r2, #53	@ 0x35
 80029c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80029ca:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	897b      	ldrh	r3, [r7, #10]
 80029d0:	1c59      	adds	r1, r3, #1
 80029d2:	8179      	strh	r1, [r7, #10]
 80029d4:	4413      	add	r3, r2
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80029dc:	4b84      	ldr	r3, [pc, #528]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	8179      	strh	r1, [r7, #10]
 80029e6:	4413      	add	r3, r2
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80029ee:	4b80      	ldr	r3, [pc, #512]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	1c59      	adds	r1, r3, #1
 80029f6:	8179      	strh	r1, [r7, #10]
 80029f8:	4413      	add	r3, r2
 80029fa:	223d      	movs	r2, #61	@ 0x3d
 80029fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002a00:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	897b      	ldrh	r3, [r7, #10]
 8002a06:	1c59      	adds	r1, r3, #1
 8002a08:	8179      	strh	r1, [r7, #10]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002a12:	4b77      	ldr	r3, [pc, #476]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	1c59      	adds	r1, r3, #1
 8002a1a:	8179      	strh	r1, [r7, #10]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002a24:	4b72      	ldr	r3, [pc, #456]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	897b      	ldrh	r3, [r7, #10]
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	8179      	strh	r1, [r7, #10]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	4b70      	ldr	r3, [pc, #448]	@ (8002bf4 <send_DHCP_REQUEST+0x2dc>)
 8002a32:	7819      	ldrb	r1, [r3, #0]
 8002a34:	1813      	adds	r3, r2, r0
 8002a36:	460a      	mov	r2, r1
 8002a38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	897b      	ldrh	r3, [r7, #10]
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	8179      	strh	r1, [r7, #10]
 8002a46:	4618      	mov	r0, r3
 8002a48:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf4 <send_DHCP_REQUEST+0x2dc>)
 8002a4a:	7859      	ldrb	r1, [r3, #1]
 8002a4c:	1813      	adds	r3, r2, r0
 8002a4e:	460a      	mov	r2, r1
 8002a50:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002a54:	4b66      	ldr	r3, [pc, #408]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	8179      	strh	r1, [r7, #10]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	4b64      	ldr	r3, [pc, #400]	@ (8002bf4 <send_DHCP_REQUEST+0x2dc>)
 8002a62:	7899      	ldrb	r1, [r3, #2]
 8002a64:	1813      	adds	r3, r2, r0
 8002a66:	460a      	mov	r2, r1
 8002a68:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002a6c:	4b60      	ldr	r3, [pc, #384]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	897b      	ldrh	r3, [r7, #10]
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	8179      	strh	r1, [r7, #10]
 8002a76:	4618      	mov	r0, r3
 8002a78:	4b5e      	ldr	r3, [pc, #376]	@ (8002bf4 <send_DHCP_REQUEST+0x2dc>)
 8002a7a:	78d9      	ldrb	r1, [r3, #3]
 8002a7c:	1813      	adds	r3, r2, r0
 8002a7e:	460a      	mov	r2, r1
 8002a80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002a84:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	897b      	ldrh	r3, [r7, #10]
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	8179      	strh	r1, [r7, #10]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <send_DHCP_REQUEST+0x2dc>)
 8002a92:	7919      	ldrb	r1, [r3, #4]
 8002a94:	1813      	adds	r3, r2, r0
 8002a96:	460a      	mov	r2, r1
 8002a98:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002a9c:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	897b      	ldrh	r3, [r7, #10]
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	8179      	strh	r1, [r7, #10]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4b52      	ldr	r3, [pc, #328]	@ (8002bf4 <send_DHCP_REQUEST+0x2dc>)
 8002aaa:	7959      	ldrb	r1, [r3, #5]
 8002aac:	1813      	adds	r3, r2, r0
 8002aae:	460a      	mov	r2, r1
 8002ab0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	2bff      	cmp	r3, #255	@ 0xff
 8002ab8:	f040 8084 	bne.w	8002bc4 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002abc:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	897b      	ldrh	r3, [r7, #10]
 8002ac2:	1c59      	adds	r1, r3, #1
 8002ac4:	8179      	strh	r1, [r7, #10]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	2232      	movs	r2, #50	@ 0x32
 8002aca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8002ace:	4b48      	ldr	r3, [pc, #288]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	1c59      	adds	r1, r3, #1
 8002ad6:	8179      	strh	r1, [r7, #10]
 8002ad8:	4413      	add	r3, r2
 8002ada:	2204      	movs	r2, #4
 8002adc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002ae0:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	897b      	ldrh	r3, [r7, #10]
 8002ae6:	1c59      	adds	r1, r3, #1
 8002ae8:	8179      	strh	r1, [r7, #10]
 8002aea:	4618      	mov	r0, r3
 8002aec:	4b42      	ldr	r3, [pc, #264]	@ (8002bf8 <send_DHCP_REQUEST+0x2e0>)
 8002aee:	7819      	ldrb	r1, [r3, #0]
 8002af0:	1813      	adds	r3, r2, r0
 8002af2:	460a      	mov	r2, r1
 8002af4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002af8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	897b      	ldrh	r3, [r7, #10]
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	8179      	strh	r1, [r7, #10]
 8002b02:	4618      	mov	r0, r3
 8002b04:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf8 <send_DHCP_REQUEST+0x2e0>)
 8002b06:	7859      	ldrb	r1, [r3, #1]
 8002b08:	1813      	adds	r3, r2, r0
 8002b0a:	460a      	mov	r2, r1
 8002b0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002b10:	4b37      	ldr	r3, [pc, #220]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	897b      	ldrh	r3, [r7, #10]
 8002b16:	1c59      	adds	r1, r3, #1
 8002b18:	8179      	strh	r1, [r7, #10]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	4b36      	ldr	r3, [pc, #216]	@ (8002bf8 <send_DHCP_REQUEST+0x2e0>)
 8002b1e:	7899      	ldrb	r1, [r3, #2]
 8002b20:	1813      	adds	r3, r2, r0
 8002b22:	460a      	mov	r2, r1
 8002b24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002b28:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	897b      	ldrh	r3, [r7, #10]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	8179      	strh	r1, [r7, #10]
 8002b32:	4618      	mov	r0, r3
 8002b34:	4b30      	ldr	r3, [pc, #192]	@ (8002bf8 <send_DHCP_REQUEST+0x2e0>)
 8002b36:	78d9      	ldrb	r1, [r3, #3]
 8002b38:	1813      	adds	r3, r2, r0
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8002b40:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	1c59      	adds	r1, r3, #1
 8002b48:	8179      	strh	r1, [r7, #10]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	2236      	movs	r2, #54	@ 0x36
 8002b4e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8002b52:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	1c59      	adds	r1, r3, #1
 8002b5a:	8179      	strh	r1, [r7, #10]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2204      	movs	r2, #4
 8002b60:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002b64:	4b22      	ldr	r3, [pc, #136]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	1c59      	adds	r1, r3, #1
 8002b6c:	8179      	strh	r1, [r7, #10]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <send_DHCP_REQUEST+0x2e4>)
 8002b72:	7819      	ldrb	r1, [r3, #0]
 8002b74:	1813      	adds	r3, r2, r0
 8002b76:	460a      	mov	r2, r1
 8002b78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	8179      	strh	r1, [r7, #10]
 8002b86:	4618      	mov	r0, r3
 8002b88:	4b1c      	ldr	r3, [pc, #112]	@ (8002bfc <send_DHCP_REQUEST+0x2e4>)
 8002b8a:	7859      	ldrb	r1, [r3, #1]
 8002b8c:	1813      	adds	r3, r2, r0
 8002b8e:	460a      	mov	r2, r1
 8002b90:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	897b      	ldrh	r3, [r7, #10]
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	8179      	strh	r1, [r7, #10]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <send_DHCP_REQUEST+0x2e4>)
 8002ba2:	7899      	ldrb	r1, [r3, #2]
 8002ba4:	1813      	adds	r3, r2, r0
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8002bac:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	897b      	ldrh	r3, [r7, #10]
 8002bb2:	1c59      	adds	r1, r3, #1
 8002bb4:	8179      	strh	r1, [r7, #10]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <send_DHCP_REQUEST+0x2e4>)
 8002bba:	78d9      	ldrb	r1, [r3, #3]
 8002bbc:	1813      	adds	r3, r2, r0
 8002bbe:	460a      	mov	r2, r1
 8002bc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	897b      	ldrh	r3, [r7, #10]
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	8179      	strh	r1, [r7, #10]
 8002bce:	4413      	add	r3, r2
 8002bd0:	220c      	movs	r2, #12
 8002bd2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <send_DHCP_REQUEST+0x2d8>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	8179      	strh	r1, [r7, #10]
 8002be0:	4413      	add	r3, r2
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e019      	b.n	8002c22 <send_DHCP_REQUEST+0x30a>
 8002bee:	bf00      	nop
 8002bf0:	20000acc 	.word	0x20000acc
 8002bf4:	20000ad0 	.word	0x20000ad0
 8002bf8:	20000ab0 	.word	0x20000ab0
 8002bfc:	20000aa4 	.word	0x20000aa4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002c00:	4b86      	ldr	r3, [pc, #536]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	1c59      	adds	r1, r3, #1
 8002c08:	8179      	strh	r1, [r7, #10]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4984      	ldr	r1, [pc, #528]	@ (8002e20 <send_DHCP_REQUEST+0x508>)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	440b      	add	r3, r1
 8002c12:	7819      	ldrb	r1, [r3, #0]
 8002c14:	1813      	adds	r3, r2, r0
 8002c16:	460a      	mov	r2, r1
 8002c18:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4a7f      	ldr	r2, [pc, #508]	@ (8002e20 <send_DHCP_REQUEST+0x508>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e8      	bne.n	8002c00 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002c2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e24 <send_DHCP_REQUEST+0x50c>)
 8002c30:	78db      	ldrb	r3, [r3, #3]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b79      	ldr	r3, [pc, #484]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002c38:	681c      	ldr	r4, [r3, #0]
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	1c59      	adds	r1, r3, #1
 8002c3e:	8179      	strh	r1, [r7, #10]
 8002c40:	461d      	mov	r5, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fee0 	bl	8003a08 <NibbleToHex>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	1963      	adds	r3, r4, r5
 8002c4e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002c52:	4b74      	ldr	r3, [pc, #464]	@ (8002e24 <send_DHCP_REQUEST+0x50c>)
 8002c54:	78da      	ldrb	r2, [r3, #3]
 8002c56:	4b71      	ldr	r3, [pc, #452]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002c58:	681c      	ldr	r4, [r3, #0]
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	1c59      	adds	r1, r3, #1
 8002c5e:	8179      	strh	r1, [r7, #10]
 8002c60:	461d      	mov	r5, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 fed0 	bl	8003a08 <NibbleToHex>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	1963      	adds	r3, r4, r5
 8002c6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002c72:	4b6c      	ldr	r3, [pc, #432]	@ (8002e24 <send_DHCP_REQUEST+0x50c>)
 8002c74:	791b      	ldrb	r3, [r3, #4]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b68      	ldr	r3, [pc, #416]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002c7c:	681c      	ldr	r4, [r3, #0]
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	8179      	strh	r1, [r7, #10]
 8002c84:	461d      	mov	r5, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f000 febe 	bl	8003a08 <NibbleToHex>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	1963      	adds	r3, r4, r5
 8002c92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002c96:	4b63      	ldr	r3, [pc, #396]	@ (8002e24 <send_DHCP_REQUEST+0x50c>)
 8002c98:	791a      	ldrb	r2, [r3, #4]
 8002c9a:	4b60      	ldr	r3, [pc, #384]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002c9c:	681c      	ldr	r4, [r3, #0]
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	8179      	strh	r1, [r7, #10]
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f000 feae 	bl	8003a08 <NibbleToHex>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	1963      	adds	r3, r4, r5
 8002cb2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e24 <send_DHCP_REQUEST+0x50c>)
 8002cb8:	795b      	ldrb	r3, [r3, #5]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b57      	ldr	r3, [pc, #348]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002cc0:	681c      	ldr	r4, [r3, #0]
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	1c59      	adds	r1, r3, #1
 8002cc6:	8179      	strh	r1, [r7, #10]
 8002cc8:	461d      	mov	r5, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 fe9c 	bl	8003a08 <NibbleToHex>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	1963      	adds	r3, r4, r5
 8002cd6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8002cda:	4b52      	ldr	r3, [pc, #328]	@ (8002e24 <send_DHCP_REQUEST+0x50c>)
 8002cdc:	795a      	ldrb	r2, [r3, #5]
 8002cde:	4b4f      	ldr	r3, [pc, #316]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002ce0:	681c      	ldr	r4, [r3, #0]
 8002ce2:	897b      	ldrh	r3, [r7, #10]
 8002ce4:	1c59      	adds	r1, r3, #1
 8002ce6:	8179      	strh	r1, [r7, #10]
 8002ce8:	461d      	mov	r5, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 fe8c 	bl	8003a08 <NibbleToHex>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	1963      	adds	r3, r4, r5
 8002cf6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	b2d9      	uxtb	r1, r3
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	8978      	ldrh	r0, [r7, #10]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3307      	adds	r3, #7
 8002d08:	1ac3      	subs	r3, r0, r3
 8002d0a:	3106      	adds	r1, #6
 8002d0c:	b2c9      	uxtb	r1, r1
 8002d0e:	4413      	add	r3, r2
 8002d10:	460a      	mov	r2, r1
 8002d12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8002d16:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	1c59      	adds	r1, r3, #1
 8002d1e:	8179      	strh	r1, [r7, #10]
 8002d20:	4413      	add	r3, r2
 8002d22:	2237      	movs	r2, #55	@ 0x37
 8002d24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8002d28:	4b3c      	ldr	r3, [pc, #240]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	897b      	ldrh	r3, [r7, #10]
 8002d2e:	1c59      	adds	r1, r3, #1
 8002d30:	8179      	strh	r1, [r7, #10]
 8002d32:	4413      	add	r3, r2
 8002d34:	2208      	movs	r2, #8
 8002d36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002d3a:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	1c59      	adds	r1, r3, #1
 8002d42:	8179      	strh	r1, [r7, #10]
 8002d44:	4413      	add	r3, r2
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002d4c:	4b33      	ldr	r3, [pc, #204]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	897b      	ldrh	r3, [r7, #10]
 8002d52:	1c59      	adds	r1, r3, #1
 8002d54:	8179      	strh	r1, [r7, #10]
 8002d56:	4413      	add	r3, r2
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	1c59      	adds	r1, r3, #1
 8002d66:	8179      	strh	r1, [r7, #10]
 8002d68:	4413      	add	r3, r2
 8002d6a:	2206      	movs	r2, #6
 8002d6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002d70:	4b2a      	ldr	r3, [pc, #168]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	897b      	ldrh	r3, [r7, #10]
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	8179      	strh	r1, [r7, #10]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002d82:	4b26      	ldr	r3, [pc, #152]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	1c59      	adds	r1, r3, #1
 8002d8a:	8179      	strh	r1, [r7, #10]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	223a      	movs	r2, #58	@ 0x3a
 8002d90:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002d94:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	8179      	strh	r1, [r7, #10]
 8002d9e:	4413      	add	r3, r2
 8002da0:	223b      	movs	r2, #59	@ 0x3b
 8002da2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8002da6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	1c59      	adds	r1, r3, #1
 8002dae:	8179      	strh	r1, [r7, #10]
 8002db0:	4413      	add	r3, r2
 8002db2:	221f      	movs	r2, #31
 8002db4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8002db8:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	897b      	ldrh	r3, [r7, #10]
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	8179      	strh	r1, [r7, #10]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2221      	movs	r2, #33	@ 0x21
 8002dc6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002dca:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	1c59      	adds	r1, r3, #1
 8002dd2:	8179      	strh	r1, [r7, #10]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	22ff      	movs	r2, #255	@ 0xff
 8002dd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002ddc:	897b      	ldrh	r3, [r7, #10]
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e009      	b.n	8002df6 <send_DHCP_REQUEST+0x4de>
 8002de2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	33ec      	adds	r3, #236	@ 0xec
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3301      	adds	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002dfc:	dbf1      	blt.n	8002de2 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <send_DHCP_REQUEST+0x510>)
 8002e00:	7818      	ldrb	r0, [r3, #0]
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <send_DHCP_REQUEST+0x504>)
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	2243      	movs	r2, #67	@ 0x43
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002e10:	f002 f942 	bl	8005098 <sendto>

}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1c:	20000acc 	.word	0x20000acc
 8002e20:	2000003c 	.word	0x2000003c
 8002e24:	20000ad0 	.word	0x20000ad0
 8002e28:	20000aa0 	.word	0x20000aa0

08002e2c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8002e36:	f7ff fab3 	bl	80023a0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002e3e:	4b9f      	ldr	r3, [pc, #636]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330a      	adds	r3, #10
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002e48:	4b9c      	ldr	r3, [pc, #624]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330a      	adds	r3, #10
 8002e4e:	3301      	adds	r3, #1
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002e54:	4b99      	ldr	r3, [pc, #612]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	897b      	ldrh	r3, [r7, #10]
 8002e5a:	1c59      	adds	r1, r3, #1
 8002e5c:	8179      	strh	r1, [r7, #10]
 8002e5e:	4413      	add	r3, r2
 8002e60:	2235      	movs	r2, #53	@ 0x35
 8002e62:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002e66:	4b95      	ldr	r3, [pc, #596]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	1c59      	adds	r1, r3, #1
 8002e6e:	8179      	strh	r1, [r7, #10]
 8002e70:	4413      	add	r3, r2
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8002e78:	4b90      	ldr	r3, [pc, #576]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	8179      	strh	r1, [r7, #10]
 8002e82:	4413      	add	r3, r2
 8002e84:	2204      	movs	r2, #4
 8002e86:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002e8a:	4b8c      	ldr	r3, [pc, #560]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	897b      	ldrh	r3, [r7, #10]
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	8179      	strh	r1, [r7, #10]
 8002e94:	4413      	add	r3, r2
 8002e96:	223d      	movs	r2, #61	@ 0x3d
 8002e98:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002e9c:	4b87      	ldr	r3, [pc, #540]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	897b      	ldrh	r3, [r7, #10]
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	8179      	strh	r1, [r7, #10]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002eae:	4b83      	ldr	r3, [pc, #524]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	1c59      	adds	r1, r3, #1
 8002eb6:	8179      	strh	r1, [r7, #10]
 8002eb8:	4413      	add	r3, r2
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	1c59      	adds	r1, r3, #1
 8002ec8:	8179      	strh	r1, [r7, #10]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80030c0 <send_DHCP_DECLINE+0x294>)
 8002ece:	7819      	ldrb	r1, [r3, #0]
 8002ed0:	1813      	adds	r3, r2, r0
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002ed8:	4b78      	ldr	r3, [pc, #480]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	1c59      	adds	r1, r3, #1
 8002ee0:	8179      	strh	r1, [r7, #10]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <send_DHCP_DECLINE+0x294>)
 8002ee6:	7859      	ldrb	r1, [r3, #1]
 8002ee8:	1813      	adds	r3, r2, r0
 8002eea:	460a      	mov	r2, r1
 8002eec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002ef0:	4b72      	ldr	r3, [pc, #456]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	897b      	ldrh	r3, [r7, #10]
 8002ef6:	1c59      	adds	r1, r3, #1
 8002ef8:	8179      	strh	r1, [r7, #10]
 8002efa:	4618      	mov	r0, r3
 8002efc:	4b70      	ldr	r3, [pc, #448]	@ (80030c0 <send_DHCP_DECLINE+0x294>)
 8002efe:	7899      	ldrb	r1, [r3, #2]
 8002f00:	1813      	adds	r3, r2, r0
 8002f02:	460a      	mov	r2, r1
 8002f04:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002f08:	4b6c      	ldr	r3, [pc, #432]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	1c59      	adds	r1, r3, #1
 8002f10:	8179      	strh	r1, [r7, #10]
 8002f12:	4618      	mov	r0, r3
 8002f14:	4b6a      	ldr	r3, [pc, #424]	@ (80030c0 <send_DHCP_DECLINE+0x294>)
 8002f16:	78d9      	ldrb	r1, [r3, #3]
 8002f18:	1813      	adds	r3, r2, r0
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	897b      	ldrh	r3, [r7, #10]
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	8179      	strh	r1, [r7, #10]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	4b64      	ldr	r3, [pc, #400]	@ (80030c0 <send_DHCP_DECLINE+0x294>)
 8002f2e:	7919      	ldrb	r1, [r3, #4]
 8002f30:	1813      	adds	r3, r2, r0
 8002f32:	460a      	mov	r2, r1
 8002f34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002f38:	4b60      	ldr	r3, [pc, #384]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	897b      	ldrh	r3, [r7, #10]
 8002f3e:	1c59      	adds	r1, r3, #1
 8002f40:	8179      	strh	r1, [r7, #10]
 8002f42:	4618      	mov	r0, r3
 8002f44:	4b5e      	ldr	r3, [pc, #376]	@ (80030c0 <send_DHCP_DECLINE+0x294>)
 8002f46:	7959      	ldrb	r1, [r3, #5]
 8002f48:	1813      	adds	r3, r2, r0
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002f50:	4b5a      	ldr	r3, [pc, #360]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	897b      	ldrh	r3, [r7, #10]
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	8179      	strh	r1, [r7, #10]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	2232      	movs	r2, #50	@ 0x32
 8002f5e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8002f62:	4b56      	ldr	r3, [pc, #344]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	897b      	ldrh	r3, [r7, #10]
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	8179      	strh	r1, [r7, #10]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	2204      	movs	r2, #4
 8002f70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002f74:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	897b      	ldrh	r3, [r7, #10]
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	8179      	strh	r1, [r7, #10]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	4b50      	ldr	r3, [pc, #320]	@ (80030c4 <send_DHCP_DECLINE+0x298>)
 8002f82:	7819      	ldrb	r1, [r3, #0]
 8002f84:	1813      	adds	r3, r2, r0
 8002f86:	460a      	mov	r2, r1
 8002f88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	897b      	ldrh	r3, [r7, #10]
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	8179      	strh	r1, [r7, #10]
 8002f96:	4618      	mov	r0, r3
 8002f98:	4b4a      	ldr	r3, [pc, #296]	@ (80030c4 <send_DHCP_DECLINE+0x298>)
 8002f9a:	7859      	ldrb	r1, [r3, #1]
 8002f9c:	1813      	adds	r3, r2, r0
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002fa4:	4b45      	ldr	r3, [pc, #276]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	897b      	ldrh	r3, [r7, #10]
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	8179      	strh	r1, [r7, #10]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	4b44      	ldr	r3, [pc, #272]	@ (80030c4 <send_DHCP_DECLINE+0x298>)
 8002fb2:	7899      	ldrb	r1, [r3, #2]
 8002fb4:	1813      	adds	r3, r2, r0
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	897b      	ldrh	r3, [r7, #10]
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	8179      	strh	r1, [r7, #10]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <send_DHCP_DECLINE+0x298>)
 8002fca:	78d9      	ldrb	r1, [r3, #3]
 8002fcc:	1813      	adds	r3, r2, r0
 8002fce:	460a      	mov	r2, r1
 8002fd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8002fd4:	4b39      	ldr	r3, [pc, #228]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	897b      	ldrh	r3, [r7, #10]
 8002fda:	1c59      	adds	r1, r3, #1
 8002fdc:	8179      	strh	r1, [r7, #10]
 8002fde:	4413      	add	r3, r2
 8002fe0:	2236      	movs	r2, #54	@ 0x36
 8002fe2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8002fe6:	4b35      	ldr	r3, [pc, #212]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	1c59      	adds	r1, r3, #1
 8002fee:	8179      	strh	r1, [r7, #10]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002ff8:	4b30      	ldr	r3, [pc, #192]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	897b      	ldrh	r3, [r7, #10]
 8002ffe:	1c59      	adds	r1, r3, #1
 8003000:	8179      	strh	r1, [r7, #10]
 8003002:	4618      	mov	r0, r3
 8003004:	4b30      	ldr	r3, [pc, #192]	@ (80030c8 <send_DHCP_DECLINE+0x29c>)
 8003006:	7819      	ldrb	r1, [r3, #0]
 8003008:	1813      	adds	r3, r2, r0
 800300a:	460a      	mov	r2, r1
 800300c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003010:	4b2a      	ldr	r3, [pc, #168]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	897b      	ldrh	r3, [r7, #10]
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	8179      	strh	r1, [r7, #10]
 800301a:	4618      	mov	r0, r3
 800301c:	4b2a      	ldr	r3, [pc, #168]	@ (80030c8 <send_DHCP_DECLINE+0x29c>)
 800301e:	7859      	ldrb	r1, [r3, #1]
 8003020:	1813      	adds	r3, r2, r0
 8003022:	460a      	mov	r2, r1
 8003024:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003028:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	897b      	ldrh	r3, [r7, #10]
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	8179      	strh	r1, [r7, #10]
 8003032:	4618      	mov	r0, r3
 8003034:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <send_DHCP_DECLINE+0x29c>)
 8003036:	7899      	ldrb	r1, [r3, #2]
 8003038:	1813      	adds	r3, r2, r0
 800303a:	460a      	mov	r2, r1
 800303c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003040:	4b1e      	ldr	r3, [pc, #120]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	897b      	ldrh	r3, [r7, #10]
 8003046:	1c59      	adds	r1, r3, #1
 8003048:	8179      	strh	r1, [r7, #10]
 800304a:	4618      	mov	r0, r3
 800304c:	4b1e      	ldr	r3, [pc, #120]	@ (80030c8 <send_DHCP_DECLINE+0x29c>)
 800304e:	78d9      	ldrb	r1, [r3, #3]
 8003050:	1813      	adds	r3, r2, r0
 8003052:	460a      	mov	r2, r1
 8003054:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003058:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	897b      	ldrh	r3, [r7, #10]
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	8179      	strh	r1, [r7, #10]
 8003062:	4413      	add	r3, r2
 8003064:	22ff      	movs	r2, #255	@ 0xff
 8003066:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800306a:	897b      	ldrh	r3, [r7, #10]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e009      	b.n	8003084 <send_DHCP_DECLINE+0x258>
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	33ec      	adds	r3, #236	@ 0xec
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800308a:	dbf1      	blt.n	8003070 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 800308c:	23ff      	movs	r3, #255	@ 0xff
 800308e:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8003090:	23ff      	movs	r3, #255	@ 0xff
 8003092:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003094:	23ff      	movs	r3, #255	@ 0xff
 8003096:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003098:	23ff      	movs	r3, #255	@ 0xff
 800309a:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <send_DHCP_DECLINE+0x2a0>)
 800309e:	7818      	ldrb	r0, [r3, #0]
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <send_DHCP_DECLINE+0x290>)
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2243      	movs	r2, #67	@ 0x43
 80030a8:	9200      	str	r2, [sp, #0]
 80030aa:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80030ae:	f001 fff3 	bl	8005098 <sendto>
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000acc 	.word	0x20000acc
 80030c0:	20000ad0 	.word	0x20000ad0
 80030c4:	20000ab0 	.word	0x20000ab0
 80030c8:	20000aa4 	.word	0x20000aa4
 80030cc:	20000aa0 	.word	0x20000aa0

080030d0 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80030da:	4ba1      	ldr	r3, [pc, #644]	@ (8003360 <parseDHCPMSG+0x290>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fa8d 	bl	80045fe <getSn_RX_RSR>
 80030e4:	4603      	mov	r3, r0
 80030e6:	823b      	strh	r3, [r7, #16]
 80030e8:	8a3b      	ldrh	r3, [r7, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d011      	beq.n	8003112 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80030ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003360 <parseDHCPMSG+0x290>)
 80030f0:	7818      	ldrb	r0, [r3, #0]
 80030f2:	4b9c      	ldr	r3, [pc, #624]	@ (8003364 <parseDHCPMSG+0x294>)
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	1d3c      	adds	r4, r7, #4
 80030f8:	8a3a      	ldrh	r2, [r7, #16]
 80030fa:	1cbb      	adds	r3, r7, #2
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4623      	mov	r3, r4
 8003100:	f002 f8fe 	bl	8005300 <recvfrom>
 8003104:	4603      	mov	r3, r0
 8003106:	823b      	strh	r3, [r7, #16]
   }
   else {
	   return 0;
   }

	if (svr_port == DHCP_SERVER_PORT) {
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	2b43      	cmp	r3, #67	@ 0x43
 800310c:	f040 81ed 	bne.w	80034ea <parseDHCPMSG+0x41a>
 8003110:	e001      	b.n	8003116 <parseDHCPMSG+0x46>
	   return 0;
 8003112:	2300      	movs	r3, #0
 8003114:	e1eb      	b.n	80034ee <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003116:	4b93      	ldr	r3, [pc, #588]	@ (8003364 <parseDHCPMSG+0x294>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	7f1a      	ldrb	r2, [r3, #28]
 800311c:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <parseDHCPMSG+0x298>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d124      	bne.n	800316e <parseDHCPMSG+0x9e>
 8003124:	4b8f      	ldr	r3, [pc, #572]	@ (8003364 <parseDHCPMSG+0x294>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	7f5a      	ldrb	r2, [r3, #29]
 800312a:	4b8f      	ldr	r3, [pc, #572]	@ (8003368 <parseDHCPMSG+0x298>)
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	429a      	cmp	r2, r3
 8003130:	d11d      	bne.n	800316e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003132:	4b8c      	ldr	r3, [pc, #560]	@ (8003364 <parseDHCPMSG+0x294>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	7f9a      	ldrb	r2, [r3, #30]
 8003138:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <parseDHCPMSG+0x298>)
 800313a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d116      	bne.n	800316e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003140:	4b88      	ldr	r3, [pc, #544]	@ (8003364 <parseDHCPMSG+0x294>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	7fda      	ldrb	r2, [r3, #31]
 8003146:	4b88      	ldr	r3, [pc, #544]	@ (8003368 <parseDHCPMSG+0x298>)
 8003148:	78db      	ldrb	r3, [r3, #3]
 800314a:	429a      	cmp	r2, r3
 800314c:	d10f      	bne.n	800316e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800314e:	4b85      	ldr	r3, [pc, #532]	@ (8003364 <parseDHCPMSG+0x294>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003156:	4b84      	ldr	r3, [pc, #528]	@ (8003368 <parseDHCPMSG+0x298>)
 8003158:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d107      	bne.n	800316e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800315e:	4b81      	ldr	r3, [pc, #516]	@ (8003364 <parseDHCPMSG+0x294>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003166:	4b80      	ldr	r3, [pc, #512]	@ (8003368 <parseDHCPMSG+0x298>)
 8003168:	795b      	ldrb	r3, [r3, #5]
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800316e:	2300      	movs	r3, #0
 8003170:	e1bd      	b.n	80034ee <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8003172:	4b7e      	ldr	r3, [pc, #504]	@ (800336c <parseDHCPMSG+0x29c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <parseDHCPMSG+0xc2>
 800317a:	4b7c      	ldr	r3, [pc, #496]	@ (800336c <parseDHCPMSG+0x29c>)
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <parseDHCPMSG+0xc2>
 8003182:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <parseDHCPMSG+0x29c>)
 8003184:	789b      	ldrb	r3, [r3, #2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <parseDHCPMSG+0xc2>
 800318a:	4b78      	ldr	r3, [pc, #480]	@ (800336c <parseDHCPMSG+0x29c>)
 800318c:	78db      	ldrb	r3, [r3, #3]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d029      	beq.n	80031e6 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003192:	793a      	ldrb	r2, [r7, #4]
 8003194:	4b75      	ldr	r3, [pc, #468]	@ (800336c <parseDHCPMSG+0x29c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d10e      	bne.n	80031ba <parseDHCPMSG+0xea>
 800319c:	797a      	ldrb	r2, [r7, #5]
 800319e:	4b73      	ldr	r3, [pc, #460]	@ (800336c <parseDHCPMSG+0x29c>)
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d109      	bne.n	80031ba <parseDHCPMSG+0xea>
 80031a6:	79ba      	ldrb	r2, [r7, #6]
 80031a8:	4b70      	ldr	r3, [pc, #448]	@ (800336c <parseDHCPMSG+0x29c>)
 80031aa:	789b      	ldrb	r3, [r3, #2]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d104      	bne.n	80031ba <parseDHCPMSG+0xea>
 80031b0:	79fa      	ldrb	r2, [r7, #7]
 80031b2:	4b6e      	ldr	r3, [pc, #440]	@ (800336c <parseDHCPMSG+0x29c>)
 80031b4:	78db      	ldrb	r3, [r3, #3]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d015      	beq.n	80031e6 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80031ba:	793a      	ldrb	r2, [r7, #4]
 80031bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003370 <parseDHCPMSG+0x2a0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10e      	bne.n	80031e2 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80031c4:	797a      	ldrb	r2, [r7, #5]
 80031c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003370 <parseDHCPMSG+0x2a0>)
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d109      	bne.n	80031e2 <parseDHCPMSG+0x112>
 80031ce:	79ba      	ldrb	r2, [r7, #6]
 80031d0:	4b67      	ldr	r3, [pc, #412]	@ (8003370 <parseDHCPMSG+0x2a0>)
 80031d2:	789b      	ldrb	r3, [r3, #2]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d104      	bne.n	80031e2 <parseDHCPMSG+0x112>
 80031d8:	79fa      	ldrb	r2, [r7, #7]
 80031da:	4b65      	ldr	r3, [pc, #404]	@ (8003370 <parseDHCPMSG+0x2a0>)
 80031dc:	78db      	ldrb	r3, [r3, #3]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e183      	b.n	80034ee <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80031e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003364 <parseDHCPMSG+0x294>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	33f0      	adds	r3, #240	@ 0xf0
 80031f0:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80031f2:	8a3b      	ldrh	r3, [r7, #16]
 80031f4:	3bf0      	subs	r3, #240	@ 0xf0
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4413      	add	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80031fc:	e170      	b.n	80034e0 <parseDHCPMSG+0x410>

			switch ( *p ) {
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b36      	cmp	r3, #54	@ 0x36
 8003204:	dc76      	bgt.n	80032f4 <parseDHCPMSG+0x224>
 8003206:	2b00      	cmp	r3, #0
 8003208:	f2c0 815d 	blt.w	80034c6 <parseDHCPMSG+0x3f6>
 800320c:	2b36      	cmp	r3, #54	@ 0x36
 800320e:	f200 815a 	bhi.w	80034c6 <parseDHCPMSG+0x3f6>
 8003212:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <parseDHCPMSG+0x148>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003301 	.word	0x08003301
 800321c:	08003321 	.word	0x08003321
 8003220:	080034c7 	.word	0x080034c7
 8003224:	08003379 	.word	0x08003379
 8003228:	080034c7 	.word	0x080034c7
 800322c:	080034c7 	.word	0x080034c7
 8003230:	080033c5 	.word	0x080033c5
 8003234:	080034c7 	.word	0x080034c7
 8003238:	080034c7 	.word	0x080034c7
 800323c:	080034c7 	.word	0x080034c7
 8003240:	080034c7 	.word	0x080034c7
 8003244:	080034c7 	.word	0x080034c7
 8003248:	080034c7 	.word	0x080034c7
 800324c:	080034c7 	.word	0x080034c7
 8003250:	080034c7 	.word	0x080034c7
 8003254:	080034c7 	.word	0x080034c7
 8003258:	080034c7 	.word	0x080034c7
 800325c:	080034c7 	.word	0x080034c7
 8003260:	080034c7 	.word	0x080034c7
 8003264:	080034c7 	.word	0x080034c7
 8003268:	080034c7 	.word	0x080034c7
 800326c:	080034c7 	.word	0x080034c7
 8003270:	080034c7 	.word	0x080034c7
 8003274:	080034c7 	.word	0x080034c7
 8003278:	080034c7 	.word	0x080034c7
 800327c:	080034c7 	.word	0x080034c7
 8003280:	080034c7 	.word	0x080034c7
 8003284:	080034c7 	.word	0x080034c7
 8003288:	080034c7 	.word	0x080034c7
 800328c:	080034c7 	.word	0x080034c7
 8003290:	080034c7 	.word	0x080034c7
 8003294:	080034c7 	.word	0x080034c7
 8003298:	080034c7 	.word	0x080034c7
 800329c:	080034c7 	.word	0x080034c7
 80032a0:	080034c7 	.word	0x080034c7
 80032a4:	080034c7 	.word	0x080034c7
 80032a8:	080034c7 	.word	0x080034c7
 80032ac:	080034c7 	.word	0x080034c7
 80032b0:	080034c7 	.word	0x080034c7
 80032b4:	080034c7 	.word	0x080034c7
 80032b8:	080034c7 	.word	0x080034c7
 80032bc:	080034c7 	.word	0x080034c7
 80032c0:	080034c7 	.word	0x080034c7
 80032c4:	080034c7 	.word	0x080034c7
 80032c8:	080034c7 	.word	0x080034c7
 80032cc:	080034c7 	.word	0x080034c7
 80032d0:	080034c7 	.word	0x080034c7
 80032d4:	080034c7 	.word	0x080034c7
 80032d8:	080034c7 	.word	0x080034c7
 80032dc:	080034c7 	.word	0x080034c7
 80032e0:	080034c7 	.word	0x080034c7
 80032e4:	08003411 	.word	0x08003411
 80032e8:	080034c7 	.word	0x080034c7
 80032ec:	08003309 	.word	0x08003309
 80032f0:	0800346d 	.word	0x0800346d
 80032f4:	2bff      	cmp	r3, #255	@ 0xff
 80032f6:	f040 80e6 	bne.w	80034c6 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	617b      	str	r3, [r7, #20]
   				break;
 80032fe:	e0ef      	b.n	80034e0 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
   				break;
 8003306:	e0eb      	b.n	80034e0 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
   				p++;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	617a      	str	r2, [r7, #20]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	74fb      	strb	r3, [r7, #19]
   				break;
 800331e:	e0df      	b.n	80034e0 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
   				p++;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3301      	adds	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	617a      	str	r2, [r7, #20]
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <parseDHCPMSG+0x2a4>)
 8003336:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	617a      	str	r2, [r7, #20]
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <parseDHCPMSG+0x2a4>)
 8003342:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	617a      	str	r2, [r7, #20]
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <parseDHCPMSG+0x2a4>)
 800334e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	617a      	str	r2, [r7, #20]
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <parseDHCPMSG+0x2a4>)
 800335a:	70da      	strb	r2, [r3, #3]
   				break;
 800335c:	e0c0      	b.n	80034e0 <parseDHCPMSG+0x410>
 800335e:	bf00      	nop
 8003360:	20000aa0 	.word	0x20000aa0
 8003364:	20000acc 	.word	0x20000acc
 8003368:	20000ad0 	.word	0x20000ad0
 800336c:	20000aa4 	.word	0x20000aa4
 8003370:	20000aa8 	.word	0x20000aa8
 8003374:	20000ab8 	.word	0x20000ab8
   			case routersOnSubnet :
   				p++;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3301      	adds	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	617a      	str	r2, [r7, #20]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	617a      	str	r2, [r7, #20]
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <parseDHCPMSG+0x428>)
 8003392:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	617a      	str	r2, [r7, #20]
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4b56      	ldr	r3, [pc, #344]	@ (80034f8 <parseDHCPMSG+0x428>)
 800339e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	617a      	str	r2, [r7, #20]
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	4b53      	ldr	r3, [pc, #332]	@ (80034f8 <parseDHCPMSG+0x428>)
 80033aa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	617a      	str	r2, [r7, #20]
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	4b50      	ldr	r3, [pc, #320]	@ (80034f8 <parseDHCPMSG+0x428>)
 80033b6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80033b8:	7afb      	ldrb	r3, [r7, #11]
 80033ba:	3b04      	subs	r3, #4
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4413      	add	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
   				break;
 80033c2:	e08d      	b.n	80034e0 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	617a      	str	r2, [r7, #20]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	617a      	str	r2, [r7, #20]
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	4b47      	ldr	r3, [pc, #284]	@ (80034fc <parseDHCPMSG+0x42c>)
 80033de:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	617a      	str	r2, [r7, #20]
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	4b44      	ldr	r3, [pc, #272]	@ (80034fc <parseDHCPMSG+0x42c>)
 80033ea:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	617a      	str	r2, [r7, #20]
 80033f2:	781a      	ldrb	r2, [r3, #0]
 80033f4:	4b41      	ldr	r3, [pc, #260]	@ (80034fc <parseDHCPMSG+0x42c>)
 80033f6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	617a      	str	r2, [r7, #20]
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	4b3e      	ldr	r3, [pc, #248]	@ (80034fc <parseDHCPMSG+0x42c>)
 8003402:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003404:	7afb      	ldrb	r3, [r7, #11]
 8003406:	3b04      	subs	r3, #4
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4413      	add	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
   				break;
 800340e:	e067      	b.n	80034e0 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3301      	adds	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	617a      	str	r2, [r7, #20]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	617a      	str	r2, [r7, #20]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b35      	ldr	r3, [pc, #212]	@ (8003500 <parseDHCPMSG+0x430>)
 800342c:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800342e:	4b34      	ldr	r3, [pc, #208]	@ (8003500 <parseDHCPMSG+0x430>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	021a      	lsls	r2, r3, #8
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	6179      	str	r1, [r7, #20]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4413      	add	r3, r2
 800343e:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <parseDHCPMSG+0x430>)
 8003440:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003442:	4b2f      	ldr	r3, [pc, #188]	@ (8003500 <parseDHCPMSG+0x430>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	021a      	lsls	r2, r3, #8
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	1c59      	adds	r1, r3, #1
 800344c:	6179      	str	r1, [r7, #20]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4413      	add	r3, r2
 8003452:	4a2b      	ldr	r2, [pc, #172]	@ (8003500 <parseDHCPMSG+0x430>)
 8003454:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003456:	4b2a      	ldr	r3, [pc, #168]	@ (8003500 <parseDHCPMSG+0x430>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	021a      	lsls	r2, r3, #8
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	6179      	str	r1, [r7, #20]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	4413      	add	r3, r2
 8003466:	4a26      	ldr	r2, [pc, #152]	@ (8003500 <parseDHCPMSG+0x430>)
 8003468:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800346a:	e039      	b.n	80034e0 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3301      	adds	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	617a      	str	r2, [r7, #20]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	617a      	str	r2, [r7, #20]
 8003482:	781a      	ldrb	r2, [r3, #0]
 8003484:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <parseDHCPMSG+0x434>)
 8003486:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	617a      	str	r2, [r7, #20]
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <parseDHCPMSG+0x434>)
 8003492:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	617a      	str	r2, [r7, #20]
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <parseDHCPMSG+0x434>)
 800349e:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	617a      	str	r2, [r7, #20]
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <parseDHCPMSG+0x434>)
 80034aa:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80034ac:	793a      	ldrb	r2, [r7, #4]
 80034ae:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <parseDHCPMSG+0x438>)
 80034b0:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80034b2:	797a      	ldrb	r2, [r7, #5]
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <parseDHCPMSG+0x438>)
 80034b6:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80034b8:	79ba      	ldrb	r2, [r7, #6]
 80034ba:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <parseDHCPMSG+0x438>)
 80034bc:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80034be:	79fa      	ldrb	r2, [r7, #7]
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <parseDHCPMSG+0x438>)
 80034c2:	70da      	strb	r2, [r3, #3]
   				break;
 80034c4:	e00c      	b.n	80034e0 <parseDHCPMSG+0x410>
   			default :
   				p++;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3301      	adds	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	617a      	str	r2, [r7, #20]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4413      	add	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
   				break;
 80034de:	bf00      	nop
		while ( p < e ) {
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f4ff ae8a 	bcc.w	80031fe <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80034ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000ab4 	.word	0x20000ab4
 80034fc:	20000abc 	.word	0x20000abc
 8003500:	20000034 	.word	0x20000034
 8003504:	20000aa4 	.word	0x20000aa4
 8003508:	20000aa8 	.word	0x20000aa8

0800350c <DHCP_run>:

uint8_t DHCP_run(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003512:	4b7f      	ldr	r3, [pc, #508]	@ (8003710 <DHCP_run+0x204>)
 8003514:	f993 3000 	ldrsb.w	r3, [r3]
 8003518:	2b06      	cmp	r3, #6
 800351a:	d101      	bne.n	8003520 <DHCP_run+0x14>
 800351c:	2305      	movs	r3, #5
 800351e:	e0f3      	b.n	8003708 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003520:	4b7c      	ldr	r3, [pc, #496]	@ (8003714 <DHCP_run+0x208>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	3301      	adds	r3, #1
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fec2 	bl	80042b8 <WIZCHIP_READ>
 8003534:	4603      	mov	r3, r0
 8003536:	2b22      	cmp	r3, #34	@ 0x22
 8003538:	d006      	beq.n	8003548 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800353a:	4b76      	ldr	r3, [pc, #472]	@ (8003714 <DHCP_run+0x208>)
 800353c:	7818      	ldrb	r0, [r3, #0]
 800353e:	2300      	movs	r3, #0
 8003540:	2244      	movs	r2, #68	@ 0x44
 8003542:	2102      	movs	r1, #2
 8003544:	f001 f99e 	bl	8004884 <socket>

	ret = DHCP_RUNNING;
 8003548:	2301      	movs	r3, #1
 800354a:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 800354c:	f7ff fdc0 	bl	80030d0 <parseDHCPMSG>
 8003550:	4603      	mov	r3, r0
 8003552:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003554:	4b6e      	ldr	r3, [pc, #440]	@ (8003710 <DHCP_run+0x204>)
 8003556:	f993 3000 	ldrsb.w	r3, [r3]
 800355a:	2b04      	cmp	r3, #4
 800355c:	f200 80d0 	bhi.w	8003700 <DHCP_run+0x1f4>
 8003560:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <DHCP_run+0x5c>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800357d 	.word	0x0800357d
 800356c:	080035a1 	.word	0x080035a1
 8003570:	080035e5 	.word	0x080035e5
 8003574:	08003635 	.word	0x08003635
 8003578:	0800368f 	.word	0x0800368f
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 800357c:	4b66      	ldr	r3, [pc, #408]	@ (8003718 <DHCP_run+0x20c>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003582:	4b65      	ldr	r3, [pc, #404]	@ (8003718 <DHCP_run+0x20c>)
 8003584:	2200      	movs	r2, #0
 8003586:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003588:	4b63      	ldr	r3, [pc, #396]	@ (8003718 <DHCP_run+0x20c>)
 800358a:	2200      	movs	r2, #0
 800358c:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800358e:	4b62      	ldr	r3, [pc, #392]	@ (8003718 <DHCP_run+0x20c>)
 8003590:	2200      	movs	r2, #0
 8003592:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003594:	f7fe fffa 	bl	800258c <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003598:	4b5d      	ldr	r3, [pc, #372]	@ (8003710 <DHCP_run+0x204>)
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
   		break;
 800359e:	e0b2      	b.n	8003706 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80035a0:	79bb      	ldrb	r3, [r7, #6]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d119      	bne.n	80035da <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80035a6:	4b5d      	ldr	r3, [pc, #372]	@ (800371c <DHCP_run+0x210>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	7c1a      	ldrb	r2, [r3, #16]
 80035ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003718 <DHCP_run+0x20c>)
 80035ae:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80035b0:	4b5a      	ldr	r3, [pc, #360]	@ (800371c <DHCP_run+0x210>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	7c5a      	ldrb	r2, [r3, #17]
 80035b6:	4b58      	ldr	r3, [pc, #352]	@ (8003718 <DHCP_run+0x20c>)
 80035b8:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80035ba:	4b58      	ldr	r3, [pc, #352]	@ (800371c <DHCP_run+0x210>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	7c9a      	ldrb	r2, [r3, #18]
 80035c0:	4b55      	ldr	r3, [pc, #340]	@ (8003718 <DHCP_run+0x20c>)
 80035c2:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80035c4:	4b55      	ldr	r3, [pc, #340]	@ (800371c <DHCP_run+0x210>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	7cda      	ldrb	r2, [r3, #19]
 80035ca:	4b53      	ldr	r3, [pc, #332]	@ (8003718 <DHCP_run+0x20c>)
 80035cc:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80035ce:	f7ff f9a3 	bl	8002918 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80035d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003710 <DHCP_run+0x204>)
 80035d4:	2202      	movs	r2, #2
 80035d6:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80035d8:	e095      	b.n	8003706 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80035da:	f000 f8c1 	bl	8003760 <check_DHCP_timeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
         break;
 80035e2:	e090      	b.n	8003706 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80035e4:	79bb      	ldrb	r3, [r7, #6]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d116      	bne.n	8003618 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80035ea:	f000 f919 	bl	8003820 <check_DHCP_leasedIP>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80035f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003720 <DHCP_run+0x214>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4798      	blx	r3
					reset_DHCP_timeout();
 80035fa:	f000 f9e3 	bl	80039c4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80035fe:	4b44      	ldr	r3, [pc, #272]	@ (8003710 <DHCP_run+0x204>)
 8003600:	2203      	movs	r2, #3
 8003602:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8003604:	e07f      	b.n	8003706 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8003606:	f000 f9dd 	bl	80039c4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800360a:	4b46      	ldr	r3, [pc, #280]	@ (8003724 <DHCP_run+0x218>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8003610:	4b3f      	ldr	r3, [pc, #252]	@ (8003710 <DHCP_run+0x204>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
		break;
 8003616:	e076      	b.n	8003706 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8003618:	79bb      	ldrb	r3, [r7, #6]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d105      	bne.n	800362a <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800361e:	f000 f9d1 	bl	80039c4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003622:	4b3b      	ldr	r3, [pc, #236]	@ (8003710 <DHCP_run+0x204>)
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
		break;
 8003628:	e06d      	b.n	8003706 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800362a:	f000 f899 	bl	8003760 <check_DHCP_timeout>
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
		break;
 8003632:	e068      	b.n	8003706 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003634:	2304      	movs	r3, #4
 8003636:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8003638:	4b3b      	ldr	r3, [pc, #236]	@ (8003728 <DHCP_run+0x21c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d060      	beq.n	8003704 <DHCP_run+0x1f8>
 8003642:	4b39      	ldr	r3, [pc, #228]	@ (8003728 <DHCP_run+0x21c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	085a      	lsrs	r2, r3, #1
 8003648:	4b38      	ldr	r3, [pc, #224]	@ (800372c <DHCP_run+0x220>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d259      	bcs.n	8003704 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003654:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <DHCP_run+0x20c>)
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	4b35      	ldr	r3, [pc, #212]	@ (8003730 <DHCP_run+0x224>)
 800365a:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 800365c:	4b2e      	ldr	r3, [pc, #184]	@ (8003718 <DHCP_run+0x20c>)
 800365e:	785a      	ldrb	r2, [r3, #1]
 8003660:	4b33      	ldr	r3, [pc, #204]	@ (8003730 <DHCP_run+0x224>)
 8003662:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8003664:	4b2c      	ldr	r3, [pc, #176]	@ (8003718 <DHCP_run+0x20c>)
 8003666:	789a      	ldrb	r2, [r3, #2]
 8003668:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <DHCP_run+0x224>)
 800366a:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 800366c:	4b2a      	ldr	r3, [pc, #168]	@ (8003718 <DHCP_run+0x20c>)
 800366e:	78da      	ldrb	r2, [r3, #3]
 8003670:	4b2f      	ldr	r3, [pc, #188]	@ (8003730 <DHCP_run+0x224>)
 8003672:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8003674:	4b2f      	ldr	r3, [pc, #188]	@ (8003734 <DHCP_run+0x228>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a2e      	ldr	r2, [pc, #184]	@ (8003734 <DHCP_run+0x228>)
 800367c:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800367e:	f7ff f94b 	bl	8002918 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8003682:	f000 f99f 	bl	80039c4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8003686:	4b22      	ldr	r3, [pc, #136]	@ (8003710 <DHCP_run+0x204>)
 8003688:	2204      	movs	r2, #4
 800368a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800368c:	e03a      	b.n	8003704 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800368e:	2304      	movs	r3, #4
 8003690:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8003692:	79bb      	ldrb	r3, [r7, #6]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d125      	bne.n	80036e4 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8003698:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <DHCP_run+0x22c>)
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <DHCP_run+0x224>)
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <DHCP_run+0x20c>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d111      	bne.n	80036ce <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80036aa:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <DHCP_run+0x224>)
 80036ac:	785a      	ldrb	r2, [r3, #1]
 80036ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <DHCP_run+0x20c>)
 80036b0:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d10b      	bne.n	80036ce <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80036b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003730 <DHCP_run+0x224>)
 80036b8:	789a      	ldrb	r2, [r3, #2]
 80036ba:	4b17      	ldr	r3, [pc, #92]	@ (8003718 <DHCP_run+0x20c>)
 80036bc:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d105      	bne.n	80036ce <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80036c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <DHCP_run+0x224>)
 80036c4:	78da      	ldrb	r2, [r3, #3]
 80036c6:	4b14      	ldr	r3, [pc, #80]	@ (8003718 <DHCP_run+0x20c>)
 80036c8:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d004      	beq.n	80036d8 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80036ce:	2303      	movs	r3, #3
 80036d0:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80036d2:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <DHCP_run+0x230>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80036d8:	f000 f974 	bl	80039c4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <DHCP_run+0x204>)
 80036de:	2203      	movs	r2, #3
 80036e0:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80036e2:	e010      	b.n	8003706 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80036e4:	79bb      	ldrb	r3, [r7, #6]
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d105      	bne.n	80036f6 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80036ea:	f000 f96b 	bl	80039c4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80036ee:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <DHCP_run+0x204>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
	   	break;
 80036f4:	e007      	b.n	8003706 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80036f6:	f000 f833 	bl	8003760 <check_DHCP_timeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
	   	break;
 80036fe:	e002      	b.n	8003706 <DHCP_run+0x1fa>
		default :
   		break;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <DHCP_run+0x1fa>
		break;
 8003704:	bf00      	nop
	}

	return ret;
 8003706:	79fb      	ldrb	r3, [r7, #7]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000ac0 	.word	0x20000ac0
 8003714:	20000aa0 	.word	0x20000aa0
 8003718:	20000ab0 	.word	0x20000ab0
 800371c:	20000acc 	.word	0x20000acc
 8003720:	20000044 	.word	0x20000044
 8003724:	2000004c 	.word	0x2000004c
 8003728:	20000034 	.word	0x20000034
 800372c:	20000ac4 	.word	0x20000ac4
 8003730:	20000aac 	.word	0x20000aac
 8003734:	20000ac8 	.word	0x20000ac8
 8003738:	20000ac1 	.word	0x20000ac1
 800373c:	20000048 	.word	0x20000048

08003740 <DHCP_stop>:

void    DHCP_stop(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <DHCP_stop+0x18>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f001 f9af 	bl	8004aac <close>
   dhcp_state = STATE_DHCP_STOP;
 800374e:	4b03      	ldr	r3, [pc, #12]	@ (800375c <DHCP_stop+0x1c>)
 8003750:	2206      	movs	r2, #6
 8003752:	701a      	strb	r2, [r3, #0]
}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000aa0 	.word	0x20000aa0
 800375c:	20000ac0 	.word	0x20000ac0

08003760 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8003766:	2301      	movs	r3, #1
 8003768:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800376a:	4b29      	ldr	r3, [pc, #164]	@ (8003810 <check_DHCP_timeout+0xb0>)
 800376c:	f993 3000 	ldrsb.w	r3, [r3]
 8003770:	2b01      	cmp	r3, #1
 8003772:	dc2d      	bgt.n	80037d0 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8003774:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <check_DHCP_timeout+0xb4>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <check_DHCP_timeout+0xb8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d242      	bcs.n	8003806 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8003780:	4b26      	ldr	r3, [pc, #152]	@ (800381c <check_DHCP_timeout+0xbc>)
 8003782:	f993 3000 	ldrsb.w	r3, [r3]
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00c      	beq.n	80037a4 <check_DHCP_timeout+0x44>
 800378a:	2b04      	cmp	r3, #4
 800378c:	dc0d      	bgt.n	80037aa <check_DHCP_timeout+0x4a>
 800378e:	2b01      	cmp	r3, #1
 8003790:	d002      	beq.n	8003798 <check_DHCP_timeout+0x38>
 8003792:	2b02      	cmp	r3, #2
 8003794:	d003      	beq.n	800379e <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8003796:	e008      	b.n	80037aa <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8003798:	f7fe fef8 	bl	800258c <send_DHCP_DISCOVER>
				break;
 800379c:	e006      	b.n	80037ac <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800379e:	f7ff f8bb 	bl	8002918 <send_DHCP_REQUEST>
				break;
 80037a2:	e003      	b.n	80037ac <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80037a4:	f7ff f8b8 	bl	8002918 <send_DHCP_REQUEST>
				break;
 80037a8:	e000      	b.n	80037ac <check_DHCP_timeout+0x4c>
				break;
 80037aa:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <check_DHCP_timeout+0xb8>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80037b2:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <check_DHCP_timeout+0xb8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	330a      	adds	r3, #10
 80037b8:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <check_DHCP_timeout+0xb4>)
 80037ba:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <check_DHCP_timeout+0xb0>)
 80037be:	f993 3000 	ldrsb.w	r3, [r3]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	b25a      	sxtb	r2, r3
 80037ca:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <check_DHCP_timeout+0xb0>)
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e01a      	b.n	8003806 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80037d0:	4b12      	ldr	r3, [pc, #72]	@ (800381c <check_DHCP_timeout+0xbc>)
 80037d2:	f993 3000 	ldrsb.w	r3, [r3]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d00c      	beq.n	80037f4 <check_DHCP_timeout+0x94>
 80037da:	2b04      	cmp	r3, #4
 80037dc:	dc10      	bgt.n	8003800 <check_DHCP_timeout+0xa0>
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d002      	beq.n	80037e8 <check_DHCP_timeout+0x88>
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d006      	beq.n	80037f4 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80037e6:	e00b      	b.n	8003800 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80037e8:	4b0c      	ldr	r3, [pc, #48]	@ (800381c <check_DHCP_timeout+0xbc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80037ee:	2300      	movs	r3, #0
 80037f0:	71fb      	strb	r3, [r7, #7]
				break;
 80037f2:	e006      	b.n	8003802 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80037f4:	f7fe feca 	bl	800258c <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80037f8:	4b08      	ldr	r3, [pc, #32]	@ (800381c <check_DHCP_timeout+0xbc>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
				break;
 80037fe:	e000      	b.n	8003802 <check_DHCP_timeout+0xa2>
				break;
 8003800:	bf00      	nop
		}
		reset_DHCP_timeout();
 8003802:	f000 f8df 	bl	80039c4 <reset_DHCP_timeout>
	}
	return ret;
 8003806:	79fb      	ldrb	r3, [r7, #7]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000ac1 	.word	0x20000ac1
 8003814:	20000038 	.word	0x20000038
 8003818:	20000ac4 	.word	0x20000ac4
 800381c:	20000ac0 	.word	0x20000ac0

08003820 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8003826:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800382a:	f000 fd45 	bl	80042b8 <WIZCHIP_READ>
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8003832:	2103      	movs	r1, #3
 8003834:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8003838:	f000 fd8a 	bl	8004350 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <check_DHCP_leasedIP+0x6c>)
 800383e:	7818      	ldrb	r0, [r3, #0]
 8003840:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <check_DHCP_leasedIP+0x70>)
 8003848:	2211      	movs	r2, #17
 800384a:	4912      	ldr	r1, [pc, #72]	@ (8003894 <check_DHCP_leasedIP+0x74>)
 800384c:	f001 fc24 	bl	8005098 <sendto>
 8003850:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	4619      	mov	r1, r3
 8003856:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800385a:	f000 fd79 	bl	8004350 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f113 0f0d 	cmn.w	r3, #13
 8003864:	d101      	bne.n	800386a <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8003866:	2301      	movs	r3, #1
 8003868:	e00c      	b.n	8003884 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800386a:	f7ff fadf 	bl	8002e2c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800386e:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <check_DHCP_leasedIP+0x78>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8003874:	bf00      	nop
 8003876:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <check_DHCP_leasedIP+0x78>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d9f9      	bls.n	8003876 <check_DHCP_leasedIP+0x56>

		return 0;
 8003882:	2300      	movs	r3, #0
	}
}	
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20000aa0 	.word	0x20000aa0
 8003890:	20000ab0 	.word	0x20000ab0
 8003894:	0800cdb0 	.word	0x0800cdb0
 8003898:	20000ac4 	.word	0x20000ac4

0800389c <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80038ac:	2206      	movs	r2, #6
 80038ae:	493f      	ldr	r1, [pc, #252]	@ (80039ac <DHCP_init+0x110>)
 80038b0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80038b4:	f000 fd9a 	bl	80043ec <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80038b8:	4b3c      	ldr	r3, [pc, #240]	@ (80039ac <DHCP_init+0x110>)
 80038ba:	781a      	ldrb	r2, [r3, #0]
 80038bc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <DHCP_init+0x110>)
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b39      	ldr	r3, [pc, #228]	@ (80039ac <DHCP_init+0x110>)
 80038c6:	789b      	ldrb	r3, [r3, #2]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b37      	ldr	r3, [pc, #220]	@ (80039ac <DHCP_init+0x110>)
 80038ce:	78db      	ldrb	r3, [r3, #3]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b35      	ldr	r3, [pc, #212]	@ (80039ac <DHCP_init+0x110>)
 80038d6:	791b      	ldrb	r3, [r3, #4]
 80038d8:	4313      	orrs	r3, r2
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	4b33      	ldr	r3, [pc, #204]	@ (80039ac <DHCP_init+0x110>)
 80038de:	795b      	ldrb	r3, [r3, #5]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d117      	bne.n	8003918 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 80038e8:	4b30      	ldr	r3, [pc, #192]	@ (80039ac <DHCP_init+0x110>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80038ee:	4b2f      	ldr	r3, [pc, #188]	@ (80039ac <DHCP_init+0x110>)
 80038f0:	2208      	movs	r2, #8
 80038f2:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80038f4:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <DHCP_init+0x110>)
 80038f6:	22dc      	movs	r2, #220	@ 0xdc
 80038f8:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 80038fa:	4b2c      	ldr	r3, [pc, #176]	@ (80039ac <DHCP_init+0x110>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8003900:	4b2a      	ldr	r3, [pc, #168]	@ (80039ac <DHCP_init+0x110>)
 8003902:	2200      	movs	r2, #0
 8003904:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8003906:	4b29      	ldr	r3, [pc, #164]	@ (80039ac <DHCP_init+0x110>)
 8003908:	2200      	movs	r2, #0
 800390a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800390c:	2206      	movs	r2, #6
 800390e:	4927      	ldr	r1, [pc, #156]	@ (80039ac <DHCP_init+0x110>)
 8003910:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003914:	f000 fdca 	bl	80044ac <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8003918:	4a25      	ldr	r2, [pc, #148]	@ (80039b0 <DHCP_init+0x114>)
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800391e:	4a25      	ldr	r2, [pc, #148]	@ (80039b4 <DHCP_init+0x118>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8003924:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <DHCP_init+0x11c>)
 8003926:	4a25      	ldr	r2, [pc, #148]	@ (80039bc <DHCP_init+0x120>)
 8003928:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800392a:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <DHCP_init+0x110>)
 800392c:	78db      	ldrb	r3, [r3, #3]
 800392e:	461a      	mov	r2, r3
 8003930:	4b21      	ldr	r3, [pc, #132]	@ (80039b8 <DHCP_init+0x11c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4413      	add	r3, r2
 8003936:	4a20      	ldr	r2, [pc, #128]	@ (80039b8 <DHCP_init+0x11c>)
 8003938:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800393a:	4b1c      	ldr	r3, [pc, #112]	@ (80039ac <DHCP_init+0x110>)
 800393c:	791b      	ldrb	r3, [r3, #4]
 800393e:	461a      	mov	r2, r3
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <DHCP_init+0x11c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4413      	add	r3, r2
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <DHCP_init+0x11c>)
 8003948:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <DHCP_init+0x110>)
 800394c:	795b      	ldrb	r3, [r3, #5]
 800394e:	461a      	mov	r2, r3
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <DHCP_init+0x11c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4413      	add	r3, r2
 8003956:	4a18      	ldr	r2, [pc, #96]	@ (80039b8 <DHCP_init+0x11c>)
 8003958:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800395a:	4b14      	ldr	r3, [pc, #80]	@ (80039ac <DHCP_init+0x110>)
 800395c:	78da      	ldrb	r2, [r3, #3]
 800395e:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <DHCP_init+0x110>)
 8003960:	791b      	ldrb	r3, [r3, #4]
 8003962:	4053      	eors	r3, r2
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <DHCP_init+0x110>)
 8003968:	795b      	ldrb	r3, [r3, #5]
 800396a:	4053      	eors	r3, r2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <DHCP_init+0x11c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4413      	add	r3, r2
 8003976:	4a10      	ldr	r2, [pc, #64]	@ (80039b8 <DHCP_init+0x11c>)
 8003978:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	2204      	movs	r2, #4
 8003980:	4619      	mov	r1, r3
 8003982:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003986:	f000 fd91 	bl	80044ac <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800398a:	f107 030c 	add.w	r3, r7, #12
 800398e:	2204      	movs	r2, #4
 8003990:	4619      	mov	r1, r3
 8003992:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003996:	f000 fd89 	bl	80044ac <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800399a:	f000 f813 	bl	80039c4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800399e:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <DHCP_init+0x124>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000ad0 	.word	0x20000ad0
 80039b0:	20000aa0 	.word	0x20000aa0
 80039b4:	20000acc 	.word	0x20000acc
 80039b8:	20000ac8 	.word	0x20000ac8
 80039bc:	12345678 	.word	0x12345678
 80039c0:	20000ac0 	.word	0x20000ac0

080039c4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <reset_DHCP_timeout+0x20>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <reset_DHCP_timeout+0x24>)
 80039d0:	220a      	movs	r2, #10
 80039d2:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <reset_DHCP_timeout+0x28>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	20000ac4 	.word	0x20000ac4
 80039e8:	20000038 	.word	0x20000038
 80039ec:	20000ac1 	.word	0x20000ac1

080039f0 <getDHCPLeasetime>:
   ip[2] = DHCP_allocated_dns[2];
   ip[3] = DHCP_allocated_dns[3];         
}

uint32_t getDHCPLeasetime(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <getDHCPLeasetime+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000034 	.word	0x20000034

08003a08 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b09      	cmp	r3, #9
 8003a1e:	d803      	bhi.n	8003a28 <NibbleToHex+0x20>
    return nibble + '0';
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	3330      	adds	r3, #48	@ 0x30
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e002      	b.n	8003a2e <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	3337      	adds	r3, #55	@ 0x37
 8003a2c:	b2db      	uxtb	r3, r3
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	4413      	add	r3, r2
 8003a58:	81fb      	strh	r3, [r7, #14]
	return i;
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	b2ca      	uxtb	r2, r1
 8003a82:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]
	return s;
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b08b      	sub	sp, #44	@ 0x2c
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	623a      	str	r2, [r7, #32]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <parse_name+0x34>
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8003ad2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ad4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ad8:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ada:	d117      	bne.n	8003b0c <parse_name+0x6e>
		{
			if (!indirect)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <parse_name+0x4a>
				clen++;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8003aec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	7812      	ldrb	r2, [r2, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	623a      	str	r2, [r7, #32]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8003b0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d02b      	beq.n	8003b6a <parse_name+0xcc>
			break;

		len -= slen + 1;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8003b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da02      	bge.n	8003b2e <parse_name+0x90>
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	e038      	b.n	8003ba0 <parse_name+0x102>

		if (!indirect) clen += slen;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10c      	bne.n	8003b4e <parse_name+0xb0>
 8003b34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8003b3c:	e007      	b.n	8003b4e <parse_name+0xb0>
 8003b3e:	6a3a      	ldr	r2, [r7, #32]
 8003b40:	1c53      	adds	r3, r2, #1
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	6079      	str	r1, [r7, #4]
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f2      	bne.n	8003b3e <parse_name+0xa0>
		*buf++ = '.';
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	222e      	movs	r2, #46	@ 0x2e
 8003b60:	701a      	strb	r2, [r3, #0]
		nseg++;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8003b68:	e7a8      	b.n	8003abc <parse_name+0x1e>
			break;
 8003b6a:	bf00      	nop
	}

	if (nseg == 0)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	222e      	movs	r2, #46	@ 0x2e
 8003b7a:	701a      	strb	r2, [r3, #0]
		len--;
 8003b7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
	len--;
 8003b92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8003b9e:	69fb      	ldr	r3, [r7, #28]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	372c      	adds	r7, #44	@ 0x2c
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b0b4      	sub	sp, #208	@ 0xd0
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8003bb6:	f107 020c 	add.w	r2, r7, #12
 8003bba:	23c0      	movs	r3, #192	@ 0xc0
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ff6d 	bl	8003a9e <parse_name>
 8003bc4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8003bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d101      	bne.n	8003bd6 <dns_question+0x2a>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e00b      	b.n	8003bee <dns_question+0x42>

	cp += len;
 8003bd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4413      	add	r3, r2
 8003bde:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	3302      	adds	r3, #2
 8003be4:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	3302      	adds	r3, #2
 8003bea:	603b      	str	r3, [r7, #0]

	return cp;
 8003bec:	683b      	ldr	r3, [r7, #0]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	37d0      	adds	r7, #208	@ 0xd0
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b0b6      	sub	sp, #216	@ 0xd8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8003c02:	f107 0210 	add.w	r2, r7, #16
 8003c06:	23c0      	movs	r3, #192	@ 0xc0
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff ff47 	bl	8003a9e <parse_name>
 8003c10:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8003c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d101      	bne.n	8003c22 <dns_answer+0x2c>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e0f9      	b.n	8003e16 <dns_answer+0x220>

	cp += len;
 8003c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8003c2c:	68b8      	ldr	r0, [r7, #8]
 8003c2e:	f7ff ff04 	bl	8003a3a <get16>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	3302      	adds	r3, #2
 8003c42:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3304      	adds	r3, #4
 8003c48:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	60bb      	str	r3, [r7, #8]


	switch (type)
 8003c50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	f000 80da 	beq.w	8003e0e <dns_answer+0x218>
 8003c5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	f300 80d7 	bgt.w	8003e12 <dns_answer+0x21c>
 8003c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c68:	2b0f      	cmp	r3, #15
 8003c6a:	d07d      	beq.n	8003d68 <dns_answer+0x172>
 8003c6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c70:	2b0f      	cmp	r3, #15
 8003c72:	f300 80ce 	bgt.w	8003e12 <dns_answer+0x21c>
 8003c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	dc26      	bgt.n	8003ccc <dns_answer+0xd6>
 8003c7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f340 80c5 	ble.w	8003e12 <dns_answer+0x21c>
 8003c88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 8003c96:	401a      	ands	r2, r3
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2201      	movne	r2, #1
 8003c9e:	2200      	moveq	r2, #0
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	2a00      	cmp	r2, #0
 8003ca4:	d133      	bne.n	8003d0e <dns_answer+0x118>
 8003ca6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2201      	movne	r2, #1
 8003cb0:	2200      	moveq	r2, #0
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	d170      	bne.n	8003d9a <dns_answer+0x1a4>
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8003cca:	e0a2      	b.n	8003e12 <dns_answer+0x21c>
	switch (type)
 8003ccc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003cd0:	2b0d      	cmp	r3, #13
 8003cd2:	d032      	beq.n	8003d3a <dns_answer+0x144>
		break;
 8003cd4:	e09d      	b.n	8003e12 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	60ba      	str	r2, [r7, #8]
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	60ba      	str	r2, [r7, #8]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	3201      	adds	r2, #1
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60ba      	str	r2, [r7, #8]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	3202      	adds	r2, #2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	60ba      	str	r2, [r7, #8]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	3203      	adds	r2, #3
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	7013      	strb	r3, [r2, #0]
		break;
 8003d0c:	e082      	b.n	8003e14 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8003d0e:	f107 0210 	add.w	r2, r7, #16
 8003d12:	23c0      	movs	r3, #192	@ 0xc0
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff fec1 	bl	8003a9e <parse_name>
 8003d1c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d101      	bne.n	8003d2e <dns_answer+0x138>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e073      	b.n	8003e16 <dns_answer+0x220>
		cp += len;
 8003d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
		break;
 8003d38:	e06c      	b.n	8003e14 <dns_answer+0x21e>
		len = *cp++;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	60ba      	str	r2, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8003d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	60ba      	str	r2, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8003d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	4413      	add	r3, r2
 8003d64:	60bb      	str	r3, [r7, #8]
		break;
 8003d66:	e055      	b.n	8003e14 <dns_answer+0x21e>
		cp += 2;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8003d6e:	f107 0210 	add.w	r2, r7, #16
 8003d72:	23c0      	movs	r3, #192	@ 0xc0
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff fe91 	bl	8003a9e <parse_name>
 8003d7c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d101      	bne.n	8003d8e <dns_answer+0x198>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e043      	b.n	8003e16 <dns_answer+0x220>
		cp += len;
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	4413      	add	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
		break;
 8003d98:	e03c      	b.n	8003e14 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8003d9a:	f107 0210 	add.w	r2, r7, #16
 8003d9e:	23c0      	movs	r3, #192	@ 0xc0
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff fe7b 	bl	8003a9e <parse_name>
 8003da8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d101      	bne.n	8003dba <dns_answer+0x1c4>
 8003db6:	2300      	movs	r3, #0
 8003db8:	e02d      	b.n	8003e16 <dns_answer+0x220>
		cp += len;
 8003dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8003dc4:	f107 0210 	add.w	r2, r7, #16
 8003dc8:	23c0      	movs	r3, #192	@ 0xc0
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff fe66 	bl	8003a9e <parse_name>
 8003dd2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d101      	bne.n	8003de4 <dns_answer+0x1ee>
 8003de0:	2300      	movs	r3, #0
 8003de2:	e018      	b.n	8003e16 <dns_answer+0x220>
		cp += len;
 8003de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	4413      	add	r3, r2
 8003dec:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3304      	adds	r3, #4
 8003df2:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3304      	adds	r3, #4
 8003df8:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3304      	adds	r3, #4
 8003e04:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	60bb      	str	r3, [r7, #8]
		break;
 8003e0c:	e002      	b.n	8003e14 <dns_answer+0x21e>
		break;
 8003e0e:	bf00      	nop
 8003e10:	e000      	b.n	8003e14 <dns_answer+0x21e>
		break;
 8003e12:	bf00      	nop
	}

	return cp;
 8003e14:	68bb      	ldr	r3, [r7, #8]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	37d8      	adds	r7, #216	@ 0xd8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b088      	sub	sp, #32
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8003e2e:	2212      	movs	r2, #18
 8003e30:	2100      	movs	r1, #0
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f007 fc48 	bl	800b6c8 <memset>

	pdhdr->id = get16(&msg[0]);
 8003e38:	6978      	ldr	r0, [r7, #20]
 8003e3a:	f7ff fdfe 	bl	8003a3a <get16>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fdf5 	bl	8003a3a <get16>
 8003e50:	4603      	mov	r3, r0
 8003e52:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8003e54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da02      	bge.n	8003e62 <parseDNSMSG+0x44>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8003e62:	8a7b      	ldrh	r3, [r7, #18]
 8003e64:	0adb      	lsrs	r3, r3, #11
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8003e74:	8a7b      	ldrh	r3, [r7, #18]
 8003e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <parseDNSMSG+0x66>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8003e84:	8a7b      	ldrh	r3, [r7, #18]
 8003e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <parseDNSMSG+0x76>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8003e94:	8a7b      	ldrh	r3, [r7, #18]
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <parseDNSMSG+0x86>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8003ea4:	8a7b      	ldrh	r3, [r7, #18]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <parseDNSMSG+0x96>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8003eb4:	8a7b      	ldrh	r3, [r7, #18]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fdb7 	bl	8003a3a <get16>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3306      	adds	r3, #6
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fdae 	bl	8003a3a <get16>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fda5 	bl	8003a3a <get16>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	330a      	adds	r3, #10
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fd9c 	bl	8003a3a <get16>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	83fb      	strh	r3, [r7, #30]
 8003f14:	e00d      	b.n	8003f32 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8003f16:	69b9      	ldr	r1, [r7, #24]
 8003f18:	6978      	ldr	r0, [r7, #20]
 8003f1a:	f7ff fe47 	bl	8003bac <dns_question>
 8003f1e:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <parseDNSMSG+0x10e>
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	e03b      	b.n	8003fa4 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8003f2c:	8bfb      	ldrh	r3, [r7, #30]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	83fb      	strh	r3, [r7, #30]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	895b      	ldrh	r3, [r3, #10]
 8003f36:	8bfa      	ldrh	r2, [r7, #30]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d3ec      	bcc.n	8003f16 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	83fb      	strh	r3, [r7, #30]
 8003f40:	e00e      	b.n	8003f60 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	69b9      	ldr	r1, [r7, #24]
 8003f46:	6978      	ldr	r0, [r7, #20]
 8003f48:	f7ff fe55 	bl	8003bf6 <dns_answer>
 8003f4c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <parseDNSMSG+0x13c>
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	e024      	b.n	8003fa4 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8003f5a:	8bfb      	ldrh	r3, [r7, #30]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	83fb      	strh	r3, [r7, #30]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	899b      	ldrh	r3, [r3, #12]
 8003f64:	8bfa      	ldrh	r2, [r7, #30]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d3eb      	bcc.n	8003f42 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	83fb      	strh	r3, [r7, #30]
 8003f6e:	e002      	b.n	8003f76 <parseDNSMSG+0x158>
 8003f70:	8bfb      	ldrh	r3, [r7, #30]
 8003f72:	3301      	adds	r3, #1
 8003f74:	83fb      	strh	r3, [r7, #30]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	89db      	ldrh	r3, [r3, #14]
 8003f7a:	8bfa      	ldrh	r2, [r7, #30]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d3f7      	bcc.n	8003f70 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	83fb      	strh	r3, [r7, #30]
 8003f84:	e002      	b.n	8003f8c <parseDNSMSG+0x16e>
 8003f86:	8bfb      	ldrh	r3, [r7, #30]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	83fb      	strh	r3, [r7, #30]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8a1b      	ldrh	r3, [r3, #16]
 8003f90:	8bfa      	ldrh	r2, [r7, #30]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d3f7      	bcc.n	8003f86 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	7a1b      	ldrb	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <parseDNSMSG+0x184>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <parseDNSMSG+0x186>
	else return 0;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b0b8      	sub	sp, #224	@ 0xe0
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	81fb      	strh	r3, [r7, #14]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 8003fc6:	4b57      	ldr	r3, [pc, #348]	@ (8004124 <dns_makequery+0x178>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b55      	ldr	r3, [pc, #340]	@ (8004124 <dns_makequery+0x178>)
 8003fd0:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8003fd2:	4b54      	ldr	r3, [pc, #336]	@ (8004124 <dns_makequery+0x178>)
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003fdc:	f7ff fd44 	bl	8003a68 <put16>
 8003fe0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	02db      	lsls	r3, r3, #11
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8003ff4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003ffe:	f7ff fd33 	bl	8003a68 <put16>
 8004002:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 8004006:	2101      	movs	r1, #1
 8004008:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800400c:	f7ff fd2c 	bl	8003a68 <put16>
 8004010:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8004014:	2100      	movs	r1, #0
 8004016:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800401a:	f7ff fd25 	bl	8003a68 <put16>
 800401e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8004022:	2100      	movs	r1, #0
 8004024:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004028:	f7ff fd1e 	bl	8003a68 <put16>
 800402c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8004030:	2100      	movs	r1, #0
 8004032:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004036:	f7ff fd17 	bl	8003a68 <put16>
 800403a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 800403e:	f107 0310 	add.w	r3, r7, #16
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	4618      	mov	r0, r3
 8004046:	f007 fc68 	bl	800b91a <strcpy>
	dname = sname;
 800404a:	f107 0310 	add.w	r3, r7, #16
 800404e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 8004052:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8004056:	f7fc f8bb 	bl	80001d0 <strlen>
 800405a:	4603      	mov	r3, r0
 800405c:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8004060:	212e      	movs	r1, #46	@ 0x2e
 8004062:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8004066:	f007 fb37 	bl	800b6d8 <strchr>
 800406a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 800406e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d006      	beq.n	8004084 <dns_makequery+0xd8>
 8004076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800407a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	81bb      	strh	r3, [r7, #12]
 8004082:	e002      	b.n	800408a <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8004084:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8004088:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 800408a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004094:	89ba      	ldrh	r2, [r7, #12]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 800409a:	89bb      	ldrh	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d029      	beq.n	80040f4 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80040a0:	89bb      	ldrh	r3, [r7, #12]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80040a8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80040ac:	f007 fb33 	bl	800b716 <strncpy>
		cp += len;
 80040b0:	89bb      	ldrh	r3, [r7, #12]
 80040b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040b6:	4413      	add	r3, r2
 80040b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 80040bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80040c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
			break;
 80040d2:	e010      	b.n	80040f6 <dns_makequery+0x14a>
		}
		dname += len+1;
 80040d4:	89bb      	ldrh	r3, [r7, #12]
 80040d6:	3301      	adds	r3, #1
 80040d8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80040dc:	4413      	add	r3, r2
 80040de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 80040e2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 80040e6:	89bb      	ldrh	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 80040f2:	e7b5      	b.n	8004060 <dns_makequery+0xb4>
		if (len == 0) break;
 80040f4:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 80040f6:	2101      	movs	r1, #1
 80040f8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80040fc:	f7ff fcb4 	bl	8003a68 <put16>
 8004100:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8004104:	2101      	movs	r1, #1
 8004106:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800410a:	f7ff fcad 	bl	8003a68 <put16>
 800410e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8004112:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	b21b      	sxth	r3, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	37e0      	adds	r7, #224	@ 0xe0
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000ade 	.word	0x20000ade

08004128 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 800412c:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <check_DNS_timeout+0x44>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d914      	bls.n	800415e <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8004134:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <check_DNS_timeout+0x44>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <check_DNS_timeout+0x48>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d905      	bls.n	800414e <check_DNS_timeout+0x26>
			retry_count = 0;
 8004142:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <check_DNS_timeout+0x48>)
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8004148:	f04f 33ff 	mov.w	r3, #4294967295
 800414c:	e008      	b.n	8004160 <check_DNS_timeout+0x38>
		}
		retry_count++;
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <check_DNS_timeout+0x48>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <check_DNS_timeout+0x48>)
 8004158:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800415e:	2301      	movs	r3, #1
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000ae0 	.word	0x20000ae0
 8004170:	20000ae4 	.word	0x20000ae4

08004174 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8004180:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <DNS_init+0x2c>)
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8004186:	4a07      	ldr	r2, [pc, #28]	@ (80041a4 <DNS_init+0x30>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <DNS_init+0x34>)
 800418e:	f241 1222 	movw	r2, #4386	@ 0x1122
 8004192:	801a      	strh	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	20000adc 	.word	0x20000adc
 80041a4:	20000ad8 	.word	0x20000ad8
 80041a8:	20000ade 	.word	0x20000ade

080041ac <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b08f      	sub	sp, #60	@ 0x3c
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80041b8:	4b3b      	ldr	r3, [pc, #236]	@ (80042a8 <DNS_run+0xfc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80041be:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <DNS_run+0x100>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80041c4:	4b3a      	ldr	r3, [pc, #232]	@ (80042b0 <DNS_run+0x104>)
 80041c6:	7818      	ldrb	r0, [r3, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	2200      	movs	r2, #0
 80041cc:	2102      	movs	r1, #2
 80041ce:	f000 fb59 	bl	8004884 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80041d2:	4b38      	ldr	r3, [pc, #224]	@ (80042b4 <DNS_run+0x108>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	2000      	movs	r0, #0
 80041de:	f7ff fee5 	bl	8003fac <dns_makequery>
 80041e2:	4603      	mov	r3, r0
 80041e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80041e6:	4b32      	ldr	r3, [pc, #200]	@ (80042b0 <DNS_run+0x104>)
 80041e8:	7818      	ldrb	r0, [r3, #0]
 80041ea:	4b32      	ldr	r3, [pc, #200]	@ (80042b4 <DNS_run+0x108>)
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80041f0:	2335      	movs	r3, #53	@ 0x35
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f000 ff4f 	bl	8005098 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80041fa:	4b2d      	ldr	r3, [pc, #180]	@ (80042b0 <DNS_run+0x104>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f9fd 	bl	80045fe <getSn_RX_RSR>
 8004204:	4603      	mov	r3, r0
 8004206:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004208:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800420a:	2b00      	cmp	r3, #0
 800420c:	d029      	beq.n	8004262 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800420e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004214:	d902      	bls.n	800421c <DNS_run+0x70>
 8004216:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800421a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 800421c:	4b24      	ldr	r3, [pc, #144]	@ (80042b0 <DNS_run+0x104>)
 800421e:	7818      	ldrb	r0, [r3, #0]
 8004220:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <DNS_run+0x108>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	f107 0414 	add.w	r4, r7, #20
 8004228:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800422a:	f107 0312 	add.w	r3, r7, #18
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4623      	mov	r3, r4
 8004232:	f001 f865 	bl	8005300 <recvfrom>
 8004236:	4603      	mov	r3, r0
 8004238:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 800423a:	4b1e      	ldr	r3, [pc, #120]	@ (80042b4 <DNS_run+0x108>)
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	f107 0318 	add.w	r3, r7, #24
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fdea 	bl	8003e1e <parseDNSMSG>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8004250:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8004252:	4b17      	ldr	r3, [pc, #92]	@ (80042b0 <DNS_run+0x104>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fc28 	bl	8004aac <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 800425c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8004260:	e01e      	b.n	80042a0 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8004262:	f7ff ff61 	bl	8004128 <check_DNS_timeout>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 800426c:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8004270:	2b00      	cmp	r3, #0
 8004272:	da06      	bge.n	8004282 <DNS_run+0xd6>
			close(DNS_SOCKET);
 8004274:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <DNS_run+0x104>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fc17 	bl	8004aac <close>
			return 0; // timeout occurred
 800427e:	2300      	movs	r3, #0
 8004280:	e00e      	b.n	80042a0 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8004282:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1b7      	bne.n	80041fa <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800428a:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <DNS_run+0x104>)
 800428c:	7818      	ldrb	r0, [r3, #0]
 800428e:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <DNS_run+0x108>)
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004294:	2335      	movs	r3, #53	@ 0x35
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f000 fefd 	bl	8005098 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 800429e:	e7ac      	b.n	80041fa <DNS_run+0x4e>
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3734      	adds	r7, #52	@ 0x34
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd90      	pop	{r4, r7, pc}
 80042a8:	20000ae4 	.word	0x20000ae4
 80042ac:	20000ae0 	.word	0x20000ae0
 80042b0:	20000adc 	.word	0x20000adc
 80042b4:	20000ad8 	.word	0x20000ad8

080042b8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80042c0:	4b22      	ldr	r3, [pc, #136]	@ (800434c <WIZCHIP_READ+0x94>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80042c6:	4b21      	ldr	r3, [pc, #132]	@ (800434c <WIZCHIP_READ+0x94>)
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80042cc:	4b1f      	ldr	r3, [pc, #124]	@ (800434c <WIZCHIP_READ+0x94>)
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <WIZCHIP_READ+0x24>
 80042d4:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <WIZCHIP_READ+0x94>)
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d114      	bne.n	8004306 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80042dc:	4b1b      	ldr	r3, [pc, #108]	@ (800434c <WIZCHIP_READ+0x94>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	0c12      	lsrs	r2, r2, #16
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	4610      	mov	r0, r2
 80042e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80042ea:	4b18      	ldr	r3, [pc, #96]	@ (800434c <WIZCHIP_READ+0x94>)
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	0a12      	lsrs	r2, r2, #8
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	4610      	mov	r0, r2
 80042f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80042f8:	4b14      	ldr	r3, [pc, #80]	@ (800434c <WIZCHIP_READ+0x94>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
 8004304:	e011      	b.n	800432a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2db      	uxtb	r3, r3
 800430c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	b2db      	uxtb	r3, r3
 8004314:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <WIZCHIP_READ+0x94>)
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	f107 020c 	add.w	r2, r7, #12
 8004324:	2103      	movs	r1, #3
 8004326:	4610      	mov	r0, r2
 8004328:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800432a:	4b08      	ldr	r3, [pc, #32]	@ (800434c <WIZCHIP_READ+0x94>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	4798      	blx	r3
 8004330:	4603      	mov	r3, r0
 8004332:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <WIZCHIP_READ+0x94>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800433a:	4b04      	ldr	r3, [pc, #16]	@ (800434c <WIZCHIP_READ+0x94>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	4798      	blx	r3
   return ret;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000054 	.word	0x20000054

08004350 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800435c:	4b22      	ldr	r3, [pc, #136]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004362:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004370:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d119      	bne.n	80043ac <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	0c12      	lsrs	r2, r2, #16
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	4610      	mov	r0, r2
 8004384:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004386:	4b18      	ldr	r3, [pc, #96]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	0a12      	lsrs	r2, r2, #8
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004394:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	4610      	mov	r0, r2
 800439e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80043a0:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	4610      	mov	r0, r2
 80043a8:	4798      	blx	r3
 80043aa:	e013      	b.n	80043d4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0c1b      	lsrs	r3, r3, #16
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80043c6:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	f107 020c 	add.w	r2, r7, #12
 80043ce:	2104      	movs	r1, #4
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80043d4:	4b04      	ldr	r3, [pc, #16]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80043da:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <WIZCHIP_WRITE+0x98>)
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	4798      	blx	r3
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000054 	.word	0x20000054

080043ec <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80043fa:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004400:	4b29      	ldr	r3, [pc, #164]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004406:	4b28      	ldr	r3, [pc, #160]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <WIZCHIP_READ_BUF+0x2a>
 800440e:	4b26      	ldr	r3, [pc, #152]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	2b00      	cmp	r3, #0
 8004414:	d126      	bne.n	8004464 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004416:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	0c12      	lsrs	r2, r2, #16
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	4610      	mov	r0, r2
 8004422:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004424:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	0a12      	lsrs	r2, r2, #8
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	4610      	mov	r0, r2
 8004430:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004432:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	4610      	mov	r0, r2
 800443c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800443e:	2300      	movs	r3, #0
 8004440:	82fb      	strh	r3, [r7, #22]
 8004442:	e00a      	b.n	800445a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004444:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	8afa      	ldrh	r2, [r7, #22]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	188c      	adds	r4, r1, r2
 800444e:	4798      	blx	r3
 8004450:	4603      	mov	r3, r0
 8004452:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004454:	8afb      	ldrh	r3, [r7, #22]
 8004456:	3301      	adds	r3, #1
 8004458:	82fb      	strh	r3, [r7, #22]
 800445a:	8afa      	ldrh	r2, [r7, #22]
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	429a      	cmp	r2, r3
 8004460:	d3f0      	bcc.n	8004444 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004462:	e017      	b.n	8004494 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	b2db      	uxtb	r3, r3
 800446a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	b2db      	uxtb	r3, r3
 8004472:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	f107 0210 	add.w	r2, r7, #16
 8004482:	2103      	movs	r1, #3
 8004484:	4610      	mov	r0, r2
 8004486:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004488:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	88fa      	ldrh	r2, [r7, #6]
 800448e:	4611      	mov	r1, r2
 8004490:	68b8      	ldr	r0, [r7, #8]
 8004492:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004494:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800449a:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <WIZCHIP_READ_BUF+0xbc>)
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	4798      	blx	r3
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	20000054 	.word	0x20000054

080044ac <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80044ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4798      	blx	r3
   WIZCHIP.CS._select();
 80044c0:	4b29      	ldr	r3, [pc, #164]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80044ce:	4b26      	ldr	r3, [pc, #152]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d126      	bne.n	8004524 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80044d6:	4b24      	ldr	r3, [pc, #144]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	0c12      	lsrs	r2, r2, #16
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	4610      	mov	r0, r2
 80044e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80044e4:	4b20      	ldr	r3, [pc, #128]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	0a12      	lsrs	r2, r2, #8
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4610      	mov	r0, r2
 80044f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80044f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	4610      	mov	r0, r2
 80044fc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	82fb      	strh	r3, [r7, #22]
 8004502:	e00a      	b.n	800451a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004504:	4b18      	ldr	r3, [pc, #96]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	8afa      	ldrh	r2, [r7, #22]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	440a      	add	r2, r1
 800450e:	7812      	ldrb	r2, [r2, #0]
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004514:	8afb      	ldrh	r3, [r7, #22]
 8004516:	3301      	adds	r3, #1
 8004518:	82fb      	strh	r3, [r7, #22]
 800451a:	8afa      	ldrh	r2, [r7, #22]
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	429a      	cmp	r2, r3
 8004520:	d3f0      	bcc.n	8004504 <WIZCHIP_WRITE_BUF+0x58>
 8004522:	e017      	b.n	8004554 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	b2db      	uxtb	r3, r3
 800452a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	b2db      	uxtb	r3, r3
 8004532:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800453a:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	f107 0210 	add.w	r2, r7, #16
 8004542:	2103      	movs	r1, #3
 8004544:	4610      	mov	r0, r2
 8004546:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004548:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	4611      	mov	r1, r2
 8004550:	68b8      	ldr	r0, [r7, #8]
 8004552:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004554:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800455a:	4b03      	ldr	r3, [pc, #12]	@ (8004568 <WIZCHIP_WRITE_BUF+0xbc>)
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	4798      	blx	r3
}
 8004560:	bf00      	nop
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000054 	.word	0x20000054

0800456c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004576:	2300      	movs	r3, #0
 8004578:	81fb      	strh	r3, [r7, #14]
 800457a:	2300      	movs	r3, #0
 800457c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	3301      	adds	r3, #1
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fe94 	bl	80042b8 <WIZCHIP_READ>
 8004590:	4603      	mov	r3, r0
 8004592:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004594:	89bb      	ldrh	r3, [r7, #12]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	b29c      	uxth	r4, r3
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	3301      	adds	r3, #1
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fe86 	bl	80042b8 <WIZCHIP_READ>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4423      	add	r3, r4
 80045b0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80045b2:	89bb      	ldrh	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d019      	beq.n	80045ec <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	3301      	adds	r3, #1
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fe77 	bl	80042b8 <WIZCHIP_READ>
 80045ca:	4603      	mov	r3, r0
 80045cc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80045ce:	89fb      	ldrh	r3, [r7, #14]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	b29c      	uxth	r4, r3
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	3301      	adds	r3, #1
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fe69 	bl	80042b8 <WIZCHIP_READ>
 80045e6:	4603      	mov	r3, r0
 80045e8:	4423      	add	r3, r4
 80045ea:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80045ec:	89fa      	ldrh	r2, [r7, #14]
 80045ee:	89bb      	ldrh	r3, [r7, #12]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1c4      	bne.n	800457e <getSn_TX_FSR+0x12>
   return val;
 80045f4:	89fb      	ldrh	r3, [r7, #14]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd90      	pop	{r4, r7, pc}

080045fe <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80045fe:	b590      	push	{r4, r7, lr}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004608:	2300      	movs	r3, #0
 800460a:	81fb      	strh	r3, [r7, #14]
 800460c:	2300      	movs	r3, #0
 800460e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	3301      	adds	r3, #1
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fe4b 	bl	80042b8 <WIZCHIP_READ>
 8004622:	4603      	mov	r3, r0
 8004624:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004626:	89bb      	ldrh	r3, [r7, #12]
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	b29c      	uxth	r4, r3
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	3301      	adds	r3, #1
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fe3d 	bl	80042b8 <WIZCHIP_READ>
 800463e:	4603      	mov	r3, r0
 8004640:	4423      	add	r3, r4
 8004642:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004644:	89bb      	ldrh	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d019      	beq.n	800467e <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	3301      	adds	r3, #1
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fe2e 	bl	80042b8 <WIZCHIP_READ>
 800465c:	4603      	mov	r3, r0
 800465e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004660:	89fb      	ldrh	r3, [r7, #14]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	b29c      	uxth	r4, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	3301      	adds	r3, #1
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fe20 	bl	80042b8 <WIZCHIP_READ>
 8004678:	4603      	mov	r3, r0
 800467a:	4423      	add	r3, r4
 800467c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800467e:	89fa      	ldrh	r2, [r7, #14]
 8004680:	89bb      	ldrh	r3, [r7, #12]
 8004682:	429a      	cmp	r2, r3
 8004684:	d1c4      	bne.n	8004610 <getSn_RX_RSR+0x12>
   return val;
 8004686:	89fb      	ldrh	r3, [r7, #14]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}

08004690 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	71fb      	strb	r3, [r7, #7]
 800469c:	4613      	mov	r3, r2
 800469e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80046a8:	88bb      	ldrh	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d046      	beq.n	800473c <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	3301      	adds	r3, #1
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fdfc 	bl	80042b8 <WIZCHIP_READ>
 80046c0:	4603      	mov	r3, r0
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	b29c      	uxth	r4, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	3301      	adds	r3, #1
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fdf0 	bl	80042b8 <WIZCHIP_READ>
 80046d8:	4603      	mov	r3, r0
 80046da:	4423      	add	r3, r4
 80046dc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80046de:	89fb      	ldrh	r3, [r7, #14]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	79fa      	ldrb	r2, [r7, #7]
 80046e4:	0092      	lsls	r2, r2, #2
 80046e6:	3202      	adds	r2, #2
 80046e8:	00d2      	lsls	r2, r2, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80046ee:	88bb      	ldrh	r3, [r7, #4]
 80046f0:	461a      	mov	r2, r3
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f7ff fed9 	bl	80044ac <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80046fa:	89fa      	ldrh	r2, [r7, #14]
 80046fc:	88bb      	ldrh	r3, [r7, #4]
 80046fe:	4413      	add	r3, r2
 8004700:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	3301      	adds	r3, #1
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800470e:	461a      	mov	r2, r3
 8004710:	89fb      	ldrh	r3, [r7, #14]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	b29b      	uxth	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f7ff fe18 	bl	8004350 <WIZCHIP_WRITE>
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3301      	adds	r3, #1
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800472c:	461a      	mov	r2, r3
 800472e:	89fb      	ldrh	r3, [r7, #14]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7ff fe0b 	bl	8004350 <WIZCHIP_WRITE>
 800473a:	e000      	b.n	800473e <wiz_send_data+0xae>
   if(len == 0)  return;
 800473c:	bf00      	nop
}
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bd90      	pop	{r4, r7, pc}

08004744 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	71fb      	strb	r3, [r7, #7]
 8004750:	4613      	mov	r3, r2
 8004752:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800475c:	88bb      	ldrh	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d046      	beq.n	80047f0 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	3301      	adds	r3, #1
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fda2 	bl	80042b8 <WIZCHIP_READ>
 8004774:	4603      	mov	r3, r0
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	b29c      	uxth	r4, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	3301      	adds	r3, #1
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fd96 	bl	80042b8 <WIZCHIP_READ>
 800478c:	4603      	mov	r3, r0
 800478e:	4423      	add	r3, r4
 8004790:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	79fa      	ldrb	r2, [r7, #7]
 8004798:	0092      	lsls	r2, r2, #2
 800479a:	3203      	adds	r2, #3
 800479c:	00d2      	lsls	r2, r2, #3
 800479e:	4413      	add	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80047a2:	88bb      	ldrh	r3, [r7, #4]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	68b8      	ldr	r0, [r7, #8]
 80047aa:	f7ff fe1f 	bl	80043ec <WIZCHIP_READ_BUF>
   ptr += len;
 80047ae:	89fa      	ldrh	r2, [r7, #14]
 80047b0:	88bb      	ldrh	r3, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	3301      	adds	r3, #1
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80047c2:	461a      	mov	r2, r3
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f7ff fdbe 	bl	8004350 <WIZCHIP_WRITE>
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	3301      	adds	r3, #1
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80047e0:	461a      	mov	r2, r3
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f7ff fdb1 	bl	8004350 <WIZCHIP_WRITE>
 80047ee:	e000      	b.n	80047f2 <wiz_recv_data+0xae>
   if(len == 0) return;
 80047f0:	bf00      	nop
}
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd90      	pop	{r4, r7, pc}

080047f8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	460a      	mov	r2, r1
 8004802:	71fb      	strb	r3, [r7, #7]
 8004804:	4613      	mov	r3, r2
 8004806:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	3301      	adds	r3, #1
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fd4d 	bl	80042b8 <WIZCHIP_READ>
 800481e:	4603      	mov	r3, r0
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	b29c      	uxth	r4, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	3301      	adds	r3, #1
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fd41 	bl	80042b8 <WIZCHIP_READ>
 8004836:	4603      	mov	r3, r0
 8004838:	4423      	add	r3, r4
 800483a:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 800483c:	89fa      	ldrh	r2, [r7, #14]
 800483e:	88bb      	ldrh	r3, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	3301      	adds	r3, #1
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004850:	461a      	mov	r2, r3
 8004852:	89fb      	ldrh	r3, [r7, #14]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	b29b      	uxth	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7ff fd77 	bl	8004350 <WIZCHIP_WRITE>
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	3301      	adds	r3, #1
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800486e:	461a      	mov	r2, r3
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7ff fd6a 	bl	8004350 <WIZCHIP_WRITE>
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}

08004884 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	4604      	mov	r4, r0
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	461a      	mov	r2, r3
 8004892:	4623      	mov	r3, r4
 8004894:	71fb      	strb	r3, [r7, #7]
 8004896:	4603      	mov	r3, r0
 8004898:	71bb      	strb	r3, [r7, #6]
 800489a:	460b      	mov	r3, r1
 800489c:	80bb      	strh	r3, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d902      	bls.n	80048ae <socket+0x2a>
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ac:	e0f0      	b.n	8004a90 <socket+0x20c>
	switch(protocol)
 80048ae:	79bb      	ldrb	r3, [r7, #6]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d005      	beq.n	80048c0 <socket+0x3c>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	dd11      	ble.n	80048dc <socket+0x58>
 80048b8:	3b02      	subs	r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d80e      	bhi.n	80048dc <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80048be:	e011      	b.n	80048e4 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80048c0:	f107 030c 	add.w	r3, r7, #12
 80048c4:	2204      	movs	r2, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80048cc:	f7ff fd8e 	bl	80043ec <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <socket+0x5e>
 80048d6:	f06f 0302 	mvn.w	r3, #2
 80048da:	e0d9      	b.n	8004a90 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80048dc:	f06f 0304 	mvn.w	r3, #4
 80048e0:	e0d6      	b.n	8004a90 <socket+0x20c>
	    break;
 80048e2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <socket+0x70>
 80048ee:	f06f 0305 	mvn.w	r3, #5
 80048f2:	e0cd      	b.n	8004a90 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <socket+0xc8>
	{
   	switch(protocol)
 80048fa:	79bb      	ldrb	r3, [r7, #6]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d002      	beq.n	8004906 <socket+0x82>
 8004900:	2b02      	cmp	r3, #2
 8004902:	d008      	beq.n	8004916 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004904:	e022      	b.n	800494c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11a      	bne.n	8004946 <socket+0xc2>
 8004910:	f06f 0305 	mvn.w	r3, #5
 8004914:	e0bc      	b.n	8004a90 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004924:	2b00      	cmp	r3, #0
 8004926:	db02      	blt.n	800492e <socket+0xaa>
 8004928:	f06f 0305 	mvn.w	r3, #5
 800492c:	e0b0      	b.n	8004a90 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800493c:	2b00      	cmp	r3, #0
 800493e:	db04      	blt.n	800494a <socket+0xc6>
 8004940:	f06f 0305 	mvn.w	r3, #5
 8004944:	e0a4      	b.n	8004a90 <socket+0x20c>
   	      break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <socket+0xc8>
   	      break;
 800494a:	bf00      	nop
   	}
   }
	close(sn);
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f8ac 	bl	8004aac <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	3301      	adds	r3, #1
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4618      	mov	r0, r3
 800495e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004962:	f023 030f 	bic.w	r3, r3, #15
 8004966:	b25a      	sxtb	r2, r3
 8004968:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800496c:	4313      	orrs	r3, r2
 800496e:	b25b      	sxtb	r3, r3
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	f7ff fcec 	bl	8004350 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d110      	bne.n	80049a0 <socket+0x11c>
	{
	   port = sock_any_port++;
 800497e:	4b46      	ldr	r3, [pc, #280]	@ (8004a98 <socket+0x214>)
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	b291      	uxth	r1, r2
 8004986:	4a44      	ldr	r2, [pc, #272]	@ (8004a98 <socket+0x214>)
 8004988:	8011      	strh	r1, [r2, #0]
 800498a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800498c:	4b42      	ldr	r3, [pc, #264]	@ (8004a98 <socket+0x214>)
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8004994:	4293      	cmp	r3, r2
 8004996:	d103      	bne.n	80049a0 <socket+0x11c>
 8004998:	4b3f      	ldr	r3, [pc, #252]	@ (8004a98 <socket+0x214>)
 800499a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800499e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	3301      	adds	r3, #1
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049ac:	461a      	mov	r2, r3
 80049ae:	88bb      	ldrh	r3, [r7, #4]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7ff fcc9 	bl	8004350 <WIZCHIP_WRITE>
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	3301      	adds	r3, #1
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ca:	461a      	mov	r2, r3
 80049cc:	88bb      	ldrh	r3, [r7, #4]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7ff fcbc 	bl	8004350 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	3301      	adds	r3, #1
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fcb2 	bl	8004350 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80049ec:	bf00      	nop
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	3301      	adds	r3, #1
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fc5c 	bl	80042b8 <WIZCHIP_READ>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f3      	bne.n	80049ee <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	b21a      	sxth	r2, r3
 8004a14:	4b21      	ldr	r3, [pc, #132]	@ (8004a9c <socket+0x218>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <socket+0x218>)
 8004a22:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f003 0201 	and.w	r2, r3, #1
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	b21a      	sxth	r2, r3
 8004a32:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <socket+0x218>)
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b21b      	sxth	r3, r3
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b21b      	sxth	r3, r3
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	4b17      	ldr	r3, [pc, #92]	@ (8004a9c <socket+0x218>)
 8004a40:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	2201      	movs	r2, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	b21b      	sxth	r3, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	b21a      	sxth	r2, r3
 8004a50:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <socket+0x21c>)
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b21b      	sxth	r3, r3
 8004a56:	4013      	ands	r3, r2
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <socket+0x21c>)
 8004a5e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	4a10      	ldr	r2, [pc, #64]	@ (8004aa4 <socket+0x220>)
 8004a64:	2100      	movs	r1, #0
 8004a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa8 <socket+0x224>)
 8004a6e:	2100      	movs	r1, #0
 8004a70:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004a72:	bf00      	nop
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	3301      	adds	r3, #1
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fc19 	bl	80042b8 <WIZCHIP_READ>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f3      	beq.n	8004a74 <socket+0x1f0>
   return (int8_t)sn;
 8004a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd90      	pop	{r4, r7, pc}
 8004a98:	20000050 	.word	0x20000050
 8004a9c:	20000ae6 	.word	0x20000ae6
 8004aa0:	20000ae8 	.word	0x20000ae8
 8004aa4:	20000aec 	.word	0x20000aec
 8004aa8:	20000afc 	.word	0x20000afc

08004aac <close>:

int8_t close(uint8_t sn)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d902      	bls.n	8004ac2 <close+0x16>
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	e055      	b.n	8004b6e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ace:	2110      	movs	r1, #16
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fc3d 	bl	8004350 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004ad6:	bf00      	nop
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	3301      	adds	r3, #1
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fbe7 	bl	80042b8 <WIZCHIP_READ>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f3      	bne.n	8004ad8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	3301      	adds	r3, #1
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004afc:	211f      	movs	r1, #31
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fc26 	bl	8004350 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2201      	movs	r2, #1
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	b21b      	sxth	r3, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	b21a      	sxth	r2, r3
 8004b12:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <close+0xcc>)
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b21b      	sxth	r3, r3
 8004b18:	4013      	ands	r3, r2
 8004b1a:	b21b      	sxth	r3, r3
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <close+0xcc>)
 8004b20:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	2201      	movs	r2, #1
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	b21a      	sxth	r2, r3
 8004b30:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <close+0xd0>)
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b21b      	sxth	r3, r3
 8004b36:	4013      	ands	r3, r2
 8004b38:	b21b      	sxth	r3, r3
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b7c <close+0xd0>)
 8004b3e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	4a0f      	ldr	r2, [pc, #60]	@ (8004b80 <close+0xd4>)
 8004b44:	2100      	movs	r1, #0
 8004b46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b84 <close+0xd8>)
 8004b4e:	2100      	movs	r1, #0
 8004b50:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004b52:	bf00      	nop
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	3301      	adds	r3, #1
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fba9 	bl	80042b8 <WIZCHIP_READ>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f3      	bne.n	8004b54 <close+0xa8>
	return SOCK_OK;
 8004b6c:	2301      	movs	r3, #1
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000ae6 	.word	0x20000ae6
 8004b7c:	20000ae8 	.word	0x20000ae8
 8004b80:	20000aec 	.word	0x20000aec
 8004b84:	20000afc 	.word	0x20000afc

08004b88 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	71fb      	strb	r3, [r7, #7]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d902      	bls.n	8004ba4 <connect+0x1c>
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba2:	e0c6      	b.n	8004d32 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	3301      	adds	r3, #1
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fb83 	bl	80042b8 <WIZCHIP_READ>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d002      	beq.n	8004bc2 <connect+0x3a>
 8004bbc:	f06f 0304 	mvn.w	r3, #4
 8004bc0:	e0b7      	b.n	8004d32 <connect+0x1aa>
   CHECK_SOCKINIT();
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fb72 	bl	80042b8 <WIZCHIP_READ>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b13      	cmp	r3, #19
 8004bd8:	d002      	beq.n	8004be0 <connect+0x58>
 8004bda:	f06f 0302 	mvn.w	r3, #2
 8004bde:	e0a8      	b.n	8004d32 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	3201      	adds	r2, #1
 8004bee:	7812      	ldrb	r2, [r2, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	3202      	adds	r2, #2
 8004bfc:	7812      	ldrb	r2, [r2, #0]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	3203      	adds	r2, #3
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d002      	beq.n	8004c1e <connect+0x96>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <connect+0x9c>
 8004c1e:	f06f 030b 	mvn.w	r3, #11
 8004c22:	e086      	b.n	8004d32 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004c24:	88bb      	ldrh	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <connect+0xa8>
 8004c2a:	f06f 030a 	mvn.w	r3, #10
 8004c2e:	e080      	b.n	8004d32 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	3301      	adds	r3, #1
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fc33 	bl	80044ac <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c52:	461a      	mov	r2, r3
 8004c54:	88bb      	ldrh	r3, [r7, #4]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f7ff fb76 	bl	8004350 <WIZCHIP_WRITE>
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	3301      	adds	r3, #1
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004c70:	461a      	mov	r2, r3
 8004c72:	88bb      	ldrh	r3, [r7, #4]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7ff fb69 	bl	8004350 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	3301      	adds	r3, #1
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fb5f 	bl	8004350 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004c92:	bf00      	nop
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	3301      	adds	r3, #1
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fb09 	bl	80042b8 <WIZCHIP_READ>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f3      	bne.n	8004c94 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004cac:	4b23      	ldr	r3, [pc, #140]	@ (8004d3c <connect+0x1b4>)
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	fa42 f303 	asr.w	r3, r2, r3
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02b      	beq.n	8004d18 <connect+0x190>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e036      	b.n	8004d32 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	3301      	adds	r3, #1
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff faf1 	bl	80042b8 <WIZCHIP_READ>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004cec:	2108      	movs	r1, #8
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fb2e 	bl	8004350 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004cf4:	f06f 030c 	mvn.w	r3, #12
 8004cf8:	e01b      	b.n	8004d32 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	3301      	adds	r3, #1
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fad6 	bl	80042b8 <WIZCHIP_READ>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8004d12:	f06f 0303 	mvn.w	r3, #3
 8004d16:	e00c      	b.n	8004d32 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fac7 	bl	80042b8 <WIZCHIP_READ>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b17      	cmp	r3, #23
 8004d2e:	d1c9      	bne.n	8004cc4 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004d30:	2301      	movs	r3, #1
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000ae6 	.word	0x20000ae6

08004d40 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	71fb      	strb	r3, [r7, #7]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d902      	bls.n	8004d64 <send+0x24>
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	e0dd      	b.n	8004f20 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	3301      	adds	r3, #1
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff faa3 	bl	80042b8 <WIZCHIP_READ>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d002      	beq.n	8004d82 <send+0x42>
 8004d7c:	f06f 0304 	mvn.w	r3, #4
 8004d80:	e0ce      	b.n	8004f20 <send+0x1e0>
   CHECK_SOCKDATA();
 8004d82:	88bb      	ldrh	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <send+0x4e>
 8004d88:	f06f 030d 	mvn.w	r3, #13
 8004d8c:	e0c8      	b.n	8004f20 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	3301      	adds	r3, #1
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fa8c 	bl	80042b8 <WIZCHIP_READ>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b17      	cmp	r3, #23
 8004da8:	d005      	beq.n	8004db6 <send+0x76>
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b1c      	cmp	r3, #28
 8004dae:	d002      	beq.n	8004db6 <send+0x76>
 8004db0:	f06f 0306 	mvn.w	r3, #6
 8004db4:	e0b4      	b.n	8004f20 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004db6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f28 <send+0x1e8>)
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	fa42 f303 	asr.w	r3, r2, r3
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d039      	beq.n	8004e3e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3301      	adds	r3, #1
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fa6e 	bl	80042b8 <WIZCHIP_READ>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f003 031f 	and.w	r3, r3, #31
 8004de2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3301      	adds	r3, #1
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004dfa:	2110      	movs	r1, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff faa7 	bl	8004350 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	b21b      	sxth	r3, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	b21a      	sxth	r2, r3
 8004e10:	4b45      	ldr	r3, [pc, #276]	@ (8004f28 <send+0x1e8>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4013      	ands	r3, r2
 8004e18:	b21b      	sxth	r3, r3
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	4b42      	ldr	r3, [pc, #264]	@ (8004f28 <send+0x1e8>)
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	e00d      	b.n	8004e3e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d006      	beq.n	8004e3a <send+0xfa>
      {
         close(sn);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fe3c 	bl	8004aac <close>
         return SOCKERR_TIMEOUT;
 8004e34:	f06f 030c 	mvn.w	r3, #12
 8004e38:	e072      	b.n	8004f20 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e070      	b.n	8004f20 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	3301      	adds	r3, #1
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fa34 	bl	80042b8 <WIZCHIP_READ>
 8004e50:	4603      	mov	r3, r0
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004e56:	88ba      	ldrh	r2, [r7, #4]
 8004e58:	89bb      	ldrh	r3, [r7, #12]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d901      	bls.n	8004e62 <send+0x122>
 8004e5e:	89bb      	ldrh	r3, [r7, #12]
 8004e60:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fb81 	bl	800456c <getSn_TX_FSR>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	3301      	adds	r3, #1
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fa1c 	bl	80042b8 <WIZCHIP_READ>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b17      	cmp	r3, #23
 8004e88:	d009      	beq.n	8004e9e <send+0x15e>
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b1c      	cmp	r3, #28
 8004e8e:	d006      	beq.n	8004e9e <send+0x15e>
      {
         close(sn);
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fe0a 	bl	8004aac <close>
         return SOCKERR_SOCKSTATUS;
 8004e98:	f06f 0306 	mvn.w	r3, #6
 8004e9c:	e040      	b.n	8004f20 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004e9e:	4b23      	ldr	r3, [pc, #140]	@ (8004f2c <send+0x1ec>)
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	fa42 f303 	asr.w	r3, r2, r3
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <send+0x17e>
 8004eb2:	88ba      	ldrh	r2, [r7, #4]
 8004eb4:	89bb      	ldrh	r3, [r7, #12]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d901      	bls.n	8004ebe <send+0x17e>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e030      	b.n	8004f20 <send+0x1e0>
      if(len <= freesize) break;
 8004ebe:	88ba      	ldrh	r2, [r7, #4]
 8004ec0:	89bb      	ldrh	r3, [r7, #12]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d900      	bls.n	8004ec8 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004ec6:	e7cc      	b.n	8004e62 <send+0x122>
      if(len <= freesize) break;
 8004ec8:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004eca:	88ba      	ldrh	r2, [r7, #4]
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fbdd 	bl	8004690 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	3301      	adds	r3, #1
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fa33 	bl	8004350 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004eea:	bf00      	nop
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff f9dd 	bl	80042b8 <WIZCHIP_READ>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f3      	bne.n	8004eec <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	2201      	movs	r2, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	b21a      	sxth	r2, r3
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <send+0x1e8>)
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b21b      	sxth	r3, r3
 8004f14:	4313      	orrs	r3, r2
 8004f16:	b21b      	sxth	r3, r3
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	4b03      	ldr	r3, [pc, #12]	@ (8004f28 <send+0x1e8>)
 8004f1c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004f1e:	88bb      	ldrh	r3, [r7, #4]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000ae8 	.word	0x20000ae8
 8004f2c:	20000ae6 	.word	0x20000ae6

08004f30 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	71fb      	strb	r3, [r7, #7]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d902      	bls.n	8004f54 <recv+0x24>
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	e09b      	b.n	800508c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	3301      	adds	r3, #1
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff f9ab 	bl	80042b8 <WIZCHIP_READ>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d002      	beq.n	8004f72 <recv+0x42>
 8004f6c:	f06f 0304 	mvn.w	r3, #4
 8004f70:	e08c      	b.n	800508c <recv+0x15c>
   CHECK_SOCKDATA();
 8004f72:	88bb      	ldrh	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <recv+0x4e>
 8004f78:	f06f 030d 	mvn.w	r3, #13
 8004f7c:	e086      	b.n	800508c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3301      	adds	r3, #1
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff f994 	bl	80042b8 <WIZCHIP_READ>
 8004f90:	4603      	mov	r3, r0
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004f96:	89ba      	ldrh	r2, [r7, #12]
 8004f98:	88bb      	ldrh	r3, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d201      	bcs.n	8004fa2 <recv+0x72>
 8004f9e:	89bb      	ldrh	r3, [r7, #12]
 8004fa0:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fb2a 	bl	80045fe <getSn_RX_RSR>
 8004faa:	4603      	mov	r3, r0
 8004fac:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff f97c 	bl	80042b8 <WIZCHIP_READ>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b17      	cmp	r3, #23
 8004fc8:	d026      	beq.n	8005018 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b1c      	cmp	r3, #28
 8004fce:	d11c      	bne.n	800500a <recv+0xda>
            {
               if(recvsize != 0) break;
 8004fd0:	89bb      	ldrh	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d133      	bne.n	800503e <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fac7 	bl	800456c <getSn_TX_FSR>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461c      	mov	r4, r3
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff f962 	bl	80042b8 <WIZCHIP_READ>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	029b      	lsls	r3, r3, #10
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d10d      	bne.n	8005018 <recv+0xe8>
               {
                  close(sn);
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fd54 	bl	8004aac <close>
                  return SOCKERR_SOCKSTATUS;
 8005004:	f06f 0306 	mvn.w	r3, #6
 8005008:	e040      	b.n	800508c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fd4d 	bl	8004aac <close>
               return SOCKERR_SOCKSTATUS;
 8005012:	f06f 0306 	mvn.w	r3, #6
 8005016:	e039      	b.n	800508c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005018:	4b1e      	ldr	r3, [pc, #120]	@ (8005094 <recv+0x164>)
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	fa42 f303 	asr.w	r3, r2, r3
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <recv+0x106>
 800502c:	89bb      	ldrh	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <recv+0x106>
 8005032:	2300      	movs	r3, #0
 8005034:	e02a      	b.n	800508c <recv+0x15c>
         if(recvsize != 0) break;
 8005036:	89bb      	ldrh	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 800503c:	e7b1      	b.n	8004fa2 <recv+0x72>
               if(recvsize != 0) break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <recv+0x114>
         if(recvsize != 0) break;
 8005042:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005044:	89ba      	ldrh	r2, [r7, #12]
 8005046:	88bb      	ldrh	r3, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d201      	bcs.n	8005050 <recv+0x120>
 800504c:	89bb      	ldrh	r3, [r7, #12]
 800504e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005050:	88ba      	ldrh	r2, [r7, #4]
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fb74 	bl	8004744 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	3301      	adds	r3, #1
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005068:	2140      	movs	r1, #64	@ 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff f970 	bl	8004350 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005070:	bf00      	nop
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3301      	adds	r3, #1
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff f91a 	bl	80042b8 <WIZCHIP_READ>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f3      	bne.n	8005072 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800508a:	88bb      	ldrh	r3, [r7, #4]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	bd90      	pop	{r4, r7, pc}
 8005094:	20000ae6 	.word	0x20000ae6

08005098 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
 80050a6:	4613      	mov	r3, r2
 80050a8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d902      	bls.n	80050be <sendto+0x26>
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	e11a      	b.n	80052f4 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	3301      	adds	r3, #1
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff f8f6 	bl	80042b8 <WIZCHIP_READ>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	3b02      	subs	r3, #2
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80050d8:	f06f 0304 	mvn.w	r3, #4
 80050dc:	e10a      	b.n	80052f4 <sendto+0x25c>
         break;
 80050de:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80050e0:	89bb      	ldrh	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <sendto+0x54>
 80050e6:	f06f 030d 	mvn.w	r3, #13
 80050ea:	e103      	b.n	80052f4 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	3201      	adds	r2, #1
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	4413      	add	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	3202      	adds	r2, #2
 8005108:	7812      	ldrb	r2, [r2, #0]
 800510a:	4413      	add	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	3203      	adds	r2, #3
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	4413      	add	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10e      	bne.n	8005140 <sendto+0xa8>
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	3301      	adds	r3, #1
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff f8c4 	bl	80042b8 <WIZCHIP_READ>
 8005130:	4603      	mov	r3, r0
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d002      	beq.n	8005140 <sendto+0xa8>
 800513a:	f06f 030b 	mvn.w	r3, #11
 800513e:	e0d9      	b.n	80052f4 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005140:	8c3b      	ldrh	r3, [r7, #32]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10e      	bne.n	8005164 <sendto+0xcc>
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	3301      	adds	r3, #1
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f8b2 	bl	80042b8 <WIZCHIP_READ>
 8005154:	4603      	mov	r3, r0
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b04      	cmp	r3, #4
 800515c:	d002      	beq.n	8005164 <sendto+0xcc>
 800515e:	f06f 030a 	mvn.w	r3, #10
 8005162:	e0c7      	b.n	80052f4 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	3301      	adds	r3, #1
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f8a1 	bl	80042b8 <WIZCHIP_READ>
 8005176:	4603      	mov	r3, r0
 8005178:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b42      	cmp	r3, #66	@ 0x42
 800517e:	d008      	beq.n	8005192 <sendto+0xfa>
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	2b22      	cmp	r3, #34	@ 0x22
 8005184:	d005      	beq.n	8005192 <sendto+0xfa>
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b32      	cmp	r3, #50	@ 0x32
 800518a:	d002      	beq.n	8005192 <sendto+0xfa>
 800518c:	f06f 0306 	mvn.w	r3, #6
 8005190:	e0b0      	b.n	80052f4 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3301      	adds	r3, #1
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800519e:	2204      	movs	r2, #4
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff f982 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	3301      	adds	r3, #1
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b4:	461a      	mov	r2, r3
 80051b6:	8c3b      	ldrh	r3, [r7, #32]
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f7ff f8c5 	bl	8004350 <WIZCHIP_WRITE>
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	3301      	adds	r3, #1
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80051d2:	461a      	mov	r2, r3
 80051d4:	8c3b      	ldrh	r3, [r7, #32]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f7ff f8b8 	bl	8004350 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	3301      	adds	r3, #1
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f863 	bl	80042b8 <WIZCHIP_READ>
 80051f2:	4603      	mov	r3, r0
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80051f8:	89ba      	ldrh	r2, [r7, #12]
 80051fa:	8abb      	ldrh	r3, [r7, #20]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d901      	bls.n	8005204 <sendto+0x16c>
 8005200:	8abb      	ldrh	r3, [r7, #20]
 8005202:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff f9b0 	bl	800456c <getSn_TX_FSR>
 800520c:	4603      	mov	r3, r0
 800520e:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	3301      	adds	r3, #1
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff f84b 	bl	80042b8 <WIZCHIP_READ>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <sendto+0x196>
 8005228:	f06f 0303 	mvn.w	r3, #3
 800522c:	e062      	b.n	80052f4 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800522e:	4b33      	ldr	r3, [pc, #204]	@ (80052fc <sendto+0x264>)
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	fa42 f303 	asr.w	r3, r2, r3
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <sendto+0x1b6>
 8005242:	89ba      	ldrh	r2, [r7, #12]
 8005244:	8abb      	ldrh	r3, [r7, #20]
 8005246:	429a      	cmp	r2, r3
 8005248:	d901      	bls.n	800524e <sendto+0x1b6>
 800524a:	2300      	movs	r3, #0
 800524c:	e052      	b.n	80052f4 <sendto+0x25c>
      if(len <= freesize) break;
 800524e:	89ba      	ldrh	r2, [r7, #12]
 8005250:	8abb      	ldrh	r3, [r7, #20]
 8005252:	429a      	cmp	r2, r3
 8005254:	d900      	bls.n	8005258 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8005256:	e7d5      	b.n	8005204 <sendto+0x16c>
      if(len <= freesize) break;
 8005258:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800525a:	89ba      	ldrh	r2, [r7, #12]
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fa15 	bl	8004690 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	3301      	adds	r3, #1
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005272:	2120      	movs	r1, #32
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff f86b 	bl	8004350 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800527a:	bf00      	nop
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	3301      	adds	r3, #1
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff f815 	bl	80042b8 <WIZCHIP_READ>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f3      	bne.n	800527c <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	3301      	adds	r3, #1
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff f809 	bl	80042b8 <WIZCHIP_READ>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00c      	beq.n	80052d2 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	3301      	adds	r3, #1
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80052c4:	2110      	movs	r1, #16
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f842 	bl	8004350 <WIZCHIP_WRITE>
         break;
 80052cc:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80052ce:	89bb      	ldrh	r3, [r7, #12]
 80052d0:	e010      	b.n	80052f4 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0db      	beq.n	8005294 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	3301      	adds	r3, #1
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80052e8:	2108      	movs	r1, #8
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff f830 	bl	8004350 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80052f0:	f06f 030c 	mvn.w	r3, #12
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000ae6 	.word	0x20000ae6

08005300 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	4613      	mov	r3, r2
 8005310:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8005312:	2300      	movs	r3, #0
 8005314:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d902      	bls.n	8005322 <recvfrom+0x22>
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	e1d2      	b.n	80056c8 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	3301      	adds	r3, #1
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe ffc4 	bl	80042b8 <WIZCHIP_READ>
 8005330:	4603      	mov	r3, r0
 8005332:	777b      	strb	r3, [r7, #29]
 8005334:	7f7b      	ldrb	r3, [r7, #29]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	3b02      	subs	r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d902      	bls.n	8005346 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005340:	f06f 0304 	mvn.w	r3, #4
 8005344:	e1c0      	b.n	80056c8 <recvfrom+0x3c8>
         break;
 8005346:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005348:	89bb      	ldrh	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <recvfrom+0x54>
 800534e:	f06f 030d 	mvn.w	r3, #13
 8005352:	e1b9      	b.n	80056c8 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	4a87      	ldr	r2, [pc, #540]	@ (8005574 <recvfrom+0x274>)
 8005358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d128      	bne.n	80053b2 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff f94b 	bl	80045fe <getSn_RX_RSR>
 8005368:	4603      	mov	r3, r0
 800536a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	3301      	adds	r3, #1
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe ff9d 	bl	80042b8 <WIZCHIP_READ>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <recvfrom+0x8a>
 8005384:	f06f 0303 	mvn.w	r3, #3
 8005388:	e19e      	b.n	80056c8 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800538a:	4b7b      	ldr	r3, [pc, #492]	@ (8005578 <recvfrom+0x278>)
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	fa42 f303 	asr.w	r3, r2, r3
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <recvfrom+0xa8>
 800539e:	8bfb      	ldrh	r3, [r7, #30]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <recvfrom+0xa8>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e18f      	b.n	80056c8 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80053a8:	8bfb      	ldrh	r3, [r7, #30]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d100      	bne.n	80053b0 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80053ae:	e7d7      	b.n	8005360 <recvfrom+0x60>
         if(pack_len != 0) break;
 80053b0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80053b2:	7f7b      	ldrb	r3, [r7, #29]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d078      	beq.n	80054ae <recvfrom+0x1ae>
 80053bc:	2b04      	cmp	r3, #4
 80053be:	f300 8140 	bgt.w	8005642 <recvfrom+0x342>
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d003      	beq.n	80053ce <recvfrom+0xce>
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	f000 80da 	beq.w	8005580 <recvfrom+0x280>
 80053cc:	e139      	b.n	8005642 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	4a68      	ldr	r2, [pc, #416]	@ (8005574 <recvfrom+0x274>)
 80053d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d151      	bne.n	800547e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80053da:	f107 0114 	add.w	r1, r7, #20
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2208      	movs	r2, #8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff f9ae 	bl	8004744 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	3301      	adds	r3, #1
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053f4:	2140      	movs	r1, #64	@ 0x40
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe ffaa 	bl	8004350 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80053fc:	bf00      	nop
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3301      	adds	r3, #1
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe ff54 	bl	80042b8 <WIZCHIP_READ>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f3      	bne.n	80053fe <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8005416:	7d3a      	ldrb	r2, [r7, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3301      	adds	r3, #1
 8005420:	7d7a      	ldrb	r2, [r7, #21]
 8005422:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3302      	adds	r3, #2
 8005428:	7dba      	ldrb	r2, [r7, #22]
 800542a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3303      	adds	r3, #3
 8005430:	7dfa      	ldrb	r2, [r7, #23]
 8005432:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8005434:	7e3b      	ldrb	r3, [r7, #24]
 8005436:	461a      	mov	r2, r3
 8005438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	b29b      	uxth	r3, r3
 8005444:	7e7a      	ldrb	r2, [r7, #25]
 8005446:	4413      	add	r3, r2
 8005448:	b29a      	uxth	r2, r3
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800544e:	7eba      	ldrb	r2, [r7, #26]
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	4611      	mov	r1, r2
 8005454:	4a47      	ldr	r2, [pc, #284]	@ (8005574 <recvfrom+0x274>)
 8005456:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	4a45      	ldr	r2, [pc, #276]	@ (8005574 <recvfrom+0x274>)
 800545e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	b29a      	uxth	r2, r3
 8005466:	7efb      	ldrb	r3, [r7, #27]
 8005468:	4619      	mov	r1, r3
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	440a      	add	r2, r1
 800546e:	b291      	uxth	r1, r2
 8005470:	4a40      	ldr	r2, [pc, #256]	@ (8005574 <recvfrom+0x274>)
 8005472:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	4a40      	ldr	r2, [pc, #256]	@ (800557c <recvfrom+0x27c>)
 800547a:	2180      	movs	r1, #128	@ 0x80
 800547c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	4a3c      	ldr	r2, [pc, #240]	@ (8005574 <recvfrom+0x274>)
 8005482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005486:	89ba      	ldrh	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d202      	bcs.n	8005492 <recvfrom+0x192>
 800548c:	89bb      	ldrh	r3, [r7, #12]
 800548e:	83fb      	strh	r3, [r7, #30]
 8005490:	e004      	b.n	800549c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	4a37      	ldr	r2, [pc, #220]	@ (8005574 <recvfrom+0x274>)
 8005496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800549c:	8bfb      	ldrh	r3, [r7, #30]
 800549e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80054a0:	8bfa      	ldrh	r2, [r7, #30]
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff f94c 	bl	8004744 <wiz_recv_data>
			break;
 80054ac:	e0d5      	b.n	800565a <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	4a30      	ldr	r2, [pc, #192]	@ (8005574 <recvfrom+0x274>)
 80054b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d145      	bne.n	8005546 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80054ba:	f107 0114 	add.w	r1, r7, #20
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2202      	movs	r2, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff f93e 	bl	8004744 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	3301      	adds	r3, #1
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054d4:	2140      	movs	r1, #64	@ 0x40
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe ff3a 	bl	8004350 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80054dc:	bf00      	nop
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	3301      	adds	r3, #1
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fee4 	bl	80042b8 <WIZCHIP_READ>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f3      	bne.n	80054de <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80054f6:	7d3a      	ldrb	r2, [r7, #20]
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	4611      	mov	r1, r2
 80054fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005574 <recvfrom+0x274>)
 80054fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	4a1b      	ldr	r2, [pc, #108]	@ (8005574 <recvfrom+0x274>)
 8005506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	b29b      	uxth	r3, r3
 800550e:	7d7a      	ldrb	r2, [r7, #21]
 8005510:	4413      	add	r3, r2
 8005512:	b29a      	uxth	r2, r3
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	3a02      	subs	r2, #2
 8005518:	b291      	uxth	r1, r2
 800551a:	4a16      	ldr	r2, [pc, #88]	@ (8005574 <recvfrom+0x274>)
 800551c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	4a14      	ldr	r2, [pc, #80]	@ (8005574 <recvfrom+0x274>)
 8005524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005528:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 800552c:	4293      	cmp	r3, r2
 800552e:	d906      	bls.n	800553e <recvfrom+0x23e>
   			{
   			   close(sn);
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff faba 	bl	8004aac <close>
   			   return SOCKFATAL_PACKLEN;
 8005538:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 800553c:	e0c4      	b.n	80056c8 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	4a0e      	ldr	r2, [pc, #56]	@ (800557c <recvfrom+0x27c>)
 8005542:	2180      	movs	r1, #128	@ 0x80
 8005544:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <recvfrom+0x274>)
 800554a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800554e:	89ba      	ldrh	r2, [r7, #12]
 8005550:	429a      	cmp	r2, r3
 8005552:	d202      	bcs.n	800555a <recvfrom+0x25a>
 8005554:	89bb      	ldrh	r3, [r7, #12]
 8005556:	83fb      	strh	r3, [r7, #30]
 8005558:	e004      	b.n	8005564 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	4a05      	ldr	r2, [pc, #20]	@ (8005574 <recvfrom+0x274>)
 800555e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005562:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8005564:	8bfa      	ldrh	r2, [r7, #30]
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff f8ea 	bl	8004744 <wiz_recv_data>
		   break;
 8005570:	e073      	b.n	800565a <recvfrom+0x35a>
 8005572:	bf00      	nop
 8005574:	20000aec 	.word	0x20000aec
 8005578:	20000ae6 	.word	0x20000ae6
 800557c:	20000afc 	.word	0x20000afc
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	4a53      	ldr	r2, [pc, #332]	@ (80056d0 <recvfrom+0x3d0>)
 8005584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d144      	bne.n	8005616 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 800558c:	f107 0114 	add.w	r1, r7, #20
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2206      	movs	r2, #6
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff f8d5 	bl	8004744 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	3301      	adds	r3, #1
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055a6:	2140      	movs	r1, #64	@ 0x40
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe fed1 	bl	8004350 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80055ae:	bf00      	nop
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	3301      	adds	r3, #1
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe fe7b 	bl	80042b8 <WIZCHIP_READ>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f3      	bne.n	80055b0 <recvfrom+0x2b0>
   			addr[0] = head[0];
 80055c8:	7d3a      	ldrb	r2, [r7, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3301      	adds	r3, #1
 80055d2:	7d7a      	ldrb	r2, [r7, #21]
 80055d4:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3302      	adds	r3, #2
 80055da:	7dba      	ldrb	r2, [r7, #22]
 80055dc:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3303      	adds	r3, #3
 80055e2:	7dfa      	ldrb	r2, [r7, #23]
 80055e4:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80055e6:	7e3a      	ldrb	r2, [r7, #24]
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	4611      	mov	r1, r2
 80055ec:	4a38      	ldr	r2, [pc, #224]	@ (80056d0 <recvfrom+0x3d0>)
 80055ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	4a36      	ldr	r2, [pc, #216]	@ (80056d0 <recvfrom+0x3d0>)
 80055f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	7e7b      	ldrb	r3, [r7, #25]
 8005600:	4619      	mov	r1, r3
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	440a      	add	r2, r1
 8005606:	b291      	uxth	r1, r2
 8005608:	4a31      	ldr	r2, [pc, #196]	@ (80056d0 <recvfrom+0x3d0>)
 800560a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	4a30      	ldr	r2, [pc, #192]	@ (80056d4 <recvfrom+0x3d4>)
 8005612:	2180      	movs	r1, #128	@ 0x80
 8005614:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	4a2d      	ldr	r2, [pc, #180]	@ (80056d0 <recvfrom+0x3d0>)
 800561a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800561e:	89ba      	ldrh	r2, [r7, #12]
 8005620:	429a      	cmp	r2, r3
 8005622:	d202      	bcs.n	800562a <recvfrom+0x32a>
 8005624:	89bb      	ldrh	r3, [r7, #12]
 8005626:	83fb      	strh	r3, [r7, #30]
 8005628:	e004      	b.n	8005634 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	4a28      	ldr	r2, [pc, #160]	@ (80056d0 <recvfrom+0x3d0>)
 800562e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005632:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005634:	8bfa      	ldrh	r2, [r7, #30]
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f882 	bl	8004744 <wiz_recv_data>
			break;
 8005640:	e00b      	b.n	800565a <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8005642:	8bfa      	ldrh	r2, [r7, #30]
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff f8d5 	bl	80047f8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	491f      	ldr	r1, [pc, #124]	@ (80056d0 <recvfrom+0x3d0>)
 8005652:	8bfa      	ldrh	r2, [r7, #30]
 8005654:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8005658:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	3301      	adds	r3, #1
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005666:	2140      	movs	r1, #64	@ 0x40
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fe71 	bl	8004350 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800566e:	bf00      	nop
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	3301      	adds	r3, #1
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fe1b 	bl	80042b8 <WIZCHIP_READ>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f3      	bne.n	8005670 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	4a11      	ldr	r2, [pc, #68]	@ (80056d0 <recvfrom+0x3d0>)
 800568c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	8bfa      	ldrh	r2, [r7, #30]
 8005694:	1a8a      	subs	r2, r1, r2
 8005696:	b291      	uxth	r1, r2
 8005698:	4a0d      	ldr	r2, [pc, #52]	@ (80056d0 <recvfrom+0x3d0>)
 800569a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	4a0b      	ldr	r2, [pc, #44]	@ (80056d0 <recvfrom+0x3d0>)
 80056a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	4a09      	ldr	r2, [pc, #36]	@ (80056d4 <recvfrom+0x3d4>)
 80056ae:	5cd2      	ldrb	r2, [r2, r3]
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	b2d1      	uxtb	r1, r2
 80056b8:	4a06      	ldr	r2, [pc, #24]	@ (80056d4 <recvfrom+0x3d4>)
 80056ba:	54d1      	strb	r1, [r2, r3]
 80056bc:	e003      	b.n	80056c6 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	4a04      	ldr	r2, [pc, #16]	@ (80056d4 <recvfrom+0x3d4>)
 80056c2:	2100      	movs	r1, #0
 80056c4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80056c6:	8bfb      	ldrh	r3, [r7, #30]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20000aec 	.word	0x20000aec
 80056d4:	20000afc 	.word	0x20000afc

080056d8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005702:	b480      	push	{r7}
 8005704:	af00      	add	r7, sp, #0
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
 800574c:	2300      	movs	r3, #0
 800574e:	4618      	mov	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <reg_wizchip_cs_cbfunc+0x16>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005786:	4b0a      	ldr	r3, [pc, #40]	@ (80057b0 <reg_wizchip_cs_cbfunc+0x40>)
 8005788:	4a0a      	ldr	r2, [pc, #40]	@ (80057b4 <reg_wizchip_cs_cbfunc+0x44>)
 800578a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800578c:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <reg_wizchip_cs_cbfunc+0x40>)
 800578e:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <reg_wizchip_cs_cbfunc+0x48>)
 8005790:	619a      	str	r2, [r3, #24]
 8005792:	e006      	b.n	80057a2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005794:	4a06      	ldr	r2, [pc, #24]	@ (80057b0 <reg_wizchip_cs_cbfunc+0x40>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800579a:	4a05      	ldr	r2, [pc, #20]	@ (80057b0 <reg_wizchip_cs_cbfunc+0x40>)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6193      	str	r3, [r2, #24]
   }
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000054 	.word	0x20000054
 80057b4:	080056f5 	.word	0x080056f5
 80057b8:	08005703 	.word	0x08005703

080057bc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80057c6:	bf00      	nop
 80057c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005808 <reg_wizchip_spi_cbfunc+0x4c>)
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f9      	beq.n	80057c8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <reg_wizchip_spi_cbfunc+0x24>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80057e0:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <reg_wizchip_spi_cbfunc+0x4c>)
 80057e2:	4a0a      	ldr	r2, [pc, #40]	@ (800580c <reg_wizchip_spi_cbfunc+0x50>)
 80057e4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <reg_wizchip_spi_cbfunc+0x4c>)
 80057e8:	4a09      	ldr	r2, [pc, #36]	@ (8005810 <reg_wizchip_spi_cbfunc+0x54>)
 80057ea:	621a      	str	r2, [r3, #32]
 80057ec:	e006      	b.n	80057fc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80057ee:	4a06      	ldr	r2, [pc, #24]	@ (8005808 <reg_wizchip_spi_cbfunc+0x4c>)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80057f4:	4a04      	ldr	r2, [pc, #16]	@ (8005808 <reg_wizchip_spi_cbfunc+0x4c>)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6213      	str	r3, [r2, #32]
   }
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20000054 	.word	0x20000054
 800580c:	08005749 	.word	0x08005749
 8005810:	08005759 	.word	0x08005759

08005814 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	6039      	str	r1, [r7, #0]
 800581e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	2b0f      	cmp	r3, #15
 8005830:	f200 80c5 	bhi.w	80059be <ctlwizchip+0x1aa>
 8005834:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <ctlwizchip+0x28>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	0800587d 	.word	0x0800587d
 8005840:	08005883 	.word	0x08005883
 8005844:	080058af 	.word	0x080058af
 8005848:	080058a3 	.word	0x080058a3
 800584c:	080058bd 	.word	0x080058bd
 8005850:	080058c9 	.word	0x080058c9
 8005854:	080058d7 	.word	0x080058d7
 8005858:	080058fd 	.word	0x080058fd
 800585c:	0800591f 	.word	0x0800591f
 8005860:	08005963 	.word	0x08005963
 8005864:	08005969 	.word	0x08005969
 8005868:	08005971 	.word	0x08005971
 800586c:	080059c5 	.word	0x080059c5
 8005870:	08005979 	.word	0x08005979
 8005874:	08005987 	.word	0x08005987
 8005878:	080059a3 	.word	0x080059a3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800587c:	f000 f8e8 	bl	8005a50 <wizchip_sw_reset>
         break;
 8005880:	e0a1      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3308      	adds	r3, #8
 8005890:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f925 	bl	8005ae8 <wizchip_init>
 800589e:	4603      	mov	r3, r0
 80058a0:	e092      	b.n	80059c8 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f9aa 	bl	8005c00 <wizchip_clrinterrupt>
         break;
 80058ac:	e08b      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80058ae:	f000 f9db 	bl	8005c68 <wizchip_getinterrupt>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	801a      	strh	r2, [r3, #0]
         break;
 80058ba:	e084      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 f9f6 	bl	8005cb2 <wizchip_setinterruptmask>
         break;         
 80058c6:	e07e      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80058c8:	f000 fa0e 	bl	8005ce8 <wizchip_getinterruptmask>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	801a      	strh	r2, [r3, #0]
         break;
 80058d4:	e077      	b.n	80059c6 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	b29b      	uxth	r3, r3
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80058e6:	f7fe fd33 	bl	8004350 <WIZCHIP_WRITE>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80058f6:	f7fe fd2b 	bl	8004350 <WIZCHIP_WRITE>
         break;
 80058fa:	e064      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80058fc:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005900:	f7fe fcda 	bl	80042b8 <WIZCHIP_READ>
 8005904:	4603      	mov	r3, r0
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	b29c      	uxth	r4, r3
 800590a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800590e:	f7fe fcd3 	bl	80042b8 <WIZCHIP_READ>
 8005912:	4603      	mov	r3, r0
 8005914:	4423      	add	r3, r4
 8005916:	b29a      	uxth	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	801a      	strh	r2, [r3, #0]
         break;
 800591c:	e053      	b.n	80059c6 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800591e:	4b2c      	ldr	r3, [pc, #176]	@ (80059d0 <ctlwizchip+0x1bc>)
 8005920:	789a      	ldrb	r2, [r3, #2]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	4a29      	ldr	r2, [pc, #164]	@ (80059d0 <ctlwizchip+0x1bc>)
 800592c:	78d2      	ldrb	r2, [r2, #3]
 800592e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	3302      	adds	r3, #2
 8005934:	4a26      	ldr	r2, [pc, #152]	@ (80059d0 <ctlwizchip+0x1bc>)
 8005936:	7912      	ldrb	r2, [r2, #4]
 8005938:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	3303      	adds	r3, #3
 800593e:	4a24      	ldr	r2, [pc, #144]	@ (80059d0 <ctlwizchip+0x1bc>)
 8005940:	7952      	ldrb	r2, [r2, #5]
 8005942:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	3304      	adds	r3, #4
 8005948:	4a21      	ldr	r2, [pc, #132]	@ (80059d0 <ctlwizchip+0x1bc>)
 800594a:	7992      	ldrb	r2, [r2, #6]
 800594c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	3305      	adds	r3, #5
 8005952:	4a1f      	ldr	r2, [pc, #124]	@ (80059d0 <ctlwizchip+0x1bc>)
 8005954:	79d2      	ldrb	r2, [r2, #7]
 8005956:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	3306      	adds	r3, #6
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
         break;
 8005960:	e031      	b.n	80059c6 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005962:	f000 fa13 	bl	8005d8c <wizphy_reset>
         break;
 8005966:	e02e      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005968:	6838      	ldr	r0, [r7, #0]
 800596a:	f000 fa36 	bl	8005dda <wizphy_setphyconf>
         break;
 800596e:	e02a      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005970:	6838      	ldr	r0, [r7, #0]
 8005972:	f000 fa75 	bl	8005e60 <wizphy_getphyconf>
         break;
 8005976:	e026      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fad9 	bl	8005f34 <wizphy_setphypmode>
 8005982:	4603      	mov	r3, r0
 8005984:	e020      	b.n	80059c8 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005986:	f000 f9e8 	bl	8005d5a <wizphy_getphypmode>
 800598a:	4603      	mov	r3, r0
 800598c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2bff      	cmp	r3, #255	@ 0xff
 8005992:	d102      	bne.n	800599a <ctlwizchip+0x186>
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	e016      	b.n	80059c8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	7dfa      	ldrb	r2, [r7, #23]
 800599e:	701a      	strb	r2, [r3, #0]
         break;
 80059a0:	e011      	b.n	80059c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80059a2:	f000 f9c4 	bl	8005d2e <wizphy_getphylink>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	2bff      	cmp	r3, #255	@ 0xff
 80059ae:	d102      	bne.n	80059b6 <ctlwizchip+0x1a2>
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	e008      	b.n	80059c8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	7dfa      	ldrb	r2, [r7, #23]
 80059ba:	701a      	strb	r2, [r3, #0]
         break;
 80059bc:	e003      	b.n	80059c6 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	e001      	b.n	80059c8 <ctlwizchip+0x1b4>
         break;
 80059c4:	bf00      	nop
   }
   return 0;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd90      	pop	{r4, r7, pc}
 80059d0:	20000054 	.word	0x20000054

080059d4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	6039      	str	r1, [r7, #0]
 80059de:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d82c      	bhi.n	8005a40 <ctlnetwork+0x6c>
 80059e6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <ctlnetwork+0x18>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a05 	.word	0x08005a05
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	08005a15 	.word	0x08005a15
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a31 	.word	0x08005a31
 8005a00:	08005a39 	.word	0x08005a39
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005a04:	6838      	ldr	r0, [r7, #0]
 8005a06:	f000 fadf 	bl	8005fc8 <wizchip_setnetinfo>
         break;
 8005a0a:	e01c      	b.n	8005a46 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005a0c:	6838      	ldr	r0, [r7, #0]
 8005a0e:	f000 fb1b 	bl	8006048 <wizchip_getnetinfo>
         break;
 8005a12:	e018      	b.n	8005a46 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fb55 	bl	80060c8 <wizchip_setnetmode>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	e012      	b.n	8005a48 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005a22:	f000 fb73 	bl	800610c <wizchip_getnetmode>
 8005a26:	4603      	mov	r3, r0
 8005a28:	461a      	mov	r2, r3
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	701a      	strb	r2, [r3, #0]
         break;
 8005a2e:	e00a      	b.n	8005a46 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005a30:	6838      	ldr	r0, [r7, #0]
 8005a32:	f000 fb73 	bl	800611c <wizchip_settimeout>
         break;
 8005a36:	e006      	b.n	8005a46 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005a38:	6838      	ldr	r0, [r7, #0]
 8005a3a:	f000 fb90 	bl	800615e <wizchip_gettimeout>
         break;
 8005a3e:	e002      	b.n	8005a46 <ctlnetwork+0x72>
      default:
         return -1;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	e000      	b.n	8005a48 <ctlnetwork+0x74>
   }
   return 0;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005a56:	1d3b      	adds	r3, r7, #4
 8005a58:	2206      	movs	r2, #6
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005a60:	f7fe fcc4 	bl	80043ec <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	2204      	movs	r2, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005a70:	f7fe fcbc 	bl	80043ec <WIZCHIP_READ_BUF>
 8005a74:	f107 0310 	add.w	r3, r7, #16
 8005a78:	2204      	movs	r2, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005a80:	f7fe fcb4 	bl	80043ec <WIZCHIP_READ_BUF>
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	2204      	movs	r2, #4
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005a90:	f7fe fcac 	bl	80043ec <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005a94:	2180      	movs	r1, #128	@ 0x80
 8005a96:	2000      	movs	r0, #0
 8005a98:	f7fe fc5a 	bl	8004350 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7fe fc0b 	bl	80042b8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	2206      	movs	r2, #6
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005aac:	f7fe fcfe 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005ab0:	f107 0314 	add.w	r3, r7, #20
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005abc:	f7fe fcf6 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005ac0:	f107 0310 	add.w	r3, r7, #16
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005acc:	f7fe fcee 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005adc:	f7fe fce6 	bl	80044ac <WIZCHIP_WRITE_BUF>
}
 8005ae0:	bf00      	nop
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005af6:	f7ff ffab 	bl	8005a50 <wizchip_sw_reset>
   if(txsize)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d03b      	beq.n	8005b78 <wizchip_init+0x90>
   {
      tmp = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b04:	2300      	movs	r3, #0
 8005b06:	73fb      	strb	r3, [r7, #15]
 8005b08:	e015      	b.n	8005b36 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	4413      	add	r3, r2
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	dd02      	ble.n	8005b2a <wizchip_init+0x42>
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	e066      	b.n	8005bf8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	3301      	adds	r3, #1
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	73fb      	strb	r3, [r7, #15]
 8005b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3a:	2b07      	cmp	r3, #7
 8005b3c:	dde5      	ble.n	8005b0a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
 8005b42:	e015      	b.n	8005b70 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005b52:	4618      	mov	r0, r3
 8005b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f7fe fbf6 	bl	8004350 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b74:	2b07      	cmp	r3, #7
 8005b76:	dde5      	ble.n	8005b44 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d03b      	beq.n	8005bf6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
 8005b86:	e015      	b.n	8005bb4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	4413      	add	r3, r2
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	4413      	add	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005b9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	dd02      	ble.n	8005ba8 <wizchip_init+0xc0>
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	e027      	b.n	8005bf8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	3301      	adds	r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb8:	2b07      	cmp	r3, #7
 8005bba:	dde5      	ble.n	8005b88 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]
 8005bc0:	e015      	b.n	8005bee <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	3301      	adds	r3, #1
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	4413      	add	r3, r2
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	f7fe fbb7 	bl	8004350 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	73fb      	strb	r3, [r7, #15]
 8005bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf2:	2b07      	cmp	r3, #7
 8005bf4:	dde5      	ble.n	8005bc2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	f023 030f 	bic.w	r3, r3, #15
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8005c24:	f7fe fb94 	bl	8004350 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]
 8005c2c:	e014      	b.n	8005c58 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8005c2e:	7bba      	ldrb	r2, [r7, #14]
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	fa42 f303 	asr.w	r3, r2, r3
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <wizchip_clrinterrupt+0x52>
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	3301      	adds	r3, #1
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005c4a:	211f      	movs	r1, #31
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fb7f 	bl	8004350 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	3301      	adds	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	2b07      	cmp	r3, #7
 8005c5c:	d9e7      	bls.n	8005c2e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8005c7a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8005c7e:	f7fe fb1b 	bl	80042b8 <WIZCHIP_READ>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f023 030f 	bic.w	r3, r3, #15
 8005c88:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8005c8a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8005c8e:	f7fe fb13 	bl	80042b8 <WIZCHIP_READ>
 8005c92:	4603      	mov	r3, r0
 8005c94:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8005c96:	79bb      	ldrb	r3, [r7, #6]
 8005c98:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8005c9a:	88bb      	ldrh	r3, [r7, #4]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005ca8:	88bb      	ldrh	r3, [r7, #4]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	4603      	mov	r3, r0
 8005cba:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005cd0:	f7fe fb3e 	bl	8004350 <WIZCHIP_WRITE>
   setSIMR(simr);
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005cdc:	f7fe fb38 	bl	8004350 <WIZCHIP_WRITE>
#endif   
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8005cfa:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005cfe:	f7fe fadb 	bl	80042b8 <WIZCHIP_READ>
 8005d02:	4603      	mov	r3, r0
 8005d04:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8005d06:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005d0a:	f7fe fad5 	bl	80042b8 <WIZCHIP_READ>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8005d12:	79bb      	ldrb	r3, [r7, #6]
 8005d14:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8005d16:	88bb      	ldrh	r3, [r7, #4]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005d24:	88bb      	ldrh	r3, [r7, #4]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8005d34:	2300      	movs	r3, #0
 8005d36:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8005d38:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005d3c:	f7fe fabc 	bl	80042b8 <WIZCHIP_READ>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8005d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8005d64:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005d68:	f7fe faa6 	bl	80042b8 <WIZCHIP_READ>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d72:	2b30      	cmp	r3, #48	@ 0x30
 8005d74:	d102      	bne.n	8005d7c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8005d76:	2301      	movs	r3, #1
 8005d78:	71fb      	strb	r3, [r7, #7]
 8005d7a:	e001      	b.n	8005d80 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8005d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8005d92:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005d96:	f7fe fa8f 	bl	80042b8 <WIZCHIP_READ>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	4619      	mov	r1, r3
 8005daa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005dae:	f7fe facf 	bl	8004350 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8005db2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005db6:	f7fe fa7f 	bl	80042b8 <WIZCHIP_READ>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dc4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005dce:	f7fe fabf 	bl	8004350 <WIZCHIP_WRITE>
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d104      	bne.n	8005df8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005df4:	73fb      	strb	r3, [r7, #15]
 8005df6:	e003      	b.n	8005e00 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dfe:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d104      	bne.n	8005e12 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8005e0e:	73fb      	strb	r3, [r7, #15]
 8005e10:	e019      	b.n	8005e46 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	78db      	ldrb	r3, [r3, #3]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d10d      	bne.n	8005e36 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	789b      	ldrb	r3, [r3, #2]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d104      	bne.n	8005e2c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	f043 0318 	orr.w	r3, r3, #24
 8005e28:	73fb      	strb	r3, [r7, #15]
 8005e2a:	e00c      	b.n	8005e46 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	f043 0308 	orr.w	r3, r3, #8
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	e007      	b.n	8005e46 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	789b      	ldrb	r3, [r3, #2]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d103      	bne.n	8005e46 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	f043 0310 	orr.w	r3, r3, #16
 8005e44:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005e4e:	f7fe fa7f 	bl	8004350 <WIZCHIP_WRITE>
   wizphy_reset();
 8005e52:	f7ff ff9b 	bl	8005d8c <wizphy_reset>
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8005e6c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005e70:	f7fe fa22 	bl	80042b8 <WIZCHIP_READ>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	119b      	asrs	r3, r3, #6
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d001      	beq.n	8005e96 <wizphy_getphyconf+0x36>
 8005e92:	2b38      	cmp	r3, #56	@ 0x38
 8005e94:	d103      	bne.n	8005e9e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	705a      	strb	r2, [r3, #1]
         break;
 8005e9c:	e003      	b.n	8005ea6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	705a      	strb	r2, [r3, #1]
         break;
 8005ea4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eac:	3b10      	subs	r3, #16
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	bf8c      	ite	hi
 8005eb2:	2201      	movhi	r2, #1
 8005eb4:	2200      	movls	r2, #0
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	2a00      	cmp	r2, #0
 8005eba:	d10f      	bne.n	8005edc <wizphy_getphyconf+0x7c>
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f2c <wizphy_getphyconf+0xcc>)
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf14      	ite	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	2300      	moveq	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	709a      	strb	r2, [r3, #2]
         break;
 8005eda:	e003      	b.n	8005ee4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	709a      	strb	r2, [r3, #2]
         break;
 8005ee2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eea:	3b08      	subs	r3, #8
 8005eec:	2b18      	cmp	r3, #24
 8005eee:	bf8c      	ite	hi
 8005ef0:	2201      	movhi	r2, #1
 8005ef2:	2200      	movls	r2, #0
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	d10f      	bne.n	8005f1a <wizphy_getphyconf+0xba>
 8005efa:	4a0d      	ldr	r2, [pc, #52]	@ (8005f30 <wizphy_getphyconf+0xd0>)
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	70da      	strb	r2, [r3, #3]
         break;
 8005f18:	e003      	b.n	8005f22 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	70da      	strb	r2, [r3, #3]
         break;
 8005f20:	bf00      	nop
   }
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	00010101 	.word	0x00010101
 8005f30:	01010001 	.word	0x01010001

08005f34 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8005f42:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005f46:	f7fe f9b7 	bl	80042b8 <WIZCHIP_READ>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <wizphy_setphypmode+0x2a>
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5c:	e030      	b.n	8005fc0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8005f64:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d104      	bne.n	8005f76 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	e003      	b.n	8005f7e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8005f7c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	4619      	mov	r1, r3
 8005f82:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005f86:	f7fe f9e3 	bl	8004350 <WIZCHIP_WRITE>
   wizphy_reset();
 8005f8a:	f7ff feff 	bl	8005d8c <wizphy_reset>
   tmp = getPHYCFGR();
 8005f8e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005f92:	f7fe f991 	bl	80042b8 <WIZCHIP_READ>
 8005f96:	4603      	mov	r3, r0
 8005f98:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d106      	bne.n	8005fae <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <wizphy_setphypmode+0x88>
 8005faa:	2300      	movs	r3, #0
 8005fac:	e008      	b.n	8005fc0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <wizphy_setphypmode+0x88>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e001      	b.n	8005fc0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2206      	movs	r2, #6
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005fda:	f7fe fa67 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	330e      	adds	r3, #14
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005fea:	f7fe fa5f 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	330a      	adds	r3, #10
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005ffa:	f7fe fa57 	bl	80044ac <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3306      	adds	r3, #6
 8006002:	2204      	movs	r2, #4
 8006004:	4619      	mov	r1, r3
 8006006:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800600a:	f7fe fa4f 	bl	80044ac <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7c9a      	ldrb	r2, [r3, #18]
 8006012:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <wizchip_setnetinfo+0x78>)
 8006014:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	7cda      	ldrb	r2, [r3, #19]
 800601a:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <wizchip_setnetinfo+0x78>)
 800601c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	7d1a      	ldrb	r2, [r3, #20]
 8006022:	4b07      	ldr	r3, [pc, #28]	@ (8006040 <wizchip_setnetinfo+0x78>)
 8006024:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7d5a      	ldrb	r2, [r3, #21]
 800602a:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <wizchip_setnetinfo+0x78>)
 800602c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	7d9a      	ldrb	r2, [r3, #22]
 8006032:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <wizchip_setnetinfo+0x7c>)
 8006034:	701a      	strb	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000b04 	.word	0x20000b04
 8006044:	20000b08 	.word	0x20000b08

08006048 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2206      	movs	r2, #6
 8006054:	4619      	mov	r1, r3
 8006056:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800605a:	f7fe f9c7 	bl	80043ec <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	330e      	adds	r3, #14
 8006062:	2204      	movs	r2, #4
 8006064:	4619      	mov	r1, r3
 8006066:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800606a:	f7fe f9bf 	bl	80043ec <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	330a      	adds	r3, #10
 8006072:	2204      	movs	r2, #4
 8006074:	4619      	mov	r1, r3
 8006076:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800607a:	f7fe f9b7 	bl	80043ec <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3306      	adds	r3, #6
 8006082:	2204      	movs	r2, #4
 8006084:	4619      	mov	r1, r3
 8006086:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800608a:	f7fe f9af 	bl	80043ec <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800608e:	4b0c      	ldr	r3, [pc, #48]	@ (80060c0 <wizchip_getnetinfo+0x78>)
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006096:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <wizchip_getnetinfo+0x78>)
 8006098:	785a      	ldrb	r2, [r3, #1]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800609e:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <wizchip_getnetinfo+0x78>)
 80060a0:	789a      	ldrb	r2, [r3, #2]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80060a6:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <wizchip_getnetinfo+0x78>)
 80060a8:	78da      	ldrb	r2, [r3, #3]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80060ae:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <wizchip_getnetinfo+0x7c>)
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	759a      	strb	r2, [r3, #22]
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000b04 	.word	0x20000b04
 80060c4:	20000b08 	.word	0x20000b08

080060c8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <wizchip_setnetmode+0x1e>
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	e00e      	b.n	8006104 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80060e6:	2000      	movs	r0, #0
 80060e8:	f7fe f8e6 	bl	80042b8 <WIZCHIP_READ>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80060f0:	7bfa      	ldrb	r2, [r7, #15]
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	4619      	mov	r1, r3
 80060fc:	2000      	movs	r0, #0
 80060fe:	f7fe f927 	bl	8004350 <WIZCHIP_WRITE>
   return 0;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8006110:	2000      	movs	r0, #0
 8006112:	f7fe f8d1 	bl	80042b8 <WIZCHIP_READ>
 8006116:	4603      	mov	r3, r0
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd80      	pop	{r7, pc}

0800611c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	4619      	mov	r1, r3
 800612a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800612e:	f7fe f90f 	bl	8004350 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	b29b      	uxth	r3, r3
 800613a:	b2db      	uxtb	r3, r3
 800613c:	4619      	mov	r1, r3
 800613e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8006142:	f7fe f905 	bl	8004350 <WIZCHIP_WRITE>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	885b      	ldrh	r3, [r3, #2]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	4619      	mov	r1, r3
 800614e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8006152:	f7fe f8fd 	bl	8004350 <WIZCHIP_WRITE>
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800615e:	b590      	push	{r4, r7, lr}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006166:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800616a:	f7fe f8a5 	bl	80042b8 <WIZCHIP_READ>
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8006176:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800617a:	f7fe f89d 	bl	80042b8 <WIZCHIP_READ>
 800617e:	4603      	mov	r3, r0
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	b29c      	uxth	r4, r3
 8006184:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8006188:	f7fe f896 	bl	80042b8 <WIZCHIP_READ>
 800618c:	4603      	mov	r3, r0
 800618e:	4423      	add	r3, r4
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	805a      	strh	r2, [r3, #2]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bd90      	pop	{r4, r7, pc}
	...

080061a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80061a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80061d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80061a4:	f7fb ffd0 	bl	8002148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061a8:	480c      	ldr	r0, [pc, #48]	@ (80061dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80061aa:	490d      	ldr	r1, [pc, #52]	@ (80061e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80061ac:	4a0d      	ldr	r2, [pc, #52]	@ (80061e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80061ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061b0:	e002      	b.n	80061b8 <LoopCopyDataInit>

080061b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061b6:	3304      	adds	r3, #4

080061b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061bc:	d3f9      	bcc.n	80061b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061be:	4a0a      	ldr	r2, [pc, #40]	@ (80061e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80061c0:	4c0a      	ldr	r4, [pc, #40]	@ (80061ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80061c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061c4:	e001      	b.n	80061ca <LoopFillZerobss>

080061c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061c8:	3204      	adds	r2, #4

080061ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061cc:	d3fb      	bcc.n	80061c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80061ce:	f005 fb7d 	bl	800b8cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061d2:	f7fa fd45 	bl	8000c60 <main>
  bx  lr    
 80061d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80061d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80061dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061e0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80061e4:	0800ce80 	.word	0x0800ce80
  ldr r2, =_sbss
 80061e8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80061ec:	20005644 	.word	0x20005644

080061f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061f0:	e7fe      	b.n	80061f0 <ADC_IRQHandler>
	...

080061f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006234 <HAL_Init+0x40>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006234 <HAL_Init+0x40>)
 80061fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006204:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <HAL_Init+0x40>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0a      	ldr	r2, [pc, #40]	@ (8006234 <HAL_Init+0x40>)
 800620a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800620e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006210:	4b08      	ldr	r3, [pc, #32]	@ (8006234 <HAL_Init+0x40>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a07      	ldr	r2, [pc, #28]	@ (8006234 <HAL_Init+0x40>)
 8006216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800621c:	2003      	movs	r0, #3
 800621e:	f000 f8fc 	bl	800641a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006222:	200f      	movs	r0, #15
 8006224:	f7fb fe6e 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006228:	f7fb fd02 	bl	8001c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40023c00 	.word	0x40023c00

08006238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <HAL_IncTick+0x20>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	4b06      	ldr	r3, [pc, #24]	@ (800625c <HAL_IncTick+0x24>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4413      	add	r3, r2
 8006248:	4a04      	ldr	r2, [pc, #16]	@ (800625c <HAL_IncTick+0x24>)
 800624a:	6013      	str	r3, [r2, #0]
}
 800624c:	bf00      	nop
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000084 	.word	0x20000084
 800625c:	20000b0c 	.word	0x20000b0c

08006260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return uwTick;
 8006264:	4b03      	ldr	r3, [pc, #12]	@ (8006274 <HAL_GetTick+0x14>)
 8006266:	681b      	ldr	r3, [r3, #0]
}
 8006268:	4618      	mov	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000b0c 	.word	0x20000b0c

08006278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7ff ffee 	bl	8006260 <HAL_GetTick>
 8006284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d005      	beq.n	800629e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006292:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <HAL_Delay+0x44>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800629e:	bf00      	nop
 80062a0:	f7ff ffde 	bl	8006260 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d8f7      	bhi.n	80062a0 <HAL_Delay+0x28>
  {
  }
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000084 	.word	0x20000084

080062c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <__NVIC_SetPriorityGrouping+0x44>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80062dc:	4013      	ands	r3, r2
 80062de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80062ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062f2:	4a04      	ldr	r2, [pc, #16]	@ (8006304 <__NVIC_SetPriorityGrouping+0x44>)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	60d3      	str	r3, [r2, #12]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	e000ed00 	.word	0xe000ed00

08006308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800630c:	4b04      	ldr	r3, [pc, #16]	@ (8006320 <__NVIC_GetPriorityGrouping+0x18>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	0a1b      	lsrs	r3, r3, #8
 8006312:	f003 0307 	and.w	r3, r3, #7
}
 8006316:	4618      	mov	r0, r3
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	e000ed00 	.word	0xe000ed00

08006324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800632e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	db0b      	blt.n	800634e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	f003 021f 	and.w	r2, r3, #31
 800633c:	4907      	ldr	r1, [pc, #28]	@ (800635c <__NVIC_EnableIRQ+0x38>)
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2001      	movs	r0, #1
 8006346:	fa00 f202 	lsl.w	r2, r0, r2
 800634a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	e000e100 	.word	0xe000e100

08006360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	6039      	str	r1, [r7, #0]
 800636a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800636c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006370:	2b00      	cmp	r3, #0
 8006372:	db0a      	blt.n	800638a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	490c      	ldr	r1, [pc, #48]	@ (80063ac <__NVIC_SetPriority+0x4c>)
 800637a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637e:	0112      	lsls	r2, r2, #4
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	440b      	add	r3, r1
 8006384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006388:	e00a      	b.n	80063a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	b2da      	uxtb	r2, r3
 800638e:	4908      	ldr	r1, [pc, #32]	@ (80063b0 <__NVIC_SetPriority+0x50>)
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	3b04      	subs	r3, #4
 8006398:	0112      	lsls	r2, r2, #4
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	440b      	add	r3, r1
 800639e:	761a      	strb	r2, [r3, #24]
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	e000e100 	.word	0xe000e100
 80063b0:	e000ed00 	.word	0xe000ed00

080063b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b089      	sub	sp, #36	@ 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f1c3 0307 	rsb	r3, r3, #7
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	bf28      	it	cs
 80063d2:	2304      	movcs	r3, #4
 80063d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	3304      	adds	r3, #4
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d902      	bls.n	80063e4 <NVIC_EncodePriority+0x30>
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3b03      	subs	r3, #3
 80063e2:	e000      	b.n	80063e6 <NVIC_EncodePriority+0x32>
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43da      	mvns	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	401a      	ands	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	fa01 f303 	lsl.w	r3, r1, r3
 8006406:	43d9      	mvns	r1, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800640c:	4313      	orrs	r3, r2
         );
}
 800640e:	4618      	mov	r0, r3
 8006410:	3724      	adds	r7, #36	@ 0x24
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff ff4c 	bl	80062c0 <__NVIC_SetPriorityGrouping>
}
 8006428:	bf00      	nop
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006442:	f7ff ff61 	bl	8006308 <__NVIC_GetPriorityGrouping>
 8006446:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	6978      	ldr	r0, [r7, #20]
 800644e:	f7ff ffb1 	bl	80063b4 <NVIC_EncodePriority>
 8006452:	4602      	mov	r2, r0
 8006454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006458:	4611      	mov	r1, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff ff80 	bl	8006360 <__NVIC_SetPriority>
}
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ff54 	bl	8006324 <__NVIC_EnableIRQ>
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	@ 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800649a:	2300      	movs	r3, #0
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	e16b      	b.n	8006778 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064a0:	2201      	movs	r2, #1
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4013      	ands	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	f040 815a 	bne.w	8006772 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d005      	beq.n	80064d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d130      	bne.n	8006538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	2203      	movs	r2, #3
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	43db      	mvns	r3, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	4013      	ands	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800650c:	2201      	movs	r2, #1
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f003 0201 	and.w	r2, r3, #1
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	4313      	orrs	r3, r2
 8006530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	2b03      	cmp	r3, #3
 8006542:	d017      	beq.n	8006574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	2203      	movs	r2, #3
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	43db      	mvns	r3, r3
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4313      	orrs	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d123      	bne.n	80065c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	08da      	lsrs	r2, r3, #3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3208      	adds	r2, #8
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	220f      	movs	r2, #15
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	43db      	mvns	r3, r3
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	4013      	ands	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	08da      	lsrs	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3208      	adds	r2, #8
 80065c2:	69b9      	ldr	r1, [r7, #24]
 80065c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	2203      	movs	r2, #3
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	43db      	mvns	r3, r3
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4013      	ands	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 0203 	and.w	r2, r3, #3
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80b4 	beq.w	8006772 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	4b60      	ldr	r3, [pc, #384]	@ (8006790 <HAL_GPIO_Init+0x30c>)
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	4a5f      	ldr	r2, [pc, #380]	@ (8006790 <HAL_GPIO_Init+0x30c>)
 8006614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006618:	6453      	str	r3, [r2, #68]	@ 0x44
 800661a:	4b5d      	ldr	r3, [pc, #372]	@ (8006790 <HAL_GPIO_Init+0x30c>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006626:	4a5b      	ldr	r2, [pc, #364]	@ (8006794 <HAL_GPIO_Init+0x310>)
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	089b      	lsrs	r3, r3, #2
 800662c:	3302      	adds	r3, #2
 800662e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	220f      	movs	r2, #15
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	43db      	mvns	r3, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4013      	ands	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a52      	ldr	r2, [pc, #328]	@ (8006798 <HAL_GPIO_Init+0x314>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d02b      	beq.n	80066aa <HAL_GPIO_Init+0x226>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a51      	ldr	r2, [pc, #324]	@ (800679c <HAL_GPIO_Init+0x318>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d025      	beq.n	80066a6 <HAL_GPIO_Init+0x222>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a50      	ldr	r2, [pc, #320]	@ (80067a0 <HAL_GPIO_Init+0x31c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01f      	beq.n	80066a2 <HAL_GPIO_Init+0x21e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a4f      	ldr	r2, [pc, #316]	@ (80067a4 <HAL_GPIO_Init+0x320>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d019      	beq.n	800669e <HAL_GPIO_Init+0x21a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a4e      	ldr	r2, [pc, #312]	@ (80067a8 <HAL_GPIO_Init+0x324>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_GPIO_Init+0x216>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a4d      	ldr	r2, [pc, #308]	@ (80067ac <HAL_GPIO_Init+0x328>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00d      	beq.n	8006696 <HAL_GPIO_Init+0x212>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a4c      	ldr	r2, [pc, #304]	@ (80067b0 <HAL_GPIO_Init+0x32c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d007      	beq.n	8006692 <HAL_GPIO_Init+0x20e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a4b      	ldr	r2, [pc, #300]	@ (80067b4 <HAL_GPIO_Init+0x330>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d101      	bne.n	800668e <HAL_GPIO_Init+0x20a>
 800668a:	2307      	movs	r3, #7
 800668c:	e00e      	b.n	80066ac <HAL_GPIO_Init+0x228>
 800668e:	2308      	movs	r3, #8
 8006690:	e00c      	b.n	80066ac <HAL_GPIO_Init+0x228>
 8006692:	2306      	movs	r3, #6
 8006694:	e00a      	b.n	80066ac <HAL_GPIO_Init+0x228>
 8006696:	2305      	movs	r3, #5
 8006698:	e008      	b.n	80066ac <HAL_GPIO_Init+0x228>
 800669a:	2304      	movs	r3, #4
 800669c:	e006      	b.n	80066ac <HAL_GPIO_Init+0x228>
 800669e:	2303      	movs	r3, #3
 80066a0:	e004      	b.n	80066ac <HAL_GPIO_Init+0x228>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e002      	b.n	80066ac <HAL_GPIO_Init+0x228>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <HAL_GPIO_Init+0x228>
 80066aa:	2300      	movs	r3, #0
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	f002 0203 	and.w	r2, r2, #3
 80066b2:	0092      	lsls	r2, r2, #2
 80066b4:	4093      	lsls	r3, r2
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066bc:	4935      	ldr	r1, [pc, #212]	@ (8006794 <HAL_GPIO_Init+0x310>)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	089b      	lsrs	r3, r3, #2
 80066c2:	3302      	adds	r3, #2
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066ca:	4b3b      	ldr	r3, [pc, #236]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	43db      	mvns	r3, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4013      	ands	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066ee:	4a32      	ldr	r2, [pc, #200]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066f4:	4b30      	ldr	r3, [pc, #192]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006718:	4a27      	ldr	r2, [pc, #156]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800671e:	4b26      	ldr	r3, [pc, #152]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	43db      	mvns	r3, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006742:	4a1d      	ldr	r2, [pc, #116]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006748:	4b1b      	ldr	r3, [pc, #108]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800676c:	4a12      	ldr	r2, [pc, #72]	@ (80067b8 <HAL_GPIO_Init+0x334>)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	3301      	adds	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b0f      	cmp	r3, #15
 800677c:	f67f ae90 	bls.w	80064a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	3724      	adds	r7, #36	@ 0x24
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800
 8006794:	40013800 	.word	0x40013800
 8006798:	40020000 	.word	0x40020000
 800679c:	40020400 	.word	0x40020400
 80067a0:	40020800 	.word	0x40020800
 80067a4:	40020c00 	.word	0x40020c00
 80067a8:	40021000 	.word	0x40021000
 80067ac:	40021400 	.word	0x40021400
 80067b0:	40021800 	.word	0x40021800
 80067b4:	40021c00 	.word	0x40021c00
 80067b8:	40013c00 	.word	0x40013c00

080067bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	807b      	strh	r3, [r7, #2]
 80067c8:	4613      	mov	r3, r2
 80067ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067cc:	787b      	ldrb	r3, [r7, #1]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067d2:	887a      	ldrh	r2, [r7, #2]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067d8:	e003      	b.n	80067e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067da:	887b      	ldrh	r3, [r7, #2]
 80067dc:	041a      	lsls	r2, r3, #16
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	619a      	str	r2, [r3, #24]
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006800:	887a      	ldrh	r2, [r7, #2]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4013      	ands	r3, r2
 8006806:	041a      	lsls	r2, r3, #16
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	43d9      	mvns	r1, r3
 800680c:	887b      	ldrh	r3, [r7, #2]
 800680e:	400b      	ands	r3, r1
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	619a      	str	r2, [r3, #24]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e267      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d075      	beq.n	800692e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006842:	4b88      	ldr	r3, [pc, #544]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
 800684a:	2b04      	cmp	r3, #4
 800684c:	d00c      	beq.n	8006868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800684e:	4b85      	ldr	r3, [pc, #532]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006856:	2b08      	cmp	r3, #8
 8006858:	d112      	bne.n	8006880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800685a:	4b82      	ldr	r3, [pc, #520]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006866:	d10b      	bne.n	8006880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006868:	4b7e      	ldr	r3, [pc, #504]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d05b      	beq.n	800692c <HAL_RCC_OscConfig+0x108>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d157      	bne.n	800692c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e242      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006888:	d106      	bne.n	8006898 <HAL_RCC_OscConfig+0x74>
 800688a:	4b76      	ldr	r3, [pc, #472]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a75      	ldr	r2, [pc, #468]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e01d      	b.n	80068d4 <HAL_RCC_OscConfig+0xb0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0x98>
 80068a2:	4b70      	ldr	r3, [pc, #448]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a6f      	ldr	r2, [pc, #444]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0xb0>
 80068bc:	4b69      	ldr	r3, [pc, #420]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a68      	ldr	r2, [pc, #416]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b66      	ldr	r3, [pc, #408]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a65      	ldr	r2, [pc, #404]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d013      	beq.n	8006904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068dc:	f7ff fcc0 	bl	8006260 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068e4:	f7ff fcbc 	bl	8006260 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b64      	cmp	r3, #100	@ 0x64
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e207      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f0      	beq.n	80068e4 <HAL_RCC_OscConfig+0xc0>
 8006902:	e014      	b.n	800692e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006904:	f7ff fcac 	bl	8006260 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800690c:	f7ff fca8 	bl	8006260 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	@ 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e1f3      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800691e:	4b51      	ldr	r3, [pc, #324]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0xe8>
 800692a:	e000      	b.n	800692e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d063      	beq.n	8006a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800693a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006946:	4b47      	ldr	r3, [pc, #284]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800694e:	2b08      	cmp	r3, #8
 8006950:	d11c      	bne.n	800698c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006952:	4b44      	ldr	r3, [pc, #272]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d116      	bne.n	800698c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695e:	4b41      	ldr	r3, [pc, #260]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <HAL_RCC_OscConfig+0x152>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d001      	beq.n	8006976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e1c7      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006976:	4b3b      	ldr	r3, [pc, #236]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	4937      	ldr	r1, [pc, #220]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698a:	e03a      	b.n	8006a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d020      	beq.n	80069d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006994:	4b34      	ldr	r3, [pc, #208]	@ (8006a68 <HAL_RCC_OscConfig+0x244>)
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7ff fc61 	bl	8006260 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a2:	f7ff fc5d 	bl	8006260 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e1a8      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c0:	4b28      	ldr	r3, [pc, #160]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	4925      	ldr	r1, [pc, #148]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	600b      	str	r3, [r1, #0]
 80069d4:	e015      	b.n	8006a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069d6:	4b24      	ldr	r3, [pc, #144]	@ (8006a68 <HAL_RCC_OscConfig+0x244>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7ff fc40 	bl	8006260 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069e4:	f7ff fc3c 	bl	8006260 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e187      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d036      	beq.n	8006a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d016      	beq.n	8006a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a16:	4b15      	ldr	r3, [pc, #84]	@ (8006a6c <HAL_RCC_OscConfig+0x248>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7ff fc20 	bl	8006260 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a24:	f7ff fc1c 	bl	8006260 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e167      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a36:	4b0b      	ldr	r3, [pc, #44]	@ (8006a64 <HAL_RCC_OscConfig+0x240>)
 8006a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0x200>
 8006a42:	e01b      	b.n	8006a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a44:	4b09      	ldr	r3, [pc, #36]	@ (8006a6c <HAL_RCC_OscConfig+0x248>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a4a:	f7ff fc09 	bl	8006260 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a50:	e00e      	b.n	8006a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a52:	f7ff fc05 	bl	8006260 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d907      	bls.n	8006a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e150      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
 8006a64:	40023800 	.word	0x40023800
 8006a68:	42470000 	.word	0x42470000
 8006a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a70:	4b88      	ldr	r3, [pc, #544]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1ea      	bne.n	8006a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8097 	beq.w	8006bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a8e:	4b81      	ldr	r3, [pc, #516]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10f      	bne.n	8006aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	4a7c      	ldr	r2, [pc, #496]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	60bb      	str	r3, [r7, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aba:	4b77      	ldr	r3, [pc, #476]	@ (8006c98 <HAL_RCC_OscConfig+0x474>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d118      	bne.n	8006af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ac6:	4b74      	ldr	r3, [pc, #464]	@ (8006c98 <HAL_RCC_OscConfig+0x474>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a73      	ldr	r2, [pc, #460]	@ (8006c98 <HAL_RCC_OscConfig+0x474>)
 8006acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ad2:	f7ff fbc5 	bl	8006260 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ada:	f7ff fbc1 	bl	8006260 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e10c      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aec:	4b6a      	ldr	r3, [pc, #424]	@ (8006c98 <HAL_RCC_OscConfig+0x474>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0f0      	beq.n	8006ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d106      	bne.n	8006b0e <HAL_RCC_OscConfig+0x2ea>
 8006b00:	4b64      	ldr	r3, [pc, #400]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b04:	4a63      	ldr	r2, [pc, #396]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0c:	e01c      	b.n	8006b48 <HAL_RCC_OscConfig+0x324>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCC_OscConfig+0x30c>
 8006b16:	4b5f      	ldr	r3, [pc, #380]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1a:	4a5e      	ldr	r2, [pc, #376]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b1c:	f043 0304 	orr.w	r3, r3, #4
 8006b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b22:	4b5c      	ldr	r3, [pc, #368]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b26:	4a5b      	ldr	r2, [pc, #364]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCC_OscConfig+0x324>
 8006b30:	4b58      	ldr	r3, [pc, #352]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b34:	4a57      	ldr	r2, [pc, #348]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b36:	f023 0301 	bic.w	r3, r3, #1
 8006b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b3c:	4b55      	ldr	r3, [pc, #340]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b40:	4a54      	ldr	r2, [pc, #336]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b42:	f023 0304 	bic.w	r3, r3, #4
 8006b46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d015      	beq.n	8006b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7ff fb86 	bl	8006260 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b56:	e00a      	b.n	8006b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b58:	f7ff fb82 	bl	8006260 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e0cb      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6e:	4b49      	ldr	r3, [pc, #292]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0ee      	beq.n	8006b58 <HAL_RCC_OscConfig+0x334>
 8006b7a:	e014      	b.n	8006ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7c:	f7ff fb70 	bl	8006260 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b82:	e00a      	b.n	8006b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b84:	f7ff fb6c 	bl	8006260 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e0b5      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1ee      	bne.n	8006b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d105      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bac:	4b39      	ldr	r3, [pc, #228]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb0:	4a38      	ldr	r2, [pc, #224]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80a1 	beq.w	8006d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bc2:	4b34      	ldr	r3, [pc, #208]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d05c      	beq.n	8006c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d141      	bne.n	8006c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd6:	4b31      	ldr	r3, [pc, #196]	@ (8006c9c <HAL_RCC_OscConfig+0x478>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7ff fb40 	bl	8006260 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006be4:	f7ff fb3c 	bl	8006260 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e087      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf6:	4b27      	ldr	r3, [pc, #156]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69da      	ldr	r2, [r3, #28]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	019b      	lsls	r3, r3, #6
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c24:	061b      	lsls	r3, r3, #24
 8006c26:	491b      	ldr	r1, [pc, #108]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c9c <HAL_RCC_OscConfig+0x478>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c32:	f7ff fb15 	bl	8006260 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c3a:	f7ff fb11 	bl	8006260 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e05c      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c4c:	4b11      	ldr	r3, [pc, #68]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x416>
 8006c58:	e054      	b.n	8006d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c5a:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <HAL_RCC_OscConfig+0x478>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c60:	f7ff fafe 	bl	8006260 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c68:	f7ff fafa 	bl	8006260 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e045      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c7a:	4b06      	ldr	r3, [pc, #24]	@ (8006c94 <HAL_RCC_OscConfig+0x470>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x444>
 8006c86:	e03d      	b.n	8006d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e038      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
 8006c94:	40023800 	.word	0x40023800
 8006c98:	40007000 	.word	0x40007000
 8006c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d10 <HAL_RCC_OscConfig+0x4ec>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d028      	beq.n	8006d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d121      	bne.n	8006d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d11a      	bne.n	8006d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d111      	bne.n	8006d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d107      	bne.n	8006d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800

08006d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0cc      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d28:	4b68      	ldr	r3, [pc, #416]	@ (8006ecc <HAL_RCC_ClockConfig+0x1b8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d90c      	bls.n	8006d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d36:	4b65      	ldr	r3, [pc, #404]	@ (8006ecc <HAL_RCC_ClockConfig+0x1b8>)
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3e:	4b63      	ldr	r3, [pc, #396]	@ (8006ecc <HAL_RCC_ClockConfig+0x1b8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0b8      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d020      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d68:	4b59      	ldr	r3, [pc, #356]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	4a58      	ldr	r2, [pc, #352]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d80:	4b53      	ldr	r3, [pc, #332]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4a52      	ldr	r2, [pc, #328]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d8c:	4b50      	ldr	r3, [pc, #320]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	494d      	ldr	r1, [pc, #308]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d044      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db2:	4b47      	ldr	r3, [pc, #284]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d119      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e07f      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d003      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d107      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e06f      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e067      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006df2:	4b37      	ldr	r3, [pc, #220]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f023 0203 	bic.w	r2, r3, #3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	4934      	ldr	r1, [pc, #208]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e04:	f7ff fa2c 	bl	8006260 <HAL_GetTick>
 8006e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0a:	e00a      	b.n	8006e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e0c:	f7ff fa28 	bl	8006260 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e04f      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e22:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 020c 	and.w	r2, r3, #12
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d1eb      	bne.n	8006e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e34:	4b25      	ldr	r3, [pc, #148]	@ (8006ecc <HAL_RCC_ClockConfig+0x1b8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d20c      	bcs.n	8006e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e42:	4b22      	ldr	r3, [pc, #136]	@ (8006ecc <HAL_RCC_ClockConfig+0x1b8>)
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4a:	4b20      	ldr	r3, [pc, #128]	@ (8006ecc <HAL_RCC_ClockConfig+0x1b8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d001      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e032      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e68:	4b19      	ldr	r3, [pc, #100]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	4916      	ldr	r1, [pc, #88]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e86:	4b12      	ldr	r3, [pc, #72]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	490e      	ldr	r1, [pc, #56]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e9a:	f000 f821 	bl	8006ee0 <HAL_RCC_GetSysClockFreq>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	490a      	ldr	r1, [pc, #40]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8006eac:	5ccb      	ldrb	r3, [r1, r3]
 8006eae:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb2:	4a09      	ldr	r2, [pc, #36]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006eb6:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fb f822 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	40023c00 	.word	0x40023c00
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	0800ce24 	.word	0x0800ce24
 8006ed8:	20000030 	.word	0x20000030
 8006edc:	20000080 	.word	0x20000080

08006ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee4:	b094      	sub	sp, #80	@ 0x50
 8006ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eec:	2300      	movs	r3, #0
 8006eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ef8:	4b79      	ldr	r3, [pc, #484]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 030c 	and.w	r3, r3, #12
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d00d      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0x40>
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	f200 80e1 	bhi.w	80070cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <HAL_RCC_GetSysClockFreq+0x34>
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d003      	beq.n	8006f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f12:	e0db      	b.n	80070cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f14:	4b73      	ldr	r3, [pc, #460]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f16:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006f18:	e0db      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f1a:	4b73      	ldr	r3, [pc, #460]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f1e:	e0d8      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f20:	4b6f      	ldr	r3, [pc, #444]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f28:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d063      	beq.n	8006ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f36:	4b6a      	ldr	r3, [pc, #424]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	099b      	lsrs	r3, r3, #6
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f52:	4622      	mov	r2, r4
 8006f54:	462b      	mov	r3, r5
 8006f56:	f04f 0000 	mov.w	r0, #0
 8006f5a:	f04f 0100 	mov.w	r1, #0
 8006f5e:	0159      	lsls	r1, r3, #5
 8006f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f64:	0150      	lsls	r0, r2, #5
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	1a51      	subs	r1, r2, r1
 8006f6e:	6139      	str	r1, [r7, #16]
 8006f70:	4629      	mov	r1, r5
 8006f72:	eb63 0301 	sbc.w	r3, r3, r1
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f84:	4659      	mov	r1, fp
 8006f86:	018b      	lsls	r3, r1, #6
 8006f88:	4651      	mov	r1, sl
 8006f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f8e:	4651      	mov	r1, sl
 8006f90:	018a      	lsls	r2, r1, #6
 8006f92:	4651      	mov	r1, sl
 8006f94:	ebb2 0801 	subs.w	r8, r2, r1
 8006f98:	4659      	mov	r1, fp
 8006f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	f04f 0300 	mov.w	r3, #0
 8006fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fb2:	4690      	mov	r8, r2
 8006fb4:	4699      	mov	r9, r3
 8006fb6:	4623      	mov	r3, r4
 8006fb8:	eb18 0303 	adds.w	r3, r8, r3
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	462b      	mov	r3, r5
 8006fc0:	eb49 0303 	adc.w	r3, r9, r3
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	024b      	lsls	r3, r1, #9
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fdc:	4621      	mov	r1, r4
 8006fde:	024a      	lsls	r2, r1, #9
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ff0:	f7f9 f946 	bl	8000280 <__aeabi_uldivmod>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ffc:	e058      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ffe:	4b38      	ldr	r3, [pc, #224]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	099b      	lsrs	r3, r3, #6
 8007004:	2200      	movs	r2, #0
 8007006:	4618      	mov	r0, r3
 8007008:	4611      	mov	r1, r2
 800700a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800700e:	623b      	str	r3, [r7, #32]
 8007010:	2300      	movs	r3, #0
 8007012:	627b      	str	r3, [r7, #36]	@ 0x24
 8007014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	f04f 0000 	mov.w	r0, #0
 8007020:	f04f 0100 	mov.w	r1, #0
 8007024:	0159      	lsls	r1, r3, #5
 8007026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800702a:	0150      	lsls	r0, r2, #5
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4641      	mov	r1, r8
 8007032:	ebb2 0a01 	subs.w	sl, r2, r1
 8007036:	4649      	mov	r1, r9
 8007038:	eb63 0b01 	sbc.w	fp, r3, r1
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800704c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007050:	ebb2 040a 	subs.w	r4, r2, sl
 8007054:	eb63 050b 	sbc.w	r5, r3, fp
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	00eb      	lsls	r3, r5, #3
 8007062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007066:	00e2      	lsls	r2, r4, #3
 8007068:	4614      	mov	r4, r2
 800706a:	461d      	mov	r5, r3
 800706c:	4643      	mov	r3, r8
 800706e:	18e3      	adds	r3, r4, r3
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	464b      	mov	r3, r9
 8007074:	eb45 0303 	adc.w	r3, r5, r3
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007086:	4629      	mov	r1, r5
 8007088:	028b      	lsls	r3, r1, #10
 800708a:	4621      	mov	r1, r4
 800708c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007090:	4621      	mov	r1, r4
 8007092:	028a      	lsls	r2, r1, #10
 8007094:	4610      	mov	r0, r2
 8007096:	4619      	mov	r1, r3
 8007098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709a:	2200      	movs	r2, #0
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	61fa      	str	r2, [r7, #28]
 80070a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070a4:	f7f9 f8ec 	bl	8000280 <__aeabi_uldivmod>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4613      	mov	r3, r2
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	0c1b      	lsrs	r3, r3, #16
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	3301      	adds	r3, #1
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80070c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070ca:	e002      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070cc:	4b05      	ldr	r3, [pc, #20]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80070ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3750      	adds	r7, #80	@ 0x50
 80070d8:	46bd      	mov	sp, r7
 80070da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070de:	bf00      	nop
 80070e0:	40023800 	.word	0x40023800
 80070e4:	00f42400 	.word	0x00f42400
 80070e8:	007a1200 	.word	0x007a1200

080070ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f0:	4b03      	ldr	r3, [pc, #12]	@ (8007100 <HAL_RCC_GetHCLKFreq+0x14>)
 80070f2:	681b      	ldr	r3, [r3, #0]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	20000030 	.word	0x20000030

08007104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007108:	f7ff fff0 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 800710c:	4602      	mov	r2, r0
 800710e:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	0a9b      	lsrs	r3, r3, #10
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	4903      	ldr	r1, [pc, #12]	@ (8007128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800711a:	5ccb      	ldrb	r3, [r1, r3]
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40023800 	.word	0x40023800
 8007128:	0800ce34 	.word	0x0800ce34

0800712c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007130:	f7ff ffdc 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 8007134:	4602      	mov	r2, r0
 8007136:	4b05      	ldr	r3, [pc, #20]	@ (800714c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	0b5b      	lsrs	r3, r3, #13
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	4903      	ldr	r1, [pc, #12]	@ (8007150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007142:	5ccb      	ldrb	r3, [r1, r3]
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007148:	4618      	mov	r0, r3
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40023800 	.word	0x40023800
 8007150:	0800ce34 	.word	0x0800ce34

08007154 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	220f      	movs	r2, #15
 8007162:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007164:	4b12      	ldr	r3, [pc, #72]	@ (80071b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0203 	and.w	r2, r3, #3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007170:	4b0f      	ldr	r3, [pc, #60]	@ (80071b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800717c:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <HAL_RCC_GetClockConfig+0x5c>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007188:	4b09      	ldr	r3, [pc, #36]	@ (80071b0 <HAL_RCC_GetClockConfig+0x5c>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	08db      	lsrs	r3, r3, #3
 800718e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007196:	4b07      	ldr	r3, [pc, #28]	@ (80071b4 <HAL_RCC_GetClockConfig+0x60>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0207 	and.w	r2, r3, #7
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	601a      	str	r2, [r3, #0]
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40023800 	.word	0x40023800
 80071b4:	40023c00 	.word	0x40023c00

080071b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e07b      	b.n	80072c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d108      	bne.n	80071e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071da:	d009      	beq.n	80071f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	61da      	str	r2, [r3, #28]
 80071e2:	e005      	b.n	80071f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fa fd3c 	bl	8001c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007238:	431a      	orrs	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007274:	ea42 0103 	orr.w	r1, r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	f003 0104 	and.w	r1, r3, #4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007296:	f003 0210 	and.w	r2, r3, #16
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b08c      	sub	sp, #48	@ 0x30
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072d8:	2301      	movs	r3, #1
 80072da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d101      	bne.n	80072f0 <HAL_SPI_TransmitReceive+0x26>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e198      	b.n	8007622 <HAL_SPI_TransmitReceive+0x358>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f8:	f7fe ffb2 	bl	8006260 <HAL_GetTick>
 80072fc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800730e:	887b      	ldrh	r3, [r7, #2]
 8007310:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007312:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007316:	2b01      	cmp	r3, #1
 8007318:	d00f      	beq.n	800733a <HAL_SPI_TransmitReceive+0x70>
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007320:	d107      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x68>
 800732a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800732e:	2b04      	cmp	r3, #4
 8007330:	d003      	beq.n	800733a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007332:	2302      	movs	r3, #2
 8007334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007338:	e16d      	b.n	8007616 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <HAL_SPI_TransmitReceive+0x82>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_SPI_TransmitReceive+0x82>
 8007346:	887b      	ldrh	r3, [r7, #2]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d103      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007352:	e160      	b.n	8007616 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b04      	cmp	r3, #4
 800735e:	d003      	beq.n	8007368 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2205      	movs	r2, #5
 8007364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	887a      	ldrh	r2, [r7, #2]
 8007378:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	887a      	ldrh	r2, [r7, #2]
 800737e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	887a      	ldrh	r2, [r7, #2]
 800738a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	887a      	ldrh	r2, [r7, #2]
 8007390:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a8:	2b40      	cmp	r3, #64	@ 0x40
 80073aa:	d007      	beq.n	80073bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073c4:	d17c      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_SPI_TransmitReceive+0x10a>
 80073ce:	8b7b      	ldrh	r3, [r7, #26]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d16a      	bne.n	80074aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d8:	881a      	ldrh	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e4:	1c9a      	adds	r2, r3, #2
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073f8:	e057      	b.n	80074aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b02      	cmp	r3, #2
 8007406:	d11b      	bne.n	8007440 <HAL_SPI_TransmitReceive+0x176>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d016      	beq.n	8007440 <HAL_SPI_TransmitReceive+0x176>
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	2b01      	cmp	r3, #1
 8007416:	d113      	bne.n	8007440 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741c:	881a      	ldrh	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007428:	1c9a      	adds	r2, r3, #2
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b01      	cmp	r3, #1
 800744c:	d119      	bne.n	8007482 <HAL_SPI_TransmitReceive+0x1b8>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d014      	beq.n	8007482 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007462:	b292      	uxth	r2, r2
 8007464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746a:	1c9a      	adds	r2, r3, #2
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800747e:	2301      	movs	r3, #1
 8007480:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007482:	f7fe feed 	bl	8006260 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800748e:	429a      	cmp	r2, r3
 8007490:	d80b      	bhi.n	80074aa <HAL_SPI_TransmitReceive+0x1e0>
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d007      	beq.n	80074aa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80074a8:	e0b5      	b.n	8007616 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1a2      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x130>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d19d      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x130>
 80074be:	e080      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_TransmitReceive+0x204>
 80074c8:	8b7b      	ldrh	r3, [r7, #26]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d16f      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f4:	e05b      	b.n	80075ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b02      	cmp	r3, #2
 8007502:	d11c      	bne.n	800753e <HAL_SPI_TransmitReceive+0x274>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d017      	beq.n	800753e <HAL_SPI_TransmitReceive+0x274>
 800750e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007510:	2b01      	cmp	r3, #1
 8007512:	d114      	bne.n	800753e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d119      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x2b6>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d014      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800757c:	2301      	movs	r3, #1
 800757e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007580:	f7fe fe6e 	bl	8006260 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800758c:	429a      	cmp	r2, r3
 800758e:	d803      	bhi.n	8007598 <HAL_SPI_TransmitReceive+0x2ce>
 8007590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d102      	bne.n	800759e <HAL_SPI_TransmitReceive+0x2d4>
 8007598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759a:	2b00      	cmp	r3, #0
 800759c:	d107      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80075ac:	e033      	b.n	8007616 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d19e      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x22c>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d199      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f8b8 	bl	800773c <SPI_EndRxTxTransaction>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80075de:	e01a      	b.n	8007616 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800760c:	e003      	b.n	8007616 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800761e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007622:	4618      	mov	r0, r3
 8007624:	3730      	adds	r7, #48	@ 0x30
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800763c:	f7fe fe10 	bl	8006260 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4413      	add	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800764c:	f7fe fe08 	bl	8006260 <HAL_GetTick>
 8007650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007652:	4b39      	ldr	r3, [pc, #228]	@ (8007738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	015b      	lsls	r3, r3, #5
 8007658:	0d1b      	lsrs	r3, r3, #20
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007662:	e054      	b.n	800770e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d050      	beq.n	800770e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800766c:	f7fe fdf8 	bl	8006260 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	429a      	cmp	r2, r3
 800767a:	d902      	bls.n	8007682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d13d      	bne.n	80076fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800769a:	d111      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076a4:	d004      	beq.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ae:	d107      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c8:	d10f      	bne.n	80076ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e017      	b.n	800772e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	3b01      	subs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4013      	ands	r3, r2
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	429a      	cmp	r2, r3
 800771c:	bf0c      	ite	eq
 800771e:	2301      	moveq	r3, #1
 8007720:	2300      	movne	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	429a      	cmp	r2, r3
 800772a:	d19b      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000030 	.word	0x20000030

0800773c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2201      	movs	r2, #1
 8007750:	2102      	movs	r1, #2
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff ff6a 	bl	800762c <SPI_WaitFlagStateUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007762:	f043 0220 	orr.w	r2, r3, #32
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e032      	b.n	80077d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800776e:	4b1b      	ldr	r3, [pc, #108]	@ (80077dc <SPI_EndRxTxTransaction+0xa0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1b      	ldr	r2, [pc, #108]	@ (80077e0 <SPI_EndRxTxTransaction+0xa4>)
 8007774:	fba2 2303 	umull	r2, r3, r2, r3
 8007778:	0d5b      	lsrs	r3, r3, #21
 800777a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800777e:	fb02 f303 	mul.w	r3, r2, r3
 8007782:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800778c:	d112      	bne.n	80077b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2200      	movs	r2, #0
 8007796:	2180      	movs	r1, #128	@ 0x80
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7ff ff47 	bl	800762c <SPI_WaitFlagStateUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d016      	beq.n	80077d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a8:	f043 0220 	orr.w	r2, r3, #32
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e00f      	b.n	80077d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	3b01      	subs	r3, #1
 80077be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ca:	2b80      	cmp	r3, #128	@ 0x80
 80077cc:	d0f2      	beq.n	80077b4 <SPI_EndRxTxTransaction+0x78>
 80077ce:	e000      	b.n	80077d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80077d0:	bf00      	nop
  }

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000030 	.word	0x20000030
 80077e0:	165e9f81 	.word	0x165e9f81

080077e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e041      	b.n	800787a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f839 	bl	8007882 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f000 f9c0 	bl	8007ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d001      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e04e      	b.n	800794e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a23      	ldr	r2, [pc, #140]	@ (800795c <HAL_TIM_Base_Start_IT+0xc4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078da:	d01d      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007960 <HAL_TIM_Base_Start_IT+0xc8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007964 <HAL_TIM_Base_Start_IT+0xcc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007968 <HAL_TIM_Base_Start_IT+0xd0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1b      	ldr	r2, [pc, #108]	@ (800796c <HAL_TIM_Base_Start_IT+0xd4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <HAL_TIM_Base_Start_IT+0xd8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x80>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a18      	ldr	r2, [pc, #96]	@ (8007974 <HAL_TIM_Base_Start_IT+0xdc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d111      	bne.n	800793c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b06      	cmp	r3, #6
 8007928:	d010      	beq.n	800794c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	e007      	b.n	800794c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40010400 	.word	0x40010400
 8007970:	40014000 	.word	0x40014000
 8007974:	40001800 	.word	0x40001800

08007978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d020      	beq.n	80079dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01b      	beq.n	80079dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0202 	mvn.w	r2, #2
 80079ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f8d2 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 80079c8:	e005      	b.n	80079d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f8c4 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f8d5 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d020      	beq.n	8007a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01b      	beq.n	8007a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0204 	mvn.w	r2, #4
 80079f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8ac 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 8007a14:	e005      	b.n	8007a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f89e 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8af 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d020      	beq.n	8007a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01b      	beq.n	8007a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0208 	mvn.w	r2, #8
 8007a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2204      	movs	r2, #4
 8007a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f886 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 8007a60:	e005      	b.n	8007a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f878 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f889 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d020      	beq.n	8007ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01b      	beq.n	8007ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0210 	mvn.w	r2, #16
 8007a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2208      	movs	r2, #8
 8007a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f860 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 8007aac:	e005      	b.n	8007aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f852 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f863 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00c      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0201 	mvn.w	r2, #1
 8007adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7f9 fe6a 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f906 	bl	8007d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00c      	beq.n	8007b2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f834 	bl	8007b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f06f 0220 	mvn.w	r2, #32
 8007b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f8d8 	bl	8007d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a46      	ldr	r2, [pc, #280]	@ (8007cd4 <TIM_Base_SetConfig+0x12c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc6:	d00f      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a43      	ldr	r2, [pc, #268]	@ (8007cd8 <TIM_Base_SetConfig+0x130>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00b      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a42      	ldr	r2, [pc, #264]	@ (8007cdc <TIM_Base_SetConfig+0x134>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a41      	ldr	r2, [pc, #260]	@ (8007ce0 <TIM_Base_SetConfig+0x138>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a40      	ldr	r2, [pc, #256]	@ (8007ce4 <TIM_Base_SetConfig+0x13c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d108      	bne.n	8007bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a35      	ldr	r2, [pc, #212]	@ (8007cd4 <TIM_Base_SetConfig+0x12c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d02b      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c08:	d027      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a32      	ldr	r2, [pc, #200]	@ (8007cd8 <TIM_Base_SetConfig+0x130>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d023      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a31      	ldr	r2, [pc, #196]	@ (8007cdc <TIM_Base_SetConfig+0x134>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01f      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a30      	ldr	r2, [pc, #192]	@ (8007ce0 <TIM_Base_SetConfig+0x138>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01b      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2f      	ldr	r2, [pc, #188]	@ (8007ce4 <TIM_Base_SetConfig+0x13c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d017      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ce8 <TIM_Base_SetConfig+0x140>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a2d      	ldr	r2, [pc, #180]	@ (8007cec <TIM_Base_SetConfig+0x144>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00f      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8007cf0 <TIM_Base_SetConfig+0x148>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a2b      	ldr	r2, [pc, #172]	@ (8007cf4 <TIM_Base_SetConfig+0x14c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d007      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8007cf8 <TIM_Base_SetConfig+0x150>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d003      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a29      	ldr	r2, [pc, #164]	@ (8007cfc <TIM_Base_SetConfig+0x154>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d108      	bne.n	8007c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a10      	ldr	r2, [pc, #64]	@ (8007cd4 <TIM_Base_SetConfig+0x12c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d003      	beq.n	8007ca0 <TIM_Base_SetConfig+0xf8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ce4 <TIM_Base_SetConfig+0x13c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d103      	bne.n	8007ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d105      	bne.n	8007cc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f023 0201 	bic.w	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	611a      	str	r2, [r3, #16]
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40010000 	.word	0x40010000
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40000800 	.word	0x40000800
 8007ce0:	40000c00 	.word	0x40000c00
 8007ce4:	40010400 	.word	0x40010400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400
 8007cf0:	40014800 	.word	0x40014800
 8007cf4:	40001800 	.word	0x40001800
 8007cf8:	40001c00 	.word	0x40001c00
 8007cfc:	40002000 	.word	0x40002000

08007d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e042      	b.n	8007dc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fa f838 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2224      	movs	r2, #36	@ 0x24
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f973 	bl	8008058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	695a      	ldr	r2, [r3, #20]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08a      	sub	sp, #40	@ 0x28
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d175      	bne.n	8007ed4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <HAL_UART_Transmit+0x2c>
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e06e      	b.n	8007ed6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2221      	movs	r2, #33	@ 0x21
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e06:	f7fe fa2b 	bl	8006260 <HAL_GetTick>
 8007e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	88fa      	ldrh	r2, [r7, #6]
 8007e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e20:	d108      	bne.n	8007e34 <HAL_UART_Transmit+0x6c>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	e003      	b.n	8007e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e3c:	e02e      	b.n	8007e9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2180      	movs	r1, #128	@ 0x80
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f848 	bl	8007ede <UART_WaitOnFlagUntilTimeout>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e03a      	b.n	8007ed6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	3302      	adds	r3, #2
 8007e7a:	61bb      	str	r3, [r7, #24]
 8007e7c:	e007      	b.n	8007e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1cb      	bne.n	8007e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2200      	movs	r2, #0
 8007eae:	2140      	movs	r1, #64	@ 0x40
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f814 	bl	8007ede <UART_WaitOnFlagUntilTimeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e006      	b.n	8007ed6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e000      	b.n	8007ed6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ed4:	2302      	movs	r3, #2
  }
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3720      	adds	r7, #32
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	603b      	str	r3, [r7, #0]
 8007eea:	4613      	mov	r3, r2
 8007eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eee:	e03b      	b.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d037      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef8:	f7fe f9b2 	bl	8006260 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	6a3a      	ldr	r2, [r7, #32]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d302      	bcc.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e03a      	b.n	8007f88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d023      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b80      	cmp	r3, #128	@ 0x80
 8007f24:	d020      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b40      	cmp	r3, #64	@ 0x40
 8007f2a:	d01d      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d116      	bne.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f81d 	bl	8007f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2208      	movs	r2, #8
 8007f5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e00f      	b.n	8007f88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4013      	ands	r3, r2
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	bf0c      	ite	eq
 8007f78:	2301      	moveq	r3, #1
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d0b4      	beq.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b095      	sub	sp, #84	@ 0x54
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e5      	bne.n	8007f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f023 0301 	bic.w	r3, r3, #1
 8007fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e5      	bne.n	8007fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008004:	2b01      	cmp	r3, #1
 8008006:	d119      	bne.n	800803c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	330c      	adds	r3, #12
 800800e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	60bb      	str	r3, [r7, #8]
   return(result);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f023 0310 	bic.w	r3, r3, #16
 800801e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008028:	61ba      	str	r2, [r7, #24]
 800802a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6979      	ldr	r1, [r7, #20]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	613b      	str	r3, [r7, #16]
   return(result);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e5      	bne.n	8008008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800804a:	bf00      	nop
 800804c:	3754      	adds	r7, #84	@ 0x54
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
	...

08008058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800805c:	b0c0      	sub	sp, #256	@ 0x100
 800805e:	af00      	add	r7, sp, #0
 8008060:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008074:	68d9      	ldr	r1, [r3, #12]
 8008076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	ea40 0301 	orr.w	r3, r0, r1
 8008080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	431a      	orrs	r2, r3
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	431a      	orrs	r2, r3
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80080b0:	f021 010c 	bic.w	r1, r1, #12
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080be:	430b      	orrs	r3, r1
 80080c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80080ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d2:	6999      	ldr	r1, [r3, #24]
 80080d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	ea40 0301 	orr.w	r3, r0, r1
 80080de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b8f      	ldr	r3, [pc, #572]	@ (8008324 <UART_SetConfig+0x2cc>)
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d005      	beq.n	80080f8 <UART_SetConfig+0xa0>
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4b8d      	ldr	r3, [pc, #564]	@ (8008328 <UART_SetConfig+0x2d0>)
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d104      	bne.n	8008102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080f8:	f7ff f818 	bl	800712c <HAL_RCC_GetPCLK2Freq>
 80080fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008100:	e003      	b.n	800810a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008102:	f7fe ffff 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 8008106:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008114:	f040 810c 	bne.w	8008330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800811c:	2200      	movs	r2, #0
 800811e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008122:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800812a:	4622      	mov	r2, r4
 800812c:	462b      	mov	r3, r5
 800812e:	1891      	adds	r1, r2, r2
 8008130:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008132:	415b      	adcs	r3, r3
 8008134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800813a:	4621      	mov	r1, r4
 800813c:	eb12 0801 	adds.w	r8, r2, r1
 8008140:	4629      	mov	r1, r5
 8008142:	eb43 0901 	adc.w	r9, r3, r1
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800815a:	4690      	mov	r8, r2
 800815c:	4699      	mov	r9, r3
 800815e:	4623      	mov	r3, r4
 8008160:	eb18 0303 	adds.w	r3, r8, r3
 8008164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008168:	462b      	mov	r3, r5
 800816a:	eb49 0303 	adc.w	r3, r9, r3
 800816e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800817e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008186:	460b      	mov	r3, r1
 8008188:	18db      	adds	r3, r3, r3
 800818a:	653b      	str	r3, [r7, #80]	@ 0x50
 800818c:	4613      	mov	r3, r2
 800818e:	eb42 0303 	adc.w	r3, r2, r3
 8008192:	657b      	str	r3, [r7, #84]	@ 0x54
 8008194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800819c:	f7f8 f870 	bl	8000280 <__aeabi_uldivmod>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4b61      	ldr	r3, [pc, #388]	@ (800832c <UART_SetConfig+0x2d4>)
 80081a6:	fba3 2302 	umull	r2, r3, r3, r2
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	011c      	lsls	r4, r3, #4
 80081ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80081bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80081c0:	4642      	mov	r2, r8
 80081c2:	464b      	mov	r3, r9
 80081c4:	1891      	adds	r1, r2, r2
 80081c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80081c8:	415b      	adcs	r3, r3
 80081ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80081d0:	4641      	mov	r1, r8
 80081d2:	eb12 0a01 	adds.w	sl, r2, r1
 80081d6:	4649      	mov	r1, r9
 80081d8:	eb43 0b01 	adc.w	fp, r3, r1
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081f0:	4692      	mov	sl, r2
 80081f2:	469b      	mov	fp, r3
 80081f4:	4643      	mov	r3, r8
 80081f6:	eb1a 0303 	adds.w	r3, sl, r3
 80081fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081fe:	464b      	mov	r3, r9
 8008200:	eb4b 0303 	adc.w	r3, fp, r3
 8008204:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008214:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800821c:	460b      	mov	r3, r1
 800821e:	18db      	adds	r3, r3, r3
 8008220:	643b      	str	r3, [r7, #64]	@ 0x40
 8008222:	4613      	mov	r3, r2
 8008224:	eb42 0303 	adc.w	r3, r2, r3
 8008228:	647b      	str	r3, [r7, #68]	@ 0x44
 800822a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800822e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008232:	f7f8 f825 	bl	8000280 <__aeabi_uldivmod>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4611      	mov	r1, r2
 800823c:	4b3b      	ldr	r3, [pc, #236]	@ (800832c <UART_SetConfig+0x2d4>)
 800823e:	fba3 2301 	umull	r2, r3, r3, r1
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	2264      	movs	r2, #100	@ 0x64
 8008246:	fb02 f303 	mul.w	r3, r2, r3
 800824a:	1acb      	subs	r3, r1, r3
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008252:	4b36      	ldr	r3, [pc, #216]	@ (800832c <UART_SetConfig+0x2d4>)
 8008254:	fba3 2302 	umull	r2, r3, r3, r2
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008260:	441c      	add	r4, r3
 8008262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008266:	2200      	movs	r2, #0
 8008268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800826c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008274:	4642      	mov	r2, r8
 8008276:	464b      	mov	r3, r9
 8008278:	1891      	adds	r1, r2, r2
 800827a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800827c:	415b      	adcs	r3, r3
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008284:	4641      	mov	r1, r8
 8008286:	1851      	adds	r1, r2, r1
 8008288:	6339      	str	r1, [r7, #48]	@ 0x30
 800828a:	4649      	mov	r1, r9
 800828c:	414b      	adcs	r3, r1
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008290:	f04f 0200 	mov.w	r2, #0
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800829c:	4659      	mov	r1, fp
 800829e:	00cb      	lsls	r3, r1, #3
 80082a0:	4651      	mov	r1, sl
 80082a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082a6:	4651      	mov	r1, sl
 80082a8:	00ca      	lsls	r2, r1, #3
 80082aa:	4610      	mov	r0, r2
 80082ac:	4619      	mov	r1, r3
 80082ae:	4603      	mov	r3, r0
 80082b0:	4642      	mov	r2, r8
 80082b2:	189b      	adds	r3, r3, r2
 80082b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082b8:	464b      	mov	r3, r9
 80082ba:	460a      	mov	r2, r1
 80082bc:	eb42 0303 	adc.w	r3, r2, r3
 80082c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80082d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80082d8:	460b      	mov	r3, r1
 80082da:	18db      	adds	r3, r3, r3
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082de:	4613      	mov	r3, r2
 80082e0:	eb42 0303 	adc.w	r3, r2, r3
 80082e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80082ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80082ee:	f7f7 ffc7 	bl	8000280 <__aeabi_uldivmod>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <UART_SetConfig+0x2d4>)
 80082f8:	fba3 1302 	umull	r1, r3, r3, r2
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	2164      	movs	r1, #100	@ 0x64
 8008300:	fb01 f303 	mul.w	r3, r1, r3
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	3332      	adds	r3, #50	@ 0x32
 800830a:	4a08      	ldr	r2, [pc, #32]	@ (800832c <UART_SetConfig+0x2d4>)
 800830c:	fba2 2303 	umull	r2, r3, r2, r3
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	f003 0207 	and.w	r2, r3, #7
 8008316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4422      	add	r2, r4
 800831e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008320:	e106      	b.n	8008530 <UART_SetConfig+0x4d8>
 8008322:	bf00      	nop
 8008324:	40011000 	.word	0x40011000
 8008328:	40011400 	.word	0x40011400
 800832c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008334:	2200      	movs	r2, #0
 8008336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800833a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800833e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008342:	4642      	mov	r2, r8
 8008344:	464b      	mov	r3, r9
 8008346:	1891      	adds	r1, r2, r2
 8008348:	6239      	str	r1, [r7, #32]
 800834a:	415b      	adcs	r3, r3
 800834c:	627b      	str	r3, [r7, #36]	@ 0x24
 800834e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008352:	4641      	mov	r1, r8
 8008354:	1854      	adds	r4, r2, r1
 8008356:	4649      	mov	r1, r9
 8008358:	eb43 0501 	adc.w	r5, r3, r1
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	00eb      	lsls	r3, r5, #3
 8008366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800836a:	00e2      	lsls	r2, r4, #3
 800836c:	4614      	mov	r4, r2
 800836e:	461d      	mov	r5, r3
 8008370:	4643      	mov	r3, r8
 8008372:	18e3      	adds	r3, r4, r3
 8008374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008378:	464b      	mov	r3, r9
 800837a:	eb45 0303 	adc.w	r3, r5, r3
 800837e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800838e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800839e:	4629      	mov	r1, r5
 80083a0:	008b      	lsls	r3, r1, #2
 80083a2:	4621      	mov	r1, r4
 80083a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083a8:	4621      	mov	r1, r4
 80083aa:	008a      	lsls	r2, r1, #2
 80083ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80083b0:	f7f7 ff66 	bl	8000280 <__aeabi_uldivmod>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4b60      	ldr	r3, [pc, #384]	@ (800853c <UART_SetConfig+0x4e4>)
 80083ba:	fba3 2302 	umull	r2, r3, r3, r2
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	011c      	lsls	r4, r3, #4
 80083c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80083d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80083d4:	4642      	mov	r2, r8
 80083d6:	464b      	mov	r3, r9
 80083d8:	1891      	adds	r1, r2, r2
 80083da:	61b9      	str	r1, [r7, #24]
 80083dc:	415b      	adcs	r3, r3
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083e4:	4641      	mov	r1, r8
 80083e6:	1851      	adds	r1, r2, r1
 80083e8:	6139      	str	r1, [r7, #16]
 80083ea:	4649      	mov	r1, r9
 80083ec:	414b      	adcs	r3, r1
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083fc:	4659      	mov	r1, fp
 80083fe:	00cb      	lsls	r3, r1, #3
 8008400:	4651      	mov	r1, sl
 8008402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008406:	4651      	mov	r1, sl
 8008408:	00ca      	lsls	r2, r1, #3
 800840a:	4610      	mov	r0, r2
 800840c:	4619      	mov	r1, r3
 800840e:	4603      	mov	r3, r0
 8008410:	4642      	mov	r2, r8
 8008412:	189b      	adds	r3, r3, r2
 8008414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008418:	464b      	mov	r3, r9
 800841a:	460a      	mov	r2, r1
 800841c:	eb42 0303 	adc.w	r3, r2, r3
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800842e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800843c:	4649      	mov	r1, r9
 800843e:	008b      	lsls	r3, r1, #2
 8008440:	4641      	mov	r1, r8
 8008442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008446:	4641      	mov	r1, r8
 8008448:	008a      	lsls	r2, r1, #2
 800844a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800844e:	f7f7 ff17 	bl	8000280 <__aeabi_uldivmod>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4611      	mov	r1, r2
 8008458:	4b38      	ldr	r3, [pc, #224]	@ (800853c <UART_SetConfig+0x4e4>)
 800845a:	fba3 2301 	umull	r2, r3, r3, r1
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2264      	movs	r2, #100	@ 0x64
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	1acb      	subs	r3, r1, r3
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	3332      	adds	r3, #50	@ 0x32
 800846c:	4a33      	ldr	r2, [pc, #204]	@ (800853c <UART_SetConfig+0x4e4>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008478:	441c      	add	r4, r3
 800847a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800847e:	2200      	movs	r2, #0
 8008480:	673b      	str	r3, [r7, #112]	@ 0x70
 8008482:	677a      	str	r2, [r7, #116]	@ 0x74
 8008484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	1891      	adds	r1, r2, r2
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	415b      	adcs	r3, r3
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008498:	4641      	mov	r1, r8
 800849a:	1851      	adds	r1, r2, r1
 800849c:	6039      	str	r1, [r7, #0]
 800849e:	4649      	mov	r1, r9
 80084a0:	414b      	adcs	r3, r1
 80084a2:	607b      	str	r3, [r7, #4]
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084b0:	4659      	mov	r1, fp
 80084b2:	00cb      	lsls	r3, r1, #3
 80084b4:	4651      	mov	r1, sl
 80084b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ba:	4651      	mov	r1, sl
 80084bc:	00ca      	lsls	r2, r1, #3
 80084be:	4610      	mov	r0, r2
 80084c0:	4619      	mov	r1, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	4642      	mov	r2, r8
 80084c6:	189b      	adds	r3, r3, r2
 80084c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084ca:	464b      	mov	r3, r9
 80084cc:	460a      	mov	r2, r1
 80084ce:	eb42 0303 	adc.w	r3, r2, r3
 80084d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80084de:	667a      	str	r2, [r7, #100]	@ 0x64
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	f04f 0300 	mov.w	r3, #0
 80084e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80084ec:	4649      	mov	r1, r9
 80084ee:	008b      	lsls	r3, r1, #2
 80084f0:	4641      	mov	r1, r8
 80084f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084f6:	4641      	mov	r1, r8
 80084f8:	008a      	lsls	r2, r1, #2
 80084fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80084fe:	f7f7 febf 	bl	8000280 <__aeabi_uldivmod>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <UART_SetConfig+0x4e4>)
 8008508:	fba3 1302 	umull	r1, r3, r3, r2
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	2164      	movs	r1, #100	@ 0x64
 8008510:	fb01 f303 	mul.w	r3, r1, r3
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	3332      	adds	r3, #50	@ 0x32
 800851a:	4a08      	ldr	r2, [pc, #32]	@ (800853c <UART_SetConfig+0x4e4>)
 800851c:	fba2 2303 	umull	r2, r3, r2, r3
 8008520:	095b      	lsrs	r3, r3, #5
 8008522:	f003 020f 	and.w	r2, r3, #15
 8008526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4422      	add	r2, r4
 800852e:	609a      	str	r2, [r3, #8]
}
 8008530:	bf00      	nop
 8008532:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008536:	46bd      	mov	sp, r7
 8008538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800853c:	51eb851f 	.word	0x51eb851f

08008540 <__NVIC_SetPriority>:
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800854c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008550:	2b00      	cmp	r3, #0
 8008552:	db0a      	blt.n	800856a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	b2da      	uxtb	r2, r3
 8008558:	490c      	ldr	r1, [pc, #48]	@ (800858c <__NVIC_SetPriority+0x4c>)
 800855a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800855e:	0112      	lsls	r2, r2, #4
 8008560:	b2d2      	uxtb	r2, r2
 8008562:	440b      	add	r3, r1
 8008564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008568:	e00a      	b.n	8008580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	b2da      	uxtb	r2, r3
 800856e:	4908      	ldr	r1, [pc, #32]	@ (8008590 <__NVIC_SetPriority+0x50>)
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	3b04      	subs	r3, #4
 8008578:	0112      	lsls	r2, r2, #4
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	440b      	add	r3, r1
 800857e:	761a      	strb	r2, [r3, #24]
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	e000e100 	.word	0xe000e100
 8008590:	e000ed00 	.word	0xe000ed00

08008594 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008598:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <SysTick_Handler+0x1c>)
 800859a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800859c:	f001 fd2a 	bl	8009ff4 <xTaskGetSchedulerState>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d001      	beq.n	80085aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80085a6:	f002 fb1f 	bl	800abe8 <xPortSysTickHandler>
  }
}
 80085aa:	bf00      	nop
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	e000e010 	.word	0xe000e010

080085b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80085b8:	2100      	movs	r1, #0
 80085ba:	f06f 0004 	mvn.w	r0, #4
 80085be:	f7ff ffbf 	bl	8008540 <__NVIC_SetPriority>
#endif
}
 80085c2:	bf00      	nop
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ce:	f3ef 8305 	mrs	r3, IPSR
 80085d2:	603b      	str	r3, [r7, #0]
  return(result);
 80085d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80085da:	f06f 0305 	mvn.w	r3, #5
 80085de:	607b      	str	r3, [r7, #4]
 80085e0:	e00c      	b.n	80085fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085e2:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <osKernelInitialize+0x44>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085ea:	4b08      	ldr	r3, [pc, #32]	@ (800860c <osKernelInitialize+0x44>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	e002      	b.n	80085fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295
 80085fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085fc:	687b      	ldr	r3, [r7, #4]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000b10 	.word	0x20000b10

08008610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008616:	f3ef 8305 	mrs	r3, IPSR
 800861a:	603b      	str	r3, [r7, #0]
  return(result);
 800861c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008622:	f06f 0305 	mvn.w	r3, #5
 8008626:	607b      	str	r3, [r7, #4]
 8008628:	e010      	b.n	800864c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800862a:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <osKernelStart+0x48>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d109      	bne.n	8008646 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008632:	f7ff ffbf 	bl	80085b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008636:	4b08      	ldr	r3, [pc, #32]	@ (8008658 <osKernelStart+0x48>)
 8008638:	2202      	movs	r2, #2
 800863a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800863c:	f001 f876 	bl	800972c <vTaskStartScheduler>
      stat = osOK;
 8008640:	2300      	movs	r3, #0
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	e002      	b.n	800864c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800864c:	687b      	ldr	r3, [r7, #4]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000b10 	.word	0x20000b10

0800865c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	@ 0x38
 8008660:	af04      	add	r7, sp, #16
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800866c:	f3ef 8305 	mrs	r3, IPSR
 8008670:	617b      	str	r3, [r7, #20]
  return(result);
 8008672:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008674:	2b00      	cmp	r3, #0
 8008676:	d17e      	bne.n	8008776 <osThreadNew+0x11a>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d07b      	beq.n	8008776 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800867e:	2380      	movs	r3, #128	@ 0x80
 8008680:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008682:	2318      	movs	r3, #24
 8008684:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295
 800868e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d045      	beq.n	8008722 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <osThreadNew+0x48>
        name = attr->name;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <osThreadNew+0x6e>
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	2b38      	cmp	r3, #56	@ 0x38
 80086bc:	d805      	bhi.n	80086ca <osThreadNew+0x6e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <osThreadNew+0x72>
        return (NULL);
 80086ca:	2300      	movs	r3, #0
 80086cc:	e054      	b.n	8008778 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	089b      	lsrs	r3, r3, #2
 80086dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00e      	beq.n	8008704 <osThreadNew+0xa8>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80086ec:	d90a      	bls.n	8008704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <osThreadNew+0xa8>
        mem = 1;
 80086fe:	2301      	movs	r3, #1
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	e010      	b.n	8008726 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10c      	bne.n	8008726 <osThreadNew+0xca>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d108      	bne.n	8008726 <osThreadNew+0xca>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <osThreadNew+0xca>
          mem = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	61bb      	str	r3, [r7, #24]
 8008720:	e001      	b.n	8008726 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d110      	bne.n	800874e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008734:	9202      	str	r2, [sp, #8]
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	6a3a      	ldr	r2, [r7, #32]
 8008740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fdfe 	bl	8009344 <xTaskCreateStatic>
 8008748:	4603      	mov	r3, r0
 800874a:	613b      	str	r3, [r7, #16]
 800874c:	e013      	b.n	8008776 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d110      	bne.n	8008776 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	b29a      	uxth	r2, r3
 8008758:	f107 0310 	add.w	r3, r7, #16
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fe4c 	bl	8009404 <xTaskCreate>
 800876c:	4603      	mov	r3, r0
 800876e:	2b01      	cmp	r3, #1
 8008770:	d001      	beq.n	8008776 <osThreadNew+0x11a>
            hTask = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008776:	693b      	ldr	r3, [r7, #16]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3728      	adds	r7, #40	@ 0x28
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a07      	ldr	r2, [pc, #28]	@ (80087ac <vApplicationGetIdleTaskMemory+0x2c>)
 8008790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4a06      	ldr	r2, [pc, #24]	@ (80087b0 <vApplicationGetIdleTaskMemory+0x30>)
 8008796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2280      	movs	r2, #128	@ 0x80
 800879c:	601a      	str	r2, [r3, #0]
}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000b14 	.word	0x20000b14
 80087b0:	20000bbc 	.word	0x20000bbc

080087b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4a07      	ldr	r2, [pc, #28]	@ (80087e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80087c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	4a06      	ldr	r2, [pc, #24]	@ (80087e4 <vApplicationGetTimerTaskMemory+0x30>)
 80087ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20000dbc 	.word	0x20000dbc
 80087e4:	20000e64 	.word	0x20000e64

080087e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 0208 	add.w	r2, r3, #8
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f103 0208 	add.w	r2, r3, #8
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f103 0208 	add.w	r2, r3, #8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	601a      	str	r2, [r3, #0]
}
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d103      	bne.n	80088aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e00c      	b.n	80088c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3308      	adds	r3, #8
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	e002      	b.n	80088b8 <vListInsert+0x2e>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d2f6      	bcs.n	80088b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	601a      	str	r2, [r3, #0]
}
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	6892      	ldr	r2, [r2, #8]
 8008912:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6852      	ldr	r2, [r2, #4]
 800891c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d103      	bne.n	8008930 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	1e5a      	subs	r2, r3, #1
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10b      	bne.n	800897c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800897c:	f002 f8a4 	bl	800aac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008988:	68f9      	ldr	r1, [r7, #12]
 800898a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	441a      	add	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ac:	3b01      	subs	r3, #1
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	441a      	add	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	22ff      	movs	r2, #255	@ 0xff
 80089c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	22ff      	movs	r2, #255	@ 0xff
 80089c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d114      	bne.n	80089fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01a      	beq.n	8008a10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3310      	adds	r3, #16
 80089de:	4618      	mov	r0, r3
 80089e0:	f001 f942 	bl	8009c68 <xTaskRemoveFromEventList>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d012      	beq.n	8008a10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008a20 <xQueueGenericReset+0xd0>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	e009      	b.n	8008a10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3310      	adds	r3, #16
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff fef1 	bl	80087e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3324      	adds	r3, #36	@ 0x24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff feec 	bl	80087e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a10:	f002 f88c 	bl	800ab2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a14:	2301      	movs	r3, #1
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	@ 0x38
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10b      	bne.n	8008a50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a4a:	bf00      	nop
 8008a4c:	bf00      	nop
 8008a4e:	e7fd      	b.n	8008a4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10b      	bne.n	8008a6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <xQueueGenericCreateStatic+0x56>
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <xQueueGenericCreateStatic+0x5a>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <xQueueGenericCreateStatic+0x5c>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	623b      	str	r3, [r7, #32]
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	e7fd      	b.n	8008a98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d102      	bne.n	8008aa8 <xQueueGenericCreateStatic+0x84>
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <xQueueGenericCreateStatic+0x88>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <xQueueGenericCreateStatic+0x8a>
 8008aac:	2300      	movs	r3, #0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	61fb      	str	r3, [r7, #28]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aca:	2350      	movs	r3, #80	@ 0x50
 8008acc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b50      	cmp	r3, #80	@ 0x50
 8008ad2:	d00b      	beq.n	8008aec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	61bb      	str	r3, [r7, #24]
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	e7fd      	b.n	8008ae8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008aec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00d      	beq.n	8008b14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f805 	bl	8008b1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3730      	adds	r7, #48	@ 0x30
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e002      	b.n	8008b40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	69b8      	ldr	r0, [r7, #24]
 8008b50:	f7ff fefe 	bl	8008950 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b5c:	bf00      	nop
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	@ 0x38
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b72:	2300      	movs	r3, #0
 8008b74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10b      	bne.n	8008b98 <xQueueGenericSend+0x34>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b92:	bf00      	nop
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <xQueueGenericSend+0x42>
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <xQueueGenericSend+0x46>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <xQueueGenericSend+0x48>
 8008baa:	2300      	movs	r3, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10b      	bne.n	8008bc8 <xQueueGenericSend+0x64>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	e7fd      	b.n	8008bc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d103      	bne.n	8008bd6 <xQueueGenericSend+0x72>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d101      	bne.n	8008bda <xQueueGenericSend+0x76>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <xQueueGenericSend+0x78>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10b      	bne.n	8008bf8 <xQueueGenericSend+0x94>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	623b      	str	r3, [r7, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bf8:	f001 f9fc 	bl	8009ff4 <xTaskGetSchedulerState>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d102      	bne.n	8008c08 <xQueueGenericSend+0xa4>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <xQueueGenericSend+0xa8>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e000      	b.n	8008c0e <xQueueGenericSend+0xaa>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10b      	bne.n	8008c2a <xQueueGenericSend+0xc6>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	61fb      	str	r3, [r7, #28]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c2a:	f001 ff4d 	bl	800aac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d302      	bcc.n	8008c40 <xQueueGenericSend+0xdc>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d129      	bne.n	8008c94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	68b9      	ldr	r1, [r7, #8]
 8008c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c46:	f000 fa0f 	bl	8009068 <prvCopyDataToQueue>
 8008c4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d010      	beq.n	8008c76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c56:	3324      	adds	r3, #36	@ 0x24
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 f805 	bl	8009c68 <xTaskRemoveFromEventList>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d013      	beq.n	8008c8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c64:	4b3f      	ldr	r3, [pc, #252]	@ (8008d64 <xQueueGenericSend+0x200>)
 8008c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	e00a      	b.n	8008c8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c7c:	4b39      	ldr	r3, [pc, #228]	@ (8008d64 <xQueueGenericSend+0x200>)
 8008c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c8c:	f001 ff4e 	bl	800ab2c <vPortExitCritical>
				return pdPASS;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e063      	b.n	8008d5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d103      	bne.n	8008ca2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c9a:	f001 ff47 	bl	800ab2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e05c      	b.n	8008d5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ca8:	f107 0314 	add.w	r3, r7, #20
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 f83f 	bl	8009d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cb6:	f001 ff39 	bl	800ab2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cba:	f000 fda7 	bl	800980c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cbe:	f001 ff03 	bl	800aac8 <vPortEnterCritical>
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d103      	bne.n	8008cd8 <xQueueGenericSend+0x174>
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cde:	b25b      	sxtb	r3, r3
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d103      	bne.n	8008cee <xQueueGenericSend+0x18a>
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cee:	f001 ff1d 	bl	800ab2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cf2:	1d3a      	adds	r2, r7, #4
 8008cf4:	f107 0314 	add.w	r3, r7, #20
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f001 f82e 	bl	8009d5c <xTaskCheckForTimeOut>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d124      	bne.n	8008d50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d08:	f000 faa6 	bl	8009258 <prvIsQueueFull>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d018      	beq.n	8008d44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	3310      	adds	r3, #16
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 ff52 	bl	8009bc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d22:	f000 fa31 	bl	8009188 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d26:	f000 fd7f 	bl	8009828 <xTaskResumeAll>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f47f af7c 	bne.w	8008c2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d32:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <xQueueGenericSend+0x200>)
 8008d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	e772      	b.n	8008c2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d46:	f000 fa1f 	bl	8009188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d4a:	f000 fd6d 	bl	8009828 <xTaskResumeAll>
 8008d4e:	e76c      	b.n	8008c2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d52:	f000 fa19 	bl	8009188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d56:	f000 fd67 	bl	8009828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3738      	adds	r7, #56	@ 0x38
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b090      	sub	sp, #64	@ 0x40
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	e7fd      	b.n	8008d94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d103      	bne.n	8008da6 <xQueueGenericSendFromISR+0x3e>
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <xQueueGenericSendFromISR+0x42>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <xQueueGenericSendFromISR+0x44>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10b      	bne.n	8008dc8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d103      	bne.n	8008dd6 <xQueueGenericSendFromISR+0x6e>
 8008dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d101      	bne.n	8008dda <xQueueGenericSendFromISR+0x72>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e000      	b.n	8008ddc <xQueueGenericSendFromISR+0x74>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10b      	bne.n	8008df8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	623b      	str	r3, [r7, #32]
}
 8008df2:	bf00      	nop
 8008df4:	bf00      	nop
 8008df6:	e7fd      	b.n	8008df4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008df8:	f001 ff46 	bl	800ac88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008dfc:	f3ef 8211 	mrs	r2, BASEPRI
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	61fa      	str	r2, [r7, #28]
 8008e12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d302      	bcc.n	8008e2a <xQueueGenericSendFromISR+0xc2>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d12f      	bne.n	8008e8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e40:	f000 f912 	bl	8009068 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d112      	bne.n	8008e74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d016      	beq.n	8008e84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e58:	3324      	adds	r3, #36	@ 0x24
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 ff04 	bl	8009c68 <xTaskRemoveFromEventList>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00e      	beq.n	8008e84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e007      	b.n	8008e84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008e78:	3301      	adds	r3, #1
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	b25a      	sxtb	r2, r3
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e84:	2301      	movs	r3, #1
 8008e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008e88:	e001      	b.n	8008e8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3740      	adds	r7, #64	@ 0x40
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08c      	sub	sp, #48	@ 0x30
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <xQueueReceive+0x32>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	623b      	str	r3, [r7, #32]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <xQueueReceive+0x40>
 8008edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <xQueueReceive+0x44>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <xQueueReceive+0x46>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10b      	bne.n	8008f06 <xQueueReceive+0x62>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	61fb      	str	r3, [r7, #28]
}
 8008f00:	bf00      	nop
 8008f02:	bf00      	nop
 8008f04:	e7fd      	b.n	8008f02 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f06:	f001 f875 	bl	8009ff4 <xTaskGetSchedulerState>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <xQueueReceive+0x72>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <xQueueReceive+0x76>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e000      	b.n	8008f1c <xQueueReceive+0x78>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10b      	bne.n	8008f38 <xQueueReceive+0x94>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	61bb      	str	r3, [r7, #24]
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	e7fd      	b.n	8008f34 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f38:	f001 fdc6 	bl	800aac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01f      	beq.n	8008f88 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f4c:	f000 f8f6 	bl	800913c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	1e5a      	subs	r2, r3, #1
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00f      	beq.n	8008f80 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	3310      	adds	r3, #16
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fe7f 	bl	8009c68 <xTaskRemoveFromEventList>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d007      	beq.n	8008f80 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f70:	4b3c      	ldr	r3, [pc, #240]	@ (8009064 <xQueueReceive+0x1c0>)
 8008f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f80:	f001 fdd4 	bl	800ab2c <vPortExitCritical>
				return pdPASS;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e069      	b.n	800905c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d103      	bne.n	8008f96 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f8e:	f001 fdcd 	bl	800ab2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e062      	b.n	800905c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f9c:	f107 0310 	add.w	r3, r7, #16
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fec5 	bl	8009d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008faa:	f001 fdbf 	bl	800ab2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fae:	f000 fc2d 	bl	800980c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fb2:	f001 fd89 	bl	800aac8 <vPortEnterCritical>
 8008fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fbc:	b25b      	sxtb	r3, r3
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d103      	bne.n	8008fcc <xQueueReceive+0x128>
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fd2:	b25b      	sxtb	r3, r3
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d103      	bne.n	8008fe2 <xQueueReceive+0x13e>
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fe2:	f001 fda3 	bl	800ab2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe6:	1d3a      	adds	r2, r7, #4
 8008fe8:	f107 0310 	add.w	r3, r7, #16
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 feb4 	bl	8009d5c <xTaskCheckForTimeOut>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d123      	bne.n	8009042 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ffc:	f000 f916 	bl	800922c <prvIsQueueEmpty>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d017      	beq.n	8009036 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	3324      	adds	r3, #36	@ 0x24
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fdd8 	bl	8009bc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009016:	f000 f8b7 	bl	8009188 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800901a:	f000 fc05 	bl	8009828 <xTaskResumeAll>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d189      	bne.n	8008f38 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009024:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <xQueueReceive+0x1c0>)
 8009026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	e780      	b.n	8008f38 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009038:	f000 f8a6 	bl	8009188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800903c:	f000 fbf4 	bl	8009828 <xTaskResumeAll>
 8009040:	e77a      	b.n	8008f38 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009044:	f000 f8a0 	bl	8009188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009048:	f000 fbee 	bl	8009828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800904c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800904e:	f000 f8ed 	bl	800922c <prvIsQueueEmpty>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	f43f af6f 	beq.w	8008f38 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800905a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800905c:	4618      	mov	r0, r3
 800905e:	3730      	adds	r7, #48	@ 0x30
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	e000ed04 	.word	0xe000ed04

08009068 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009074:	2300      	movs	r3, #0
 8009076:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10d      	bne.n	80090a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d14d      	bne.n	800912a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 ffcc 	bl	800a030 <xTaskPriorityDisinherit>
 8009098:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	609a      	str	r2, [r3, #8]
 80090a0:	e043      	b.n	800912a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d119      	bne.n	80090dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6858      	ldr	r0, [r3, #4]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b0:	461a      	mov	r2, r3
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	f002 fc39 	bl	800b92a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d32b      	bcc.n	800912a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	605a      	str	r2, [r3, #4]
 80090da:	e026      	b.n	800912a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68d8      	ldr	r0, [r3, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e4:	461a      	mov	r2, r3
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	f002 fc1f 	bl	800b92a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f4:	425b      	negs	r3, r3
 80090f6:	441a      	add	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d207      	bcs.n	8009118 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009110:	425b      	negs	r3, r3
 8009112:	441a      	add	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d105      	bne.n	800912a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	3b01      	subs	r3, #1
 8009128:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009132:	697b      	ldr	r3, [r7, #20]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	d018      	beq.n	8009180 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009156:	441a      	add	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	429a      	cmp	r2, r3
 8009166:	d303      	bcc.n	8009170 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68d9      	ldr	r1, [r3, #12]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009178:	461a      	mov	r2, r3
 800917a:	6838      	ldr	r0, [r7, #0]
 800917c:	f002 fbd5 	bl	800b92a <memcpy>
	}
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009190:	f001 fc9a 	bl	800aac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800919a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800919c:	e011      	b.n	80091c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d012      	beq.n	80091cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3324      	adds	r3, #36	@ 0x24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fd5c 	bl	8009c68 <xTaskRemoveFromEventList>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091b6:	f000 fe35 	bl	8009e24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	3b01      	subs	r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	dce9      	bgt.n	800919e <prvUnlockQueue+0x16>
 80091ca:	e000      	b.n	80091ce <prvUnlockQueue+0x46>
					break;
 80091cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	22ff      	movs	r2, #255	@ 0xff
 80091d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80091d6:	f001 fca9 	bl	800ab2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091da:	f001 fc75 	bl	800aac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091e6:	e011      	b.n	800920c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d012      	beq.n	8009216 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3310      	adds	r3, #16
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 fd37 	bl	8009c68 <xTaskRemoveFromEventList>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009200:	f000 fe10 	bl	8009e24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	3b01      	subs	r3, #1
 8009208:	b2db      	uxtb	r3, r3
 800920a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800920c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009210:	2b00      	cmp	r3, #0
 8009212:	dce9      	bgt.n	80091e8 <prvUnlockQueue+0x60>
 8009214:	e000      	b.n	8009218 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009216:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	22ff      	movs	r2, #255	@ 0xff
 800921c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009220:	f001 fc84 	bl	800ab2c <vPortExitCritical>
}
 8009224:	bf00      	nop
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009234:	f001 fc48 	bl	800aac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923c:	2b00      	cmp	r3, #0
 800923e:	d102      	bne.n	8009246 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009240:	2301      	movs	r3, #1
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e001      	b.n	800924a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800924a:	f001 fc6f 	bl	800ab2c <vPortExitCritical>

	return xReturn;
 800924e:	68fb      	ldr	r3, [r7, #12]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009260:	f001 fc32 	bl	800aac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926c:	429a      	cmp	r2, r3
 800926e:	d102      	bne.n	8009276 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009270:	2301      	movs	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e001      	b.n	800927a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800927a:	f001 fc57 	bl	800ab2c <vPortExitCritical>

	return xReturn;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e014      	b.n	80092c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009298:	4a0f      	ldr	r2, [pc, #60]	@ (80092d8 <vQueueAddToRegistry+0x50>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10b      	bne.n	80092bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80092a4:	490c      	ldr	r1, [pc, #48]	@ (80092d8 <vQueueAddToRegistry+0x50>)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092ae:	4a0a      	ldr	r2, [pc, #40]	@ (80092d8 <vQueueAddToRegistry+0x50>)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4413      	add	r3, r2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092ba:	e006      	b.n	80092ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b07      	cmp	r3, #7
 80092c6:	d9e7      	bls.n	8009298 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20001264 	.word	0x20001264

080092dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092ec:	f001 fbec 	bl	800aac8 <vPortEnterCritical>
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092f6:	b25b      	sxtb	r3, r3
 80092f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fc:	d103      	bne.n	8009306 <vQueueWaitForMessageRestricted+0x2a>
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800930c:	b25b      	sxtb	r3, r3
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009312:	d103      	bne.n	800931c <vQueueWaitForMessageRestricted+0x40>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800931c:	f001 fc06 	bl	800ab2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009324:	2b00      	cmp	r3, #0
 8009326:	d106      	bne.n	8009336 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	3324      	adds	r3, #36	@ 0x24
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fc6d 	bl	8009c10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009336:	6978      	ldr	r0, [r7, #20]
 8009338:	f7ff ff26 	bl	8009188 <prvUnlockQueue>
	}
 800933c:	bf00      	nop
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08e      	sub	sp, #56	@ 0x38
 8009348:	af04      	add	r7, sp, #16
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10b      	bne.n	8009370 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	623b      	str	r3, [r7, #32]
}
 800936a:	bf00      	nop
 800936c:	bf00      	nop
 800936e:	e7fd      	b.n	800936c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10b      	bne.n	800938e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	61fb      	str	r3, [r7, #28]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800938e:	23a8      	movs	r3, #168	@ 0xa8
 8009390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2ba8      	cmp	r3, #168	@ 0xa8
 8009396:	d00b      	beq.n	80093b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	61bb      	str	r3, [r7, #24]
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	e7fd      	b.n	80093ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01e      	beq.n	80093f6 <xTaskCreateStatic+0xb2>
 80093b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d01b      	beq.n	80093f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093d0:	2300      	movs	r3, #0
 80093d2:	9303      	str	r3, [sp, #12]
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	9302      	str	r3, [sp, #8]
 80093d8:	f107 0314 	add.w	r3, r7, #20
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	68b9      	ldr	r1, [r7, #8]
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f851 	bl	8009490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093f0:	f000 f8f6 	bl	80095e0 <prvAddNewTaskToReadyList>
 80093f4:	e001      	b.n	80093fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80093f6:	2300      	movs	r3, #0
 80093f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093fa:	697b      	ldr	r3, [r7, #20]
	}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3728      	adds	r7, #40	@ 0x28
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08c      	sub	sp, #48	@ 0x30
 8009408:	af04      	add	r7, sp, #16
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	4613      	mov	r3, r2
 8009412:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009414:	88fb      	ldrh	r3, [r7, #6]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4618      	mov	r0, r3
 800941a:	f001 fc77 	bl	800ad0c <pvPortMalloc>
 800941e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00e      	beq.n	8009444 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009426:	20a8      	movs	r0, #168	@ 0xa8
 8009428:	f001 fc70 	bl	800ad0c <pvPortMalloc>
 800942c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	631a      	str	r2, [r3, #48]	@ 0x30
 800943a:	e005      	b.n	8009448 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800943c:	6978      	ldr	r0, [r7, #20]
 800943e:	f001 fd33 	bl	800aea8 <vPortFree>
 8009442:	e001      	b.n	8009448 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d017      	beq.n	800947e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009456:	88fa      	ldrh	r2, [r7, #6]
 8009458:	2300      	movs	r3, #0
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f80f 	bl	8009490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009472:	69f8      	ldr	r0, [r7, #28]
 8009474:	f000 f8b4 	bl	80095e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009478:	2301      	movs	r3, #1
 800947a:	61bb      	str	r3, [r7, #24]
 800947c:	e002      	b.n	8009484 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800947e:	f04f 33ff 	mov.w	r3, #4294967295
 8009482:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009484:	69bb      	ldr	r3, [r7, #24]
	}
 8009486:	4618      	mov	r0, r3
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	461a      	mov	r2, r3
 80094a8:	21a5      	movs	r1, #165	@ 0xa5
 80094aa:	f002 f90d 	bl	800b6c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094b8:	3b01      	subs	r3, #1
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	f023 0307 	bic.w	r3, r3, #7
 80094c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	f003 0307 	and.w	r3, r3, #7
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00b      	beq.n	80094ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	617b      	str	r3, [r7, #20]
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	e7fd      	b.n	80094e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01f      	beq.n	8009530 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
 80094f4:	e012      	b.n	800951c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	4413      	add	r3, r2
 80094fc:	7819      	ldrb	r1, [r3, #0]
 80094fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	4413      	add	r3, r2
 8009504:	3334      	adds	r3, #52	@ 0x34
 8009506:	460a      	mov	r2, r1
 8009508:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	4413      	add	r3, r2
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d006      	beq.n	8009524 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	3301      	adds	r3, #1
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	2b0f      	cmp	r3, #15
 8009520:	d9e9      	bls.n	80094f6 <prvInitialiseNewTask+0x66>
 8009522:	e000      	b.n	8009526 <prvInitialiseNewTask+0x96>
			{
				break;
 8009524:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800952e:	e003      	b.n	8009538 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953a:	2b37      	cmp	r3, #55	@ 0x37
 800953c:	d901      	bls.n	8009542 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800953e:	2337      	movs	r3, #55	@ 0x37
 8009540:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009546:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800954c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009556:	3304      	adds	r3, #4
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff f965 	bl	8008828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	3318      	adds	r3, #24
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff f960 	bl	8008828 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800957c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	2200      	movs	r2, #0
 8009582:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	2200      	movs	r2, #0
 800958a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	3354      	adds	r3, #84	@ 0x54
 8009592:	224c      	movs	r2, #76	@ 0x4c
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f002 f896 	bl	800b6c8 <memset>
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	4a0d      	ldr	r2, [pc, #52]	@ (80095d4 <prvInitialiseNewTask+0x144>)
 80095a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	4a0c      	ldr	r2, [pc, #48]	@ (80095d8 <prvInitialiseNewTask+0x148>)
 80095a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80095a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095aa:	4a0c      	ldr	r2, [pc, #48]	@ (80095dc <prvInitialiseNewTask+0x14c>)
 80095ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	68f9      	ldr	r1, [r7, #12]
 80095b2:	69b8      	ldr	r0, [r7, #24]
 80095b4:	f001 f95a 	bl	800a86c <pxPortInitialiseStack>
 80095b8:	4602      	mov	r2, r0
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095ca:	bf00      	nop
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20005500 	.word	0x20005500
 80095d8:	20005568 	.word	0x20005568
 80095dc:	200055d0 	.word	0x200055d0

080095e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095e8:	f001 fa6e 	bl	800aac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095ec:	4b2d      	ldr	r3, [pc, #180]	@ (80096a4 <prvAddNewTaskToReadyList+0xc4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3301      	adds	r3, #1
 80095f2:	4a2c      	ldr	r2, [pc, #176]	@ (80096a4 <prvAddNewTaskToReadyList+0xc4>)
 80095f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095f6:	4b2c      	ldr	r3, [pc, #176]	@ (80096a8 <prvAddNewTaskToReadyList+0xc8>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095fe:	4a2a      	ldr	r2, [pc, #168]	@ (80096a8 <prvAddNewTaskToReadyList+0xc8>)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009604:	4b27      	ldr	r3, [pc, #156]	@ (80096a4 <prvAddNewTaskToReadyList+0xc4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d110      	bne.n	800962e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800960c:	f000 fc2e 	bl	8009e6c <prvInitialiseTaskLists>
 8009610:	e00d      	b.n	800962e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009612:	4b26      	ldr	r3, [pc, #152]	@ (80096ac <prvAddNewTaskToReadyList+0xcc>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d109      	bne.n	800962e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800961a:	4b23      	ldr	r3, [pc, #140]	@ (80096a8 <prvAddNewTaskToReadyList+0xc8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	429a      	cmp	r2, r3
 8009626:	d802      	bhi.n	800962e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009628:	4a1f      	ldr	r2, [pc, #124]	@ (80096a8 <prvAddNewTaskToReadyList+0xc8>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800962e:	4b20      	ldr	r3, [pc, #128]	@ (80096b0 <prvAddNewTaskToReadyList+0xd0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	4a1e      	ldr	r2, [pc, #120]	@ (80096b0 <prvAddNewTaskToReadyList+0xd0>)
 8009636:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009638:	4b1d      	ldr	r3, [pc, #116]	@ (80096b0 <prvAddNewTaskToReadyList+0xd0>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009644:	4b1b      	ldr	r3, [pc, #108]	@ (80096b4 <prvAddNewTaskToReadyList+0xd4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	429a      	cmp	r2, r3
 800964a:	d903      	bls.n	8009654 <prvAddNewTaskToReadyList+0x74>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009650:	4a18      	ldr	r2, [pc, #96]	@ (80096b4 <prvAddNewTaskToReadyList+0xd4>)
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4a15      	ldr	r2, [pc, #84]	@ (80096b8 <prvAddNewTaskToReadyList+0xd8>)
 8009662:	441a      	add	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3304      	adds	r3, #4
 8009668:	4619      	mov	r1, r3
 800966a:	4610      	mov	r0, r2
 800966c:	f7ff f8e9 	bl	8008842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009670:	f001 fa5c 	bl	800ab2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009674:	4b0d      	ldr	r3, [pc, #52]	@ (80096ac <prvAddNewTaskToReadyList+0xcc>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00e      	beq.n	800969a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800967c:	4b0a      	ldr	r3, [pc, #40]	@ (80096a8 <prvAddNewTaskToReadyList+0xc8>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009686:	429a      	cmp	r2, r3
 8009688:	d207      	bcs.n	800969a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800968a:	4b0c      	ldr	r3, [pc, #48]	@ (80096bc <prvAddNewTaskToReadyList+0xdc>)
 800968c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800969a:	bf00      	nop
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20001778 	.word	0x20001778
 80096a8:	200012a4 	.word	0x200012a4
 80096ac:	20001784 	.word	0x20001784
 80096b0:	20001794 	.word	0x20001794
 80096b4:	20001780 	.word	0x20001780
 80096b8:	200012a8 	.word	0x200012a8
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d018      	beq.n	8009704 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096d2:	4b14      	ldr	r3, [pc, #80]	@ (8009724 <vTaskDelay+0x64>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00b      	beq.n	80096f2 <vTaskDelay+0x32>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	60bb      	str	r3, [r7, #8]
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	e7fd      	b.n	80096ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096f2:	f000 f88b 	bl	800980c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096f6:	2100      	movs	r1, #0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fd09 	bl	800a110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096fe:	f000 f893 	bl	8009828 <xTaskResumeAll>
 8009702:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d107      	bne.n	800971a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800970a:	4b07      	ldr	r3, [pc, #28]	@ (8009728 <vTaskDelay+0x68>)
 800970c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800971a:	bf00      	nop
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	200017a0 	.word	0x200017a0
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08a      	sub	sp, #40	@ 0x28
 8009730:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800973a:	463a      	mov	r2, r7
 800973c:	1d39      	adds	r1, r7, #4
 800973e:	f107 0308 	add.w	r3, r7, #8
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff f81c 	bl	8008780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	9202      	str	r2, [sp, #8]
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	2300      	movs	r3, #0
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	2300      	movs	r3, #0
 8009758:	460a      	mov	r2, r1
 800975a:	4924      	ldr	r1, [pc, #144]	@ (80097ec <vTaskStartScheduler+0xc0>)
 800975c:	4824      	ldr	r0, [pc, #144]	@ (80097f0 <vTaskStartScheduler+0xc4>)
 800975e:	f7ff fdf1 	bl	8009344 <xTaskCreateStatic>
 8009762:	4603      	mov	r3, r0
 8009764:	4a23      	ldr	r2, [pc, #140]	@ (80097f4 <vTaskStartScheduler+0xc8>)
 8009766:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009768:	4b22      	ldr	r3, [pc, #136]	@ (80097f4 <vTaskStartScheduler+0xc8>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009770:	2301      	movs	r3, #1
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e001      	b.n	800977a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009776:	2300      	movs	r3, #0
 8009778:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d102      	bne.n	8009786 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009780:	f000 fd1a 	bl	800a1b8 <xTimerCreateTimerTask>
 8009784:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d11b      	bne.n	80097c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	613b      	str	r3, [r7, #16]
}
 800979e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097a0:	4b15      	ldr	r3, [pc, #84]	@ (80097f8 <vTaskStartScheduler+0xcc>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3354      	adds	r3, #84	@ 0x54
 80097a6:	4a15      	ldr	r2, [pc, #84]	@ (80097fc <vTaskStartScheduler+0xd0>)
 80097a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097aa:	4b15      	ldr	r3, [pc, #84]	@ (8009800 <vTaskStartScheduler+0xd4>)
 80097ac:	f04f 32ff 	mov.w	r2, #4294967295
 80097b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097b2:	4b14      	ldr	r3, [pc, #80]	@ (8009804 <vTaskStartScheduler+0xd8>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097b8:	4b13      	ldr	r3, [pc, #76]	@ (8009808 <vTaskStartScheduler+0xdc>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097be:	f001 f8df 	bl	800a980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097c2:	e00f      	b.n	80097e4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ca:	d10b      	bne.n	80097e4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	60fb      	str	r3, [r7, #12]
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <vTaskStartScheduler+0xb4>
}
 80097e4:	bf00      	nop
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	0800cdc4 	.word	0x0800cdc4
 80097f0:	08009e3d 	.word	0x08009e3d
 80097f4:	2000179c 	.word	0x2000179c
 80097f8:	200012a4 	.word	0x200012a4
 80097fc:	20000098 	.word	0x20000098
 8009800:	20001798 	.word	0x20001798
 8009804:	20001784 	.word	0x20001784
 8009808:	2000177c 	.word	0x2000177c

0800980c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009810:	4b04      	ldr	r3, [pc, #16]	@ (8009824 <vTaskSuspendAll+0x18>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	4a03      	ldr	r2, [pc, #12]	@ (8009824 <vTaskSuspendAll+0x18>)
 8009818:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800981a:	bf00      	nop
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	200017a0 	.word	0x200017a0

08009828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009836:	4b42      	ldr	r3, [pc, #264]	@ (8009940 <xTaskResumeAll+0x118>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10b      	bne.n	8009856 <xTaskResumeAll+0x2e>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	603b      	str	r3, [r7, #0]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009856:	f001 f937 	bl	800aac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800985a:	4b39      	ldr	r3, [pc, #228]	@ (8009940 <xTaskResumeAll+0x118>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3b01      	subs	r3, #1
 8009860:	4a37      	ldr	r2, [pc, #220]	@ (8009940 <xTaskResumeAll+0x118>)
 8009862:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009864:	4b36      	ldr	r3, [pc, #216]	@ (8009940 <xTaskResumeAll+0x118>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d162      	bne.n	8009932 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800986c:	4b35      	ldr	r3, [pc, #212]	@ (8009944 <xTaskResumeAll+0x11c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d05e      	beq.n	8009932 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009874:	e02f      	b.n	80098d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009876:	4b34      	ldr	r3, [pc, #208]	@ (8009948 <xTaskResumeAll+0x120>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3318      	adds	r3, #24
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff f83a 	bl	80088fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3304      	adds	r3, #4
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff f835 	bl	80088fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009896:	4b2d      	ldr	r3, [pc, #180]	@ (800994c <xTaskResumeAll+0x124>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d903      	bls.n	80098a6 <xTaskResumeAll+0x7e>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a2:	4a2a      	ldr	r2, [pc, #168]	@ (800994c <xTaskResumeAll+0x124>)
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4a27      	ldr	r2, [pc, #156]	@ (8009950 <xTaskResumeAll+0x128>)
 80098b4:	441a      	add	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f7fe ffc0 	bl	8008842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c6:	4b23      	ldr	r3, [pc, #140]	@ (8009954 <xTaskResumeAll+0x12c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d302      	bcc.n	80098d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80098d0:	4b21      	ldr	r3, [pc, #132]	@ (8009958 <xTaskResumeAll+0x130>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009948 <xTaskResumeAll+0x120>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1cb      	bne.n	8009876 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098e4:	f000 fb66 	bl	8009fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098e8:	4b1c      	ldr	r3, [pc, #112]	@ (800995c <xTaskResumeAll+0x134>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d010      	beq.n	8009916 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098f4:	f000 f846 	bl	8009984 <xTaskIncrementTick>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80098fe:	4b16      	ldr	r3, [pc, #88]	@ (8009958 <xTaskResumeAll+0x130>)
 8009900:	2201      	movs	r2, #1
 8009902:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3b01      	subs	r3, #1
 8009908:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1f1      	bne.n	80098f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009910:	4b12      	ldr	r3, [pc, #72]	@ (800995c <xTaskResumeAll+0x134>)
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009916:	4b10      	ldr	r3, [pc, #64]	@ (8009958 <xTaskResumeAll+0x130>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d009      	beq.n	8009932 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800991e:	2301      	movs	r3, #1
 8009920:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009922:	4b0f      	ldr	r3, [pc, #60]	@ (8009960 <xTaskResumeAll+0x138>)
 8009924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009932:	f001 f8fb 	bl	800ab2c <vPortExitCritical>

	return xAlreadyYielded;
 8009936:	68bb      	ldr	r3, [r7, #8]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	200017a0 	.word	0x200017a0
 8009944:	20001778 	.word	0x20001778
 8009948:	20001738 	.word	0x20001738
 800994c:	20001780 	.word	0x20001780
 8009950:	200012a8 	.word	0x200012a8
 8009954:	200012a4 	.word	0x200012a4
 8009958:	2000178c 	.word	0x2000178c
 800995c:	20001788 	.word	0x20001788
 8009960:	e000ed04 	.word	0xe000ed04

08009964 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800996a:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <xTaskGetTickCount+0x1c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009970:	687b      	ldr	r3, [r7, #4]
}
 8009972:	4618      	mov	r0, r3
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	2000177c 	.word	0x2000177c

08009984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800998e:	4b4f      	ldr	r3, [pc, #316]	@ (8009acc <xTaskIncrementTick+0x148>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	f040 8090 	bne.w	8009ab8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009998:	4b4d      	ldr	r3, [pc, #308]	@ (8009ad0 <xTaskIncrementTick+0x14c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099a0:	4a4b      	ldr	r2, [pc, #300]	@ (8009ad0 <xTaskIncrementTick+0x14c>)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d121      	bne.n	80099f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80099ac:	4b49      	ldr	r3, [pc, #292]	@ (8009ad4 <xTaskIncrementTick+0x150>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00b      	beq.n	80099ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	603b      	str	r3, [r7, #0]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <xTaskIncrementTick+0x46>
 80099ce:	4b41      	ldr	r3, [pc, #260]	@ (8009ad4 <xTaskIncrementTick+0x150>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	4b40      	ldr	r3, [pc, #256]	@ (8009ad8 <xTaskIncrementTick+0x154>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ad4 <xTaskIncrementTick+0x150>)
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	4a3e      	ldr	r2, [pc, #248]	@ (8009ad8 <xTaskIncrementTick+0x154>)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	4b3e      	ldr	r3, [pc, #248]	@ (8009adc <xTaskIncrementTick+0x158>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3301      	adds	r3, #1
 80099e8:	4a3c      	ldr	r2, [pc, #240]	@ (8009adc <xTaskIncrementTick+0x158>)
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	f000 fae2 	bl	8009fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099f0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ae0 <xTaskIncrementTick+0x15c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d349      	bcc.n	8009a8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099fa:	4b36      	ldr	r3, [pc, #216]	@ (8009ad4 <xTaskIncrementTick+0x150>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d104      	bne.n	8009a0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a04:	4b36      	ldr	r3, [pc, #216]	@ (8009ae0 <xTaskIncrementTick+0x15c>)
 8009a06:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0a:	601a      	str	r2, [r3, #0]
					break;
 8009a0c:	e03f      	b.n	8009a8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a0e:	4b31      	ldr	r3, [pc, #196]	@ (8009ad4 <xTaskIncrementTick+0x150>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d203      	bcs.n	8009a2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a26:	4a2e      	ldr	r2, [pc, #184]	@ (8009ae0 <xTaskIncrementTick+0x15c>)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a2c:	e02f      	b.n	8009a8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe ff62 	bl	80088fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d004      	beq.n	8009a4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	3318      	adds	r3, #24
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe ff59 	bl	80088fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a4e:	4b25      	ldr	r3, [pc, #148]	@ (8009ae4 <xTaskIncrementTick+0x160>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d903      	bls.n	8009a5e <xTaskIncrementTick+0xda>
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5a:	4a22      	ldr	r2, [pc, #136]	@ (8009ae4 <xTaskIncrementTick+0x160>)
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ae8 <xTaskIncrementTick+0x164>)
 8009a6c:	441a      	add	r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7fe fee4 	bl	8008842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009aec <xTaskIncrementTick+0x168>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d3b8      	bcc.n	80099fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a8c:	e7b5      	b.n	80099fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a8e:	4b17      	ldr	r3, [pc, #92]	@ (8009aec <xTaskIncrementTick+0x168>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a94:	4914      	ldr	r1, [pc, #80]	@ (8009ae8 <xTaskIncrementTick+0x164>)
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	440b      	add	r3, r1
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d901      	bls.n	8009aaa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009aaa:	4b11      	ldr	r3, [pc, #68]	@ (8009af0 <xTaskIncrementTick+0x16c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d007      	beq.n	8009ac2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	617b      	str	r3, [r7, #20]
 8009ab6:	e004      	b.n	8009ac2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8009af4 <xTaskIncrementTick+0x170>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	4a0d      	ldr	r2, [pc, #52]	@ (8009af4 <xTaskIncrementTick+0x170>)
 8009ac0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ac2:	697b      	ldr	r3, [r7, #20]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	200017a0 	.word	0x200017a0
 8009ad0:	2000177c 	.word	0x2000177c
 8009ad4:	20001730 	.word	0x20001730
 8009ad8:	20001734 	.word	0x20001734
 8009adc:	20001790 	.word	0x20001790
 8009ae0:	20001798 	.word	0x20001798
 8009ae4:	20001780 	.word	0x20001780
 8009ae8:	200012a8 	.word	0x200012a8
 8009aec:	200012a4 	.word	0x200012a4
 8009af0:	2000178c 	.word	0x2000178c
 8009af4:	20001788 	.word	0x20001788

08009af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009afe:	4b2b      	ldr	r3, [pc, #172]	@ (8009bac <vTaskSwitchContext+0xb4>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b06:	4b2a      	ldr	r3, [pc, #168]	@ (8009bb0 <vTaskSwitchContext+0xb8>)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b0c:	e047      	b.n	8009b9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009b0e:	4b28      	ldr	r3, [pc, #160]	@ (8009bb0 <vTaskSwitchContext+0xb8>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b14:	4b27      	ldr	r3, [pc, #156]	@ (8009bb4 <vTaskSwitchContext+0xbc>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e011      	b.n	8009b40 <vTaskSwitchContext+0x48>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <vTaskSwitchContext+0x42>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	607b      	str	r3, [r7, #4]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <vTaskSwitchContext+0x3e>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	491d      	ldr	r1, [pc, #116]	@ (8009bb8 <vTaskSwitchContext+0xc0>)
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	440b      	add	r3, r1
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0e3      	beq.n	8009b1c <vTaskSwitchContext+0x24>
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4a16      	ldr	r2, [pc, #88]	@ (8009bb8 <vTaskSwitchContext+0xc0>)
 8009b60:	4413      	add	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	605a      	str	r2, [r3, #4]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	3308      	adds	r3, #8
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d104      	bne.n	8009b84 <vTaskSwitchContext+0x8c>
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	605a      	str	r2, [r3, #4]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009bbc <vTaskSwitchContext+0xc4>)
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	4a09      	ldr	r2, [pc, #36]	@ (8009bb4 <vTaskSwitchContext+0xbc>)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b94:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <vTaskSwitchContext+0xc4>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3354      	adds	r3, #84	@ 0x54
 8009b9a:	4a09      	ldr	r2, [pc, #36]	@ (8009bc0 <vTaskSwitchContext+0xc8>)
 8009b9c:	6013      	str	r3, [r2, #0]
}
 8009b9e:	bf00      	nop
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	200017a0 	.word	0x200017a0
 8009bb0:	2000178c 	.word	0x2000178c
 8009bb4:	20001780 	.word	0x20001780
 8009bb8:	200012a8 	.word	0x200012a8
 8009bbc:	200012a4 	.word	0x200012a4
 8009bc0:	20000098 	.word	0x20000098

08009bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10b      	bne.n	8009bec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	60fb      	str	r3, [r7, #12]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bec:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <vTaskPlaceOnEventList+0x48>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3318      	adds	r3, #24
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7fe fe48 	bl	800888a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	6838      	ldr	r0, [r7, #0]
 8009bfe:	f000 fa87 	bl	800a110 <prvAddCurrentTaskToDelayedList>
}
 8009c02:	bf00      	nop
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200012a4 	.word	0x200012a4

08009c10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	617b      	str	r3, [r7, #20]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c64 <vTaskPlaceOnEventListRestricted+0x54>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3318      	adds	r3, #24
 8009c40:	4619      	mov	r1, r3
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7fe fdfd 	bl	8008842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	68b8      	ldr	r0, [r7, #8]
 8009c58:	f000 fa5a 	bl	800a110 <prvAddCurrentTaskToDelayedList>
	}
 8009c5c:	bf00      	nop
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	200012a4 	.word	0x200012a4

08009c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10b      	bne.n	8009c96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	60fb      	str	r3, [r7, #12]
}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	e7fd      	b.n	8009c92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	3318      	adds	r3, #24
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fe2e 	bl	80088fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d18 <xTaskRemoveFromEventList+0xb0>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11d      	bne.n	8009ce4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fe25 	bl	80088fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb6:	4b19      	ldr	r3, [pc, #100]	@ (8009d1c <xTaskRemoveFromEventList+0xb4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d903      	bls.n	8009cc6 <xTaskRemoveFromEventList+0x5e>
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc2:	4a16      	ldr	r2, [pc, #88]	@ (8009d1c <xTaskRemoveFromEventList+0xb4>)
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4a13      	ldr	r2, [pc, #76]	@ (8009d20 <xTaskRemoveFromEventList+0xb8>)
 8009cd4:	441a      	add	r2, r3
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7fe fdb0 	bl	8008842 <vListInsertEnd>
 8009ce2:	e005      	b.n	8009cf0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	3318      	adds	r3, #24
 8009ce8:	4619      	mov	r1, r3
 8009cea:	480e      	ldr	r0, [pc, #56]	@ (8009d24 <xTaskRemoveFromEventList+0xbc>)
 8009cec:	f7fe fda9 	bl	8008842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d28 <xTaskRemoveFromEventList+0xc0>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d905      	bls.n	8009d0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d02:	4b0a      	ldr	r3, [pc, #40]	@ (8009d2c <xTaskRemoveFromEventList+0xc4>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	e001      	b.n	8009d0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d0e:	697b      	ldr	r3, [r7, #20]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	200017a0 	.word	0x200017a0
 8009d1c:	20001780 	.word	0x20001780
 8009d20:	200012a8 	.word	0x200012a8
 8009d24:	20001738 	.word	0x20001738
 8009d28:	200012a4 	.word	0x200012a4
 8009d2c:	2000178c 	.word	0x2000178c

08009d30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d38:	4b06      	ldr	r3, [pc, #24]	@ (8009d54 <vTaskInternalSetTimeOutState+0x24>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d40:	4b05      	ldr	r3, [pc, #20]	@ (8009d58 <vTaskInternalSetTimeOutState+0x28>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	605a      	str	r2, [r3, #4]
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	20001790 	.word	0x20001790
 8009d58:	2000177c 	.word	0x2000177c

08009d5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10b      	bne.n	8009d84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	613b      	str	r3, [r7, #16]
}
 8009d7e:	bf00      	nop
 8009d80:	bf00      	nop
 8009d82:	e7fd      	b.n	8009d80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10b      	bne.n	8009da2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60fb      	str	r3, [r7, #12]
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	e7fd      	b.n	8009d9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009da2:	f000 fe91 	bl	800aac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009da6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e1c <xTaskCheckForTimeOut+0xc0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d102      	bne.n	8009dc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	e023      	b.n	8009e0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4b15      	ldr	r3, [pc, #84]	@ (8009e20 <xTaskCheckForTimeOut+0xc4>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d007      	beq.n	8009de2 <xTaskCheckForTimeOut+0x86>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	69ba      	ldr	r2, [r7, #24]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d302      	bcc.n	8009de2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	61fb      	str	r3, [r7, #28]
 8009de0:	e015      	b.n	8009e0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d20b      	bcs.n	8009e04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	1ad2      	subs	r2, r2, r3
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff ff99 	bl	8009d30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	61fb      	str	r3, [r7, #28]
 8009e02:	e004      	b.n	8009e0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e0e:	f000 fe8d 	bl	800ab2c <vPortExitCritical>

	return xReturn;
 8009e12:	69fb      	ldr	r3, [r7, #28]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3720      	adds	r7, #32
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	2000177c 	.word	0x2000177c
 8009e20:	20001790 	.word	0x20001790

08009e24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e28:	4b03      	ldr	r3, [pc, #12]	@ (8009e38 <vTaskMissedYield+0x14>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
}
 8009e2e:	bf00      	nop
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	2000178c 	.word	0x2000178c

08009e3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e44:	f000 f852 	bl	8009eec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e48:	4b06      	ldr	r3, [pc, #24]	@ (8009e64 <prvIdleTask+0x28>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d9f9      	bls.n	8009e44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e50:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <prvIdleTask+0x2c>)
 8009e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e60:	e7f0      	b.n	8009e44 <prvIdleTask+0x8>
 8009e62:	bf00      	nop
 8009e64:	200012a8 	.word	0x200012a8
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e72:	2300      	movs	r3, #0
 8009e74:	607b      	str	r3, [r7, #4]
 8009e76:	e00c      	b.n	8009e92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4a12      	ldr	r2, [pc, #72]	@ (8009ecc <prvInitialiseTaskLists+0x60>)
 8009e84:	4413      	add	r3, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fcae 	bl	80087e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b37      	cmp	r3, #55	@ 0x37
 8009e96:	d9ef      	bls.n	8009e78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e98:	480d      	ldr	r0, [pc, #52]	@ (8009ed0 <prvInitialiseTaskLists+0x64>)
 8009e9a:	f7fe fca5 	bl	80087e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e9e:	480d      	ldr	r0, [pc, #52]	@ (8009ed4 <prvInitialiseTaskLists+0x68>)
 8009ea0:	f7fe fca2 	bl	80087e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ea4:	480c      	ldr	r0, [pc, #48]	@ (8009ed8 <prvInitialiseTaskLists+0x6c>)
 8009ea6:	f7fe fc9f 	bl	80087e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009eaa:	480c      	ldr	r0, [pc, #48]	@ (8009edc <prvInitialiseTaskLists+0x70>)
 8009eac:	f7fe fc9c 	bl	80087e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009eb0:	480b      	ldr	r0, [pc, #44]	@ (8009ee0 <prvInitialiseTaskLists+0x74>)
 8009eb2:	f7fe fc99 	bl	80087e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee4 <prvInitialiseTaskLists+0x78>)
 8009eb8:	4a05      	ldr	r2, [pc, #20]	@ (8009ed0 <prvInitialiseTaskLists+0x64>)
 8009eba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee8 <prvInitialiseTaskLists+0x7c>)
 8009ebe:	4a05      	ldr	r2, [pc, #20]	@ (8009ed4 <prvInitialiseTaskLists+0x68>)
 8009ec0:	601a      	str	r2, [r3, #0]
}
 8009ec2:	bf00      	nop
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	200012a8 	.word	0x200012a8
 8009ed0:	20001708 	.word	0x20001708
 8009ed4:	2000171c 	.word	0x2000171c
 8009ed8:	20001738 	.word	0x20001738
 8009edc:	2000174c 	.word	0x2000174c
 8009ee0:	20001764 	.word	0x20001764
 8009ee4:	20001730 	.word	0x20001730
 8009ee8:	20001734 	.word	0x20001734

08009eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ef2:	e019      	b.n	8009f28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ef4:	f000 fde8 	bl	800aac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef8:	4b10      	ldr	r3, [pc, #64]	@ (8009f3c <prvCheckTasksWaitingTermination+0x50>)
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3304      	adds	r3, #4
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fcf9 	bl	80088fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f40 <prvCheckTasksWaitingTermination+0x54>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	4a0b      	ldr	r2, [pc, #44]	@ (8009f40 <prvCheckTasksWaitingTermination+0x54>)
 8009f12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f14:	4b0b      	ldr	r3, [pc, #44]	@ (8009f44 <prvCheckTasksWaitingTermination+0x58>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f44 <prvCheckTasksWaitingTermination+0x58>)
 8009f1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f1e:	f000 fe05 	bl	800ab2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f810 	bl	8009f48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f28:	4b06      	ldr	r3, [pc, #24]	@ (8009f44 <prvCheckTasksWaitingTermination+0x58>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1e1      	bne.n	8009ef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	2000174c 	.word	0x2000174c
 8009f40:	20001778 	.word	0x20001778
 8009f44:	20001760 	.word	0x20001760

08009f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3354      	adds	r3, #84	@ 0x54
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 fc17 	bl	800b788 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d108      	bne.n	8009f76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 ff9d 	bl	800aea8 <vPortFree>
				vPortFree( pxTCB );
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 ff9a 	bl	800aea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f74:	e019      	b.n	8009faa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d103      	bne.n	8009f88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 ff91 	bl	800aea8 <vPortFree>
	}
 8009f86:	e010      	b.n	8009faa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d00b      	beq.n	8009faa <prvDeleteTCB+0x62>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	60fb      	str	r3, [r7, #12]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <prvDeleteTCB+0x5e>
	}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fba:	4b0c      	ldr	r3, [pc, #48]	@ (8009fec <prvResetNextTaskUnblockTime+0x38>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d104      	bne.n	8009fce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8009fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fcc:	e008      	b.n	8009fe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fce:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <prvResetNextTaskUnblockTime+0x38>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	4a04      	ldr	r2, [pc, #16]	@ (8009ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8009fde:	6013      	str	r3, [r2, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20001730 	.word	0x20001730
 8009ff0:	20001798 	.word	0x20001798

08009ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ffa:	4b0b      	ldr	r3, [pc, #44]	@ (800a028 <xTaskGetSchedulerState+0x34>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a002:	2301      	movs	r3, #1
 800a004:	607b      	str	r3, [r7, #4]
 800a006:	e008      	b.n	800a01a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a008:	4b08      	ldr	r3, [pc, #32]	@ (800a02c <xTaskGetSchedulerState+0x38>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a010:	2302      	movs	r3, #2
 800a012:	607b      	str	r3, [r7, #4]
 800a014:	e001      	b.n	800a01a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a016:	2300      	movs	r3, #0
 800a018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a01a:	687b      	ldr	r3, [r7, #4]
	}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	20001784 	.word	0x20001784
 800a02c:	200017a0 	.word	0x200017a0

0800a030 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d058      	beq.n	800a0f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a046:	4b2f      	ldr	r3, [pc, #188]	@ (800a104 <xTaskPriorityDisinherit+0xd4>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d00b      	beq.n	800a068 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	60fb      	str	r3, [r7, #12]
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	e7fd      	b.n	800a064 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10b      	bne.n	800a088 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	60bb      	str	r3, [r7, #8]
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	e7fd      	b.n	800a084 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a08c:	1e5a      	subs	r2, r3, #1
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d02c      	beq.n	800a0f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d128      	bne.n	800a0f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fc26 	bl	80088fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a108 <xTaskPriorityDisinherit+0xd8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d903      	bls.n	800a0d8 <xTaskPriorityDisinherit+0xa8>
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	4a0c      	ldr	r2, [pc, #48]	@ (800a108 <xTaskPriorityDisinherit+0xd8>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4a09      	ldr	r2, [pc, #36]	@ (800a10c <xTaskPriorityDisinherit+0xdc>)
 800a0e6:	441a      	add	r2, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7fe fba7 	bl	8008842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0f8:	697b      	ldr	r3, [r7, #20]
	}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	200012a4 	.word	0x200012a4
 800a108:	20001780 	.word	0x20001780
 800a10c:	200012a8 	.word	0x200012a8

0800a110 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11a:	4b21      	ldr	r3, [pc, #132]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a120:	4b20      	ldr	r3, [pc, #128]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fbe8 	bl	80088fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a132:	d10a      	bne.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a13a:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4819      	ldr	r0, [pc, #100]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a144:	f7fe fb7d 	bl	8008842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a148:	e026      	b.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4413      	add	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a152:	4b14      	ldr	r3, [pc, #80]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d209      	bcs.n	800a176 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a162:	4b12      	ldr	r3, [pc, #72]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f7fe fb8b 	bl	800888a <vListInsert>
}
 800a174:	e010      	b.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a176:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe fb81 	bl	800888a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a188:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d202      	bcs.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a192:	4a08      	ldr	r2, [pc, #32]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	2000177c 	.word	0x2000177c
 800a1a4:	200012a4 	.word	0x200012a4
 800a1a8:	20001764 	.word	0x20001764
 800a1ac:	20001734 	.word	0x20001734
 800a1b0:	20001730 	.word	0x20001730
 800a1b4:	20001798 	.word	0x20001798

0800a1b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	@ 0x28
 800a1bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1c2:	f000 fb13 	bl	800a7ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a23c <xTimerCreateTimerTask+0x84>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d021      	beq.n	800a212 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1d6:	1d3a      	adds	r2, r7, #4
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fe fae7 	bl	80087b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	9202      	str	r2, [sp, #8]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	460a      	mov	r2, r1
 800a1f8:	4911      	ldr	r1, [pc, #68]	@ (800a240 <xTimerCreateTimerTask+0x88>)
 800a1fa:	4812      	ldr	r0, [pc, #72]	@ (800a244 <xTimerCreateTimerTask+0x8c>)
 800a1fc:	f7ff f8a2 	bl	8009344 <xTaskCreateStatic>
 800a200:	4603      	mov	r3, r0
 800a202:	4a11      	ldr	r2, [pc, #68]	@ (800a248 <xTimerCreateTimerTask+0x90>)
 800a204:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a206:	4b10      	ldr	r3, [pc, #64]	@ (800a248 <xTimerCreateTimerTask+0x90>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a20e:	2301      	movs	r3, #1
 800a210:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10b      	bne.n	800a230 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	613b      	str	r3, [r7, #16]
}
 800a22a:	bf00      	nop
 800a22c:	bf00      	nop
 800a22e:	e7fd      	b.n	800a22c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a230:	697b      	ldr	r3, [r7, #20]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	200017d4 	.word	0x200017d4
 800a240:	0800cdcc 	.word	0x0800cdcc
 800a244:	0800a385 	.word	0x0800a385
 800a248:	200017d8 	.word	0x200017d8

0800a24c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	@ 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10b      	bne.n	800a27c <xTimerGenericCommand+0x30>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	623b      	str	r3, [r7, #32]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a27c:	4b19      	ldr	r3, [pc, #100]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d02a      	beq.n	800a2da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b05      	cmp	r3, #5
 800a294:	dc18      	bgt.n	800a2c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a296:	f7ff fead 	bl	8009ff4 <xTaskGetSchedulerState>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d109      	bne.n	800a2b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2a0:	4b10      	ldr	r3, [pc, #64]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	f107 0110 	add.w	r1, r7, #16
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ac:	f7fe fc5a 	bl	8008b64 <xQueueGenericSend>
 800a2b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2b2:	e012      	b.n	800a2da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	f107 0110 	add.w	r1, r7, #16
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f7fe fc50 	bl	8008b64 <xQueueGenericSend>
 800a2c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2c6:	e008      	b.n	800a2da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2c8:	4b06      	ldr	r3, [pc, #24]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	f107 0110 	add.w	r1, r7, #16
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	f7fe fd48 	bl	8008d68 <xQueueGenericSendFromISR>
 800a2d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3728      	adds	r7, #40	@ 0x28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	200017d4 	.word	0x200017d4

0800a2e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f2:	4b23      	ldr	r3, [pc, #140]	@ (800a380 <prvProcessExpiredTimer+0x98>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fafb 	bl	80088fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	2b00      	cmp	r3, #0
 800a312:	d023      	beq.n	800a35c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	699a      	ldr	r2, [r3, #24]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	18d1      	adds	r1, r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	6978      	ldr	r0, [r7, #20]
 800a322:	f000 f8d5 	bl	800a4d0 <prvInsertTimerInActiveList>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d020      	beq.n	800a36e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a32c:	2300      	movs	r3, #0
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	2300      	movs	r3, #0
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	2100      	movs	r1, #0
 800a336:	6978      	ldr	r0, [r7, #20]
 800a338:	f7ff ff88 	bl	800a24c <xTimerGenericCommand>
 800a33c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d114      	bne.n	800a36e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	60fb      	str	r3, [r7, #12]
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	e7fd      	b.n	800a358 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	6978      	ldr	r0, [r7, #20]
 800a374:	4798      	blx	r3
}
 800a376:	bf00      	nop
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	200017cc 	.word	0x200017cc

0800a384 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a38c:	f107 0308 	add.w	r3, r7, #8
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f859 	bl	800a448 <prvGetNextExpireTime>
 800a396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4619      	mov	r1, r3
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 f805 	bl	800a3ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3a2:	f000 f8d7 	bl	800a554 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3a6:	bf00      	nop
 800a3a8:	e7f0      	b.n	800a38c <prvTimerTask+0x8>
	...

0800a3ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3b6:	f7ff fa29 	bl	800980c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f866 	bl	800a490 <prvSampleTimeNow>
 800a3c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d130      	bne.n	800a42e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <prvProcessTimerOrBlockTask+0x3c>
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d806      	bhi.n	800a3e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3da:	f7ff fa25 	bl	8009828 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3de:	68f9      	ldr	r1, [r7, #12]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff ff81 	bl	800a2e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3e6:	e024      	b.n	800a432 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3ee:	4b13      	ldr	r3, [pc, #76]	@ (800a43c <prvProcessTimerOrBlockTask+0x90>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <prvProcessTimerOrBlockTask+0x50>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <prvProcessTimerOrBlockTask+0x52>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a400:	4b0f      	ldr	r3, [pc, #60]	@ (800a440 <prvProcessTimerOrBlockTask+0x94>)
 800a402:	6818      	ldr	r0, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7fe ff65 	bl	80092dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a412:	f7ff fa09 	bl	8009828 <xTaskResumeAll>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a41c:	4b09      	ldr	r3, [pc, #36]	@ (800a444 <prvProcessTimerOrBlockTask+0x98>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
}
 800a42c:	e001      	b.n	800a432 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a42e:	f7ff f9fb 	bl	8009828 <xTaskResumeAll>
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	200017d0 	.word	0x200017d0
 800a440:	200017d4 	.word	0x200017d4
 800a444:	e000ed04 	.word	0xe000ed04

0800a448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a450:	4b0e      	ldr	r3, [pc, #56]	@ (800a48c <prvGetNextExpireTime+0x44>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <prvGetNextExpireTime+0x16>
 800a45a:	2201      	movs	r2, #1
 800a45c:	e000      	b.n	800a460 <prvGetNextExpireTime+0x18>
 800a45e:	2200      	movs	r2, #0
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d105      	bne.n	800a478 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a46c:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <prvGetNextExpireTime+0x44>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e001      	b.n	800a47c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a47c:	68fb      	ldr	r3, [r7, #12]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	200017cc 	.word	0x200017cc

0800a490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a498:	f7ff fa64 	bl	8009964 <xTaskGetTickCount>
 800a49c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a49e:	4b0b      	ldr	r3, [pc, #44]	@ (800a4cc <prvSampleTimeNow+0x3c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d205      	bcs.n	800a4b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4a8:	f000 f93a 	bl	800a720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e002      	b.n	800a4ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4ba:	4a04      	ldr	r2, [pc, #16]	@ (800a4cc <prvSampleTimeNow+0x3c>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	200017dc 	.word	0x200017dc

0800a4d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d812      	bhi.n	800a51c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	1ad2      	subs	r2, r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	429a      	cmp	r2, r3
 800a502:	d302      	bcc.n	800a50a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	e01b      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a50a:	4b10      	ldr	r3, [pc, #64]	@ (800a54c <prvInsertTimerInActiveList+0x7c>)
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f7fe f9b8 	bl	800888a <vListInsert>
 800a51a:	e012      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d206      	bcs.n	800a532 <prvInsertTimerInActiveList+0x62>
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d302      	bcc.n	800a532 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	e007      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a532:	4b07      	ldr	r3, [pc, #28]	@ (800a550 <prvInsertTimerInActiveList+0x80>)
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3304      	adds	r3, #4
 800a53a:	4619      	mov	r1, r3
 800a53c:	4610      	mov	r0, r2
 800a53e:	f7fe f9a4 	bl	800888a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a542:	697b      	ldr	r3, [r7, #20]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	200017d0 	.word	0x200017d0
 800a550:	200017cc 	.word	0x200017cc

0800a554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08e      	sub	sp, #56	@ 0x38
 800a558:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a55a:	e0ce      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	da19      	bge.n	800a596 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	3304      	adds	r3, #4
 800a566:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10b      	bne.n	800a586 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	61fb      	str	r3, [r7, #28]
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	e7fd      	b.n	800a582 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a58c:	6850      	ldr	r0, [r2, #4]
 800a58e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a590:	6892      	ldr	r2, [r2, #8]
 800a592:	4611      	mov	r1, r2
 800a594:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f2c0 80ae 	blt.w	800a6fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe f9a4 	bl	80088fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5b4:	463b      	mov	r3, r7
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff ff6a 	bl	800a490 <prvSampleTimeNow>
 800a5bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b09      	cmp	r3, #9
 800a5c2:	f200 8097 	bhi.w	800a6f4 <prvProcessReceivedCommands+0x1a0>
 800a5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5cc <prvProcessReceivedCommands+0x78>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5f5 	.word	0x0800a5f5
 800a5d4:	0800a5f5 	.word	0x0800a5f5
 800a5d8:	0800a66b 	.word	0x0800a66b
 800a5dc:	0800a67f 	.word	0x0800a67f
 800a5e0:	0800a6cb 	.word	0x0800a6cb
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a5f5 	.word	0x0800a5f5
 800a5ec:	0800a66b 	.word	0x0800a66b
 800a5f0:	0800a67f 	.word	0x0800a67f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	18d1      	adds	r1, r2, r3
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a614:	f7ff ff5c 	bl	800a4d0 <prvInsertTimerInActiveList>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d06c      	beq.n	800a6f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a624:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d061      	beq.n	800a6f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	441a      	add	r2, r3
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a646:	f7ff fe01 	bl	800a24c <xTimerGenericCommand>
 800a64a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d152      	bne.n	800a6f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	61bb      	str	r3, [r7, #24]
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop
 800a668:	e7fd      	b.n	800a666 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a670:	f023 0301 	bic.w	r3, r3, #1
 800a674:	b2da      	uxtb	r2, r3
 800a676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a678:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a67c:	e03d      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	617b      	str	r3, [r7, #20]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	699a      	ldr	r2, [r3, #24]
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	18d1      	adds	r1, r2, r3
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6c4:	f7ff ff04 	bl	800a4d0 <prvInsertTimerInActiveList>
					break;
 800a6c8:	e017      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6d0:	f003 0302 	and.w	r3, r3, #2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d103      	bne.n	800a6e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a6d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6da:	f000 fbe5 	bl	800aea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6de:	e00c      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6e6:	f023 0301 	bic.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6f2:	e002      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a6f4:	bf00      	nop
 800a6f6:	e000      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
					break;
 800a6f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6fa:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <prvProcessReceivedCommands+0x1c8>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	1d39      	adds	r1, r7, #4
 800a700:	2200      	movs	r2, #0
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fbce 	bl	8008ea4 <xQueueReceive>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f47f af26 	bne.w	800a55c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	3730      	adds	r7, #48	@ 0x30
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	200017d4 	.word	0x200017d4

0800a720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a726:	e049      	b.n	800a7bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a728:	4b2e      	ldr	r3, [pc, #184]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a732:	4b2c      	ldr	r3, [pc, #176]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3304      	adds	r3, #4
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe f8db 	bl	80088fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d02f      	beq.n	800a7bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	4413      	add	r3, r2
 800a764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d90e      	bls.n	800a78c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a77a:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3304      	adds	r3, #4
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f7fe f880 	bl	800888a <vListInsert>
 800a78a:	e017      	b.n	800a7bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a78c:	2300      	movs	r3, #0
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	2300      	movs	r3, #0
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	2100      	movs	r1, #0
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7ff fd58 	bl	800a24c <xTimerGenericCommand>
 800a79c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10b      	bne.n	800a7bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	603b      	str	r3, [r7, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	e7fd      	b.n	800a7b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7bc:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1b0      	bne.n	800a728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7c6:	4b07      	ldr	r3, [pc, #28]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <prvSwitchTimerLists+0xc8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a04      	ldr	r2, [pc, #16]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a7d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7d4:	4a04      	ldr	r2, [pc, #16]	@ (800a7e8 <prvSwitchTimerLists+0xc8>)
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	6013      	str	r3, [r2, #0]
}
 800a7da:	bf00      	nop
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200017cc 	.word	0x200017cc
 800a7e8:	200017d0 	.word	0x200017d0

0800a7ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7f2:	f000 f969 	bl	800aac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7f6:	4b15      	ldr	r3, [pc, #84]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d120      	bne.n	800a840 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7fe:	4814      	ldr	r0, [pc, #80]	@ (800a850 <prvCheckForValidListAndQueue+0x64>)
 800a800:	f7fd fff2 	bl	80087e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a804:	4813      	ldr	r0, [pc, #76]	@ (800a854 <prvCheckForValidListAndQueue+0x68>)
 800a806:	f7fd ffef 	bl	80087e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a80a:	4b13      	ldr	r3, [pc, #76]	@ (800a858 <prvCheckForValidListAndQueue+0x6c>)
 800a80c:	4a10      	ldr	r2, [pc, #64]	@ (800a850 <prvCheckForValidListAndQueue+0x64>)
 800a80e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a810:	4b12      	ldr	r3, [pc, #72]	@ (800a85c <prvCheckForValidListAndQueue+0x70>)
 800a812:	4a10      	ldr	r2, [pc, #64]	@ (800a854 <prvCheckForValidListAndQueue+0x68>)
 800a814:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a816:	2300      	movs	r3, #0
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4b11      	ldr	r3, [pc, #68]	@ (800a860 <prvCheckForValidListAndQueue+0x74>)
 800a81c:	4a11      	ldr	r2, [pc, #68]	@ (800a864 <prvCheckForValidListAndQueue+0x78>)
 800a81e:	2110      	movs	r1, #16
 800a820:	200a      	movs	r0, #10
 800a822:	f7fe f8ff 	bl	8008a24 <xQueueGenericCreateStatic>
 800a826:	4603      	mov	r3, r0
 800a828:	4a08      	ldr	r2, [pc, #32]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a82a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a82c:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d005      	beq.n	800a840 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a834:	4b05      	ldr	r3, [pc, #20]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	490b      	ldr	r1, [pc, #44]	@ (800a868 <prvCheckForValidListAndQueue+0x7c>)
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fd24 	bl	8009288 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a840:	f000 f974 	bl	800ab2c <vPortExitCritical>
}
 800a844:	bf00      	nop
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	200017d4 	.word	0x200017d4
 800a850:	200017a4 	.word	0x200017a4
 800a854:	200017b8 	.word	0x200017b8
 800a858:	200017cc 	.word	0x200017cc
 800a85c:	200017d0 	.word	0x200017d0
 800a860:	20001880 	.word	0x20001880
 800a864:	200017e0 	.word	0x200017e0
 800a868:	0800cdd4 	.word	0x0800cdd4

0800a86c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3b04      	subs	r3, #4
 800a87c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3b04      	subs	r3, #4
 800a88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	f023 0201 	bic.w	r2, r3, #1
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3b04      	subs	r3, #4
 800a89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a89c:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d0 <pxPortInitialiseStack+0x64>)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3b14      	subs	r3, #20
 800a8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3b04      	subs	r3, #4
 800a8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f06f 0202 	mvn.w	r2, #2
 800a8ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3b20      	subs	r3, #32
 800a8c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	0800a8d5 	.word	0x0800a8d5

0800a8d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8de:	4b13      	ldr	r3, [pc, #76]	@ (800a92c <prvTaskExitError+0x58>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e6:	d00b      	beq.n	800a900 <prvTaskExitError+0x2c>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	60fb      	str	r3, [r7, #12]
}
 800a8fa:	bf00      	nop
 800a8fc:	bf00      	nop
 800a8fe:	e7fd      	b.n	800a8fc <prvTaskExitError+0x28>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	60bb      	str	r3, [r7, #8]
}
 800a912:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a914:	bf00      	nop
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0fc      	beq.n	800a916 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	20000088 	.word	0x20000088

0800a930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a930:	4b07      	ldr	r3, [pc, #28]	@ (800a950 <pxCurrentTCBConst2>)
 800a932:	6819      	ldr	r1, [r3, #0]
 800a934:	6808      	ldr	r0, [r1, #0]
 800a936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93a:	f380 8809 	msr	PSP, r0
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8811 	msr	BASEPRI, r0
 800a94a:	4770      	bx	lr
 800a94c:	f3af 8000 	nop.w

0800a950 <pxCurrentTCBConst2>:
 800a950:	200012a4 	.word	0x200012a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop

0800a958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a958:	4808      	ldr	r0, [pc, #32]	@ (800a97c <prvPortStartFirstTask+0x24>)
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	6800      	ldr	r0, [r0, #0]
 800a95e:	f380 8808 	msr	MSP, r0
 800a962:	f04f 0000 	mov.w	r0, #0
 800a966:	f380 8814 	msr	CONTROL, r0
 800a96a:	b662      	cpsie	i
 800a96c:	b661      	cpsie	f
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	df00      	svc	0
 800a978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a97a:	bf00      	nop
 800a97c:	e000ed08 	.word	0xe000ed08

0800a980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a986:	4b47      	ldr	r3, [pc, #284]	@ (800aaa4 <xPortStartScheduler+0x124>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a47      	ldr	r2, [pc, #284]	@ (800aaa8 <xPortStartScheduler+0x128>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d10b      	bne.n	800a9a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	613b      	str	r3, [r7, #16]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9a8:	4b3e      	ldr	r3, [pc, #248]	@ (800aaa4 <xPortStartScheduler+0x124>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a3f      	ldr	r2, [pc, #252]	@ (800aaac <xPortStartScheduler+0x12c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d10b      	bne.n	800a9ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	60fb      	str	r3, [r7, #12]
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	e7fd      	b.n	800a9c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9ca:	4b39      	ldr	r3, [pc, #228]	@ (800aab0 <xPortStartScheduler+0x130>)
 800a9cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	22ff      	movs	r2, #255	@ 0xff
 800a9da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	4b31      	ldr	r3, [pc, #196]	@ (800aab4 <xPortStartScheduler+0x134>)
 800a9f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9f2:	4b31      	ldr	r3, [pc, #196]	@ (800aab8 <xPortStartScheduler+0x138>)
 800a9f4:	2207      	movs	r2, #7
 800a9f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9f8:	e009      	b.n	800aa0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a9fa:	4b2f      	ldr	r3, [pc, #188]	@ (800aab8 <xPortStartScheduler+0x138>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	4a2d      	ldr	r2, [pc, #180]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa16:	2b80      	cmp	r3, #128	@ 0x80
 800aa18:	d0ef      	beq.n	800a9fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa1a:	4b27      	ldr	r3, [pc, #156]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f1c3 0307 	rsb	r3, r3, #7
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d00b      	beq.n	800aa3e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	60bb      	str	r3, [r7, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	e7fd      	b.n	800aa3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa3e:	4b1e      	ldr	r3, [pc, #120]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	4a1c      	ldr	r2, [pc, #112]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa48:	4b1b      	ldr	r3, [pc, #108]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa50:	4a19      	ldr	r2, [pc, #100]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa5c:	4b17      	ldr	r3, [pc, #92]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a16      	ldr	r2, [pc, #88]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa68:	4b14      	ldr	r3, [pc, #80]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a13      	ldr	r2, [pc, #76]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa74:	f000 f8da 	bl	800ac2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa78:	4b11      	ldr	r3, [pc, #68]	@ (800aac0 <xPortStartScheduler+0x140>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa7e:	f000 f8f9 	bl	800ac74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa82:	4b10      	ldr	r3, [pc, #64]	@ (800aac4 <xPortStartScheduler+0x144>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a0f      	ldr	r2, [pc, #60]	@ (800aac4 <xPortStartScheduler+0x144>)
 800aa88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa8e:	f7ff ff63 	bl	800a958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa92:	f7ff f831 	bl	8009af8 <vTaskSwitchContext>
	prvTaskExitError();
 800aa96:	f7ff ff1d 	bl	800a8d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	e000ed00 	.word	0xe000ed00
 800aaa8:	410fc271 	.word	0x410fc271
 800aaac:	410fc270 	.word	0x410fc270
 800aab0:	e000e400 	.word	0xe000e400
 800aab4:	200018d0 	.word	0x200018d0
 800aab8:	200018d4 	.word	0x200018d4
 800aabc:	e000ed20 	.word	0xe000ed20
 800aac0:	20000088 	.word	0x20000088
 800aac4:	e000ef34 	.word	0xe000ef34

0800aac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	607b      	str	r3, [r7, #4]
}
 800aae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aae2:	4b10      	ldr	r3, [pc, #64]	@ (800ab24 <vPortEnterCritical+0x5c>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3301      	adds	r3, #1
 800aae8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab24 <vPortEnterCritical+0x5c>)
 800aaea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aaec:	4b0d      	ldr	r3, [pc, #52]	@ (800ab24 <vPortEnterCritical+0x5c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d110      	bne.n	800ab16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aaf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab28 <vPortEnterCritical+0x60>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00b      	beq.n	800ab16 <vPortEnterCritical+0x4e>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	603b      	str	r3, [r7, #0]
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	e7fd      	b.n	800ab12 <vPortEnterCritical+0x4a>
	}
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20000088 	.word	0x20000088
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab32:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10b      	bne.n	800ab52 <vPortExitCritical+0x26>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	607b      	str	r3, [r7, #4]
}
 800ab4c:	bf00      	nop
 800ab4e:	bf00      	nop
 800ab50:	e7fd      	b.n	800ab4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab52:	4b0a      	ldr	r3, [pc, #40]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	4a08      	ldr	r2, [pc, #32]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab5c:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d105      	bne.n	800ab70 <vPortExitCritical+0x44>
 800ab64:	2300      	movs	r3, #0
 800ab66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	f383 8811 	msr	BASEPRI, r3
}
 800ab6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	20000088 	.word	0x20000088

0800ab80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab80:	f3ef 8009 	mrs	r0, PSP
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	4b15      	ldr	r3, [pc, #84]	@ (800abe0 <pxCurrentTCBConst>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	f01e 0f10 	tst.w	lr, #16
 800ab90:	bf08      	it	eq
 800ab92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	6010      	str	r0, [r2, #0]
 800ab9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aba4:	f380 8811 	msr	BASEPRI, r0
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f7fe ffa2 	bl	8009af8 <vTaskSwitchContext>
 800abb4:	f04f 0000 	mov.w	r0, #0
 800abb8:	f380 8811 	msr	BASEPRI, r0
 800abbc:	bc09      	pop	{r0, r3}
 800abbe:	6819      	ldr	r1, [r3, #0]
 800abc0:	6808      	ldr	r0, [r1, #0]
 800abc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc6:	f01e 0f10 	tst.w	lr, #16
 800abca:	bf08      	it	eq
 800abcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abd0:	f380 8809 	msr	PSP, r0
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	f3af 8000 	nop.w

0800abe0 <pxCurrentTCBConst>:
 800abe0:	200012a4 	.word	0x200012a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop

0800abe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	607b      	str	r3, [r7, #4]
}
 800ac00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac02:	f7fe febf 	bl	8009984 <xTaskIncrementTick>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac0c:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <xPortSysTickHandler+0x40>)
 800ac0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	2300      	movs	r3, #0
 800ac16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	f383 8811 	msr	BASEPRI, r3
}
 800ac1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac30:	4b0b      	ldr	r3, [pc, #44]	@ (800ac60 <vPortSetupTimerInterrupt+0x34>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac36:	4b0b      	ldr	r3, [pc, #44]	@ (800ac64 <vPortSetupTimerInterrupt+0x38>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac68 <vPortSetupTimerInterrupt+0x3c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a0a      	ldr	r2, [pc, #40]	@ (800ac6c <vPortSetupTimerInterrupt+0x40>)
 800ac42:	fba2 2303 	umull	r2, r3, r2, r3
 800ac46:	099b      	lsrs	r3, r3, #6
 800ac48:	4a09      	ldr	r2, [pc, #36]	@ (800ac70 <vPortSetupTimerInterrupt+0x44>)
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac4e:	4b04      	ldr	r3, [pc, #16]	@ (800ac60 <vPortSetupTimerInterrupt+0x34>)
 800ac50:	2207      	movs	r2, #7
 800ac52:	601a      	str	r2, [r3, #0]
}
 800ac54:	bf00      	nop
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	e000e010 	.word	0xe000e010
 800ac64:	e000e018 	.word	0xe000e018
 800ac68:	20000030 	.word	0x20000030
 800ac6c:	10624dd3 	.word	0x10624dd3
 800ac70:	e000e014 	.word	0xe000e014

0800ac74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac84 <vPortEnableVFP+0x10>
 800ac78:	6801      	ldr	r1, [r0, #0]
 800ac7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac7e:	6001      	str	r1, [r0, #0]
 800ac80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac82:	bf00      	nop
 800ac84:	e000ed88 	.word	0xe000ed88

0800ac88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac8e:	f3ef 8305 	mrs	r3, IPSR
 800ac92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b0f      	cmp	r3, #15
 800ac98:	d915      	bls.n	800acc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac9a:	4a18      	ldr	r2, [pc, #96]	@ (800acfc <vPortValidateInterruptPriority+0x74>)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aca4:	4b16      	ldr	r3, [pc, #88]	@ (800ad00 <vPortValidateInterruptPriority+0x78>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	7afa      	ldrb	r2, [r7, #11]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d20b      	bcs.n	800acc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	607b      	str	r3, [r7, #4]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad04 <vPortValidateInterruptPriority+0x7c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acce:	4b0e      	ldr	r3, [pc, #56]	@ (800ad08 <vPortValidateInterruptPriority+0x80>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d90b      	bls.n	800acee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	603b      	str	r3, [r7, #0]
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	e7fd      	b.n	800acea <vPortValidateInterruptPriority+0x62>
	}
 800acee:	bf00      	nop
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	e000e3f0 	.word	0xe000e3f0
 800ad00:	200018d0 	.word	0x200018d0
 800ad04:	e000ed0c 	.word	0xe000ed0c
 800ad08:	200018d4 	.word	0x200018d4

0800ad0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	@ 0x28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad14:	2300      	movs	r3, #0
 800ad16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad18:	f7fe fd78 	bl	800980c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae90 <pvPortMalloc+0x184>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad24:	f000 f924 	bl	800af70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad28:	4b5a      	ldr	r3, [pc, #360]	@ (800ae94 <pvPortMalloc+0x188>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f040 8095 	bne.w	800ae60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01e      	beq.n	800ad7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad3c:	2208      	movs	r2, #8
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4413      	add	r3, r2
 800ad42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f003 0307 	and.w	r3, r3, #7
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d015      	beq.n	800ad7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f023 0307 	bic.w	r3, r3, #7
 800ad54:	3308      	adds	r3, #8
 800ad56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00b      	beq.n	800ad7a <pvPortMalloc+0x6e>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	617b      	str	r3, [r7, #20]
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop
 800ad78:	e7fd      	b.n	800ad76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d06f      	beq.n	800ae60 <pvPortMalloc+0x154>
 800ad80:	4b45      	ldr	r3, [pc, #276]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d86a      	bhi.n	800ae60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad8a:	4b44      	ldr	r3, [pc, #272]	@ (800ae9c <pvPortMalloc+0x190>)
 800ad8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad8e:	4b43      	ldr	r3, [pc, #268]	@ (800ae9c <pvPortMalloc+0x190>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad94:	e004      	b.n	800ada0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d903      	bls.n	800adb2 <pvPortMalloc+0xa6>
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1f1      	bne.n	800ad96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adb2:	4b37      	ldr	r3, [pc, #220]	@ (800ae90 <pvPortMalloc+0x184>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb8:	429a      	cmp	r2, r3
 800adba:	d051      	beq.n	800ae60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2208      	movs	r2, #8
 800adc2:	4413      	add	r3, r2
 800adc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	1ad2      	subs	r2, r2, r3
 800add6:	2308      	movs	r3, #8
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	429a      	cmp	r2, r3
 800addc:	d920      	bls.n	800ae20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4413      	add	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <pvPortMalloc+0xfc>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	613b      	str	r3, [r7, #16]
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	1ad2      	subs	r2, r2, r3
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae1a:	69b8      	ldr	r0, [r7, #24]
 800ae1c:	f000 f90a 	bl	800b034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae20:	4b1d      	ldr	r3, [pc, #116]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	4b1b      	ldr	r3, [pc, #108]	@ (800aea0 <pvPortMalloc+0x194>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d203      	bcs.n	800ae42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae3a:	4b17      	ldr	r3, [pc, #92]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a18      	ldr	r2, [pc, #96]	@ (800aea0 <pvPortMalloc+0x194>)
 800ae40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	4b13      	ldr	r3, [pc, #76]	@ (800ae94 <pvPortMalloc+0x188>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae56:	4b13      	ldr	r3, [pc, #76]	@ (800aea4 <pvPortMalloc+0x198>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	4a11      	ldr	r2, [pc, #68]	@ (800aea4 <pvPortMalloc+0x198>)
 800ae5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae60:	f7fe fce2 	bl	8009828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00b      	beq.n	800ae86 <pvPortMalloc+0x17a>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	60fb      	str	r3, [r7, #12]
}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	e7fd      	b.n	800ae82 <pvPortMalloc+0x176>
	return pvReturn;
 800ae86:	69fb      	ldr	r3, [r7, #28]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3728      	adds	r7, #40	@ 0x28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	200054e0 	.word	0x200054e0
 800ae94:	200054f4 	.word	0x200054f4
 800ae98:	200054e4 	.word	0x200054e4
 800ae9c:	200054d8 	.word	0x200054d8
 800aea0:	200054e8 	.word	0x200054e8
 800aea4:	200054ec 	.word	0x200054ec

0800aea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d04f      	beq.n	800af5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeba:	2308      	movs	r3, #8
 800aebc:	425b      	negs	r3, r3
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4413      	add	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	4b25      	ldr	r3, [pc, #148]	@ (800af64 <vPortFree+0xbc>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4013      	ands	r3, r2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10b      	bne.n	800aeee <vPortFree+0x46>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	60fb      	str	r3, [r7, #12]
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	e7fd      	b.n	800aeea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <vPortFree+0x66>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	60bb      	str	r3, [r7, #8]
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	e7fd      	b.n	800af0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	4b14      	ldr	r3, [pc, #80]	@ (800af64 <vPortFree+0xbc>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4013      	ands	r3, r2
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01e      	beq.n	800af5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d11a      	bne.n	800af5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	4b0e      	ldr	r3, [pc, #56]	@ (800af64 <vPortFree+0xbc>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	43db      	mvns	r3, r3
 800af2e:	401a      	ands	r2, r3
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af34:	f7fe fc6a 	bl	800980c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	4b0a      	ldr	r3, [pc, #40]	@ (800af68 <vPortFree+0xc0>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4413      	add	r3, r2
 800af42:	4a09      	ldr	r2, [pc, #36]	@ (800af68 <vPortFree+0xc0>)
 800af44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	f000 f874 	bl	800b034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af4c:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <vPortFree+0xc4>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3301      	adds	r3, #1
 800af52:	4a06      	ldr	r2, [pc, #24]	@ (800af6c <vPortFree+0xc4>)
 800af54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af56:	f7fe fc67 	bl	8009828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af5a:	bf00      	nop
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	200054f4 	.word	0x200054f4
 800af68:	200054e4 	.word	0x200054e4
 800af6c:	200054f0 	.word	0x200054f0

0800af70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af7c:	4b27      	ldr	r3, [pc, #156]	@ (800b01c <prvHeapInit+0xac>)
 800af7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f003 0307 	and.w	r3, r3, #7
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00c      	beq.n	800afa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3307      	adds	r3, #7
 800af8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f023 0307 	bic.w	r3, r3, #7
 800af96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	4a1f      	ldr	r2, [pc, #124]	@ (800b01c <prvHeapInit+0xac>)
 800afa0:	4413      	add	r3, r2
 800afa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afa8:	4a1d      	ldr	r2, [pc, #116]	@ (800b020 <prvHeapInit+0xb0>)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afae:	4b1c      	ldr	r3, [pc, #112]	@ (800b020 <prvHeapInit+0xb0>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	4413      	add	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afbc:	2208      	movs	r2, #8
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	1a9b      	subs	r3, r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f023 0307 	bic.w	r3, r3, #7
 800afca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4a15      	ldr	r2, [pc, #84]	@ (800b024 <prvHeapInit+0xb4>)
 800afd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afd2:	4b14      	ldr	r3, [pc, #80]	@ (800b024 <prvHeapInit+0xb4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afda:	4b12      	ldr	r3, [pc, #72]	@ (800b024 <prvHeapInit+0xb4>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	1ad2      	subs	r2, r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aff0:	4b0c      	ldr	r3, [pc, #48]	@ (800b024 <prvHeapInit+0xb4>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	4a0a      	ldr	r2, [pc, #40]	@ (800b028 <prvHeapInit+0xb8>)
 800affe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4a09      	ldr	r2, [pc, #36]	@ (800b02c <prvHeapInit+0xbc>)
 800b006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b008:	4b09      	ldr	r3, [pc, #36]	@ (800b030 <prvHeapInit+0xc0>)
 800b00a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b00e:	601a      	str	r2, [r3, #0]
}
 800b010:	bf00      	nop
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	200018d8 	.word	0x200018d8
 800b020:	200054d8 	.word	0x200054d8
 800b024:	200054e0 	.word	0x200054e0
 800b028:	200054e8 	.word	0x200054e8
 800b02c:	200054e4 	.word	0x200054e4
 800b030:	200054f4 	.word	0x200054f4

0800b034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b03c:	4b28      	ldr	r3, [pc, #160]	@ (800b0e0 <prvInsertBlockIntoFreeList+0xac>)
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	e002      	b.n	800b048 <prvInsertBlockIntoFreeList+0x14>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d8f7      	bhi.n	800b042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	4413      	add	r3, r2
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	429a      	cmp	r2, r3
 800b062:	d108      	bne.n	800b076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	441a      	add	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	441a      	add	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d118      	bne.n	800b0bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	4b15      	ldr	r3, [pc, #84]	@ (800b0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d00d      	beq.n	800b0b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	441a      	add	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	e008      	b.n	800b0c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	e003      	b.n	800b0c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d002      	beq.n	800b0d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0d2:	bf00      	nop
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	200054d8 	.word	0x200054d8
 800b0e4:	200054e0 	.word	0x200054e0

0800b0e8 <malloc>:
 800b0e8:	4b02      	ldr	r3, [pc, #8]	@ (800b0f4 <malloc+0xc>)
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f000 b82d 	b.w	800b14c <_malloc_r>
 800b0f2:	bf00      	nop
 800b0f4:	20000098 	.word	0x20000098

0800b0f8 <free>:
 800b0f8:	4b02      	ldr	r3, [pc, #8]	@ (800b104 <free+0xc>)
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	f000 bc23 	b.w	800b948 <_free_r>
 800b102:	bf00      	nop
 800b104:	20000098 	.word	0x20000098

0800b108 <sbrk_aligned>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	4e0f      	ldr	r6, [pc, #60]	@ (800b148 <sbrk_aligned+0x40>)
 800b10c:	460c      	mov	r4, r1
 800b10e:	6831      	ldr	r1, [r6, #0]
 800b110:	4605      	mov	r5, r0
 800b112:	b911      	cbnz	r1, 800b11a <sbrk_aligned+0x12>
 800b114:	f000 fbb2 	bl	800b87c <_sbrk_r>
 800b118:	6030      	str	r0, [r6, #0]
 800b11a:	4621      	mov	r1, r4
 800b11c:	4628      	mov	r0, r5
 800b11e:	f000 fbad 	bl	800b87c <_sbrk_r>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	d103      	bne.n	800b12e <sbrk_aligned+0x26>
 800b126:	f04f 34ff 	mov.w	r4, #4294967295
 800b12a:	4620      	mov	r0, r4
 800b12c:	bd70      	pop	{r4, r5, r6, pc}
 800b12e:	1cc4      	adds	r4, r0, #3
 800b130:	f024 0403 	bic.w	r4, r4, #3
 800b134:	42a0      	cmp	r0, r4
 800b136:	d0f8      	beq.n	800b12a <sbrk_aligned+0x22>
 800b138:	1a21      	subs	r1, r4, r0
 800b13a:	4628      	mov	r0, r5
 800b13c:	f000 fb9e 	bl	800b87c <_sbrk_r>
 800b140:	3001      	adds	r0, #1
 800b142:	d1f2      	bne.n	800b12a <sbrk_aligned+0x22>
 800b144:	e7ef      	b.n	800b126 <sbrk_aligned+0x1e>
 800b146:	bf00      	nop
 800b148:	200054f8 	.word	0x200054f8

0800b14c <_malloc_r>:
 800b14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b150:	1ccd      	adds	r5, r1, #3
 800b152:	f025 0503 	bic.w	r5, r5, #3
 800b156:	3508      	adds	r5, #8
 800b158:	2d0c      	cmp	r5, #12
 800b15a:	bf38      	it	cc
 800b15c:	250c      	movcc	r5, #12
 800b15e:	2d00      	cmp	r5, #0
 800b160:	4606      	mov	r6, r0
 800b162:	db01      	blt.n	800b168 <_malloc_r+0x1c>
 800b164:	42a9      	cmp	r1, r5
 800b166:	d904      	bls.n	800b172 <_malloc_r+0x26>
 800b168:	230c      	movs	r3, #12
 800b16a:	6033      	str	r3, [r6, #0]
 800b16c:	2000      	movs	r0, #0
 800b16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b248 <_malloc_r+0xfc>
 800b176:	f000 f869 	bl	800b24c <__malloc_lock>
 800b17a:	f8d8 3000 	ldr.w	r3, [r8]
 800b17e:	461c      	mov	r4, r3
 800b180:	bb44      	cbnz	r4, 800b1d4 <_malloc_r+0x88>
 800b182:	4629      	mov	r1, r5
 800b184:	4630      	mov	r0, r6
 800b186:	f7ff ffbf 	bl	800b108 <sbrk_aligned>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	4604      	mov	r4, r0
 800b18e:	d158      	bne.n	800b242 <_malloc_r+0xf6>
 800b190:	f8d8 4000 	ldr.w	r4, [r8]
 800b194:	4627      	mov	r7, r4
 800b196:	2f00      	cmp	r7, #0
 800b198:	d143      	bne.n	800b222 <_malloc_r+0xd6>
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d04b      	beq.n	800b236 <_malloc_r+0xea>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	eb04 0903 	add.w	r9, r4, r3
 800b1a8:	f000 fb68 	bl	800b87c <_sbrk_r>
 800b1ac:	4581      	cmp	r9, r0
 800b1ae:	d142      	bne.n	800b236 <_malloc_r+0xea>
 800b1b0:	6821      	ldr	r1, [r4, #0]
 800b1b2:	1a6d      	subs	r5, r5, r1
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ffa6 	bl	800b108 <sbrk_aligned>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d03a      	beq.n	800b236 <_malloc_r+0xea>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	442b      	add	r3, r5
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	bb62      	cbnz	r2, 800b228 <_malloc_r+0xdc>
 800b1ce:	f8c8 7000 	str.w	r7, [r8]
 800b1d2:	e00f      	b.n	800b1f4 <_malloc_r+0xa8>
 800b1d4:	6822      	ldr	r2, [r4, #0]
 800b1d6:	1b52      	subs	r2, r2, r5
 800b1d8:	d420      	bmi.n	800b21c <_malloc_r+0xd0>
 800b1da:	2a0b      	cmp	r2, #11
 800b1dc:	d917      	bls.n	800b20e <_malloc_r+0xc2>
 800b1de:	1961      	adds	r1, r4, r5
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	6025      	str	r5, [r4, #0]
 800b1e4:	bf18      	it	ne
 800b1e6:	6059      	strne	r1, [r3, #4]
 800b1e8:	6863      	ldr	r3, [r4, #4]
 800b1ea:	bf08      	it	eq
 800b1ec:	f8c8 1000 	streq.w	r1, [r8]
 800b1f0:	5162      	str	r2, [r4, r5]
 800b1f2:	604b      	str	r3, [r1, #4]
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f000 f82f 	bl	800b258 <__malloc_unlock>
 800b1fa:	f104 000b 	add.w	r0, r4, #11
 800b1fe:	1d23      	adds	r3, r4, #4
 800b200:	f020 0007 	bic.w	r0, r0, #7
 800b204:	1ac2      	subs	r2, r0, r3
 800b206:	bf1c      	itt	ne
 800b208:	1a1b      	subne	r3, r3, r0
 800b20a:	50a3      	strne	r3, [r4, r2]
 800b20c:	e7af      	b.n	800b16e <_malloc_r+0x22>
 800b20e:	6862      	ldr	r2, [r4, #4]
 800b210:	42a3      	cmp	r3, r4
 800b212:	bf0c      	ite	eq
 800b214:	f8c8 2000 	streq.w	r2, [r8]
 800b218:	605a      	strne	r2, [r3, #4]
 800b21a:	e7eb      	b.n	800b1f4 <_malloc_r+0xa8>
 800b21c:	4623      	mov	r3, r4
 800b21e:	6864      	ldr	r4, [r4, #4]
 800b220:	e7ae      	b.n	800b180 <_malloc_r+0x34>
 800b222:	463c      	mov	r4, r7
 800b224:	687f      	ldr	r7, [r7, #4]
 800b226:	e7b6      	b.n	800b196 <_malloc_r+0x4a>
 800b228:	461a      	mov	r2, r3
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	d1fb      	bne.n	800b228 <_malloc_r+0xdc>
 800b230:	2300      	movs	r3, #0
 800b232:	6053      	str	r3, [r2, #4]
 800b234:	e7de      	b.n	800b1f4 <_malloc_r+0xa8>
 800b236:	230c      	movs	r3, #12
 800b238:	6033      	str	r3, [r6, #0]
 800b23a:	4630      	mov	r0, r6
 800b23c:	f000 f80c 	bl	800b258 <__malloc_unlock>
 800b240:	e794      	b.n	800b16c <_malloc_r+0x20>
 800b242:	6005      	str	r5, [r0, #0]
 800b244:	e7d6      	b.n	800b1f4 <_malloc_r+0xa8>
 800b246:	bf00      	nop
 800b248:	200054fc 	.word	0x200054fc

0800b24c <__malloc_lock>:
 800b24c:	4801      	ldr	r0, [pc, #4]	@ (800b254 <__malloc_lock+0x8>)
 800b24e:	f000 bb62 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800b252:	bf00      	nop
 800b254:	20005640 	.word	0x20005640

0800b258 <__malloc_unlock>:
 800b258:	4801      	ldr	r0, [pc, #4]	@ (800b260 <__malloc_unlock+0x8>)
 800b25a:	f000 bb5d 	b.w	800b918 <__retarget_lock_release_recursive>
 800b25e:	bf00      	nop
 800b260:	20005640 	.word	0x20005640

0800b264 <std>:
 800b264:	2300      	movs	r3, #0
 800b266:	b510      	push	{r4, lr}
 800b268:	4604      	mov	r4, r0
 800b26a:	e9c0 3300 	strd	r3, r3, [r0]
 800b26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b272:	6083      	str	r3, [r0, #8]
 800b274:	8181      	strh	r1, [r0, #12]
 800b276:	6643      	str	r3, [r0, #100]	@ 0x64
 800b278:	81c2      	strh	r2, [r0, #14]
 800b27a:	6183      	str	r3, [r0, #24]
 800b27c:	4619      	mov	r1, r3
 800b27e:	2208      	movs	r2, #8
 800b280:	305c      	adds	r0, #92	@ 0x5c
 800b282:	f000 fa21 	bl	800b6c8 <memset>
 800b286:	4b0d      	ldr	r3, [pc, #52]	@ (800b2bc <std+0x58>)
 800b288:	6263      	str	r3, [r4, #36]	@ 0x24
 800b28a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c0 <std+0x5c>)
 800b28c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b28e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c4 <std+0x60>)
 800b290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b292:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c8 <std+0x64>)
 800b294:	6323      	str	r3, [r4, #48]	@ 0x30
 800b296:	4b0d      	ldr	r3, [pc, #52]	@ (800b2cc <std+0x68>)
 800b298:	6224      	str	r4, [r4, #32]
 800b29a:	429c      	cmp	r4, r3
 800b29c:	d006      	beq.n	800b2ac <std+0x48>
 800b29e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2a2:	4294      	cmp	r4, r2
 800b2a4:	d002      	beq.n	800b2ac <std+0x48>
 800b2a6:	33d0      	adds	r3, #208	@ 0xd0
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	d105      	bne.n	800b2b8 <std+0x54>
 800b2ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b4:	f000 bb2e 	b.w	800b914 <__retarget_lock_init_recursive>
 800b2b8:	bd10      	pop	{r4, pc}
 800b2ba:	bf00      	nop
 800b2bc:	0800b519 	.word	0x0800b519
 800b2c0:	0800b53b 	.word	0x0800b53b
 800b2c4:	0800b573 	.word	0x0800b573
 800b2c8:	0800b597 	.word	0x0800b597
 800b2cc:	20005500 	.word	0x20005500

0800b2d0 <stdio_exit_handler>:
 800b2d0:	4a02      	ldr	r2, [pc, #8]	@ (800b2dc <stdio_exit_handler+0xc>)
 800b2d2:	4903      	ldr	r1, [pc, #12]	@ (800b2e0 <stdio_exit_handler+0x10>)
 800b2d4:	4803      	ldr	r0, [pc, #12]	@ (800b2e4 <stdio_exit_handler+0x14>)
 800b2d6:	f000 b869 	b.w	800b3ac <_fwalk_sglue>
 800b2da:	bf00      	nop
 800b2dc:	2000008c 	.word	0x2000008c
 800b2e0:	0800c335 	.word	0x0800c335
 800b2e4:	2000009c 	.word	0x2000009c

0800b2e8 <cleanup_stdio>:
 800b2e8:	6841      	ldr	r1, [r0, #4]
 800b2ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b31c <cleanup_stdio+0x34>)
 800b2ec:	4299      	cmp	r1, r3
 800b2ee:	b510      	push	{r4, lr}
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	d001      	beq.n	800b2f8 <cleanup_stdio+0x10>
 800b2f4:	f001 f81e 	bl	800c334 <_fflush_r>
 800b2f8:	68a1      	ldr	r1, [r4, #8]
 800b2fa:	4b09      	ldr	r3, [pc, #36]	@ (800b320 <cleanup_stdio+0x38>)
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	d002      	beq.n	800b306 <cleanup_stdio+0x1e>
 800b300:	4620      	mov	r0, r4
 800b302:	f001 f817 	bl	800c334 <_fflush_r>
 800b306:	68e1      	ldr	r1, [r4, #12]
 800b308:	4b06      	ldr	r3, [pc, #24]	@ (800b324 <cleanup_stdio+0x3c>)
 800b30a:	4299      	cmp	r1, r3
 800b30c:	d004      	beq.n	800b318 <cleanup_stdio+0x30>
 800b30e:	4620      	mov	r0, r4
 800b310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b314:	f001 b80e 	b.w	800c334 <_fflush_r>
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	20005500 	.word	0x20005500
 800b320:	20005568 	.word	0x20005568
 800b324:	200055d0 	.word	0x200055d0

0800b328 <global_stdio_init.part.0>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	4b0b      	ldr	r3, [pc, #44]	@ (800b358 <global_stdio_init.part.0+0x30>)
 800b32c:	4c0b      	ldr	r4, [pc, #44]	@ (800b35c <global_stdio_init.part.0+0x34>)
 800b32e:	4a0c      	ldr	r2, [pc, #48]	@ (800b360 <global_stdio_init.part.0+0x38>)
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	4620      	mov	r0, r4
 800b334:	2200      	movs	r2, #0
 800b336:	2104      	movs	r1, #4
 800b338:	f7ff ff94 	bl	800b264 <std>
 800b33c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b340:	2201      	movs	r2, #1
 800b342:	2109      	movs	r1, #9
 800b344:	f7ff ff8e 	bl	800b264 <std>
 800b348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b34c:	2202      	movs	r2, #2
 800b34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b352:	2112      	movs	r1, #18
 800b354:	f7ff bf86 	b.w	800b264 <std>
 800b358:	20005638 	.word	0x20005638
 800b35c:	20005500 	.word	0x20005500
 800b360:	0800b2d1 	.word	0x0800b2d1

0800b364 <__sfp_lock_acquire>:
 800b364:	4801      	ldr	r0, [pc, #4]	@ (800b36c <__sfp_lock_acquire+0x8>)
 800b366:	f000 bad6 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	20005641 	.word	0x20005641

0800b370 <__sfp_lock_release>:
 800b370:	4801      	ldr	r0, [pc, #4]	@ (800b378 <__sfp_lock_release+0x8>)
 800b372:	f000 bad1 	b.w	800b918 <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	20005641 	.word	0x20005641

0800b37c <__sinit>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	4604      	mov	r4, r0
 800b380:	f7ff fff0 	bl	800b364 <__sfp_lock_acquire>
 800b384:	6a23      	ldr	r3, [r4, #32]
 800b386:	b11b      	cbz	r3, 800b390 <__sinit+0x14>
 800b388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b38c:	f7ff bff0 	b.w	800b370 <__sfp_lock_release>
 800b390:	4b04      	ldr	r3, [pc, #16]	@ (800b3a4 <__sinit+0x28>)
 800b392:	6223      	str	r3, [r4, #32]
 800b394:	4b04      	ldr	r3, [pc, #16]	@ (800b3a8 <__sinit+0x2c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1f5      	bne.n	800b388 <__sinit+0xc>
 800b39c:	f7ff ffc4 	bl	800b328 <global_stdio_init.part.0>
 800b3a0:	e7f2      	b.n	800b388 <__sinit+0xc>
 800b3a2:	bf00      	nop
 800b3a4:	0800b2e9 	.word	0x0800b2e9
 800b3a8:	20005638 	.word	0x20005638

0800b3ac <_fwalk_sglue>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b3c0:	d505      	bpl.n	800b3ce <_fwalk_sglue+0x22>
 800b3c2:	6824      	ldr	r4, [r4, #0]
 800b3c4:	2c00      	cmp	r4, #0
 800b3c6:	d1f7      	bne.n	800b3b8 <_fwalk_sglue+0xc>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	89ab      	ldrh	r3, [r5, #12]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d907      	bls.n	800b3e4 <_fwalk_sglue+0x38>
 800b3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	d003      	beq.n	800b3e4 <_fwalk_sglue+0x38>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4638      	mov	r0, r7
 800b3e0:	47c0      	blx	r8
 800b3e2:	4306      	orrs	r6, r0
 800b3e4:	3568      	adds	r5, #104	@ 0x68
 800b3e6:	e7e9      	b.n	800b3bc <_fwalk_sglue+0x10>

0800b3e8 <iprintf>:
 800b3e8:	b40f      	push	{r0, r1, r2, r3}
 800b3ea:	b507      	push	{r0, r1, r2, lr}
 800b3ec:	4906      	ldr	r1, [pc, #24]	@ (800b408 <iprintf+0x20>)
 800b3ee:	ab04      	add	r3, sp, #16
 800b3f0:	6808      	ldr	r0, [r1, #0]
 800b3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f6:	6881      	ldr	r1, [r0, #8]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	f000 fc71 	bl	800bce0 <_vfiprintf_r>
 800b3fe:	b003      	add	sp, #12
 800b400:	f85d eb04 	ldr.w	lr, [sp], #4
 800b404:	b004      	add	sp, #16
 800b406:	4770      	bx	lr
 800b408:	20000098 	.word	0x20000098

0800b40c <putchar>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	@ (800b418 <putchar+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	6882      	ldr	r2, [r0, #8]
 800b414:	f001 b818 	b.w	800c448 <_putc_r>
 800b418:	20000098 	.word	0x20000098

0800b41c <_puts_r>:
 800b41c:	6a03      	ldr	r3, [r0, #32]
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	6884      	ldr	r4, [r0, #8]
 800b422:	4605      	mov	r5, r0
 800b424:	460e      	mov	r6, r1
 800b426:	b90b      	cbnz	r3, 800b42c <_puts_r+0x10>
 800b428:	f7ff ffa8 	bl	800b37c <__sinit>
 800b42c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b42e:	07db      	lsls	r3, r3, #31
 800b430:	d405      	bmi.n	800b43e <_puts_r+0x22>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	0598      	lsls	r0, r3, #22
 800b436:	d402      	bmi.n	800b43e <_puts_r+0x22>
 800b438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b43a:	f000 fa6c 	bl	800b916 <__retarget_lock_acquire_recursive>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	0719      	lsls	r1, r3, #28
 800b442:	d502      	bpl.n	800b44a <_puts_r+0x2e>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d135      	bne.n	800b4b6 <_puts_r+0x9a>
 800b44a:	4621      	mov	r1, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	f000 f8e5 	bl	800b61c <__swsetup_r>
 800b452:	b380      	cbz	r0, 800b4b6 <_puts_r+0x9a>
 800b454:	f04f 35ff 	mov.w	r5, #4294967295
 800b458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b45a:	07da      	lsls	r2, r3, #31
 800b45c:	d405      	bmi.n	800b46a <_puts_r+0x4e>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	059b      	lsls	r3, r3, #22
 800b462:	d402      	bmi.n	800b46a <_puts_r+0x4e>
 800b464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b466:	f000 fa57 	bl	800b918 <__retarget_lock_release_recursive>
 800b46a:	4628      	mov	r0, r5
 800b46c:	bd70      	pop	{r4, r5, r6, pc}
 800b46e:	2b00      	cmp	r3, #0
 800b470:	da04      	bge.n	800b47c <_puts_r+0x60>
 800b472:	69a2      	ldr	r2, [r4, #24]
 800b474:	429a      	cmp	r2, r3
 800b476:	dc17      	bgt.n	800b4a8 <_puts_r+0x8c>
 800b478:	290a      	cmp	r1, #10
 800b47a:	d015      	beq.n	800b4a8 <_puts_r+0x8c>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	6022      	str	r2, [r4, #0]
 800b482:	7019      	strb	r1, [r3, #0]
 800b484:	68a3      	ldr	r3, [r4, #8]
 800b486:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b48a:	3b01      	subs	r3, #1
 800b48c:	60a3      	str	r3, [r4, #8]
 800b48e:	2900      	cmp	r1, #0
 800b490:	d1ed      	bne.n	800b46e <_puts_r+0x52>
 800b492:	2b00      	cmp	r3, #0
 800b494:	da11      	bge.n	800b4ba <_puts_r+0x9e>
 800b496:	4622      	mov	r2, r4
 800b498:	210a      	movs	r1, #10
 800b49a:	4628      	mov	r0, r5
 800b49c:	f000 f87f 	bl	800b59e <__swbuf_r>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d0d7      	beq.n	800b454 <_puts_r+0x38>
 800b4a4:	250a      	movs	r5, #10
 800b4a6:	e7d7      	b.n	800b458 <_puts_r+0x3c>
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f000 f877 	bl	800b59e <__swbuf_r>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d1e7      	bne.n	800b484 <_puts_r+0x68>
 800b4b4:	e7ce      	b.n	800b454 <_puts_r+0x38>
 800b4b6:	3e01      	subs	r6, #1
 800b4b8:	e7e4      	b.n	800b484 <_puts_r+0x68>
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	6022      	str	r2, [r4, #0]
 800b4c0:	220a      	movs	r2, #10
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	e7ee      	b.n	800b4a4 <_puts_r+0x88>
	...

0800b4c8 <puts>:
 800b4c8:	4b02      	ldr	r3, [pc, #8]	@ (800b4d4 <puts+0xc>)
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	6818      	ldr	r0, [r3, #0]
 800b4ce:	f7ff bfa5 	b.w	800b41c <_puts_r>
 800b4d2:	bf00      	nop
 800b4d4:	20000098 	.word	0x20000098

0800b4d8 <siprintf>:
 800b4d8:	b40e      	push	{r1, r2, r3}
 800b4da:	b500      	push	{lr}
 800b4dc:	b09c      	sub	sp, #112	@ 0x70
 800b4de:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4e0:	9002      	str	r0, [sp, #8]
 800b4e2:	9006      	str	r0, [sp, #24]
 800b4e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4e8:	4809      	ldr	r0, [pc, #36]	@ (800b510 <siprintf+0x38>)
 800b4ea:	9107      	str	r1, [sp, #28]
 800b4ec:	9104      	str	r1, [sp, #16]
 800b4ee:	4909      	ldr	r1, [pc, #36]	@ (800b514 <siprintf+0x3c>)
 800b4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f4:	9105      	str	r1, [sp, #20]
 800b4f6:	6800      	ldr	r0, [r0, #0]
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	a902      	add	r1, sp, #8
 800b4fc:	f000 faca 	bl	800ba94 <_svfiprintf_r>
 800b500:	9b02      	ldr	r3, [sp, #8]
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	b01c      	add	sp, #112	@ 0x70
 800b508:	f85d eb04 	ldr.w	lr, [sp], #4
 800b50c:	b003      	add	sp, #12
 800b50e:	4770      	bx	lr
 800b510:	20000098 	.word	0x20000098
 800b514:	ffff0208 	.word	0xffff0208

0800b518 <__sread>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	460c      	mov	r4, r1
 800b51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b520:	f000 f99a 	bl	800b858 <_read_r>
 800b524:	2800      	cmp	r0, #0
 800b526:	bfab      	itete	ge
 800b528:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b52a:	89a3      	ldrhlt	r3, [r4, #12]
 800b52c:	181b      	addge	r3, r3, r0
 800b52e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b532:	bfac      	ite	ge
 800b534:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b536:	81a3      	strhlt	r3, [r4, #12]
 800b538:	bd10      	pop	{r4, pc}

0800b53a <__swrite>:
 800b53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53e:	461f      	mov	r7, r3
 800b540:	898b      	ldrh	r3, [r1, #12]
 800b542:	05db      	lsls	r3, r3, #23
 800b544:	4605      	mov	r5, r0
 800b546:	460c      	mov	r4, r1
 800b548:	4616      	mov	r6, r2
 800b54a:	d505      	bpl.n	800b558 <__swrite+0x1e>
 800b54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b550:	2302      	movs	r3, #2
 800b552:	2200      	movs	r2, #0
 800b554:	f000 f96e 	bl	800b834 <_lseek_r>
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b55e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	4632      	mov	r2, r6
 800b566:	463b      	mov	r3, r7
 800b568:	4628      	mov	r0, r5
 800b56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b56e:	f000 b995 	b.w	800b89c <_write_r>

0800b572 <__sseek>:
 800b572:	b510      	push	{r4, lr}
 800b574:	460c      	mov	r4, r1
 800b576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57a:	f000 f95b 	bl	800b834 <_lseek_r>
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	bf15      	itete	ne
 800b584:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b586:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b58a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b58e:	81a3      	strheq	r3, [r4, #12]
 800b590:	bf18      	it	ne
 800b592:	81a3      	strhne	r3, [r4, #12]
 800b594:	bd10      	pop	{r4, pc}

0800b596 <__sclose>:
 800b596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59a:	f000 b8e5 	b.w	800b768 <_close_r>

0800b59e <__swbuf_r>:
 800b59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	4614      	mov	r4, r2
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	b118      	cbz	r0, 800b5b0 <__swbuf_r+0x12>
 800b5a8:	6a03      	ldr	r3, [r0, #32]
 800b5aa:	b90b      	cbnz	r3, 800b5b0 <__swbuf_r+0x12>
 800b5ac:	f7ff fee6 	bl	800b37c <__sinit>
 800b5b0:	69a3      	ldr	r3, [r4, #24]
 800b5b2:	60a3      	str	r3, [r4, #8]
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	071a      	lsls	r2, r3, #28
 800b5b8:	d501      	bpl.n	800b5be <__swbuf_r+0x20>
 800b5ba:	6923      	ldr	r3, [r4, #16]
 800b5bc:	b943      	cbnz	r3, 800b5d0 <__swbuf_r+0x32>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f000 f82b 	bl	800b61c <__swsetup_r>
 800b5c6:	b118      	cbz	r0, 800b5d0 <__swbuf_r+0x32>
 800b5c8:	f04f 37ff 	mov.w	r7, #4294967295
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	6922      	ldr	r2, [r4, #16]
 800b5d4:	1a98      	subs	r0, r3, r2
 800b5d6:	6963      	ldr	r3, [r4, #20]
 800b5d8:	b2f6      	uxtb	r6, r6
 800b5da:	4283      	cmp	r3, r0
 800b5dc:	4637      	mov	r7, r6
 800b5de:	dc05      	bgt.n	800b5ec <__swbuf_r+0x4e>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 fea6 	bl	800c334 <_fflush_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1ed      	bne.n	800b5c8 <__swbuf_r+0x2a>
 800b5ec:	68a3      	ldr	r3, [r4, #8]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	60a3      	str	r3, [r4, #8]
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	6022      	str	r2, [r4, #0]
 800b5f8:	701e      	strb	r6, [r3, #0]
 800b5fa:	6962      	ldr	r2, [r4, #20]
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d004      	beq.n	800b60c <__swbuf_r+0x6e>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	07db      	lsls	r3, r3, #31
 800b606:	d5e1      	bpl.n	800b5cc <__swbuf_r+0x2e>
 800b608:	2e0a      	cmp	r6, #10
 800b60a:	d1df      	bne.n	800b5cc <__swbuf_r+0x2e>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	f000 fe90 	bl	800c334 <_fflush_r>
 800b614:	2800      	cmp	r0, #0
 800b616:	d0d9      	beq.n	800b5cc <__swbuf_r+0x2e>
 800b618:	e7d6      	b.n	800b5c8 <__swbuf_r+0x2a>
	...

0800b61c <__swsetup_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4b29      	ldr	r3, [pc, #164]	@ (800b6c4 <__swsetup_r+0xa8>)
 800b620:	4605      	mov	r5, r0
 800b622:	6818      	ldr	r0, [r3, #0]
 800b624:	460c      	mov	r4, r1
 800b626:	b118      	cbz	r0, 800b630 <__swsetup_r+0x14>
 800b628:	6a03      	ldr	r3, [r0, #32]
 800b62a:	b90b      	cbnz	r3, 800b630 <__swsetup_r+0x14>
 800b62c:	f7ff fea6 	bl	800b37c <__sinit>
 800b630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b634:	0719      	lsls	r1, r3, #28
 800b636:	d422      	bmi.n	800b67e <__swsetup_r+0x62>
 800b638:	06da      	lsls	r2, r3, #27
 800b63a:	d407      	bmi.n	800b64c <__swsetup_r+0x30>
 800b63c:	2209      	movs	r2, #9
 800b63e:	602a      	str	r2, [r5, #0]
 800b640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	f04f 30ff 	mov.w	r0, #4294967295
 800b64a:	e033      	b.n	800b6b4 <__swsetup_r+0x98>
 800b64c:	0758      	lsls	r0, r3, #29
 800b64e:	d512      	bpl.n	800b676 <__swsetup_r+0x5a>
 800b650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b652:	b141      	cbz	r1, 800b666 <__swsetup_r+0x4a>
 800b654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b658:	4299      	cmp	r1, r3
 800b65a:	d002      	beq.n	800b662 <__swsetup_r+0x46>
 800b65c:	4628      	mov	r0, r5
 800b65e:	f000 f973 	bl	800b948 <_free_r>
 800b662:	2300      	movs	r3, #0
 800b664:	6363      	str	r3, [r4, #52]	@ 0x34
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	2300      	movs	r3, #0
 800b670:	6063      	str	r3, [r4, #4]
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	f043 0308 	orr.w	r3, r3, #8
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	b94b      	cbnz	r3, 800b696 <__swsetup_r+0x7a>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b68c:	d003      	beq.n	800b696 <__swsetup_r+0x7a>
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	f000 fe9d 	bl	800c3d0 <__smakebuf_r>
 800b696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69a:	f013 0201 	ands.w	r2, r3, #1
 800b69e:	d00a      	beq.n	800b6b6 <__swsetup_r+0x9a>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	60a2      	str	r2, [r4, #8]
 800b6a4:	6962      	ldr	r2, [r4, #20]
 800b6a6:	4252      	negs	r2, r2
 800b6a8:	61a2      	str	r2, [r4, #24]
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	b942      	cbnz	r2, 800b6c0 <__swsetup_r+0xa4>
 800b6ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6b2:	d1c5      	bne.n	800b640 <__swsetup_r+0x24>
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	0799      	lsls	r1, r3, #30
 800b6b8:	bf58      	it	pl
 800b6ba:	6962      	ldrpl	r2, [r4, #20]
 800b6bc:	60a2      	str	r2, [r4, #8]
 800b6be:	e7f4      	b.n	800b6aa <__swsetup_r+0x8e>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7f7      	b.n	800b6b4 <__swsetup_r+0x98>
 800b6c4:	20000098 	.word	0x20000098

0800b6c8 <memset>:
 800b6c8:	4402      	add	r2, r0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d100      	bne.n	800b6d2 <memset+0xa>
 800b6d0:	4770      	bx	lr
 800b6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d6:	e7f9      	b.n	800b6cc <memset+0x4>

0800b6d8 <strchr>:
 800b6d8:	b2c9      	uxtb	r1, r1
 800b6da:	4603      	mov	r3, r0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6e2:	b112      	cbz	r2, 800b6ea <strchr+0x12>
 800b6e4:	428a      	cmp	r2, r1
 800b6e6:	d1f9      	bne.n	800b6dc <strchr+0x4>
 800b6e8:	4770      	bx	lr
 800b6ea:	2900      	cmp	r1, #0
 800b6ec:	bf18      	it	ne
 800b6ee:	2000      	movne	r0, #0
 800b6f0:	4770      	bx	lr

0800b6f2 <strncmp>:
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	b16a      	cbz	r2, 800b712 <strncmp+0x20>
 800b6f6:	3901      	subs	r1, #1
 800b6f8:	1884      	adds	r4, r0, r2
 800b6fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b702:	429a      	cmp	r2, r3
 800b704:	d103      	bne.n	800b70e <strncmp+0x1c>
 800b706:	42a0      	cmp	r0, r4
 800b708:	d001      	beq.n	800b70e <strncmp+0x1c>
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	d1f5      	bne.n	800b6fa <strncmp+0x8>
 800b70e:	1ad0      	subs	r0, r2, r3
 800b710:	bd10      	pop	{r4, pc}
 800b712:	4610      	mov	r0, r2
 800b714:	e7fc      	b.n	800b710 <strncmp+0x1e>

0800b716 <strncpy>:
 800b716:	b510      	push	{r4, lr}
 800b718:	3901      	subs	r1, #1
 800b71a:	4603      	mov	r3, r0
 800b71c:	b132      	cbz	r2, 800b72c <strncpy+0x16>
 800b71e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b722:	f803 4b01 	strb.w	r4, [r3], #1
 800b726:	3a01      	subs	r2, #1
 800b728:	2c00      	cmp	r4, #0
 800b72a:	d1f7      	bne.n	800b71c <strncpy+0x6>
 800b72c:	441a      	add	r2, r3
 800b72e:	2100      	movs	r1, #0
 800b730:	4293      	cmp	r3, r2
 800b732:	d100      	bne.n	800b736 <strncpy+0x20>
 800b734:	bd10      	pop	{r4, pc}
 800b736:	f803 1b01 	strb.w	r1, [r3], #1
 800b73a:	e7f9      	b.n	800b730 <strncpy+0x1a>

0800b73c <strstr>:
 800b73c:	780a      	ldrb	r2, [r1, #0]
 800b73e:	b570      	push	{r4, r5, r6, lr}
 800b740:	b96a      	cbnz	r2, 800b75e <strstr+0x22>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	429a      	cmp	r2, r3
 800b746:	d109      	bne.n	800b75c <strstr+0x20>
 800b748:	460c      	mov	r4, r1
 800b74a:	4605      	mov	r5, r0
 800b74c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b750:	2b00      	cmp	r3, #0
 800b752:	d0f6      	beq.n	800b742 <strstr+0x6>
 800b754:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b758:	429e      	cmp	r6, r3
 800b75a:	d0f7      	beq.n	800b74c <strstr+0x10>
 800b75c:	3001      	adds	r0, #1
 800b75e:	7803      	ldrb	r3, [r0, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1ef      	bne.n	800b744 <strstr+0x8>
 800b764:	4618      	mov	r0, r3
 800b766:	e7ec      	b.n	800b742 <strstr+0x6>

0800b768 <_close_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d06      	ldr	r5, [pc, #24]	@ (800b784 <_close_r+0x1c>)
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	4608      	mov	r0, r1
 800b772:	602b      	str	r3, [r5, #0]
 800b774:	f7f6 fc7d 	bl	8002072 <_close>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_close_r+0x1a>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_close_r+0x1a>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	2000563c 	.word	0x2000563c

0800b788 <_reclaim_reent>:
 800b788:	4b29      	ldr	r3, [pc, #164]	@ (800b830 <_reclaim_reent+0xa8>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4283      	cmp	r3, r0
 800b78e:	b570      	push	{r4, r5, r6, lr}
 800b790:	4604      	mov	r4, r0
 800b792:	d04b      	beq.n	800b82c <_reclaim_reent+0xa4>
 800b794:	69c3      	ldr	r3, [r0, #28]
 800b796:	b1ab      	cbz	r3, 800b7c4 <_reclaim_reent+0x3c>
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	b16b      	cbz	r3, 800b7b8 <_reclaim_reent+0x30>
 800b79c:	2500      	movs	r5, #0
 800b79e:	69e3      	ldr	r3, [r4, #28]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	5959      	ldr	r1, [r3, r5]
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	d13b      	bne.n	800b820 <_reclaim_reent+0x98>
 800b7a8:	3504      	adds	r5, #4
 800b7aa:	2d80      	cmp	r5, #128	@ 0x80
 800b7ac:	d1f7      	bne.n	800b79e <_reclaim_reent+0x16>
 800b7ae:	69e3      	ldr	r3, [r4, #28]
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	68d9      	ldr	r1, [r3, #12]
 800b7b4:	f000 f8c8 	bl	800b948 <_free_r>
 800b7b8:	69e3      	ldr	r3, [r4, #28]
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	b111      	cbz	r1, 800b7c4 <_reclaim_reent+0x3c>
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 f8c2 	bl	800b948 <_free_r>
 800b7c4:	6961      	ldr	r1, [r4, #20]
 800b7c6:	b111      	cbz	r1, 800b7ce <_reclaim_reent+0x46>
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 f8bd 	bl	800b948 <_free_r>
 800b7ce:	69e1      	ldr	r1, [r4, #28]
 800b7d0:	b111      	cbz	r1, 800b7d8 <_reclaim_reent+0x50>
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 f8b8 	bl	800b948 <_free_r>
 800b7d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b7da:	b111      	cbz	r1, 800b7e2 <_reclaim_reent+0x5a>
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 f8b3 	bl	800b948 <_free_r>
 800b7e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7e4:	b111      	cbz	r1, 800b7ec <_reclaim_reent+0x64>
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f000 f8ae 	bl	800b948 <_free_r>
 800b7ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b7ee:	b111      	cbz	r1, 800b7f6 <_reclaim_reent+0x6e>
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 f8a9 	bl	800b948 <_free_r>
 800b7f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b7f8:	b111      	cbz	r1, 800b800 <_reclaim_reent+0x78>
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f000 f8a4 	bl	800b948 <_free_r>
 800b800:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b802:	b111      	cbz	r1, 800b80a <_reclaim_reent+0x82>
 800b804:	4620      	mov	r0, r4
 800b806:	f000 f89f 	bl	800b948 <_free_r>
 800b80a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b80c:	b111      	cbz	r1, 800b814 <_reclaim_reent+0x8c>
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 f89a 	bl	800b948 <_free_r>
 800b814:	6a23      	ldr	r3, [r4, #32]
 800b816:	b14b      	cbz	r3, 800b82c <_reclaim_reent+0xa4>
 800b818:	4620      	mov	r0, r4
 800b81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b81e:	4718      	bx	r3
 800b820:	680e      	ldr	r6, [r1, #0]
 800b822:	4620      	mov	r0, r4
 800b824:	f000 f890 	bl	800b948 <_free_r>
 800b828:	4631      	mov	r1, r6
 800b82a:	e7bb      	b.n	800b7a4 <_reclaim_reent+0x1c>
 800b82c:	bd70      	pop	{r4, r5, r6, pc}
 800b82e:	bf00      	nop
 800b830:	20000098 	.word	0x20000098

0800b834 <_lseek_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4d07      	ldr	r5, [pc, #28]	@ (800b854 <_lseek_r+0x20>)
 800b838:	4604      	mov	r4, r0
 800b83a:	4608      	mov	r0, r1
 800b83c:	4611      	mov	r1, r2
 800b83e:	2200      	movs	r2, #0
 800b840:	602a      	str	r2, [r5, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	f7f6 fc3c 	bl	80020c0 <_lseek>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_lseek_r+0x1e>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_lseek_r+0x1e>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	2000563c 	.word	0x2000563c

0800b858 <_read_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d07      	ldr	r5, [pc, #28]	@ (800b878 <_read_r+0x20>)
 800b85c:	4604      	mov	r4, r0
 800b85e:	4608      	mov	r0, r1
 800b860:	4611      	mov	r1, r2
 800b862:	2200      	movs	r2, #0
 800b864:	602a      	str	r2, [r5, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	f7f6 fbe6 	bl	8002038 <_read>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_read_r+0x1e>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_read_r+0x1e>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	2000563c 	.word	0x2000563c

0800b87c <_sbrk_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d06      	ldr	r5, [pc, #24]	@ (800b898 <_sbrk_r+0x1c>)
 800b880:	2300      	movs	r3, #0
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	602b      	str	r3, [r5, #0]
 800b888:	f7f6 fc28 	bl	80020dc <_sbrk>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_sbrk_r+0x1a>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_sbrk_r+0x1a>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	2000563c 	.word	0x2000563c

0800b89c <_write_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d07      	ldr	r5, [pc, #28]	@ (800b8bc <_write_r+0x20>)
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	4608      	mov	r0, r1
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	602a      	str	r2, [r5, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f7f6 fc5e 	bl	800216c <_write>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_write_r+0x1e>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_write_r+0x1e>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	2000563c 	.word	0x2000563c

0800b8c0 <__errno>:
 800b8c0:	4b01      	ldr	r3, [pc, #4]	@ (800b8c8 <__errno+0x8>)
 800b8c2:	6818      	ldr	r0, [r3, #0]
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20000098 	.word	0x20000098

0800b8cc <__libc_init_array>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	4d0d      	ldr	r5, [pc, #52]	@ (800b904 <__libc_init_array+0x38>)
 800b8d0:	4c0d      	ldr	r4, [pc, #52]	@ (800b908 <__libc_init_array+0x3c>)
 800b8d2:	1b64      	subs	r4, r4, r5
 800b8d4:	10a4      	asrs	r4, r4, #2
 800b8d6:	2600      	movs	r6, #0
 800b8d8:	42a6      	cmp	r6, r4
 800b8da:	d109      	bne.n	800b8f0 <__libc_init_array+0x24>
 800b8dc:	4d0b      	ldr	r5, [pc, #44]	@ (800b90c <__libc_init_array+0x40>)
 800b8de:	4c0c      	ldr	r4, [pc, #48]	@ (800b910 <__libc_init_array+0x44>)
 800b8e0:	f000 fe58 	bl	800c594 <_init>
 800b8e4:	1b64      	subs	r4, r4, r5
 800b8e6:	10a4      	asrs	r4, r4, #2
 800b8e8:	2600      	movs	r6, #0
 800b8ea:	42a6      	cmp	r6, r4
 800b8ec:	d105      	bne.n	800b8fa <__libc_init_array+0x2e>
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f4:	4798      	blx	r3
 800b8f6:	3601      	adds	r6, #1
 800b8f8:	e7ee      	b.n	800b8d8 <__libc_init_array+0xc>
 800b8fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8fe:	4798      	blx	r3
 800b900:	3601      	adds	r6, #1
 800b902:	e7f2      	b.n	800b8ea <__libc_init_array+0x1e>
 800b904:	0800ce78 	.word	0x0800ce78
 800b908:	0800ce78 	.word	0x0800ce78
 800b90c:	0800ce78 	.word	0x0800ce78
 800b910:	0800ce7c 	.word	0x0800ce7c

0800b914 <__retarget_lock_init_recursive>:
 800b914:	4770      	bx	lr

0800b916 <__retarget_lock_acquire_recursive>:
 800b916:	4770      	bx	lr

0800b918 <__retarget_lock_release_recursive>:
 800b918:	4770      	bx	lr

0800b91a <strcpy>:
 800b91a:	4603      	mov	r3, r0
 800b91c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b920:	f803 2b01 	strb.w	r2, [r3], #1
 800b924:	2a00      	cmp	r2, #0
 800b926:	d1f9      	bne.n	800b91c <strcpy+0x2>
 800b928:	4770      	bx	lr

0800b92a <memcpy>:
 800b92a:	440a      	add	r2, r1
 800b92c:	4291      	cmp	r1, r2
 800b92e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b932:	d100      	bne.n	800b936 <memcpy+0xc>
 800b934:	4770      	bx	lr
 800b936:	b510      	push	{r4, lr}
 800b938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b93c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b940:	4291      	cmp	r1, r2
 800b942:	d1f9      	bne.n	800b938 <memcpy+0xe>
 800b944:	bd10      	pop	{r4, pc}
	...

0800b948 <_free_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4605      	mov	r5, r0
 800b94c:	2900      	cmp	r1, #0
 800b94e:	d041      	beq.n	800b9d4 <_free_r+0x8c>
 800b950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b954:	1f0c      	subs	r4, r1, #4
 800b956:	2b00      	cmp	r3, #0
 800b958:	bfb8      	it	lt
 800b95a:	18e4      	addlt	r4, r4, r3
 800b95c:	f7ff fc76 	bl	800b24c <__malloc_lock>
 800b960:	4a1d      	ldr	r2, [pc, #116]	@ (800b9d8 <_free_r+0x90>)
 800b962:	6813      	ldr	r3, [r2, #0]
 800b964:	b933      	cbnz	r3, 800b974 <_free_r+0x2c>
 800b966:	6063      	str	r3, [r4, #4]
 800b968:	6014      	str	r4, [r2, #0]
 800b96a:	4628      	mov	r0, r5
 800b96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b970:	f7ff bc72 	b.w	800b258 <__malloc_unlock>
 800b974:	42a3      	cmp	r3, r4
 800b976:	d908      	bls.n	800b98a <_free_r+0x42>
 800b978:	6820      	ldr	r0, [r4, #0]
 800b97a:	1821      	adds	r1, r4, r0
 800b97c:	428b      	cmp	r3, r1
 800b97e:	bf01      	itttt	eq
 800b980:	6819      	ldreq	r1, [r3, #0]
 800b982:	685b      	ldreq	r3, [r3, #4]
 800b984:	1809      	addeq	r1, r1, r0
 800b986:	6021      	streq	r1, [r4, #0]
 800b988:	e7ed      	b.n	800b966 <_free_r+0x1e>
 800b98a:	461a      	mov	r2, r3
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	b10b      	cbz	r3, 800b994 <_free_r+0x4c>
 800b990:	42a3      	cmp	r3, r4
 800b992:	d9fa      	bls.n	800b98a <_free_r+0x42>
 800b994:	6811      	ldr	r1, [r2, #0]
 800b996:	1850      	adds	r0, r2, r1
 800b998:	42a0      	cmp	r0, r4
 800b99a:	d10b      	bne.n	800b9b4 <_free_r+0x6c>
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	4401      	add	r1, r0
 800b9a0:	1850      	adds	r0, r2, r1
 800b9a2:	4283      	cmp	r3, r0
 800b9a4:	6011      	str	r1, [r2, #0]
 800b9a6:	d1e0      	bne.n	800b96a <_free_r+0x22>
 800b9a8:	6818      	ldr	r0, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	6053      	str	r3, [r2, #4]
 800b9ae:	4408      	add	r0, r1
 800b9b0:	6010      	str	r0, [r2, #0]
 800b9b2:	e7da      	b.n	800b96a <_free_r+0x22>
 800b9b4:	d902      	bls.n	800b9bc <_free_r+0x74>
 800b9b6:	230c      	movs	r3, #12
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	e7d6      	b.n	800b96a <_free_r+0x22>
 800b9bc:	6820      	ldr	r0, [r4, #0]
 800b9be:	1821      	adds	r1, r4, r0
 800b9c0:	428b      	cmp	r3, r1
 800b9c2:	bf04      	itt	eq
 800b9c4:	6819      	ldreq	r1, [r3, #0]
 800b9c6:	685b      	ldreq	r3, [r3, #4]
 800b9c8:	6063      	str	r3, [r4, #4]
 800b9ca:	bf04      	itt	eq
 800b9cc:	1809      	addeq	r1, r1, r0
 800b9ce:	6021      	streq	r1, [r4, #0]
 800b9d0:	6054      	str	r4, [r2, #4]
 800b9d2:	e7ca      	b.n	800b96a <_free_r+0x22>
 800b9d4:	bd38      	pop	{r3, r4, r5, pc}
 800b9d6:	bf00      	nop
 800b9d8:	200054fc 	.word	0x200054fc

0800b9dc <__ssputs_r>:
 800b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e0:	688e      	ldr	r6, [r1, #8]
 800b9e2:	461f      	mov	r7, r3
 800b9e4:	42be      	cmp	r6, r7
 800b9e6:	680b      	ldr	r3, [r1, #0]
 800b9e8:	4682      	mov	sl, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	4690      	mov	r8, r2
 800b9ee:	d82d      	bhi.n	800ba4c <__ssputs_r+0x70>
 800b9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9f8:	d026      	beq.n	800ba48 <__ssputs_r+0x6c>
 800b9fa:	6965      	ldr	r5, [r4, #20]
 800b9fc:	6909      	ldr	r1, [r1, #16]
 800b9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba02:	eba3 0901 	sub.w	r9, r3, r1
 800ba06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba0a:	1c7b      	adds	r3, r7, #1
 800ba0c:	444b      	add	r3, r9
 800ba0e:	106d      	asrs	r5, r5, #1
 800ba10:	429d      	cmp	r5, r3
 800ba12:	bf38      	it	cc
 800ba14:	461d      	movcc	r5, r3
 800ba16:	0553      	lsls	r3, r2, #21
 800ba18:	d527      	bpl.n	800ba6a <__ssputs_r+0x8e>
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7ff fb96 	bl	800b14c <_malloc_r>
 800ba20:	4606      	mov	r6, r0
 800ba22:	b360      	cbz	r0, 800ba7e <__ssputs_r+0xa2>
 800ba24:	6921      	ldr	r1, [r4, #16]
 800ba26:	464a      	mov	r2, r9
 800ba28:	f7ff ff7f 	bl	800b92a <memcpy>
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba36:	81a3      	strh	r3, [r4, #12]
 800ba38:	6126      	str	r6, [r4, #16]
 800ba3a:	6165      	str	r5, [r4, #20]
 800ba3c:	444e      	add	r6, r9
 800ba3e:	eba5 0509 	sub.w	r5, r5, r9
 800ba42:	6026      	str	r6, [r4, #0]
 800ba44:	60a5      	str	r5, [r4, #8]
 800ba46:	463e      	mov	r6, r7
 800ba48:	42be      	cmp	r6, r7
 800ba4a:	d900      	bls.n	800ba4e <__ssputs_r+0x72>
 800ba4c:	463e      	mov	r6, r7
 800ba4e:	6820      	ldr	r0, [r4, #0]
 800ba50:	4632      	mov	r2, r6
 800ba52:	4641      	mov	r1, r8
 800ba54:	f000 fd2c 	bl	800c4b0 <memmove>
 800ba58:	68a3      	ldr	r3, [r4, #8]
 800ba5a:	1b9b      	subs	r3, r3, r6
 800ba5c:	60a3      	str	r3, [r4, #8]
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	4433      	add	r3, r6
 800ba62:	6023      	str	r3, [r4, #0]
 800ba64:	2000      	movs	r0, #0
 800ba66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	f000 fd5c 	bl	800c528 <_realloc_r>
 800ba70:	4606      	mov	r6, r0
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d1e0      	bne.n	800ba38 <__ssputs_r+0x5c>
 800ba76:	6921      	ldr	r1, [r4, #16]
 800ba78:	4650      	mov	r0, sl
 800ba7a:	f7ff ff65 	bl	800b948 <_free_r>
 800ba7e:	230c      	movs	r3, #12
 800ba80:	f8ca 3000 	str.w	r3, [sl]
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba8a:	81a3      	strh	r3, [r4, #12]
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	e7e9      	b.n	800ba66 <__ssputs_r+0x8a>
	...

0800ba94 <_svfiprintf_r>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	4698      	mov	r8, r3
 800ba9a:	898b      	ldrh	r3, [r1, #12]
 800ba9c:	061b      	lsls	r3, r3, #24
 800ba9e:	b09d      	sub	sp, #116	@ 0x74
 800baa0:	4607      	mov	r7, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	4614      	mov	r4, r2
 800baa6:	d510      	bpl.n	800baca <_svfiprintf_r+0x36>
 800baa8:	690b      	ldr	r3, [r1, #16]
 800baaa:	b973      	cbnz	r3, 800baca <_svfiprintf_r+0x36>
 800baac:	2140      	movs	r1, #64	@ 0x40
 800baae:	f7ff fb4d 	bl	800b14c <_malloc_r>
 800bab2:	6028      	str	r0, [r5, #0]
 800bab4:	6128      	str	r0, [r5, #16]
 800bab6:	b930      	cbnz	r0, 800bac6 <_svfiprintf_r+0x32>
 800bab8:	230c      	movs	r3, #12
 800baba:	603b      	str	r3, [r7, #0]
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	b01d      	add	sp, #116	@ 0x74
 800bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac6:	2340      	movs	r3, #64	@ 0x40
 800bac8:	616b      	str	r3, [r5, #20]
 800baca:	2300      	movs	r3, #0
 800bacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bace:	2320      	movs	r3, #32
 800bad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bad8:	2330      	movs	r3, #48	@ 0x30
 800bada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc78 <_svfiprintf_r+0x1e4>
 800bade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bae2:	f04f 0901 	mov.w	r9, #1
 800bae6:	4623      	mov	r3, r4
 800bae8:	469a      	mov	sl, r3
 800baea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baee:	b10a      	cbz	r2, 800baf4 <_svfiprintf_r+0x60>
 800baf0:	2a25      	cmp	r2, #37	@ 0x25
 800baf2:	d1f9      	bne.n	800bae8 <_svfiprintf_r+0x54>
 800baf4:	ebba 0b04 	subs.w	fp, sl, r4
 800baf8:	d00b      	beq.n	800bb12 <_svfiprintf_r+0x7e>
 800bafa:	465b      	mov	r3, fp
 800bafc:	4622      	mov	r2, r4
 800bafe:	4629      	mov	r1, r5
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7ff ff6b 	bl	800b9dc <__ssputs_r>
 800bb06:	3001      	adds	r0, #1
 800bb08:	f000 80a7 	beq.w	800bc5a <_svfiprintf_r+0x1c6>
 800bb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb0e:	445a      	add	r2, fp
 800bb10:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb12:	f89a 3000 	ldrb.w	r3, [sl]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 809f 	beq.w	800bc5a <_svfiprintf_r+0x1c6>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb26:	f10a 0a01 	add.w	sl, sl, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	9307      	str	r3, [sp, #28]
 800bb2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb32:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb34:	4654      	mov	r4, sl
 800bb36:	2205      	movs	r2, #5
 800bb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3c:	484e      	ldr	r0, [pc, #312]	@ (800bc78 <_svfiprintf_r+0x1e4>)
 800bb3e:	f7f4 fb4f 	bl	80001e0 <memchr>
 800bb42:	9a04      	ldr	r2, [sp, #16]
 800bb44:	b9d8      	cbnz	r0, 800bb7e <_svfiprintf_r+0xea>
 800bb46:	06d0      	lsls	r0, r2, #27
 800bb48:	bf44      	itt	mi
 800bb4a:	2320      	movmi	r3, #32
 800bb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb50:	0711      	lsls	r1, r2, #28
 800bb52:	bf44      	itt	mi
 800bb54:	232b      	movmi	r3, #43	@ 0x2b
 800bb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb60:	d015      	beq.n	800bb8e <_svfiprintf_r+0xfa>
 800bb62:	9a07      	ldr	r2, [sp, #28]
 800bb64:	4654      	mov	r4, sl
 800bb66:	2000      	movs	r0, #0
 800bb68:	f04f 0c0a 	mov.w	ip, #10
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb72:	3b30      	subs	r3, #48	@ 0x30
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	d94b      	bls.n	800bc10 <_svfiprintf_r+0x17c>
 800bb78:	b1b0      	cbz	r0, 800bba8 <_svfiprintf_r+0x114>
 800bb7a:	9207      	str	r2, [sp, #28]
 800bb7c:	e014      	b.n	800bba8 <_svfiprintf_r+0x114>
 800bb7e:	eba0 0308 	sub.w	r3, r0, r8
 800bb82:	fa09 f303 	lsl.w	r3, r9, r3
 800bb86:	4313      	orrs	r3, r2
 800bb88:	9304      	str	r3, [sp, #16]
 800bb8a:	46a2      	mov	sl, r4
 800bb8c:	e7d2      	b.n	800bb34 <_svfiprintf_r+0xa0>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	1d19      	adds	r1, r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	9103      	str	r1, [sp, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bfbb      	ittet	lt
 800bb9a:	425b      	neglt	r3, r3
 800bb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800bba0:	9307      	strge	r3, [sp, #28]
 800bba2:	9307      	strlt	r3, [sp, #28]
 800bba4:	bfb8      	it	lt
 800bba6:	9204      	strlt	r2, [sp, #16]
 800bba8:	7823      	ldrb	r3, [r4, #0]
 800bbaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbac:	d10a      	bne.n	800bbc4 <_svfiprintf_r+0x130>
 800bbae:	7863      	ldrb	r3, [r4, #1]
 800bbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbb2:	d132      	bne.n	800bc1a <_svfiprintf_r+0x186>
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	1d1a      	adds	r2, r3, #4
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	9203      	str	r2, [sp, #12]
 800bbbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbc0:	3402      	adds	r4, #2
 800bbc2:	9305      	str	r3, [sp, #20]
 800bbc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc88 <_svfiprintf_r+0x1f4>
 800bbc8:	7821      	ldrb	r1, [r4, #0]
 800bbca:	2203      	movs	r2, #3
 800bbcc:	4650      	mov	r0, sl
 800bbce:	f7f4 fb07 	bl	80001e0 <memchr>
 800bbd2:	b138      	cbz	r0, 800bbe4 <_svfiprintf_r+0x150>
 800bbd4:	9b04      	ldr	r3, [sp, #16]
 800bbd6:	eba0 000a 	sub.w	r0, r0, sl
 800bbda:	2240      	movs	r2, #64	@ 0x40
 800bbdc:	4082      	lsls	r2, r0
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	3401      	adds	r4, #1
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	4824      	ldr	r0, [pc, #144]	@ (800bc7c <_svfiprintf_r+0x1e8>)
 800bbea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbee:	2206      	movs	r2, #6
 800bbf0:	f7f4 faf6 	bl	80001e0 <memchr>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d036      	beq.n	800bc66 <_svfiprintf_r+0x1d2>
 800bbf8:	4b21      	ldr	r3, [pc, #132]	@ (800bc80 <_svfiprintf_r+0x1ec>)
 800bbfa:	bb1b      	cbnz	r3, 800bc44 <_svfiprintf_r+0x1b0>
 800bbfc:	9b03      	ldr	r3, [sp, #12]
 800bbfe:	3307      	adds	r3, #7
 800bc00:	f023 0307 	bic.w	r3, r3, #7
 800bc04:	3308      	adds	r3, #8
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc0a:	4433      	add	r3, r6
 800bc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc0e:	e76a      	b.n	800bae6 <_svfiprintf_r+0x52>
 800bc10:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc14:	460c      	mov	r4, r1
 800bc16:	2001      	movs	r0, #1
 800bc18:	e7a8      	b.n	800bb6c <_svfiprintf_r+0xd8>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	3401      	adds	r4, #1
 800bc1e:	9305      	str	r3, [sp, #20]
 800bc20:	4619      	mov	r1, r3
 800bc22:	f04f 0c0a 	mov.w	ip, #10
 800bc26:	4620      	mov	r0, r4
 800bc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc2c:	3a30      	subs	r2, #48	@ 0x30
 800bc2e:	2a09      	cmp	r2, #9
 800bc30:	d903      	bls.n	800bc3a <_svfiprintf_r+0x1a6>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d0c6      	beq.n	800bbc4 <_svfiprintf_r+0x130>
 800bc36:	9105      	str	r1, [sp, #20]
 800bc38:	e7c4      	b.n	800bbc4 <_svfiprintf_r+0x130>
 800bc3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc3e:	4604      	mov	r4, r0
 800bc40:	2301      	movs	r3, #1
 800bc42:	e7f0      	b.n	800bc26 <_svfiprintf_r+0x192>
 800bc44:	ab03      	add	r3, sp, #12
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	462a      	mov	r2, r5
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc84 <_svfiprintf_r+0x1f0>)
 800bc4c:	a904      	add	r1, sp, #16
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f3af 8000 	nop.w
 800bc54:	1c42      	adds	r2, r0, #1
 800bc56:	4606      	mov	r6, r0
 800bc58:	d1d6      	bne.n	800bc08 <_svfiprintf_r+0x174>
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	065b      	lsls	r3, r3, #25
 800bc5e:	f53f af2d 	bmi.w	800babc <_svfiprintf_r+0x28>
 800bc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc64:	e72c      	b.n	800bac0 <_svfiprintf_r+0x2c>
 800bc66:	ab03      	add	r3, sp, #12
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	462a      	mov	r2, r5
 800bc6c:	4b05      	ldr	r3, [pc, #20]	@ (800bc84 <_svfiprintf_r+0x1f0>)
 800bc6e:	a904      	add	r1, sp, #16
 800bc70:	4638      	mov	r0, r7
 800bc72:	f000 f9bb 	bl	800bfec <_printf_i>
 800bc76:	e7ed      	b.n	800bc54 <_svfiprintf_r+0x1c0>
 800bc78:	0800ce3c 	.word	0x0800ce3c
 800bc7c:	0800ce46 	.word	0x0800ce46
 800bc80:	00000000 	.word	0x00000000
 800bc84:	0800b9dd 	.word	0x0800b9dd
 800bc88:	0800ce42 	.word	0x0800ce42

0800bc8c <__sfputc_r>:
 800bc8c:	6893      	ldr	r3, [r2, #8]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	b410      	push	{r4}
 800bc94:	6093      	str	r3, [r2, #8]
 800bc96:	da08      	bge.n	800bcaa <__sfputc_r+0x1e>
 800bc98:	6994      	ldr	r4, [r2, #24]
 800bc9a:	42a3      	cmp	r3, r4
 800bc9c:	db01      	blt.n	800bca2 <__sfputc_r+0x16>
 800bc9e:	290a      	cmp	r1, #10
 800bca0:	d103      	bne.n	800bcaa <__sfputc_r+0x1e>
 800bca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca6:	f7ff bc7a 	b.w	800b59e <__swbuf_r>
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	1c58      	adds	r0, r3, #1
 800bcae:	6010      	str	r0, [r2, #0]
 800bcb0:	7019      	strb	r1, [r3, #0]
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <__sfputs_r>:
 800bcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	18d5      	adds	r5, r2, r3
 800bcc4:	42ac      	cmp	r4, r5
 800bcc6:	d101      	bne.n	800bccc <__sfputs_r+0x12>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	e007      	b.n	800bcdc <__sfputs_r+0x22>
 800bccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd0:	463a      	mov	r2, r7
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7ff ffda 	bl	800bc8c <__sfputc_r>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d1f3      	bne.n	800bcc4 <__sfputs_r+0xa>
 800bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bce0 <_vfiprintf_r>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	460d      	mov	r5, r1
 800bce6:	b09d      	sub	sp, #116	@ 0x74
 800bce8:	4614      	mov	r4, r2
 800bcea:	4698      	mov	r8, r3
 800bcec:	4606      	mov	r6, r0
 800bcee:	b118      	cbz	r0, 800bcf8 <_vfiprintf_r+0x18>
 800bcf0:	6a03      	ldr	r3, [r0, #32]
 800bcf2:	b90b      	cbnz	r3, 800bcf8 <_vfiprintf_r+0x18>
 800bcf4:	f7ff fb42 	bl	800b37c <__sinit>
 800bcf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcfa:	07d9      	lsls	r1, r3, #31
 800bcfc:	d405      	bmi.n	800bd0a <_vfiprintf_r+0x2a>
 800bcfe:	89ab      	ldrh	r3, [r5, #12]
 800bd00:	059a      	lsls	r2, r3, #22
 800bd02:	d402      	bmi.n	800bd0a <_vfiprintf_r+0x2a>
 800bd04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd06:	f7ff fe06 	bl	800b916 <__retarget_lock_acquire_recursive>
 800bd0a:	89ab      	ldrh	r3, [r5, #12]
 800bd0c:	071b      	lsls	r3, r3, #28
 800bd0e:	d501      	bpl.n	800bd14 <_vfiprintf_r+0x34>
 800bd10:	692b      	ldr	r3, [r5, #16]
 800bd12:	b99b      	cbnz	r3, 800bd3c <_vfiprintf_r+0x5c>
 800bd14:	4629      	mov	r1, r5
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7ff fc80 	bl	800b61c <__swsetup_r>
 800bd1c:	b170      	cbz	r0, 800bd3c <_vfiprintf_r+0x5c>
 800bd1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd20:	07dc      	lsls	r4, r3, #31
 800bd22:	d504      	bpl.n	800bd2e <_vfiprintf_r+0x4e>
 800bd24:	f04f 30ff 	mov.w	r0, #4294967295
 800bd28:	b01d      	add	sp, #116	@ 0x74
 800bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2e:	89ab      	ldrh	r3, [r5, #12]
 800bd30:	0598      	lsls	r0, r3, #22
 800bd32:	d4f7      	bmi.n	800bd24 <_vfiprintf_r+0x44>
 800bd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd36:	f7ff fdef 	bl	800b918 <__retarget_lock_release_recursive>
 800bd3a:	e7f3      	b.n	800bd24 <_vfiprintf_r+0x44>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd40:	2320      	movs	r3, #32
 800bd42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd4a:	2330      	movs	r3, #48	@ 0x30
 800bd4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800befc <_vfiprintf_r+0x21c>
 800bd50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd54:	f04f 0901 	mov.w	r9, #1
 800bd58:	4623      	mov	r3, r4
 800bd5a:	469a      	mov	sl, r3
 800bd5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd60:	b10a      	cbz	r2, 800bd66 <_vfiprintf_r+0x86>
 800bd62:	2a25      	cmp	r2, #37	@ 0x25
 800bd64:	d1f9      	bne.n	800bd5a <_vfiprintf_r+0x7a>
 800bd66:	ebba 0b04 	subs.w	fp, sl, r4
 800bd6a:	d00b      	beq.n	800bd84 <_vfiprintf_r+0xa4>
 800bd6c:	465b      	mov	r3, fp
 800bd6e:	4622      	mov	r2, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7ff ffa1 	bl	800bcba <__sfputs_r>
 800bd78:	3001      	adds	r0, #1
 800bd7a:	f000 80a7 	beq.w	800becc <_vfiprintf_r+0x1ec>
 800bd7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd80:	445a      	add	r2, fp
 800bd82:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd84:	f89a 3000 	ldrb.w	r3, [sl]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 809f 	beq.w	800becc <_vfiprintf_r+0x1ec>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295
 800bd94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd98:	f10a 0a01 	add.w	sl, sl, #1
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bda4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bda6:	4654      	mov	r4, sl
 800bda8:	2205      	movs	r2, #5
 800bdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdae:	4853      	ldr	r0, [pc, #332]	@ (800befc <_vfiprintf_r+0x21c>)
 800bdb0:	f7f4 fa16 	bl	80001e0 <memchr>
 800bdb4:	9a04      	ldr	r2, [sp, #16]
 800bdb6:	b9d8      	cbnz	r0, 800bdf0 <_vfiprintf_r+0x110>
 800bdb8:	06d1      	lsls	r1, r2, #27
 800bdba:	bf44      	itt	mi
 800bdbc:	2320      	movmi	r3, #32
 800bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdc2:	0713      	lsls	r3, r2, #28
 800bdc4:	bf44      	itt	mi
 800bdc6:	232b      	movmi	r3, #43	@ 0x2b
 800bdc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bdd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdd2:	d015      	beq.n	800be00 <_vfiprintf_r+0x120>
 800bdd4:	9a07      	ldr	r2, [sp, #28]
 800bdd6:	4654      	mov	r4, sl
 800bdd8:	2000      	movs	r0, #0
 800bdda:	f04f 0c0a 	mov.w	ip, #10
 800bdde:	4621      	mov	r1, r4
 800bde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bde4:	3b30      	subs	r3, #48	@ 0x30
 800bde6:	2b09      	cmp	r3, #9
 800bde8:	d94b      	bls.n	800be82 <_vfiprintf_r+0x1a2>
 800bdea:	b1b0      	cbz	r0, 800be1a <_vfiprintf_r+0x13a>
 800bdec:	9207      	str	r2, [sp, #28]
 800bdee:	e014      	b.n	800be1a <_vfiprintf_r+0x13a>
 800bdf0:	eba0 0308 	sub.w	r3, r0, r8
 800bdf4:	fa09 f303 	lsl.w	r3, r9, r3
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	46a2      	mov	sl, r4
 800bdfe:	e7d2      	b.n	800bda6 <_vfiprintf_r+0xc6>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	1d19      	adds	r1, r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	9103      	str	r1, [sp, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bfbb      	ittet	lt
 800be0c:	425b      	neglt	r3, r3
 800be0e:	f042 0202 	orrlt.w	r2, r2, #2
 800be12:	9307      	strge	r3, [sp, #28]
 800be14:	9307      	strlt	r3, [sp, #28]
 800be16:	bfb8      	it	lt
 800be18:	9204      	strlt	r2, [sp, #16]
 800be1a:	7823      	ldrb	r3, [r4, #0]
 800be1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800be1e:	d10a      	bne.n	800be36 <_vfiprintf_r+0x156>
 800be20:	7863      	ldrb	r3, [r4, #1]
 800be22:	2b2a      	cmp	r3, #42	@ 0x2a
 800be24:	d132      	bne.n	800be8c <_vfiprintf_r+0x1ac>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	1d1a      	adds	r2, r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	9203      	str	r2, [sp, #12]
 800be2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be32:	3402      	adds	r4, #2
 800be34:	9305      	str	r3, [sp, #20]
 800be36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf0c <_vfiprintf_r+0x22c>
 800be3a:	7821      	ldrb	r1, [r4, #0]
 800be3c:	2203      	movs	r2, #3
 800be3e:	4650      	mov	r0, sl
 800be40:	f7f4 f9ce 	bl	80001e0 <memchr>
 800be44:	b138      	cbz	r0, 800be56 <_vfiprintf_r+0x176>
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	eba0 000a 	sub.w	r0, r0, sl
 800be4c:	2240      	movs	r2, #64	@ 0x40
 800be4e:	4082      	lsls	r2, r0
 800be50:	4313      	orrs	r3, r2
 800be52:	3401      	adds	r4, #1
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be5a:	4829      	ldr	r0, [pc, #164]	@ (800bf00 <_vfiprintf_r+0x220>)
 800be5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be60:	2206      	movs	r2, #6
 800be62:	f7f4 f9bd 	bl	80001e0 <memchr>
 800be66:	2800      	cmp	r0, #0
 800be68:	d03f      	beq.n	800beea <_vfiprintf_r+0x20a>
 800be6a:	4b26      	ldr	r3, [pc, #152]	@ (800bf04 <_vfiprintf_r+0x224>)
 800be6c:	bb1b      	cbnz	r3, 800beb6 <_vfiprintf_r+0x1d6>
 800be6e:	9b03      	ldr	r3, [sp, #12]
 800be70:	3307      	adds	r3, #7
 800be72:	f023 0307 	bic.w	r3, r3, #7
 800be76:	3308      	adds	r3, #8
 800be78:	9303      	str	r3, [sp, #12]
 800be7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be7c:	443b      	add	r3, r7
 800be7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be80:	e76a      	b.n	800bd58 <_vfiprintf_r+0x78>
 800be82:	fb0c 3202 	mla	r2, ip, r2, r3
 800be86:	460c      	mov	r4, r1
 800be88:	2001      	movs	r0, #1
 800be8a:	e7a8      	b.n	800bdde <_vfiprintf_r+0xfe>
 800be8c:	2300      	movs	r3, #0
 800be8e:	3401      	adds	r4, #1
 800be90:	9305      	str	r3, [sp, #20]
 800be92:	4619      	mov	r1, r3
 800be94:	f04f 0c0a 	mov.w	ip, #10
 800be98:	4620      	mov	r0, r4
 800be9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be9e:	3a30      	subs	r2, #48	@ 0x30
 800bea0:	2a09      	cmp	r2, #9
 800bea2:	d903      	bls.n	800beac <_vfiprintf_r+0x1cc>
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d0c6      	beq.n	800be36 <_vfiprintf_r+0x156>
 800bea8:	9105      	str	r1, [sp, #20]
 800beaa:	e7c4      	b.n	800be36 <_vfiprintf_r+0x156>
 800beac:	fb0c 2101 	mla	r1, ip, r1, r2
 800beb0:	4604      	mov	r4, r0
 800beb2:	2301      	movs	r3, #1
 800beb4:	e7f0      	b.n	800be98 <_vfiprintf_r+0x1b8>
 800beb6:	ab03      	add	r3, sp, #12
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	462a      	mov	r2, r5
 800bebc:	4b12      	ldr	r3, [pc, #72]	@ (800bf08 <_vfiprintf_r+0x228>)
 800bebe:	a904      	add	r1, sp, #16
 800bec0:	4630      	mov	r0, r6
 800bec2:	f3af 8000 	nop.w
 800bec6:	4607      	mov	r7, r0
 800bec8:	1c78      	adds	r0, r7, #1
 800beca:	d1d6      	bne.n	800be7a <_vfiprintf_r+0x19a>
 800becc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bece:	07d9      	lsls	r1, r3, #31
 800bed0:	d405      	bmi.n	800bede <_vfiprintf_r+0x1fe>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	059a      	lsls	r2, r3, #22
 800bed6:	d402      	bmi.n	800bede <_vfiprintf_r+0x1fe>
 800bed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beda:	f7ff fd1d 	bl	800b918 <__retarget_lock_release_recursive>
 800bede:	89ab      	ldrh	r3, [r5, #12]
 800bee0:	065b      	lsls	r3, r3, #25
 800bee2:	f53f af1f 	bmi.w	800bd24 <_vfiprintf_r+0x44>
 800bee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bee8:	e71e      	b.n	800bd28 <_vfiprintf_r+0x48>
 800beea:	ab03      	add	r3, sp, #12
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	462a      	mov	r2, r5
 800bef0:	4b05      	ldr	r3, [pc, #20]	@ (800bf08 <_vfiprintf_r+0x228>)
 800bef2:	a904      	add	r1, sp, #16
 800bef4:	4630      	mov	r0, r6
 800bef6:	f000 f879 	bl	800bfec <_printf_i>
 800befa:	e7e4      	b.n	800bec6 <_vfiprintf_r+0x1e6>
 800befc:	0800ce3c 	.word	0x0800ce3c
 800bf00:	0800ce46 	.word	0x0800ce46
 800bf04:	00000000 	.word	0x00000000
 800bf08:	0800bcbb 	.word	0x0800bcbb
 800bf0c:	0800ce42 	.word	0x0800ce42

0800bf10 <_printf_common>:
 800bf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf14:	4616      	mov	r6, r2
 800bf16:	4698      	mov	r8, r3
 800bf18:	688a      	ldr	r2, [r1, #8]
 800bf1a:	690b      	ldr	r3, [r1, #16]
 800bf1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf20:	4293      	cmp	r3, r2
 800bf22:	bfb8      	it	lt
 800bf24:	4613      	movlt	r3, r2
 800bf26:	6033      	str	r3, [r6, #0]
 800bf28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	b10a      	cbz	r2, 800bf36 <_printf_common+0x26>
 800bf32:	3301      	adds	r3, #1
 800bf34:	6033      	str	r3, [r6, #0]
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	0699      	lsls	r1, r3, #26
 800bf3a:	bf42      	ittt	mi
 800bf3c:	6833      	ldrmi	r3, [r6, #0]
 800bf3e:	3302      	addmi	r3, #2
 800bf40:	6033      	strmi	r3, [r6, #0]
 800bf42:	6825      	ldr	r5, [r4, #0]
 800bf44:	f015 0506 	ands.w	r5, r5, #6
 800bf48:	d106      	bne.n	800bf58 <_printf_common+0x48>
 800bf4a:	f104 0a19 	add.w	sl, r4, #25
 800bf4e:	68e3      	ldr	r3, [r4, #12]
 800bf50:	6832      	ldr	r2, [r6, #0]
 800bf52:	1a9b      	subs	r3, r3, r2
 800bf54:	42ab      	cmp	r3, r5
 800bf56:	dc26      	bgt.n	800bfa6 <_printf_common+0x96>
 800bf58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf5c:	6822      	ldr	r2, [r4, #0]
 800bf5e:	3b00      	subs	r3, #0
 800bf60:	bf18      	it	ne
 800bf62:	2301      	movne	r3, #1
 800bf64:	0692      	lsls	r2, r2, #26
 800bf66:	d42b      	bmi.n	800bfc0 <_printf_common+0xb0>
 800bf68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf6c:	4641      	mov	r1, r8
 800bf6e:	4638      	mov	r0, r7
 800bf70:	47c8      	blx	r9
 800bf72:	3001      	adds	r0, #1
 800bf74:	d01e      	beq.n	800bfb4 <_printf_common+0xa4>
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	6922      	ldr	r2, [r4, #16]
 800bf7a:	f003 0306 	and.w	r3, r3, #6
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	bf02      	ittt	eq
 800bf82:	68e5      	ldreq	r5, [r4, #12]
 800bf84:	6833      	ldreq	r3, [r6, #0]
 800bf86:	1aed      	subeq	r5, r5, r3
 800bf88:	68a3      	ldr	r3, [r4, #8]
 800bf8a:	bf0c      	ite	eq
 800bf8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf90:	2500      	movne	r5, #0
 800bf92:	4293      	cmp	r3, r2
 800bf94:	bfc4      	itt	gt
 800bf96:	1a9b      	subgt	r3, r3, r2
 800bf98:	18ed      	addgt	r5, r5, r3
 800bf9a:	2600      	movs	r6, #0
 800bf9c:	341a      	adds	r4, #26
 800bf9e:	42b5      	cmp	r5, r6
 800bfa0:	d11a      	bne.n	800bfd8 <_printf_common+0xc8>
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	e008      	b.n	800bfb8 <_printf_common+0xa8>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	4652      	mov	r2, sl
 800bfaa:	4641      	mov	r1, r8
 800bfac:	4638      	mov	r0, r7
 800bfae:	47c8      	blx	r9
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d103      	bne.n	800bfbc <_printf_common+0xac>
 800bfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfbc:	3501      	adds	r5, #1
 800bfbe:	e7c6      	b.n	800bf4e <_printf_common+0x3e>
 800bfc0:	18e1      	adds	r1, r4, r3
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	2030      	movs	r0, #48	@ 0x30
 800bfc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfca:	4422      	add	r2, r4
 800bfcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfd4:	3302      	adds	r3, #2
 800bfd6:	e7c7      	b.n	800bf68 <_printf_common+0x58>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	4622      	mov	r2, r4
 800bfdc:	4641      	mov	r1, r8
 800bfde:	4638      	mov	r0, r7
 800bfe0:	47c8      	blx	r9
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d0e6      	beq.n	800bfb4 <_printf_common+0xa4>
 800bfe6:	3601      	adds	r6, #1
 800bfe8:	e7d9      	b.n	800bf9e <_printf_common+0x8e>
	...

0800bfec <_printf_i>:
 800bfec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bff0:	7e0f      	ldrb	r7, [r1, #24]
 800bff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bff4:	2f78      	cmp	r7, #120	@ 0x78
 800bff6:	4691      	mov	r9, r2
 800bff8:	4680      	mov	r8, r0
 800bffa:	460c      	mov	r4, r1
 800bffc:	469a      	mov	sl, r3
 800bffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c002:	d807      	bhi.n	800c014 <_printf_i+0x28>
 800c004:	2f62      	cmp	r7, #98	@ 0x62
 800c006:	d80a      	bhi.n	800c01e <_printf_i+0x32>
 800c008:	2f00      	cmp	r7, #0
 800c00a:	f000 80d2 	beq.w	800c1b2 <_printf_i+0x1c6>
 800c00e:	2f58      	cmp	r7, #88	@ 0x58
 800c010:	f000 80b9 	beq.w	800c186 <_printf_i+0x19a>
 800c014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c01c:	e03a      	b.n	800c094 <_printf_i+0xa8>
 800c01e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c022:	2b15      	cmp	r3, #21
 800c024:	d8f6      	bhi.n	800c014 <_printf_i+0x28>
 800c026:	a101      	add	r1, pc, #4	@ (adr r1, 800c02c <_printf_i+0x40>)
 800c028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c02c:	0800c085 	.word	0x0800c085
 800c030:	0800c099 	.word	0x0800c099
 800c034:	0800c015 	.word	0x0800c015
 800c038:	0800c015 	.word	0x0800c015
 800c03c:	0800c015 	.word	0x0800c015
 800c040:	0800c015 	.word	0x0800c015
 800c044:	0800c099 	.word	0x0800c099
 800c048:	0800c015 	.word	0x0800c015
 800c04c:	0800c015 	.word	0x0800c015
 800c050:	0800c015 	.word	0x0800c015
 800c054:	0800c015 	.word	0x0800c015
 800c058:	0800c199 	.word	0x0800c199
 800c05c:	0800c0c3 	.word	0x0800c0c3
 800c060:	0800c153 	.word	0x0800c153
 800c064:	0800c015 	.word	0x0800c015
 800c068:	0800c015 	.word	0x0800c015
 800c06c:	0800c1bb 	.word	0x0800c1bb
 800c070:	0800c015 	.word	0x0800c015
 800c074:	0800c0c3 	.word	0x0800c0c3
 800c078:	0800c015 	.word	0x0800c015
 800c07c:	0800c015 	.word	0x0800c015
 800c080:	0800c15b 	.word	0x0800c15b
 800c084:	6833      	ldr	r3, [r6, #0]
 800c086:	1d1a      	adds	r2, r3, #4
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6032      	str	r2, [r6, #0]
 800c08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c094:	2301      	movs	r3, #1
 800c096:	e09d      	b.n	800c1d4 <_printf_i+0x1e8>
 800c098:	6833      	ldr	r3, [r6, #0]
 800c09a:	6820      	ldr	r0, [r4, #0]
 800c09c:	1d19      	adds	r1, r3, #4
 800c09e:	6031      	str	r1, [r6, #0]
 800c0a0:	0606      	lsls	r6, r0, #24
 800c0a2:	d501      	bpl.n	800c0a8 <_printf_i+0xbc>
 800c0a4:	681d      	ldr	r5, [r3, #0]
 800c0a6:	e003      	b.n	800c0b0 <_printf_i+0xc4>
 800c0a8:	0645      	lsls	r5, r0, #25
 800c0aa:	d5fb      	bpl.n	800c0a4 <_printf_i+0xb8>
 800c0ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0b0:	2d00      	cmp	r5, #0
 800c0b2:	da03      	bge.n	800c0bc <_printf_i+0xd0>
 800c0b4:	232d      	movs	r3, #45	@ 0x2d
 800c0b6:	426d      	negs	r5, r5
 800c0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0bc:	4859      	ldr	r0, [pc, #356]	@ (800c224 <_printf_i+0x238>)
 800c0be:	230a      	movs	r3, #10
 800c0c0:	e011      	b.n	800c0e6 <_printf_i+0xfa>
 800c0c2:	6821      	ldr	r1, [r4, #0]
 800c0c4:	6833      	ldr	r3, [r6, #0]
 800c0c6:	0608      	lsls	r0, r1, #24
 800c0c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0cc:	d402      	bmi.n	800c0d4 <_printf_i+0xe8>
 800c0ce:	0649      	lsls	r1, r1, #25
 800c0d0:	bf48      	it	mi
 800c0d2:	b2ad      	uxthmi	r5, r5
 800c0d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0d6:	4853      	ldr	r0, [pc, #332]	@ (800c224 <_printf_i+0x238>)
 800c0d8:	6033      	str	r3, [r6, #0]
 800c0da:	bf14      	ite	ne
 800c0dc:	230a      	movne	r3, #10
 800c0de:	2308      	moveq	r3, #8
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0e6:	6866      	ldr	r6, [r4, #4]
 800c0e8:	60a6      	str	r6, [r4, #8]
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	bfa2      	ittt	ge
 800c0ee:	6821      	ldrge	r1, [r4, #0]
 800c0f0:	f021 0104 	bicge.w	r1, r1, #4
 800c0f4:	6021      	strge	r1, [r4, #0]
 800c0f6:	b90d      	cbnz	r5, 800c0fc <_printf_i+0x110>
 800c0f8:	2e00      	cmp	r6, #0
 800c0fa:	d04b      	beq.n	800c194 <_printf_i+0x1a8>
 800c0fc:	4616      	mov	r6, r2
 800c0fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c102:	fb03 5711 	mls	r7, r3, r1, r5
 800c106:	5dc7      	ldrb	r7, [r0, r7]
 800c108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c10c:	462f      	mov	r7, r5
 800c10e:	42bb      	cmp	r3, r7
 800c110:	460d      	mov	r5, r1
 800c112:	d9f4      	bls.n	800c0fe <_printf_i+0x112>
 800c114:	2b08      	cmp	r3, #8
 800c116:	d10b      	bne.n	800c130 <_printf_i+0x144>
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	07df      	lsls	r7, r3, #31
 800c11c:	d508      	bpl.n	800c130 <_printf_i+0x144>
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	6861      	ldr	r1, [r4, #4]
 800c122:	4299      	cmp	r1, r3
 800c124:	bfde      	ittt	le
 800c126:	2330      	movle	r3, #48	@ 0x30
 800c128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c12c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c130:	1b92      	subs	r2, r2, r6
 800c132:	6122      	str	r2, [r4, #16]
 800c134:	f8cd a000 	str.w	sl, [sp]
 800c138:	464b      	mov	r3, r9
 800c13a:	aa03      	add	r2, sp, #12
 800c13c:	4621      	mov	r1, r4
 800c13e:	4640      	mov	r0, r8
 800c140:	f7ff fee6 	bl	800bf10 <_printf_common>
 800c144:	3001      	adds	r0, #1
 800c146:	d14a      	bne.n	800c1de <_printf_i+0x1f2>
 800c148:	f04f 30ff 	mov.w	r0, #4294967295
 800c14c:	b004      	add	sp, #16
 800c14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c152:	6823      	ldr	r3, [r4, #0]
 800c154:	f043 0320 	orr.w	r3, r3, #32
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	4833      	ldr	r0, [pc, #204]	@ (800c228 <_printf_i+0x23c>)
 800c15c:	2778      	movs	r7, #120	@ 0x78
 800c15e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	6831      	ldr	r1, [r6, #0]
 800c166:	061f      	lsls	r7, r3, #24
 800c168:	f851 5b04 	ldr.w	r5, [r1], #4
 800c16c:	d402      	bmi.n	800c174 <_printf_i+0x188>
 800c16e:	065f      	lsls	r7, r3, #25
 800c170:	bf48      	it	mi
 800c172:	b2ad      	uxthmi	r5, r5
 800c174:	6031      	str	r1, [r6, #0]
 800c176:	07d9      	lsls	r1, r3, #31
 800c178:	bf44      	itt	mi
 800c17a:	f043 0320 	orrmi.w	r3, r3, #32
 800c17e:	6023      	strmi	r3, [r4, #0]
 800c180:	b11d      	cbz	r5, 800c18a <_printf_i+0x19e>
 800c182:	2310      	movs	r3, #16
 800c184:	e7ac      	b.n	800c0e0 <_printf_i+0xf4>
 800c186:	4827      	ldr	r0, [pc, #156]	@ (800c224 <_printf_i+0x238>)
 800c188:	e7e9      	b.n	800c15e <_printf_i+0x172>
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	f023 0320 	bic.w	r3, r3, #32
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	e7f6      	b.n	800c182 <_printf_i+0x196>
 800c194:	4616      	mov	r6, r2
 800c196:	e7bd      	b.n	800c114 <_printf_i+0x128>
 800c198:	6833      	ldr	r3, [r6, #0]
 800c19a:	6825      	ldr	r5, [r4, #0]
 800c19c:	6961      	ldr	r1, [r4, #20]
 800c19e:	1d18      	adds	r0, r3, #4
 800c1a0:	6030      	str	r0, [r6, #0]
 800c1a2:	062e      	lsls	r6, r5, #24
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	d501      	bpl.n	800c1ac <_printf_i+0x1c0>
 800c1a8:	6019      	str	r1, [r3, #0]
 800c1aa:	e002      	b.n	800c1b2 <_printf_i+0x1c6>
 800c1ac:	0668      	lsls	r0, r5, #25
 800c1ae:	d5fb      	bpl.n	800c1a8 <_printf_i+0x1bc>
 800c1b0:	8019      	strh	r1, [r3, #0]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6123      	str	r3, [r4, #16]
 800c1b6:	4616      	mov	r6, r2
 800c1b8:	e7bc      	b.n	800c134 <_printf_i+0x148>
 800c1ba:	6833      	ldr	r3, [r6, #0]
 800c1bc:	1d1a      	adds	r2, r3, #4
 800c1be:	6032      	str	r2, [r6, #0]
 800c1c0:	681e      	ldr	r6, [r3, #0]
 800c1c2:	6862      	ldr	r2, [r4, #4]
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f7f4 f80a 	bl	80001e0 <memchr>
 800c1cc:	b108      	cbz	r0, 800c1d2 <_printf_i+0x1e6>
 800c1ce:	1b80      	subs	r0, r0, r6
 800c1d0:	6060      	str	r0, [r4, #4]
 800c1d2:	6863      	ldr	r3, [r4, #4]
 800c1d4:	6123      	str	r3, [r4, #16]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1dc:	e7aa      	b.n	800c134 <_printf_i+0x148>
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	47d0      	blx	sl
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d0ad      	beq.n	800c148 <_printf_i+0x15c>
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	079b      	lsls	r3, r3, #30
 800c1f0:	d413      	bmi.n	800c21a <_printf_i+0x22e>
 800c1f2:	68e0      	ldr	r0, [r4, #12]
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	4298      	cmp	r0, r3
 800c1f8:	bfb8      	it	lt
 800c1fa:	4618      	movlt	r0, r3
 800c1fc:	e7a6      	b.n	800c14c <_printf_i+0x160>
 800c1fe:	2301      	movs	r3, #1
 800c200:	4632      	mov	r2, r6
 800c202:	4649      	mov	r1, r9
 800c204:	4640      	mov	r0, r8
 800c206:	47d0      	blx	sl
 800c208:	3001      	adds	r0, #1
 800c20a:	d09d      	beq.n	800c148 <_printf_i+0x15c>
 800c20c:	3501      	adds	r5, #1
 800c20e:	68e3      	ldr	r3, [r4, #12]
 800c210:	9903      	ldr	r1, [sp, #12]
 800c212:	1a5b      	subs	r3, r3, r1
 800c214:	42ab      	cmp	r3, r5
 800c216:	dcf2      	bgt.n	800c1fe <_printf_i+0x212>
 800c218:	e7eb      	b.n	800c1f2 <_printf_i+0x206>
 800c21a:	2500      	movs	r5, #0
 800c21c:	f104 0619 	add.w	r6, r4, #25
 800c220:	e7f5      	b.n	800c20e <_printf_i+0x222>
 800c222:	bf00      	nop
 800c224:	0800ce4d 	.word	0x0800ce4d
 800c228:	0800ce5e 	.word	0x0800ce5e

0800c22c <__sflush_r>:
 800c22c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c234:	0716      	lsls	r6, r2, #28
 800c236:	4605      	mov	r5, r0
 800c238:	460c      	mov	r4, r1
 800c23a:	d454      	bmi.n	800c2e6 <__sflush_r+0xba>
 800c23c:	684b      	ldr	r3, [r1, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dc02      	bgt.n	800c248 <__sflush_r+0x1c>
 800c242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c244:	2b00      	cmp	r3, #0
 800c246:	dd48      	ble.n	800c2da <__sflush_r+0xae>
 800c248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c24a:	2e00      	cmp	r6, #0
 800c24c:	d045      	beq.n	800c2da <__sflush_r+0xae>
 800c24e:	2300      	movs	r3, #0
 800c250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c254:	682f      	ldr	r7, [r5, #0]
 800c256:	6a21      	ldr	r1, [r4, #32]
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	d030      	beq.n	800c2be <__sflush_r+0x92>
 800c25c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	0759      	lsls	r1, r3, #29
 800c262:	d505      	bpl.n	800c270 <__sflush_r+0x44>
 800c264:	6863      	ldr	r3, [r4, #4]
 800c266:	1ad2      	subs	r2, r2, r3
 800c268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c26a:	b10b      	cbz	r3, 800c270 <__sflush_r+0x44>
 800c26c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	2300      	movs	r3, #0
 800c272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c274:	6a21      	ldr	r1, [r4, #32]
 800c276:	4628      	mov	r0, r5
 800c278:	47b0      	blx	r6
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	d106      	bne.n	800c28e <__sflush_r+0x62>
 800c280:	6829      	ldr	r1, [r5, #0]
 800c282:	291d      	cmp	r1, #29
 800c284:	d82b      	bhi.n	800c2de <__sflush_r+0xb2>
 800c286:	4a2a      	ldr	r2, [pc, #168]	@ (800c330 <__sflush_r+0x104>)
 800c288:	410a      	asrs	r2, r1
 800c28a:	07d6      	lsls	r6, r2, #31
 800c28c:	d427      	bmi.n	800c2de <__sflush_r+0xb2>
 800c28e:	2200      	movs	r2, #0
 800c290:	6062      	str	r2, [r4, #4]
 800c292:	04d9      	lsls	r1, r3, #19
 800c294:	6922      	ldr	r2, [r4, #16]
 800c296:	6022      	str	r2, [r4, #0]
 800c298:	d504      	bpl.n	800c2a4 <__sflush_r+0x78>
 800c29a:	1c42      	adds	r2, r0, #1
 800c29c:	d101      	bne.n	800c2a2 <__sflush_r+0x76>
 800c29e:	682b      	ldr	r3, [r5, #0]
 800c2a0:	b903      	cbnz	r3, 800c2a4 <__sflush_r+0x78>
 800c2a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2a6:	602f      	str	r7, [r5, #0]
 800c2a8:	b1b9      	cbz	r1, 800c2da <__sflush_r+0xae>
 800c2aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2ae:	4299      	cmp	r1, r3
 800c2b0:	d002      	beq.n	800c2b8 <__sflush_r+0x8c>
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f7ff fb48 	bl	800b948 <_free_r>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2bc:	e00d      	b.n	800c2da <__sflush_r+0xae>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	47b0      	blx	r6
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	1c50      	adds	r0, r2, #1
 800c2c8:	d1c9      	bne.n	800c25e <__sflush_r+0x32>
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0c6      	beq.n	800c25e <__sflush_r+0x32>
 800c2d0:	2b1d      	cmp	r3, #29
 800c2d2:	d001      	beq.n	800c2d8 <__sflush_r+0xac>
 800c2d4:	2b16      	cmp	r3, #22
 800c2d6:	d11e      	bne.n	800c316 <__sflush_r+0xea>
 800c2d8:	602f      	str	r7, [r5, #0]
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e022      	b.n	800c324 <__sflush_r+0xf8>
 800c2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2e2:	b21b      	sxth	r3, r3
 800c2e4:	e01b      	b.n	800c31e <__sflush_r+0xf2>
 800c2e6:	690f      	ldr	r7, [r1, #16]
 800c2e8:	2f00      	cmp	r7, #0
 800c2ea:	d0f6      	beq.n	800c2da <__sflush_r+0xae>
 800c2ec:	0793      	lsls	r3, r2, #30
 800c2ee:	680e      	ldr	r6, [r1, #0]
 800c2f0:	bf08      	it	eq
 800c2f2:	694b      	ldreq	r3, [r1, #20]
 800c2f4:	600f      	str	r7, [r1, #0]
 800c2f6:	bf18      	it	ne
 800c2f8:	2300      	movne	r3, #0
 800c2fa:	eba6 0807 	sub.w	r8, r6, r7
 800c2fe:	608b      	str	r3, [r1, #8]
 800c300:	f1b8 0f00 	cmp.w	r8, #0
 800c304:	dde9      	ble.n	800c2da <__sflush_r+0xae>
 800c306:	6a21      	ldr	r1, [r4, #32]
 800c308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c30a:	4643      	mov	r3, r8
 800c30c:	463a      	mov	r2, r7
 800c30e:	4628      	mov	r0, r5
 800c310:	47b0      	blx	r6
 800c312:	2800      	cmp	r0, #0
 800c314:	dc08      	bgt.n	800c328 <__sflush_r+0xfc>
 800c316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c31e:	81a3      	strh	r3, [r4, #12]
 800c320:	f04f 30ff 	mov.w	r0, #4294967295
 800c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c328:	4407      	add	r7, r0
 800c32a:	eba8 0800 	sub.w	r8, r8, r0
 800c32e:	e7e7      	b.n	800c300 <__sflush_r+0xd4>
 800c330:	dfbffffe 	.word	0xdfbffffe

0800c334 <_fflush_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	690b      	ldr	r3, [r1, #16]
 800c338:	4605      	mov	r5, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	b913      	cbnz	r3, 800c344 <_fflush_r+0x10>
 800c33e:	2500      	movs	r5, #0
 800c340:	4628      	mov	r0, r5
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	b118      	cbz	r0, 800c34e <_fflush_r+0x1a>
 800c346:	6a03      	ldr	r3, [r0, #32]
 800c348:	b90b      	cbnz	r3, 800c34e <_fflush_r+0x1a>
 800c34a:	f7ff f817 	bl	800b37c <__sinit>
 800c34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0f3      	beq.n	800c33e <_fflush_r+0xa>
 800c356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c358:	07d0      	lsls	r0, r2, #31
 800c35a:	d404      	bmi.n	800c366 <_fflush_r+0x32>
 800c35c:	0599      	lsls	r1, r3, #22
 800c35e:	d402      	bmi.n	800c366 <_fflush_r+0x32>
 800c360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c362:	f7ff fad8 	bl	800b916 <__retarget_lock_acquire_recursive>
 800c366:	4628      	mov	r0, r5
 800c368:	4621      	mov	r1, r4
 800c36a:	f7ff ff5f 	bl	800c22c <__sflush_r>
 800c36e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c370:	07da      	lsls	r2, r3, #31
 800c372:	4605      	mov	r5, r0
 800c374:	d4e4      	bmi.n	800c340 <_fflush_r+0xc>
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	059b      	lsls	r3, r3, #22
 800c37a:	d4e1      	bmi.n	800c340 <_fflush_r+0xc>
 800c37c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c37e:	f7ff facb 	bl	800b918 <__retarget_lock_release_recursive>
 800c382:	e7dd      	b.n	800c340 <_fflush_r+0xc>

0800c384 <__swhatbuf_r>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	460c      	mov	r4, r1
 800c388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c38c:	2900      	cmp	r1, #0
 800c38e:	b096      	sub	sp, #88	@ 0x58
 800c390:	4615      	mov	r5, r2
 800c392:	461e      	mov	r6, r3
 800c394:	da0d      	bge.n	800c3b2 <__swhatbuf_r+0x2e>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c39c:	f04f 0100 	mov.w	r1, #0
 800c3a0:	bf14      	ite	ne
 800c3a2:	2340      	movne	r3, #64	@ 0x40
 800c3a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	6031      	str	r1, [r6, #0]
 800c3ac:	602b      	str	r3, [r5, #0]
 800c3ae:	b016      	add	sp, #88	@ 0x58
 800c3b0:	bd70      	pop	{r4, r5, r6, pc}
 800c3b2:	466a      	mov	r2, sp
 800c3b4:	f000 f896 	bl	800c4e4 <_fstat_r>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	dbec      	blt.n	800c396 <__swhatbuf_r+0x12>
 800c3bc:	9901      	ldr	r1, [sp, #4]
 800c3be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3c6:	4259      	negs	r1, r3
 800c3c8:	4159      	adcs	r1, r3
 800c3ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3ce:	e7eb      	b.n	800c3a8 <__swhatbuf_r+0x24>

0800c3d0 <__smakebuf_r>:
 800c3d0:	898b      	ldrh	r3, [r1, #12]
 800c3d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3d4:	079d      	lsls	r5, r3, #30
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	460c      	mov	r4, r1
 800c3da:	d507      	bpl.n	800c3ec <__smakebuf_r+0x1c>
 800c3dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	6123      	str	r3, [r4, #16]
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	6163      	str	r3, [r4, #20]
 800c3e8:	b003      	add	sp, #12
 800c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ec:	ab01      	add	r3, sp, #4
 800c3ee:	466a      	mov	r2, sp
 800c3f0:	f7ff ffc8 	bl	800c384 <__swhatbuf_r>
 800c3f4:	9f00      	ldr	r7, [sp, #0]
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f7fe fea6 	bl	800b14c <_malloc_r>
 800c400:	b948      	cbnz	r0, 800c416 <__smakebuf_r+0x46>
 800c402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c406:	059a      	lsls	r2, r3, #22
 800c408:	d4ee      	bmi.n	800c3e8 <__smakebuf_r+0x18>
 800c40a:	f023 0303 	bic.w	r3, r3, #3
 800c40e:	f043 0302 	orr.w	r3, r3, #2
 800c412:	81a3      	strh	r3, [r4, #12]
 800c414:	e7e2      	b.n	800c3dc <__smakebuf_r+0xc>
 800c416:	89a3      	ldrh	r3, [r4, #12]
 800c418:	6020      	str	r0, [r4, #0]
 800c41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c41e:	81a3      	strh	r3, [r4, #12]
 800c420:	9b01      	ldr	r3, [sp, #4]
 800c422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c426:	b15b      	cbz	r3, 800c440 <__smakebuf_r+0x70>
 800c428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c42c:	4630      	mov	r0, r6
 800c42e:	f000 f86b 	bl	800c508 <_isatty_r>
 800c432:	b128      	cbz	r0, 800c440 <__smakebuf_r+0x70>
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	f023 0303 	bic.w	r3, r3, #3
 800c43a:	f043 0301 	orr.w	r3, r3, #1
 800c43e:	81a3      	strh	r3, [r4, #12]
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	431d      	orrs	r5, r3
 800c444:	81a5      	strh	r5, [r4, #12]
 800c446:	e7cf      	b.n	800c3e8 <__smakebuf_r+0x18>

0800c448 <_putc_r>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	460d      	mov	r5, r1
 800c44c:	4614      	mov	r4, r2
 800c44e:	4606      	mov	r6, r0
 800c450:	b118      	cbz	r0, 800c45a <_putc_r+0x12>
 800c452:	6a03      	ldr	r3, [r0, #32]
 800c454:	b90b      	cbnz	r3, 800c45a <_putc_r+0x12>
 800c456:	f7fe ff91 	bl	800b37c <__sinit>
 800c45a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c45c:	07d8      	lsls	r0, r3, #31
 800c45e:	d405      	bmi.n	800c46c <_putc_r+0x24>
 800c460:	89a3      	ldrh	r3, [r4, #12]
 800c462:	0599      	lsls	r1, r3, #22
 800c464:	d402      	bmi.n	800c46c <_putc_r+0x24>
 800c466:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c468:	f7ff fa55 	bl	800b916 <__retarget_lock_acquire_recursive>
 800c46c:	68a3      	ldr	r3, [r4, #8]
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	60a3      	str	r3, [r4, #8]
 800c474:	da05      	bge.n	800c482 <_putc_r+0x3a>
 800c476:	69a2      	ldr	r2, [r4, #24]
 800c478:	4293      	cmp	r3, r2
 800c47a:	db12      	blt.n	800c4a2 <_putc_r+0x5a>
 800c47c:	b2eb      	uxtb	r3, r5
 800c47e:	2b0a      	cmp	r3, #10
 800c480:	d00f      	beq.n	800c4a2 <_putc_r+0x5a>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	6022      	str	r2, [r4, #0]
 800c488:	701d      	strb	r5, [r3, #0]
 800c48a:	b2ed      	uxtb	r5, r5
 800c48c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c48e:	07da      	lsls	r2, r3, #31
 800c490:	d405      	bmi.n	800c49e <_putc_r+0x56>
 800c492:	89a3      	ldrh	r3, [r4, #12]
 800c494:	059b      	lsls	r3, r3, #22
 800c496:	d402      	bmi.n	800c49e <_putc_r+0x56>
 800c498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c49a:	f7ff fa3d 	bl	800b918 <__retarget_lock_release_recursive>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	bd70      	pop	{r4, r5, r6, pc}
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f7ff f879 	bl	800b59e <__swbuf_r>
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	e7ed      	b.n	800c48c <_putc_r+0x44>

0800c4b0 <memmove>:
 800c4b0:	4288      	cmp	r0, r1
 800c4b2:	b510      	push	{r4, lr}
 800c4b4:	eb01 0402 	add.w	r4, r1, r2
 800c4b8:	d902      	bls.n	800c4c0 <memmove+0x10>
 800c4ba:	4284      	cmp	r4, r0
 800c4bc:	4623      	mov	r3, r4
 800c4be:	d807      	bhi.n	800c4d0 <memmove+0x20>
 800c4c0:	1e43      	subs	r3, r0, #1
 800c4c2:	42a1      	cmp	r1, r4
 800c4c4:	d008      	beq.n	800c4d8 <memmove+0x28>
 800c4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4ce:	e7f8      	b.n	800c4c2 <memmove+0x12>
 800c4d0:	4402      	add	r2, r0
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	428a      	cmp	r2, r1
 800c4d6:	d100      	bne.n	800c4da <memmove+0x2a>
 800c4d8:	bd10      	pop	{r4, pc}
 800c4da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4e2:	e7f7      	b.n	800c4d4 <memmove+0x24>

0800c4e4 <_fstat_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4d07      	ldr	r5, [pc, #28]	@ (800c504 <_fstat_r+0x20>)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	602b      	str	r3, [r5, #0]
 800c4f2:	f7f5 fdca 	bl	800208a <_fstat>
 800c4f6:	1c43      	adds	r3, r0, #1
 800c4f8:	d102      	bne.n	800c500 <_fstat_r+0x1c>
 800c4fa:	682b      	ldr	r3, [r5, #0]
 800c4fc:	b103      	cbz	r3, 800c500 <_fstat_r+0x1c>
 800c4fe:	6023      	str	r3, [r4, #0]
 800c500:	bd38      	pop	{r3, r4, r5, pc}
 800c502:	bf00      	nop
 800c504:	2000563c 	.word	0x2000563c

0800c508 <_isatty_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d06      	ldr	r5, [pc, #24]	@ (800c524 <_isatty_r+0x1c>)
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	602b      	str	r3, [r5, #0]
 800c514:	f7f5 fdc9 	bl	80020aa <_isatty>
 800c518:	1c43      	adds	r3, r0, #1
 800c51a:	d102      	bne.n	800c522 <_isatty_r+0x1a>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	b103      	cbz	r3, 800c522 <_isatty_r+0x1a>
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	bd38      	pop	{r3, r4, r5, pc}
 800c524:	2000563c 	.word	0x2000563c

0800c528 <_realloc_r>:
 800c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52c:	4680      	mov	r8, r0
 800c52e:	4615      	mov	r5, r2
 800c530:	460c      	mov	r4, r1
 800c532:	b921      	cbnz	r1, 800c53e <_realloc_r+0x16>
 800c534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c538:	4611      	mov	r1, r2
 800c53a:	f7fe be07 	b.w	800b14c <_malloc_r>
 800c53e:	b92a      	cbnz	r2, 800c54c <_realloc_r+0x24>
 800c540:	f7ff fa02 	bl	800b948 <_free_r>
 800c544:	2400      	movs	r4, #0
 800c546:	4620      	mov	r0, r4
 800c548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c54c:	f000 f81a 	bl	800c584 <_malloc_usable_size_r>
 800c550:	4285      	cmp	r5, r0
 800c552:	4606      	mov	r6, r0
 800c554:	d802      	bhi.n	800c55c <_realloc_r+0x34>
 800c556:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c55a:	d8f4      	bhi.n	800c546 <_realloc_r+0x1e>
 800c55c:	4629      	mov	r1, r5
 800c55e:	4640      	mov	r0, r8
 800c560:	f7fe fdf4 	bl	800b14c <_malloc_r>
 800c564:	4607      	mov	r7, r0
 800c566:	2800      	cmp	r0, #0
 800c568:	d0ec      	beq.n	800c544 <_realloc_r+0x1c>
 800c56a:	42b5      	cmp	r5, r6
 800c56c:	462a      	mov	r2, r5
 800c56e:	4621      	mov	r1, r4
 800c570:	bf28      	it	cs
 800c572:	4632      	movcs	r2, r6
 800c574:	f7ff f9d9 	bl	800b92a <memcpy>
 800c578:	4621      	mov	r1, r4
 800c57a:	4640      	mov	r0, r8
 800c57c:	f7ff f9e4 	bl	800b948 <_free_r>
 800c580:	463c      	mov	r4, r7
 800c582:	e7e0      	b.n	800c546 <_realloc_r+0x1e>

0800c584 <_malloc_usable_size_r>:
 800c584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c588:	1f18      	subs	r0, r3, #4
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	bfbc      	itt	lt
 800c58e:	580b      	ldrlt	r3, [r1, r0]
 800c590:	18c0      	addlt	r0, r0, r3
 800c592:	4770      	bx	lr

0800c594 <_init>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	bf00      	nop
 800c598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c59a:	bc08      	pop	{r3}
 800c59c:	469e      	mov	lr, r3
 800c59e:	4770      	bx	lr

0800c5a0 <_fini>:
 800c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a2:	bf00      	nop
 800c5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5a6:	bc08      	pop	{r3}
 800c5a8:	469e      	mov	lr, r3
 800c5aa:	4770      	bx	lr
