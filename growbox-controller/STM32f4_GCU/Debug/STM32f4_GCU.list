
STM32f4_GCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bac0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  0800bc50  0800bc50  0000cc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c48c  0800c48c  0000e0e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c48c  0800c48c  0000d48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c494  0800c494  0000e0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c494  0800c494  0000d494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c498  0800c498  0000d498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800c49c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0e8  2**0
                  CONTENTS
 10 .bss          0000555c  200000e8  200000e8  0000e0e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005644  20005644  0000e0e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ddd7  00000000  00000000  0000e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047e9  00000000  00000000  0002beef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a68  00000000  00000000  000306d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001480  00000000  00000000  00032140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006055  00000000  00000000  000335c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e657  00000000  00000000  00039615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de3fc  00000000  00000000  00057c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136068  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007868  00000000  00000000  001360ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013d914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc38 	.word	0x0800bc38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	0800bc38 	.word	0x0800bc38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f005 f9da 	bl	800592c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f882 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9aa 	bl	80008d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000580:	f000 f8e8 	bl	8000754 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f952 	bl	800082c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000588:	f000 f97a 	bl	8000880 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800058c:	f000 f918 	bl	80007c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  printf("\t - W5x00 Project - \r\n");
 8000590:	482d      	ldr	r0, [pc, #180]	@ (8000648 <main+0xd8>)
 8000592:	f00a fb31 	bl	800abf8 <puts>
  resetAssert();
 8000596:	f001 f9ff 	bl	8001998 <resetAssert>
  HAL_Delay(300);
 800059a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800059e:	f005 fa07 	bl	80059b0 <HAL_Delay>
  resetDeassert();
 80005a2:	f001 fa05 	bl	80019b0 <resetDeassert>
  HAL_Delay(300);
 80005a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005aa:	f005 fa01 	bl	80059b0 <HAL_Delay>
  printf("initialize_network\r\n");
 80005ae:	4827      	ldr	r0, [pc, #156]	@ (800064c <main+0xdc>)
 80005b0:	f00a fb22 	bl	800abf8 <puts>
  initialize_network();
 80005b4:	f000 fdd2 	bl	800115c <initialize_network>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b8:	f007 fba2 	bl	8007d00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AliveTask */
  AliveTaskHandle = osThreadNew(StartAliveTask, NULL, &AliveTask_attributes);
 80005bc:	4a24      	ldr	r2, [pc, #144]	@ (8000650 <main+0xe0>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4824      	ldr	r0, [pc, #144]	@ (8000654 <main+0xe4>)
 80005c2:	f007 fbe7 	bl	8007d94 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a23      	ldr	r2, [pc, #140]	@ (8000658 <main+0xe8>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of NetworkTask */
  NetworkTaskHandle = osThreadNew(StartNetworkTask, NULL, &NetworkTask_attributes);
 80005cc:	4a23      	ldr	r2, [pc, #140]	@ (800065c <main+0xec>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4823      	ldr	r0, [pc, #140]	@ (8000660 <main+0xf0>)
 80005d2:	f007 fbdf 	bl	8007d94 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a22      	ldr	r2, [pc, #136]	@ (8000664 <main+0xf4>)
 80005da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if (AliveTaskHandle == NULL) {
 80005dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <main+0xe8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d103      	bne.n	80005ec <main+0x7c>
      printf("Failed to create aliveTask.\r\n");
 80005e4:	4820      	ldr	r0, [pc, #128]	@ (8000668 <main+0xf8>)
 80005e6:	f00a fb07 	bl	800abf8 <puts>
 80005ea:	e002      	b.n	80005f2 <main+0x82>
  } else {
      printf("aliveTask created successfully.\r\n");
 80005ec:	481f      	ldr	r0, [pc, #124]	@ (800066c <main+0xfc>)
 80005ee:	f00a fb03 	bl	800abf8 <puts>
  }

  /* creation of webSocketTask */
  if (NetworkTaskHandle == NULL) {
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <main+0xf4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d103      	bne.n	8000602 <main+0x92>
      printf("Failed to create NetworkTask.\r\n");
 80005fa:	481d      	ldr	r0, [pc, #116]	@ (8000670 <main+0x100>)
 80005fc:	f00a fafc 	bl	800abf8 <puts>
 8000600:	e002      	b.n	8000608 <main+0x98>
  } else {
      printf("NetworkTask created successfully.\r\n");
 8000602:	481c      	ldr	r0, [pc, #112]	@ (8000674 <main+0x104>)
 8000604:	f00a faf8 	bl	800abf8 <puts>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000608:	f007 fb9e 	bl	8007d48 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      // Using printf to send "Test\r\n"
      printf("Test12345\r\n");
 800060c:	481a      	ldr	r0, [pc, #104]	@ (8000678 <main+0x108>)
 800060e:	f00a faf3 	bl	800abf8 <puts>



      // Toggle LEDs
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	4819      	ldr	r0, [pc, #100]	@ (800067c <main+0x10c>)
 8000618:	f005 fc85 	bl	8005f26 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800061c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000620:	4816      	ldr	r0, [pc, #88]	@ (800067c <main+0x10c>)
 8000622:	f005 fc80 	bl	8005f26 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000626:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800062a:	4814      	ldr	r0, [pc, #80]	@ (800067c <main+0x10c>)
 800062c:	f005 fc7b 	bl	8005f26 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000630:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000634:	4811      	ldr	r0, [pc, #68]	@ (800067c <main+0x10c>)
 8000636:	f005 fc76 	bl	8005f26 <HAL_GPIO_TogglePin>

      // Insert delay
      HAL_Delay(500); // 500 ms delay
 800063a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063e:	f005 f9b7 	bl	80059b0 <HAL_Delay>
      printf("Test12345\r\n");
 8000642:	bf00      	nop
 8000644:	e7e2      	b.n	800060c <main+0x9c>
 8000646:	bf00      	nop
 8000648:	0800bc68 	.word	0x0800bc68
 800064c:	0800bc80 	.word	0x0800bc80
 8000650:	0800c3f8 	.word	0x0800c3f8
 8000654:	08000b79 	.word	0x08000b79
 8000658:	20000244 	.word	0x20000244
 800065c:	0800c41c 	.word	0x0800c41c
 8000660:	08000bc5 	.word	0x08000bc5
 8000664:	20000248 	.word	0x20000248
 8000668:	0800bc94 	.word	0x0800bc94
 800066c:	0800bcb4 	.word	0x0800bcb4
 8000670:	0800bcd8 	.word	0x0800bcd8
 8000674:	0800bcf8 	.word	0x0800bcf8
 8000678:	0800bd1c 	.word	0x0800bd1c
 800067c:	40020c00 	.word	0x40020c00

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00a fbb2 	bl	800adf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	@ (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fc28 	bl	8005f5c <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000712:	f000 fbff 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f005 fe89 	bl	800644c <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000740:	f000 fbe8 	bl	8000f14 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	@ 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2208      	movs	r2, #8
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f006 f8a3 	bl	80068f0 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 fbb0 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000104 	.word	0x20000104
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_SPI2_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_SPI2_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_SPI2_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_SPI2_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_SPI2_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_SPI2_Init+0x64>)
 8000812:	f006 f86d 	bl	80068f0 <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 fb7a 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000015c 	.word	0x2000015c
 8000828:	40003800 	.word	0x40003800

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f006 fdfc 	bl	8007460 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 fb51 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001b4 	.word	0x200001b4
 800087c:	40004400 	.word	0x40004400

08000880 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	@ (80008d0 <MX_USART3_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_USART3_UART_Init+0x4c>)
 80008b8:	f006 fdd2 	bl	8007460 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 fb27 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200001fc 	.word	0x200001fc
 80008d0:	40004800 	.word	0x40004800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	4b9c      	ldr	r3, [pc, #624]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a9b      	ldr	r2, [pc, #620]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b99      	ldr	r3, [pc, #612]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	4b95      	ldr	r3, [pc, #596]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a94      	ldr	r2, [pc, #592]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b92      	ldr	r3, [pc, #584]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b8e      	ldr	r3, [pc, #568]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a8d      	ldr	r2, [pc, #564]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b8b      	ldr	r3, [pc, #556]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b87      	ldr	r3, [pc, #540]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a86      	ldr	r2, [pc, #536]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b84      	ldr	r3, [pc, #528]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b80      	ldr	r3, [pc, #512]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a7f      	ldr	r2, [pc, #508]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b7d      	ldr	r3, [pc, #500]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b79      	ldr	r3, [pc, #484]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a78      	ldr	r2, [pc, #480]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b76      	ldr	r3, [pc, #472]	@ (8000b60 <MX_GPIO_Init+0x28c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2108      	movs	r1, #8
 8000996:	4873      	ldr	r0, [pc, #460]	@ (8000b64 <MX_GPIO_Init+0x290>)
 8000998:	f005 faac 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	4871      	ldr	r0, [pc, #452]	@ (8000b68 <MX_GPIO_Init+0x294>)
 80009a2:	f005 faa7 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, W5500_ChipSelect_Pin|W5500_ChipReset_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2130      	movs	r1, #48	@ 0x30
 80009aa:	486f      	ldr	r0, [pc, #444]	@ (8000b68 <MX_GPIO_Init+0x294>)
 80009ac:	f005 faa2 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b0:	2200      	movs	r2, #0
 80009b2:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009b6:	486d      	ldr	r0, [pc, #436]	@ (8000b6c <MX_GPIO_Init+0x298>)
 80009b8:	f005 fa9c 	bl	8005ef4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009bc:	2308      	movs	r3, #8
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4864      	ldr	r0, [pc, #400]	@ (8000b64 <MX_GPIO_Init+0x290>)
 80009d4:	f005 f8f2 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin W5500_ChipSelect_Pin W5500_ChipReset_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|W5500_ChipSelect_Pin|W5500_ChipReset_Pin;
 80009d8:	2331      	movs	r3, #49	@ 0x31
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	485e      	ldr	r0, [pc, #376]	@ (8000b68 <MX_GPIO_Init+0x294>)
 80009f0:	f005 f8e4 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009f4:	2308      	movs	r3, #8
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a04:	2305      	movs	r3, #5
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4856      	ldr	r0, [pc, #344]	@ (8000b68 <MX_GPIO_Init+0x294>)
 8000a10:	f005 f8d4 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a18:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4851      	ldr	r0, [pc, #324]	@ (8000b70 <MX_GPIO_Init+0x29c>)
 8000a2a:	f005 f8c7 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a2e:	2310      	movs	r3, #16
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4849      	ldr	r0, [pc, #292]	@ (8000b70 <MX_GPIO_Init+0x29c>)
 8000a4a:	f005 f8b7 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4844      	ldr	r0, [pc, #272]	@ (8000b74 <MX_GPIO_Init+0x2a0>)
 8000a62:	f005 f8ab 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a78:	2305      	movs	r3, #5
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	483c      	ldr	r0, [pc, #240]	@ (8000b74 <MX_GPIO_Init+0x2a0>)
 8000a84:	f005 f89a 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a88:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a8c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4832      	ldr	r0, [pc, #200]	@ (8000b6c <MX_GPIO_Init+0x298>)
 8000aa2:	f005 f88b 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4829      	ldr	r0, [pc, #164]	@ (8000b68 <MX_GPIO_Init+0x294>)
 8000ac4:	f005 f87a 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4824      	ldr	r0, [pc, #144]	@ (8000b70 <MX_GPIO_Init+0x29c>)
 8000ade:	f005 f86d 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ae2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af4:	230a      	movs	r3, #10
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481c      	ldr	r0, [pc, #112]	@ (8000b70 <MX_GPIO_Init+0x29c>)
 8000b00:	f005 f85c 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b04:	2320      	movs	r3, #32
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4815      	ldr	r0, [pc, #84]	@ (8000b6c <MX_GPIO_Init+0x298>)
 8000b18:	f005 f850 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b1c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	480e      	ldr	r0, [pc, #56]	@ (8000b74 <MX_GPIO_Init+0x2a0>)
 8000b3a:	f005 f83f 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b42:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_GPIO_Init+0x290>)
 8000b54:	f005 f832 	bl	8005bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	@ 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400

08000b78 <StartAliveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAliveTask */
void StartAliveTask(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    printf("ToggleLED\r\n");
 8000b80:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <StartAliveTask+0x44>)
 8000b82:	f00a f839 	bl	800abf8 <puts>
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b8a:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <StartAliveTask+0x48>)
 8000b8c:	f005 f9cb 	bl	8005f26 <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b94:	480a      	ldr	r0, [pc, #40]	@ (8000bc0 <StartAliveTask+0x48>)
 8000b96:	f005 f9c6 	bl	8005f26 <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000b9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b9e:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <StartAliveTask+0x48>)
 8000ba0:	f005 f9c1 	bl	8005f26 <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <StartAliveTask+0x48>)
 8000baa:	f005 f9bc 	bl	8005f26 <HAL_GPIO_TogglePin>

		//osDelay(999); // Warte 1 Sekunde
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 8000bae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bb2:	f008 f921 	bl	8008df8 <vTaskDelay>
	    printf("ToggleLED\r\n");
 8000bb6:	bf00      	nop
 8000bb8:	e7e2      	b.n	8000b80 <StartAliveTask+0x8>
 8000bba:	bf00      	nop
 8000bbc:	0800bd40 	.word	0x0800bd40
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <StartNetworkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNetworkTask */
void StartNetworkTask(void *argument)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08d      	sub	sp, #52	@ 0x34
 8000bc8:	af04      	add	r7, sp, #16
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartwebSocketTask */
	printf("StartwebSocketTask\r\n");
 8000bcc:	48b3      	ldr	r0, [pc, #716]	@ (8000e9c <StartNetworkTask+0x2d8>)
 8000bce:	f00a f813 	bl	800abf8 <puts>
	// otherwise the task freeze
    uint8_t *buf = (uint8_t *)malloc(DATA_BUF_SIZE);
 8000bd2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000bd6:	f009 fe27 	bl	800a828 <malloc>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	617b      	str	r3, [r7, #20]
    if (buf == NULL) {
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d103      	bne.n	8000bec <StartNetworkTask+0x28>
        printf("Failed to allocate memory for buffer\n");
 8000be4:	48ae      	ldr	r0, [pc, #696]	@ (8000ea0 <StartNetworkTask+0x2dc>)
 8000be6:	f00a f807 	bl	800abf8 <puts>
        return;
 8000bea:	e153      	b.n	8000e94 <StartNetworkTask+0x2d0>
    }

  uint8_t destip[4] = {192, 168, 178, 25}; // Beispiel-IP-Adresse
 8000bec:	4bad      	ldr	r3, [pc, #692]	@ (8000ea4 <StartNetworkTask+0x2e0>)
 8000bee:	60bb      	str	r3, [r7, #8]
  uint16_t destport = 8085; // port
 8000bf0:	f641 7395 	movw	r3, #8085	@ 0x1f95
 8000bf4:	827b      	strh	r3, [r7, #18]

  //uint32_t last_ping_time = 0;
  static uint16_t any_port = 50000;
  uint8_t currentSocketStatus = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	747b      	strb	r3, [r7, #17]

  int websocket_upgraded = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {

      currentSocketStatus = getSn_SR(SOCK_DHCP);
 8000bfe:	f44f 705a 	mov.w	r0, #872	@ 0x368
 8000c02:	f002 fef5 	bl	80039f0 <WIZCHIP_READ>
 8000c06:	4603      	mov	r3, r0
 8000c08:	747b      	strb	r3, [r7, #17]
	  //printf("Status of Socket %d is: %d\r\n", SOCK_DHCP, currentSocketStatus);

	  switch (currentSocketStatus) {
 8000c0a:	7c7b      	ldrb	r3, [r7, #17]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d06f      	beq.n	8000cf0 <StartNetworkTask+0x12c>
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f2c0 8131 	blt.w	8000e78 <StartNetworkTask+0x2b4>
 8000c16:	2b42      	cmp	r3, #66	@ 0x42
 8000c18:	f300 812e 	bgt.w	8000e78 <StartNetworkTask+0x2b4>
 8000c1c:	2b13      	cmp	r3, #19
 8000c1e:	f2c0 812b 	blt.w	8000e78 <StartNetworkTask+0x2b4>
 8000c22:	3b13      	subs	r3, #19
 8000c24:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c26:	f200 8127 	bhi.w	8000e78 <StartNetworkTask+0x2b4>
 8000c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c30 <StartNetworkTask+0x6c>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000d33 	.word	0x08000d33
 8000c34:	08000d7b 	.word	0x08000d7b
 8000c38:	08000e79 	.word	0x08000e79
 8000c3c:	08000e79 	.word	0x08000e79
 8000c40:	08000d83 	.word	0x08000d83
 8000c44:	08000e79 	.word	0x08000e79
 8000c48:	08000e79 	.word	0x08000e79
 8000c4c:	08000e79 	.word	0x08000e79
 8000c50:	08000e79 	.word	0x08000e79
 8000c54:	08000e59 	.word	0x08000e59
 8000c58:	08000e79 	.word	0x08000e79
 8000c5c:	08000e79 	.word	0x08000e79
 8000c60:	08000e79 	.word	0x08000e79
 8000c64:	08000e79 	.word	0x08000e79
 8000c68:	08000e79 	.word	0x08000e79
 8000c6c:	08000e61 	.word	0x08000e61
 8000c70:	08000e79 	.word	0x08000e79
 8000c74:	08000e79 	.word	0x08000e79
 8000c78:	08000e79 	.word	0x08000e79
 8000c7c:	08000e79 	.word	0x08000e79
 8000c80:	08000e79 	.word	0x08000e79
 8000c84:	08000e79 	.word	0x08000e79
 8000c88:	08000e79 	.word	0x08000e79
 8000c8c:	08000e79 	.word	0x08000e79
 8000c90:	08000e79 	.word	0x08000e79
 8000c94:	08000e79 	.word	0x08000e79
 8000c98:	08000e79 	.word	0x08000e79
 8000c9c:	08000e79 	.word	0x08000e79
 8000ca0:	08000e79 	.word	0x08000e79
 8000ca4:	08000e79 	.word	0x08000e79
 8000ca8:	08000e79 	.word	0x08000e79
 8000cac:	08000e69 	.word	0x08000e69
 8000cb0:	08000e79 	.word	0x08000e79
 8000cb4:	08000e79 	.word	0x08000e79
 8000cb8:	08000e79 	.word	0x08000e79
 8000cbc:	08000e79 	.word	0x08000e79
 8000cc0:	08000e79 	.word	0x08000e79
 8000cc4:	08000e79 	.word	0x08000e79
 8000cc8:	08000e79 	.word	0x08000e79
 8000ccc:	08000e79 	.word	0x08000e79
 8000cd0:	08000e79 	.word	0x08000e79
 8000cd4:	08000e79 	.word	0x08000e79
 8000cd8:	08000e79 	.word	0x08000e79
 8000cdc:	08000e79 	.word	0x08000e79
 8000ce0:	08000e79 	.word	0x08000e79
 8000ce4:	08000e79 	.word	0x08000e79
 8000ce8:	08000e79 	.word	0x08000e79
 8000cec:	08000e71 	.word	0x08000e71
	      case SOCK_CLOSED:
	         printf("%d:Socket closed, reopening...\r\n", SOCK_DHCP);
 8000cf0:	2103      	movs	r1, #3
 8000cf2:	486d      	ldr	r0, [pc, #436]	@ (8000ea8 <StartNetworkTask+0x2e4>)
 8000cf4:	f009 ff18 	bl	800ab28 <iprintf>

	         if((socket(SOCK_DHCP, Sn_MR_TCP, any_port++, 0x00)) != SOCK_DHCP)
 8000cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8000eac <StartNetworkTask+0x2e8>)
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	1c53      	adds	r3, r2, #1
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	4b6a      	ldr	r3, [pc, #424]	@ (8000eac <StartNetworkTask+0x2e8>)
 8000d02:	8019      	strh	r1, [r3, #0]
 8000d04:	2300      	movs	r3, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f003 f957 	bl	8003fbc <socket>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d009      	beq.n	8000d28 <StartNetworkTask+0x164>
	         {
	            if(any_port == 0xffff) any_port = 50000;
 8000d14:	4b65      	ldr	r3, [pc, #404]	@ (8000eac <StartNetworkTask+0x2e8>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d103      	bne.n	8000d28 <StartNetworkTask+0x164>
 8000d20:	4b62      	ldr	r3, [pc, #392]	@ (8000eac <StartNetworkTask+0x2e8>)
 8000d22:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000d26:	801a      	strh	r2, [r3, #0]
	         }
	         printf("%d:Socket opened\r\n", SOCK_DHCP);
 8000d28:	2103      	movs	r1, #3
 8000d2a:	4861      	ldr	r0, [pc, #388]	@ (8000eb0 <StartNetworkTask+0x2ec>)
 8000d2c:	f009 fefc 	bl	800ab28 <iprintf>
	         break;
 8000d30:	e0ab      	b.n	8000e8a <StartNetworkTask+0x2c6>

	      case SOCK_INIT:
	          printf("Socket is initialized.\r\n");
 8000d32:	4860      	ldr	r0, [pc, #384]	@ (8000eb4 <StartNetworkTask+0x2f0>)
 8000d34:	f009 ff60 	bl	800abf8 <puts>

	          printf("%d:Try to connect to the %d.%d.%d.%d : %d\r\n", SOCK_DHCP, destip[0], destip[1], destip[2], destip[3], destport);
 8000d38:	7a3b      	ldrb	r3, [r7, #8]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	7a7b      	ldrb	r3, [r7, #9]
 8000d3e:	461c      	mov	r4, r3
 8000d40:	7abb      	ldrb	r3, [r7, #10]
 8000d42:	461a      	mov	r2, r3
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	4619      	mov	r1, r3
 8000d48:	8a7b      	ldrh	r3, [r7, #18]
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	9101      	str	r1, [sp, #4]
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	4623      	mov	r3, r4
 8000d52:	4602      	mov	r2, r0
 8000d54:	2103      	movs	r1, #3
 8000d56:	4858      	ldr	r0, [pc, #352]	@ (8000eb8 <StartNetworkTask+0x2f4>)
 8000d58:	f009 fee6 	bl	800ab28 <iprintf>

	          if(connect(SOCK_DHCP, destip, destport) != SOCK_OK){
 8000d5c:	8a7a      	ldrh	r2, [r7, #18]
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4619      	mov	r1, r3
 8000d64:	2003      	movs	r0, #3
 8000d66:	f003 faab 	bl	80042c0 <connect>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	f000 8089 	beq.w	8000e84 <StartNetworkTask+0x2c0>
	        	  printf("PROBLEM\r\n");
 8000d72:	4852      	ldr	r0, [pc, #328]	@ (8000ebc <StartNetworkTask+0x2f8>)
 8000d74:	f009 ff40 	bl	800abf8 <puts>
	          }

	          break;
 8000d78:	e084      	b.n	8000e84 <StartNetworkTask+0x2c0>
	      case SOCK_LISTEN:
	          printf("Socket is in listen state.\n");
 8000d7a:	4851      	ldr	r0, [pc, #324]	@ (8000ec0 <StartNetworkTask+0x2fc>)
 8000d7c:	f009 ff3c 	bl	800abf8 <puts>
	          break;
 8000d80:	e083      	b.n	8000e8a <StartNetworkTask+0x2c6>




	      case SOCK_ESTABLISHED:
	          printf("Socket is established.\r\n");
 8000d82:	4850      	ldr	r0, [pc, #320]	@ (8000ec4 <StartNetworkTask+0x300>)
 8000d84:	f009 ff38 	bl	800abf8 <puts>



	          if (getSn_IR(SOCK_DHCP) & Sn_IR_CON) {
 8000d88:	f44f 701a 	mov.w	r0, #616	@ 0x268
 8000d8c:	f002 fe30 	bl	80039f0 <WIZCHIP_READ>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d016      	beq.n	8000dc8 <StartNetworkTask+0x204>
	              printf("%d: Connected to - %d.%d.%d.%d : %d\r\n", SOCK_DHCP, destip[0], destip[1], destip[2], destip[3], destport);
 8000d9a:	7a3b      	ldrb	r3, [r7, #8]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	7a7b      	ldrb	r3, [r7, #9]
 8000da0:	461c      	mov	r4, r3
 8000da2:	7abb      	ldrb	r3, [r7, #10]
 8000da4:	461a      	mov	r2, r3
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	4619      	mov	r1, r3
 8000daa:	8a7b      	ldrh	r3, [r7, #18]
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	9101      	str	r1, [sp, #4]
 8000db0:	9200      	str	r2, [sp, #0]
 8000db2:	4623      	mov	r3, r4
 8000db4:	4602      	mov	r2, r0
 8000db6:	2103      	movs	r1, #3
 8000db8:	4843      	ldr	r0, [pc, #268]	@ (8000ec8 <StartNetworkTask+0x304>)
 8000dba:	f009 feb5 	bl	800ab28 <iprintf>
	              setSn_IR(SOCK_DHCP, Sn_IR_CON);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	f44f 701a 	mov.w	r0, #616	@ 0x268
 8000dc4:	f002 fe60 	bl	8003a88 <WIZCHIP_WRITE>
//	              //upgrade_to_websocket(SOCK_DHCP);
	          }



              if (!websocket_upgraded) {
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d114      	bne.n	8000df8 <StartNetworkTask+0x234>
                  if (upgrade_to_websocket(SOCK_DHCP) == 0) {
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 fa46 	bl	8001260 <upgrade_to_websocket>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d105      	bne.n	8000de6 <StartNetworkTask+0x222>
                      printf("WebSocket upgrade successful.\n");
 8000dda:	483c      	ldr	r0, [pc, #240]	@ (8000ecc <StartNetworkTask+0x308>)
 8000ddc:	f009 ff0c 	bl	800abf8 <puts>
                      websocket_upgraded = 1; // Upgrade als durchgeführt markieren
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	e008      	b.n	8000df8 <StartNetworkTask+0x234>
                  } else {
                      printf("WebSocket upgrade failed.\n");
 8000de6:	483a      	ldr	r0, [pc, #232]	@ (8000ed0 <StartNetworkTask+0x30c>)
 8000de8:	f009 ff06 	bl	800abf8 <puts>
                      close(SOCK_DHCP);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f003 f9f9 	bl	80041e4 <close>
                      free(buf);
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f009 fd20 	bl	800a838 <free>
//              }


              // Empfang von WebSocket-Daten
              int32_t ret;
              uint16_t size = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	837b      	strh	r3, [r7, #26]

              if ((size = getSn_RX_RSR(SOCK_DHCP)) > 0) {
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f002 ff9a 	bl	8003d36 <getSn_RX_RSR>
 8000e02:	4603      	mov	r3, r0
 8000e04:	837b      	strh	r3, [r7, #26]
 8000e06:	8b7b      	ldrh	r3, [r7, #26]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d03d      	beq.n	8000e88 <StartNetworkTask+0x2c4>
                  if (size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8000e0c:	8b7b      	ldrh	r3, [r7, #26]
 8000e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e12:	d902      	bls.n	8000e1a <StartNetworkTask+0x256>
 8000e14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e18:	837b      	strh	r3, [r7, #26]

                  ret = recv(SOCK_DHCP, buf, size);
 8000e1a:	8b7b      	ldrh	r3, [r7, #26]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	6979      	ldr	r1, [r7, #20]
 8000e20:	2003      	movs	r0, #3
 8000e22:	f003 fc21 	bl	8004668 <recv>
 8000e26:	60f8      	str	r0, [r7, #12]
                  if (ret <= 0) {
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	dc08      	bgt.n	8000e40 <StartNetworkTask+0x27c>
                      printf("Error receiving data. Socket closed.\n");
 8000e2e:	4829      	ldr	r0, [pc, #164]	@ (8000ed4 <StartNetworkTask+0x310>)
 8000e30:	f009 fee2 	bl	800abf8 <puts>
                      close(SOCK_DHCP);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f003 f9d5 	bl	80041e4 <close>
                      free(buf);
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f009 fcfc 	bl	800a838 <free>
                  }
                  size = (uint16_t) ret;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	837b      	strh	r3, [r7, #26]

                  buf[size] = '\0'; // Nullterminierung
 8000e44:	8b7b      	ldrh	r3, [r7, #26]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4413      	add	r3, r2
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
                  printf("Empfangene Nachricht: %s\n", buf);
 8000e4e:	6979      	ldr	r1, [r7, #20]
 8000e50:	4821      	ldr	r0, [pc, #132]	@ (8000ed8 <StartNetworkTask+0x314>)
 8000e52:	f009 fe69 	bl	800ab28 <iprintf>
              }


	          break;
 8000e56:	e017      	b.n	8000e88 <StartNetworkTask+0x2c4>
	      case SOCK_CLOSE_WAIT:
	          printf("Socket is closing.\n");
 8000e58:	4820      	ldr	r0, [pc, #128]	@ (8000edc <StartNetworkTask+0x318>)
 8000e5a:	f009 fecd 	bl	800abf8 <puts>
	          break;
 8000e5e:	e014      	b.n	8000e8a <StartNetworkTask+0x2c6>
	      case SOCK_UDP:
	          printf("Socket is in UDP mode.\n");
 8000e60:	481f      	ldr	r0, [pc, #124]	@ (8000ee0 <StartNetworkTask+0x31c>)
 8000e62:	f009 fec9 	bl	800abf8 <puts>
	          break;
 8000e66:	e010      	b.n	8000e8a <StartNetworkTask+0x2c6>
	      case SOCK_IPRAW:
	          printf("Socket is in IP RAW mode.\n");
 8000e68:	481e      	ldr	r0, [pc, #120]	@ (8000ee4 <StartNetworkTask+0x320>)
 8000e6a:	f009 fec5 	bl	800abf8 <puts>
	          break;
 8000e6e:	e00c      	b.n	8000e8a <StartNetworkTask+0x2c6>
	      case SOCK_MACRAW:
	          printf("Socket is in MAC RAW mode.\n");
 8000e70:	481d      	ldr	r0, [pc, #116]	@ (8000ee8 <StartNetworkTask+0x324>)
 8000e72:	f009 fec1 	bl	800abf8 <puts>
	          break;
 8000e76:	e008      	b.n	8000e8a <StartNetworkTask+0x2c6>
	      default:
	          printf("Unknown socket status: %d\n", currentSocketStatus);
 8000e78:	7c7b      	ldrb	r3, [r7, #17]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481b      	ldr	r0, [pc, #108]	@ (8000eec <StartNetworkTask+0x328>)
 8000e7e:	f009 fe53 	bl	800ab28 <iprintf>
	          break;
 8000e82:	e002      	b.n	8000e8a <StartNetworkTask+0x2c6>
	          break;
 8000e84:	bf00      	nop
 8000e86:	e000      	b.n	8000e8a <StartNetworkTask+0x2c6>
	          break;
 8000e88:	bf00      	nop
	  }




	  vTaskDelay(1000 / portTICK_PERIOD_MS); // Vermeide eine enge Schleife
 8000e8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e8e:	f007 ffb3 	bl	8008df8 <vTaskDelay>
      currentSocketStatus = getSn_SR(SOCK_DHCP);
 8000e92:	e6b4      	b.n	8000bfe <StartNetworkTask+0x3a>
//    }

//    osDelay(100); // Vermeide eine enge Schleife

  /* USER CODE END StartNetworkTask */
}
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd90      	pop	{r4, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0800bd4c 	.word	0x0800bd4c
 8000ea0:	0800bd60 	.word	0x0800bd60
 8000ea4:	19b2a8c0 	.word	0x19b2a8c0
 8000ea8:	0800bd88 	.word	0x0800bd88
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	0800bdac 	.word	0x0800bdac
 8000eb4:	0800bdc0 	.word	0x0800bdc0
 8000eb8:	0800bdd8 	.word	0x0800bdd8
 8000ebc:	0800be04 	.word	0x0800be04
 8000ec0:	0800be10 	.word	0x0800be10
 8000ec4:	0800be2c 	.word	0x0800be2c
 8000ec8:	0800be44 	.word	0x0800be44
 8000ecc:	0800be6c 	.word	0x0800be6c
 8000ed0:	0800be8c 	.word	0x0800be8c
 8000ed4:	0800bea8 	.word	0x0800bea8
 8000ed8:	0800bed0 	.word	0x0800bed0
 8000edc:	0800beec 	.word	0x0800beec
 8000ee0:	0800bf00 	.word	0x0800bf00
 8000ee4:	0800bf18 	.word	0x0800bf18
 8000ee8:	0800bf34 	.word	0x0800bf34
 8000eec:	0800bf50 	.word	0x0800bf50

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f004 fd35 	bl	8005970 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40010000 	.word	0x40010000

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <GetSTM32UID>:
uint8_t Domain_name[] = "www.google.com";

uint8_t flag_process_dhcp_success = OFF;
uint8_t flag_process_dns_success = OFF;

void GetSTM32UID(char *uidStr) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	6078      	str	r0, [r7, #4]
    uint32_t uid[3];
    uid[0] = *(uint32_t *)0x1FFF7A10;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <GetSTM32UID+0x34>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
    uid[1] = *(uint32_t *)0x1FFF7A14;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <GetSTM32UID+0x38>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
    uid[2] = *(uint32_t *)0x1FFF7A18;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <GetSTM32UID+0x3c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	617b      	str	r3, [r7, #20]

    sprintf(uidStr, "%08lX%08lX%08lX", uid[0], uid[1], uid[2]);
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	6939      	ldr	r1, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	460b      	mov	r3, r1
 8000f44:	4906      	ldr	r1, [pc, #24]	@ (8000f60 <GetSTM32UID+0x40>)
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f009 fe5e 	bl	800ac08 <siprintf>
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	1fff7a10 	.word	0x1fff7a10
 8000f58:	1fff7a14 	.word	0x1fff7a14
 8000f5c:	1fff7a18 	.word	0x1fff7a18
 8000f60:	0800bf6c 	.word	0x0800bf6c

08000f64 <print_network_information>:


void print_network_information(void) {
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(&defaultNetInfo);
 8000f6a:	4830      	ldr	r0, [pc, #192]	@ (800102c <print_network_information+0xc8>)
 8000f6c:	f004 fc08 	bl	8005780 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", defaultNetInfo.mac[0], defaultNetInfo.mac[1], defaultNetInfo.mac[2], defaultNetInfo.mac[3], defaultNetInfo.mac[4], defaultNetInfo.mac[5]);
 8000f70:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <print_network_information+0xc8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <print_network_information+0xc8>)
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	461c      	mov	r4, r3
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800102c <print_network_information+0xc8>)
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	461d      	mov	r5, r3
 8000f82:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <print_network_information+0xc8>)
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <print_network_information+0xc8>)
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4b27      	ldr	r3, [pc, #156]	@ (800102c <print_network_information+0xc8>)
 8000f90:	795b      	ldrb	r3, [r3, #5]
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	9101      	str	r1, [sp, #4]
 8000f96:	9200      	str	r2, [sp, #0]
 8000f98:	462b      	mov	r3, r5
 8000f9a:	4622      	mov	r2, r4
 8000f9c:	4601      	mov	r1, r0
 8000f9e:	4824      	ldr	r0, [pc, #144]	@ (8001030 <print_network_information+0xcc>)
 8000fa0:	f009 fdc2 	bl	800ab28 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r", defaultNetInfo.ip[0], defaultNetInfo.ip[1], defaultNetInfo.ip[2], defaultNetInfo.ip[3]);
 8000fa4:	4b21      	ldr	r3, [pc, #132]	@ (800102c <print_network_information+0xc8>)
 8000fa6:	799b      	ldrb	r3, [r3, #6]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4b20      	ldr	r3, [pc, #128]	@ (800102c <print_network_information+0xc8>)
 8000fac:	79db      	ldrb	r3, [r3, #7]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <print_network_information+0xc8>)
 8000fb2:	7a1b      	ldrb	r3, [r3, #8]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <print_network_information+0xc8>)
 8000fb8:	7a5b      	ldrb	r3, [r3, #9]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	481d      	ldr	r0, [pc, #116]	@ (8001034 <print_network_information+0xd0>)
 8000fc0:	f009 fdb2 	bl	800ab28 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r", defaultNetInfo.sn[0], defaultNetInfo.sn[1], defaultNetInfo.sn[2], defaultNetInfo.sn[3]);
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <print_network_information+0xc8>)
 8000fc6:	7a9b      	ldrb	r3, [r3, #10]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <print_network_information+0xc8>)
 8000fcc:	7adb      	ldrb	r3, [r3, #11]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <print_network_information+0xc8>)
 8000fd2:	7b1b      	ldrb	r3, [r3, #12]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <print_network_information+0xc8>)
 8000fd8:	7b5b      	ldrb	r3, [r3, #13]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4816      	ldr	r0, [pc, #88]	@ (8001038 <print_network_information+0xd4>)
 8000fe0:	f009 fda2 	bl	800ab28 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r", defaultNetInfo.gw[0], defaultNetInfo.gw[1], defaultNetInfo.gw[2], defaultNetInfo.gw[3]);
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <print_network_information+0xc8>)
 8000fe6:	7b9b      	ldrb	r3, [r3, #14]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <print_network_information+0xc8>)
 8000fec:	7bdb      	ldrb	r3, [r3, #15]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <print_network_information+0xc8>)
 8000ff2:	7c1b      	ldrb	r3, [r3, #16]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <print_network_information+0xc8>)
 8000ff8:	7c5b      	ldrb	r3, [r3, #17]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	480f      	ldr	r0, [pc, #60]	@ (800103c <print_network_information+0xd8>)
 8001000:	f009 fd92 	bl	800ab28 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r", defaultNetInfo.dns[0], defaultNetInfo.dns[1], defaultNetInfo.dns[2], defaultNetInfo.dns[3]);
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <print_network_information+0xc8>)
 8001006:	7c9b      	ldrb	r3, [r3, #18]
 8001008:	4619      	mov	r1, r3
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <print_network_information+0xc8>)
 800100c:	7cdb      	ldrb	r3, [r3, #19]
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <print_network_information+0xc8>)
 8001012:	7d1b      	ldrb	r3, [r3, #20]
 8001014:	4618      	mov	r0, r3
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <print_network_information+0xc8>)
 8001018:	7d5b      	ldrb	r3, [r3, #21]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	4808      	ldr	r0, [pc, #32]	@ (8001040 <print_network_information+0xdc>)
 8001020:	f009 fd82 	bl	800ab28 <iprintf>
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bdb0      	pop	{r4, r5, r7, pc}
 800102a:	bf00      	nop
 800102c:	20000004 	.word	0x20000004
 8001030:	0800bf7c 	.word	0x0800bf7c
 8001034:	0800bfac 	.word	0x0800bfac
 8001038:	0800bfc8 	.word	0x0800bfc8
 800103c:	0800bfe4 	.word	0x0800bfe4
 8001040:	0800c000 	.word	0x0800c000

08001044 <process_dhcp>:

int8_t process_dhcp(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
    uint8_t ret = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	71bb      	strb	r3, [r7, #6]
    uint8_t dhcp_retry = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]

    printf(" - DHCP Client running\r\n");
 8001052:	481a      	ldr	r0, [pc, #104]	@ (80010bc <process_dhcp+0x78>)
 8001054:	f009 fdd0 	bl	800abf8 <puts>
    DHCP_init(SOCK_DHCP, data_buf);
 8001058:	4919      	ldr	r1, [pc, #100]	@ (80010c0 <process_dhcp+0x7c>)
 800105a:	2003      	movs	r0, #3
 800105c:	f001 ffba 	bl	8002fd4 <DHCP_init>

    printf(" - DHCP Init done\r\n");
 8001060:	4818      	ldr	r0, [pc, #96]	@ (80010c4 <process_dhcp+0x80>)
 8001062:	f009 fdc9 	bl	800abf8 <puts>
    while (1) {
        ret = DHCP_run();
 8001066:	f001 fded 	bl	8002c44 <DHCP_run>
 800106a:	4603      	mov	r3, r0
 800106c:	71bb      	strb	r3, [r7, #6]
        if (ret == DHCP_IP_LEASED) {
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	2b04      	cmp	r3, #4
 8001072:	d103      	bne.n	800107c <process_dhcp+0x38>
            printf(" - DHCP Success\r\n");
 8001074:	4814      	ldr	r0, [pc, #80]	@ (80010c8 <process_dhcp+0x84>)
 8001076:	f009 fdbf 	bl	800abf8 <puts>
            break;
 800107a:	e015      	b.n	80010a8 <process_dhcp+0x64>
        } else if (ret == DHCP_FAILED) {
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10a      	bne.n	8001098 <process_dhcp+0x54>
            dhcp_retry++;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	3301      	adds	r3, #1
 8001086:	71fb      	strb	r3, [r7, #7]
            if (dhcp_retry <= 3) printf(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d804      	bhi.n	8001098 <process_dhcp+0x54>
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4619      	mov	r1, r3
 8001092:	480e      	ldr	r0, [pc, #56]	@ (80010cc <process_dhcp+0x88>)
 8001094:	f009 fd48 	bl	800ab28 <iprintf>
        }
        if (dhcp_retry > 3) {
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d9e3      	bls.n	8001066 <process_dhcp+0x22>
            printf(" - DHCP Failed\r\n\r\n");
 800109e:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <process_dhcp+0x8c>)
 80010a0:	f009 fdaa 	bl	800abf8 <puts>
            DHCP_stop();
 80010a4:	f001 fee8 	bl	8002e78 <DHCP_stop>
            break;
        }
    }

    // Schließe den DHCP-Socket nach der Verwendung
    close(SOCK_DHCP);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f003 f89b 	bl	80041e4 <close>
    return ret;
 80010ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	0800c01c 	.word	0x0800c01c
 80010c0:	2000024c 	.word	0x2000024c
 80010c4:	0800c034 	.word	0x0800c034
 80010c8:	0800c048 	.word	0x0800c048
 80010cc:	0800c05c 	.word	0x0800c05c
 80010d0:	0800c088 	.word	0x0800c088

080010d4 <process_dns>:

int8_t process_dns(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
    int8_t ret = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]
    uint8_t dns_retry = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]

    printf(" - DNS Client running\r\n");
 80010e2:	4816      	ldr	r0, [pc, #88]	@ (800113c <process_dns+0x68>)
 80010e4:	f009 fd88 	bl	800abf8 <puts>
    DNS_init(SOCK_DNS, data_buf);
 80010e8:	4915      	ldr	r1, [pc, #84]	@ (8001140 <process_dns+0x6c>)
 80010ea:	2004      	movs	r0, #4
 80010ec:	f002 fbde 	bl	80038ac <DNS_init>
    while (1) {
        if ((ret = DNS_run(dns_server, (uint8_t *)Domain_name, Domain_IP)) == 1) {
 80010f0:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <process_dns+0x70>)
 80010f2:	4915      	ldr	r1, [pc, #84]	@ (8001148 <process_dns+0x74>)
 80010f4:	4815      	ldr	r0, [pc, #84]	@ (800114c <process_dns+0x78>)
 80010f6:	f002 fbf5 	bl	80038e4 <DNS_run>
 80010fa:	4603      	mov	r3, r0
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d103      	bne.n	800110e <process_dns+0x3a>
            printf(" - DNS Success\r\n");
 8001106:	4812      	ldr	r0, [pc, #72]	@ (8001150 <process_dns+0x7c>)
 8001108:	f009 fd76 	bl	800abf8 <puts>
            break;
 800110c:	e010      	b.n	8001130 <process_dns+0x5c>
        } else {
            dns_retry++;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	3301      	adds	r3, #1
 8001112:	71fb      	strb	r3, [r7, #7]
            if (dns_retry <= 2) printf(" - DNS Timeout occurred and retry [%d]\r\n", dns_retry);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d804      	bhi.n	8001124 <process_dns+0x50>
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	@ (8001154 <process_dns+0x80>)
 8001120:	f009 fd02 	bl	800ab28 <iprintf>
        }
        if (dns_retry > 2) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d9e2      	bls.n	80010f0 <process_dns+0x1c>
            printf(" - DNS Failed\r\n\r\n");
 800112a:	480b      	ldr	r0, [pc, #44]	@ (8001158 <process_dns+0x84>)
 800112c:	f009 fd64 	bl	800abf8 <puts>
            break;
        }
    }
    return ret;
 8001130:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800c09c 	.word	0x0800c09c
 8001140:	2000024c 	.word	0x2000024c
 8001144:	20000a4c 	.word	0x20000a4c
 8001148:	20000020 	.word	0x20000020
 800114c:	2000001c 	.word	0x2000001c
 8001150:	0800c0b4 	.word	0x0800c0b4
 8001154:	0800c0c4 	.word	0x0800c0c4
 8001158:	0800c0f0 	.word	0x0800c0f0

0800115c <initialize_network>:

void initialize_network(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af02      	add	r7, sp, #8
    printf("\t - WizChip Init - \r\n");
 8001162:	4832      	ldr	r0, [pc, #200]	@ (800122c <initialize_network+0xd0>)
 8001164:	f009 fd48 	bl	800abf8 <puts>
    WIZCHIPInitialize();
 8001168:	f000 fbbc 	bl	80018e4 <WIZCHIPInitialize>
    printf("version:%.2x\r\n", getVERSIONR());
 800116c:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 8001170:	f002 fc3e 	bl	80039f0 <WIZCHIP_READ>
 8001174:	4603      	mov	r3, r0
 8001176:	4619      	mov	r1, r3
 8001178:	482d      	ldr	r0, [pc, #180]	@ (8001230 <initialize_network+0xd4>)
 800117a:	f009 fcd5 	bl	800ab28 <iprintf>

    wizchip_setnetinfo(&defaultNetInfo);
 800117e:	482d      	ldr	r0, [pc, #180]	@ (8001234 <initialize_network+0xd8>)
 8001180:	f004 fabe 	bl	8005700 <wizchip_setnetinfo>
    print_network_information();
 8001184:	f7ff feee 	bl	8000f64 <print_network_information>

    if (process_dhcp() == DHCP_IP_LEASED) {
 8001188:	f7ff ff5c 	bl	8001044 <process_dhcp>
 800118c:	4603      	mov	r3, r0
 800118e:	2b04      	cmp	r3, #4
 8001190:	d103      	bne.n	800119a <initialize_network+0x3e>
        flag_process_dhcp_success = ON;
 8001192:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <initialize_network+0xdc>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e003      	b.n	80011a2 <initialize_network+0x46>
    } else {
        ctlnetwork(CN_SET_NETINFO, &defaultNetInfo); // Set default static IP settings
 800119a:	4926      	ldr	r1, [pc, #152]	@ (8001234 <initialize_network+0xd8>)
 800119c:	2000      	movs	r0, #0
 800119e:	f003 ffb5 	bl	800510c <ctlnetwork>
    }

    printf("Register value after W5x00 initialize!\r\n");
 80011a2:	4826      	ldr	r0, [pc, #152]	@ (800123c <initialize_network+0xe0>)
 80011a4:	f009 fd28 	bl	800abf8 <puts>
    print_network_information();
 80011a8:	f7ff fedc 	bl	8000f64 <print_network_information>

    if (process_dns()) {
 80011ac:	f7ff ff92 	bl	80010d4 <process_dns>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <initialize_network+0x60>
        flag_process_dns_success = ON;
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <initialize_network+0xe4>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
    }

    if (flag_process_dhcp_success == ENABLE) {
 80011bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <initialize_network+0xdc>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d107      	bne.n	80011d4 <initialize_network+0x78>
        printf(" # DHCP IP Leased time : %lu seconds\r\n", getDHCPLeasetime());
 80011c4:	f001 ffb0 	bl	8003128 <getDHCPLeasetime>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4619      	mov	r1, r3
 80011cc:	481d      	ldr	r0, [pc, #116]	@ (8001244 <initialize_network+0xe8>)
 80011ce:	f009 fcab 	bl	800ab28 <iprintf>
 80011d2:	e002      	b.n	80011da <initialize_network+0x7e>
    } else {
        printf(" # DHCP Failed\r\n");
 80011d4:	481c      	ldr	r0, [pc, #112]	@ (8001248 <initialize_network+0xec>)
 80011d6:	f009 fd0f 	bl	800abf8 <puts>
    }

    if (flag_process_dns_success == ENABLE) {
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <initialize_network+0xe4>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d113      	bne.n	800120a <initialize_network+0xae>
        printf(" # DNS: %s => %d.%d.%d.%d\r\n", Domain_name, Domain_IP[0], Domain_IP[1], Domain_IP[2], Domain_IP[3]);
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <initialize_network+0xf0>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <initialize_network+0xf0>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	4618      	mov	r0, r3
 80011ee:	4b17      	ldr	r3, [pc, #92]	@ (800124c <initialize_network+0xf0>)
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <initialize_network+0xf0>)
 80011f6:	78db      	ldrb	r3, [r3, #3]
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	460a      	mov	r2, r1
 8001200:	4913      	ldr	r1, [pc, #76]	@ (8001250 <initialize_network+0xf4>)
 8001202:	4814      	ldr	r0, [pc, #80]	@ (8001254 <initialize_network+0xf8>)
 8001204:	f009 fc90 	bl	800ab28 <iprintf>
 8001208:	e002      	b.n	8001210 <initialize_network+0xb4>
    } else {
        printf(" # DNS Failed\r\n");
 800120a:	4813      	ldr	r0, [pc, #76]	@ (8001258 <initialize_network+0xfc>)
 800120c:	f009 fcf4 	bl	800abf8 <puts>
    }

    // UID auslesen und anzeigen
    char uidStr[25];
    GetSTM32UID(uidStr);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe84 	bl	8000f20 <GetSTM32UID>
    printf("STM32 UID: %s\r\n", uidStr);
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	480f      	ldr	r0, [pc, #60]	@ (800125c <initialize_network+0x100>)
 800121e:	f009 fc83 	bl	800ab28 <iprintf>
}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	0800c104 	.word	0x0800c104
 8001230:	0800c11c 	.word	0x0800c11c
 8001234:	20000004 	.word	0x20000004
 8001238:	20000a50 	.word	0x20000a50
 800123c:	0800c12c 	.word	0x0800c12c
 8001240:	20000a51 	.word	0x20000a51
 8001244:	0800c154 	.word	0x0800c154
 8001248:	0800c17c 	.word	0x0800c17c
 800124c:	20000a4c 	.word	0x20000a4c
 8001250:	20000020 	.word	0x20000020
 8001254:	0800c18c 	.word	0x0800c18c
 8001258:	0800c1a8 	.word	0x0800c1a8
 800125c:	0800c1b8 	.word	0x0800c1b8

08001260 <upgrade_to_websocket>:

// Definition der Funktion
int upgrade_to_websocket(uint8_t sn) {
 8001260:	b580      	push	{r7, lr}
 8001262:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4602      	mov	r2, r0
 800126a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800126e:	f2a3 43a1 	subw	r3, r3, #1185	@ 0x4a1
 8001272:	701a      	strb	r2, [r3, #0]
    char request[] = "GET /chat HTTP/1.1\r\n"
 8001274:	4a34      	ldr	r2, [pc, #208]	@ (8001348 <upgrade_to_websocket+0xe8>)
 8001276:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800127a:	4611      	mov	r1, r2
 800127c:	229b      	movs	r2, #155	@ 0x9b
 800127e:	4618      	mov	r0, r3
 8001280:	f009 fed9 	bl	800b036 <memcpy>
                     "Upgrade: websocket\r\n"
                     "Connection: Upgrade\r\n"
                     "Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\r\n"
                     "Sec-WebSocket-Version: 13\r\n\r\n";

    send(sn, (uint8_t*)request, strlen(request));
 8001284:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ffa1 	bl	80001d0 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8001296:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800129a:	f2a3 43a1 	subw	r3, r3, #1185	@ 0x4a1
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 f8e9 	bl	8004478 <send>

    uint8_t response[1024];
    int32_t len = recv(sn, response, sizeof(response) - 1); // Platz für Nullterminator lassen
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80012ae:	f2a3 43a1 	subw	r3, r3, #1185	@ 0x4a1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 f9d5 	bl	8004668 <recv>
 80012be:	f8c7 04a4 	str.w	r0, [r7, #1188]	@ 0x4a4
    if (len <= 0) {
 80012c2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dc05      	bgt.n	80012d6 <upgrade_to_websocket+0x76>
        printf("Error receiving response.\r\n");
 80012ca:	4820      	ldr	r0, [pc, #128]	@ (800134c <upgrade_to_websocket+0xec>)
 80012cc:	f009 fc94 	bl	800abf8 <puts>
        return -1; // Fehler beim Empfangen der Antwort
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	e033      	b.n	800133e <upgrade_to_websocket+0xde>
    }

    response[len] = '\0';
 80012d6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80012da:	f5a3 6294 	sub.w	r2, r3, #1184	@ 0x4a0
 80012de:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80012e2:	4413      	add	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    printf("Server response: %s\r\n", response);
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	4818      	ldr	r0, [pc, #96]	@ (8001350 <upgrade_to_websocket+0xf0>)
 80012f0:	f009 fc1a 	bl	800ab28 <iprintf>

    // Überprüfe die Antwort auf Erfolg
    if (strstr((char *)response, "HTTP/1.1 101 Switching Protocols") != NULL &&
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4916      	ldr	r1, [pc, #88]	@ (8001354 <upgrade_to_websocket+0xf4>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f009 fda4 	bl	800ae48 <strstr>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d016      	beq.n	8001334 <upgrade_to_websocket+0xd4>
        strstr((char *)response, "Upgrade: websocket") != NULL &&
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4913      	ldr	r1, [pc, #76]	@ (8001358 <upgrade_to_websocket+0xf8>)
 800130c:	4618      	mov	r0, r3
 800130e:	f009 fd9b 	bl	800ae48 <strstr>
 8001312:	4603      	mov	r3, r0
    if (strstr((char *)response, "HTTP/1.1 101 Switching Protocols") != NULL &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00d      	beq.n	8001334 <upgrade_to_websocket+0xd4>
        strstr((char *)response, "Connection: Upgrade") != NULL) {
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	490f      	ldr	r1, [pc, #60]	@ (800135c <upgrade_to_websocket+0xfc>)
 800131e:	4618      	mov	r0, r3
 8001320:	f009 fd92 	bl	800ae48 <strstr>
 8001324:	4603      	mov	r3, r0
        strstr((char *)response, "Upgrade: websocket") != NULL &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <upgrade_to_websocket+0xd4>
        printf("WebSocket upgrade successful.\r\n");
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <upgrade_to_websocket+0x100>)
 800132c:	f009 fc64 	bl	800abf8 <puts>
        return 0; // Erfolg
 8001330:	2300      	movs	r3, #0
 8001332:	e004      	b.n	800133e <upgrade_to_websocket+0xde>
    } else {
        printf("WebSocket upgrade failed.\r\n");
 8001334:	480b      	ldr	r0, [pc, #44]	@ (8001364 <upgrade_to_websocket+0x104>)
 8001336:	f009 fc5f 	bl	800abf8 <puts>
        return -1; // Fehler
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800133e:	4618      	mov	r0, r3
 8001340:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800c284 	.word	0x0800c284
 800134c:	0800c1c8 	.word	0x0800c1c8
 8001350:	0800c1e4 	.word	0x0800c1e4
 8001354:	0800c1fc 	.word	0x0800c1fc
 8001358:	0800c220 	.word	0x0800c220
 800135c:	0800c234 	.word	0x0800c234
 8001360:	0800c248 	.word	0x0800c248
 8001364:	0800c268 	.word	0x0800c268

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_MspInit+0x54>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <HAL_MspInit+0x54>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_MspInit+0x54>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_MspInit+0x54>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <HAL_MspInit+0x54>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	@ 0x40
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_MspInit+0x54>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210f      	movs	r1, #15
 80013aa:	f06f 0001 	mvn.w	r0, #1
 80013ae:	f004 fbdb 	bl	8005b68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a41      	ldr	r2, [pc, #260]	@ (80014e4 <HAL_SPI_MspInit+0x124>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12c      	bne.n	800143c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	4b40      	ldr	r3, [pc, #256]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a3f      	ldr	r2, [pc, #252]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 80013ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f2:	4b3d      	ldr	r3, [pc, #244]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a38      	ldr	r2, [pc, #224]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800141a:	23e0      	movs	r3, #224	@ 0xe0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142a:	2305      	movs	r3, #5
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	482d      	ldr	r0, [pc, #180]	@ (80014ec <HAL_SPI_MspInit+0x12c>)
 8001436:	f004 fbc1 	bl	8005bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800143a:	e04f      	b.n	80014dc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2b      	ldr	r2, [pc, #172]	@ (80014f0 <HAL_SPI_MspInit+0x130>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d14a      	bne.n	80014dc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a1f      	ldr	r2, [pc, #124]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_SPI_MspInit+0x128>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149a:	2304      	movs	r3, #4
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014aa:	2305      	movs	r3, #5
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	480f      	ldr	r0, [pc, #60]	@ (80014f4 <HAL_SPI_MspInit+0x134>)
 80014b6:	f004 fb81 	bl	8005bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80014ba:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014cc:	2305      	movs	r3, #5
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4808      	ldr	r0, [pc, #32]	@ (80014f8 <HAL_SPI_MspInit+0x138>)
 80014d8:	f004 fb70 	bl	8005bbc <HAL_GPIO_Init>
}
 80014dc:	bf00      	nop
 80014de:	3730      	adds	r7, #48	@ 0x30
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40003800 	.word	0x40003800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020400 	.word	0x40020400

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	@ 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a42      	ldr	r2, [pc, #264]	@ (8001624 <HAL_UART_MspInit+0x128>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12c      	bne.n	8001578 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	4b41      	ldr	r3, [pc, #260]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a40      	ldr	r2, [pc, #256]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a39      	ldr	r2, [pc, #228]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001556:	230c      	movs	r3, #12
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001566:	2307      	movs	r3, #7
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	482e      	ldr	r0, [pc, #184]	@ (800162c <HAL_UART_MspInit+0x130>)
 8001572:	f004 fb23 	bl	8005bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001576:	e050      	b.n	800161a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2c      	ldr	r2, [pc, #176]	@ (8001630 <HAL_UART_MspInit+0x134>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d14b      	bne.n	800161a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a27      	ldr	r2, [pc, #156]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a20      	ldr	r2, [pc, #128]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <HAL_UART_MspInit+0x12c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e8:	2307      	movs	r3, #7
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4810      	ldr	r0, [pc, #64]	@ (8001634 <HAL_UART_MspInit+0x138>)
 80015f4:	f004 fae2 	bl	8005bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160a:	2307      	movs	r3, #7
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4808      	ldr	r0, [pc, #32]	@ (8001638 <HAL_UART_MspInit+0x13c>)
 8001616:	f004 fad1 	bl	8005bbc <HAL_GPIO_Init>
}
 800161a:	bf00      	nop
 800161c:	3730      	adds	r7, #48	@ 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40004800 	.word	0x40004800
 8001634:	40020400 	.word	0x40020400
 8001638:	40020c00 	.word	0x40020c00

0800163c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	4b2f      	ldr	r3, [pc, #188]	@ (8001710 <HAL_InitTick+0xd4>)
 8001652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001654:	4a2e      	ldr	r2, [pc, #184]	@ (8001710 <HAL_InitTick+0xd4>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6453      	str	r3, [r2, #68]	@ 0x44
 800165c:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <HAL_InitTick+0xd4>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001668:	f107 020c 	add.w	r2, r7, #12
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f005 f90a 	bl	800688c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001678:	f005 f8f4 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 800167c:	4603      	mov	r3, r0
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001684:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <HAL_InitTick+0xd8>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0c9b      	lsrs	r3, r3, #18
 800168c:	3b01      	subs	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <HAL_InitTick+0xdc>)
 8001692:	4a22      	ldr	r2, [pc, #136]	@ (800171c <HAL_InitTick+0xe0>)
 8001694:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <HAL_InitTick+0xdc>)
 8001698:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800169c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800169e:	4a1e      	ldr	r2, [pc, #120]	@ (8001718 <HAL_InitTick+0xdc>)
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <HAL_InitTick+0xdc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <HAL_InitTick+0xdc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_InitTick+0xdc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016b6:	4818      	ldr	r0, [pc, #96]	@ (8001718 <HAL_InitTick+0xdc>)
 80016b8:	f005 fc30 	bl	8006f1c <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11b      	bne.n	8001702 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016ca:	4813      	ldr	r0, [pc, #76]	@ (8001718 <HAL_InitTick+0xdc>)
 80016cc:	f005 fc80 	bl	8006fd0 <HAL_TIM_Base_Start_IT>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d111      	bne.n	8001702 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016de:	2019      	movs	r0, #25
 80016e0:	f004 fa5e 	bl	8005ba0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	d808      	bhi.n	80016fc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016ea:	2200      	movs	r2, #0
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	2019      	movs	r0, #25
 80016f0:	f004 fa3a 	bl	8005b68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <HAL_InitTick+0xe4>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e002      	b.n	8001702 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001706:	4618      	mov	r0, r3
 8001708:	3730      	adds	r7, #48	@ 0x30
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	431bde83 	.word	0x431bde83
 8001718:	20000a54 	.word	0x20000a54
 800171c:	40010000 	.word	0x40010000
 8001720:	20000080 	.word	0x20000080

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001762:	f005 fca5 	bl	80070b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000a54 	.word	0x20000a54

08001770 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e00a      	b.n	8001798 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001782:	f3af 8000 	nop.w
 8001786:	4601      	mov	r1, r0
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	60ba      	str	r2, [r7, #8]
 800178e:	b2ca      	uxtb	r2, r1
 8001790:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf0      	blt.n	8001782 <_read+0x12>
  }

  return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:
//  }
//  return len;
//}

int _close(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d2:	605a      	str	r2, [r3, #4]
  return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_isatty>:

int _isatty(int file)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800181c:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	@ (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001844:	f009 fbc2 	bl	800afcc <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20020000 	.word	0x20020000
 8001874:	00000400 	.word	0x00000400
 8001878:	20000a9c 	.word	0x20000a9c
 800187c:	20005648 	.word	0x20005648

08001880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <SystemInit+0x20>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <SystemInit+0x20>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <_write>:
#include "uart_redirect.h"
#include "stm32f4xx_hal.h" // oder die entsprechende HAL Header-Datei

extern UART_HandleTypeDef huart2;

int _write(int fd, char *str, int len) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00b      	b.n	80018ce <_write+0x2a>
    HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	18d1      	adds	r1, r2, r3
 80018bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c0:	2201      	movs	r2, #1
 80018c2:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <_write+0x3c>)
 80018c4:	f005 fe1c 	bl	8007500 <HAL_UART_Transmit>
  for (int i = 0; i < len; i++) {
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbef      	blt.n	80018b6 <_write+0x12>
  }
  return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200001b4 	.word	0x200001b4

080018e4 <WIZCHIPInitialize>:
 */

#include "wizchip_init.h"
#include <stdio.h>

void WIZCHIPInitialize(){
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
	printf("WIZCHIPInitialize\r\n");
 80018ea:	481f      	ldr	r0, [pc, #124]	@ (8001968 <WIZCHIPInitialize+0x84>)
 80018ec:	f009 f984 	bl	800abf8 <puts>

	csDisable();
 80018f0:	f000 f876 	bl	80019e0 <csDisable>
	printf("WIZCHIPInitialize1\r\n");
 80018f4:	481d      	ldr	r0, [pc, #116]	@ (800196c <WIZCHIPInitialize+0x88>)
 80018f6:	f009 f97f 	bl	800abf8 <puts>
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 80018fa:	491d      	ldr	r1, [pc, #116]	@ (8001970 <WIZCHIPInitialize+0x8c>)
 80018fc:	481d      	ldr	r0, [pc, #116]	@ (8001974 <WIZCHIPInitialize+0x90>)
 80018fe:	f003 faf9 	bl	8004ef4 <reg_wizchip_spi_cbfunc>
	printf("WIZCHIPInitialize2\r\n");
 8001902:	481d      	ldr	r0, [pc, #116]	@ (8001978 <WIZCHIPInitialize+0x94>)
 8001904:	f009 f978 	bl	800abf8 <puts>
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 8001908:	491c      	ldr	r1, [pc, #112]	@ (800197c <WIZCHIPInitialize+0x98>)
 800190a:	481d      	ldr	r0, [pc, #116]	@ (8001980 <WIZCHIPInitialize+0x9c>)
 800190c:	f003 facc 	bl	8004ea8 <reg_wizchip_cs_cbfunc>
	printf("WIZCHIPInitialize3\r\n");
 8001910:	481c      	ldr	r0, [pc, #112]	@ (8001984 <WIZCHIPInitialize+0xa0>)
 8001912:	f009 f971 	bl	800abf8 <puts>

	uint8_t tmp;
	//w5500, w5200
#if _WIZCHIP_ >= W5200
	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <WIZCHIPInitialize+0xa4>)
 8001918:	1d3c      	adds	r4, r7, #4
 800191a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800191c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
	uint8_t memsize[2][4] = { {2,2,2,2},{2,2,2,2}};
#endif
	printf("WIZCHIPInitialize4\r\n");
 8001920:	481a      	ldr	r0, [pc, #104]	@ (800198c <WIZCHIPInitialize+0xa8>)
 8001922:	f009 f969 	bl	800abf8 <puts>
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	2001      	movs	r0, #1
 800192c:	f003 fb0e 	bl	8004f4c <ctlwizchip>
 8001930:	4603      	mov	r3, r0
 8001932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001936:	d103      	bne.n	8001940 <WIZCHIPInitialize+0x5c>
	{
		//myprintf("WIZCHIP Initialized fail.\r\n");
		printf("WIZCHIP Initialized fail.\r\n");
 8001938:	4815      	ldr	r0, [pc, #84]	@ (8001990 <WIZCHIPInitialize+0xac>)
 800193a:	f009 f95d 	bl	800abf8 <puts>
	  return;
 800193e:	e010      	b.n	8001962 <WIZCHIPInitialize+0x7e>
	}
	/* PHY link status check */
	do {
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8001940:	f107 0317 	add.w	r3, r7, #23
 8001944:	4619      	mov	r1, r3
 8001946:	200f      	movs	r0, #15
 8001948:	f003 fb00 	bl	8004f4c <ctlwizchip>
 800194c:	4603      	mov	r3, r0
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001952:	d103      	bne.n	800195c <WIZCHIPInitialize+0x78>
		{
			printf("Unknown PHY Link status.\r\n");
 8001954:	480f      	ldr	r0, [pc, #60]	@ (8001994 <WIZCHIPInitialize+0xb0>)
 8001956:	f009 f94f 	bl	800abf8 <puts>
		  return;
 800195a:	e002      	b.n	8001962 <WIZCHIPInitialize+0x7e>
		}
	} while (tmp == PHY_LINK_OFF);
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ee      	beq.n	8001940 <WIZCHIPInitialize+0x5c>



}
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	0800c320 	.word	0x0800c320
 800196c:	0800c334 	.word	0x0800c334
 8001970:	080019f9 	.word	0x080019f9
 8001974:	08001a21 	.word	0x08001a21
 8001978:	0800c348 	.word	0x0800c348
 800197c:	080019e1 	.word	0x080019e1
 8001980:	080019c9 	.word	0x080019c9
 8001984:	0800c35c 	.word	0x0800c35c
 8001988:	0800c3bc 	.word	0x0800c3bc
 800198c:	0800c370 	.word	0x0800c370
 8001990:	0800c384 	.word	0x0800c384
 8001994:	0800c3a0 	.word	0x0800c3a0

08001998 <resetAssert>:


void resetAssert(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	2120      	movs	r1, #32
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <resetAssert+0x14>)
 80019a2:	f004 faa7 	bl	8005ef4 <HAL_GPIO_WritePin>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40020800 	.word	0x40020800

080019b0 <resetDeassert>:

void resetDeassert(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2120      	movs	r1, #32
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <resetDeassert+0x14>)
 80019ba:	f004 fa9b 	bl	8005ef4 <HAL_GPIO_WritePin>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40020800 	.word	0x40020800

080019c8 <csEnable>:

void csEnable(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2110      	movs	r1, #16
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <csEnable+0x14>)
 80019d2:	f004 fa8f 	bl	8005ef4 <HAL_GPIO_WritePin>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40020800 	.word	0x40020800

080019e0 <csDisable>:

void csDisable(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2110      	movs	r1, #16
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <csDisable+0x14>)
 80019ea:	f004 fa83 	bl	8005ef4 <HAL_GPIO_WritePin>
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40020800 	.word	0x40020800

080019f8 <spiWriteByte>:

void spiWriteByte(uint8_t tx)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 8001a02:	f107 020f 	add.w	r2, r7, #15
 8001a06:	1df9      	adds	r1, r7, #7
 8001a08:	230a      	movs	r3, #10
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <spiWriteByte+0x24>)
 8001a10:	f004 fff7 	bl	8006a02 <HAL_SPI_TransmitReceive>
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000015c 	.word	0x2000015c

08001a20 <spiReadByte>:

uint8_t spiReadByte(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af02      	add	r7, sp, #8
	uint8_t rx = 0, tx = 0xFF;
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	23ff      	movs	r3, #255	@ 0xff
 8001a2c:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 8001a2e:	1dfa      	adds	r2, r7, #7
 8001a30:	1db9      	adds	r1, r7, #6
 8001a32:	230a      	movs	r3, #10
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <spiReadByte+0x28>)
 8001a3a:	f004 ffe2 	bl	8006a02 <HAL_SPI_TransmitReceive>
	return rx;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000015c 	.word	0x2000015c

08001a4c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001a50:	2204      	movs	r2, #4
 8001a52:	4909      	ldr	r1, [pc, #36]	@ (8001a78 <default_ip_assign+0x2c>)
 8001a54:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001a58:	f002 f8c4 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4907      	ldr	r1, [pc, #28]	@ (8001a7c <default_ip_assign+0x30>)
 8001a60:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001a64:	f002 f8be 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8001a68:	2204      	movs	r2, #4
 8001a6a:	4905      	ldr	r1, [pc, #20]	@ (8001a80 <default_ip_assign+0x34>)
 8001a6c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a70:	f002 f8b8 	bl	8003be4 <WIZCHIP_WRITE_BUF>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000ab0 	.word	0x20000ab0
 8001a7c:	20000ab8 	.word	0x20000ab8
 8001a80:	20000ab4 	.word	0x20000ab4

08001a84 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8001a88:	2180      	movs	r1, #128	@ 0x80
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f001 fffc 	bl	8003a88 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001a90:	2000      	movs	r0, #0
 8001a92:	f001 ffad 	bl	80039f0 <WIZCHIP_READ>
   default_ip_assign();
 8001a96:	f7ff ffd9 	bl	8001a4c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	4903      	ldr	r1, [pc, #12]	@ (8001aac <default_ip_update+0x28>)
 8001a9e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001aa2:	f002 f89f 	bl	8003be4 <WIZCHIP_WRITE_BUF>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000ad0 	.word	0x20000ad0

08001ab0 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f001 ffe6 	bl	8003a88 <WIZCHIP_WRITE>
	getMR(); // for delay
 8001abc:	2000      	movs	r0, #0
 8001abe:	f001 ff97 	bl	80039f0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <default_ip_conflict+0x24>)
 8001ac6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001aca:	f002 f88b 	bl	8003be4 <WIZCHIP_WRITE_BUF>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000ad0 	.word	0x20000ad0

08001ad8 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2206      	movs	r2, #6
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001ae8:	f002 f81c 	bl	8003b24 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001aec:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001af4:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001afc:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2206      	movs	r2, #6
 8001b02:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001b04:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3304      	adds	r3, #4
 8001b12:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001b14:	4b69      	ldr	r3, [pc, #420]	@ (8001cbc <makeDHCPMSG+0x1e4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0e1b      	lsrs	r3, r3, #24
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001b20:	4b66      	ldr	r3, [pc, #408]	@ (8001cbc <makeDHCPMSG+0x1e4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0c1a      	lsrs	r2, r3, #16
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8001b2e:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <makeDHCPMSG+0x1e4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0a1a      	lsrs	r2, r3, #8
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3302      	adds	r3, #2
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8001b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cbc <makeDHCPMSG+0x1e4>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	3303      	adds	r3, #3
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001b48:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001b50:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	330a      	adds	r3, #10
 8001b56:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3301      	adds	r3, #1
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001b66:	4b54      	ldr	r3, [pc, #336]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8001b6e:	4b52      	ldr	r3, [pc, #328]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001b76:	4b50      	ldr	r3, [pc, #320]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8001b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001b86:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001b96:	4b48      	ldr	r3, [pc, #288]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8001b9e:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001ba6:	4b44      	ldr	r3, [pc, #272]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8001bae:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001bb6:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8001bce:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8001bde:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001be6:	4b34      	ldr	r3, [pc, #208]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a35      	ldr	r2, [pc, #212]	@ (8001cc0 <makeDHCPMSG+0x1e8>)
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001bf0:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a32      	ldr	r2, [pc, #200]	@ (8001cc0 <makeDHCPMSG+0x1e8>)
 8001bf6:	7852      	ldrb	r2, [r2, #1]
 8001bf8:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a30      	ldr	r2, [pc, #192]	@ (8001cc0 <makeDHCPMSG+0x1e8>)
 8001c00:	7892      	ldrb	r2, [r2, #2]
 8001c02:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001c04:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc0 <makeDHCPMSG+0x1e8>)
 8001c0a:	78d2      	ldrb	r2, [r2, #3]
 8001c0c:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc0 <makeDHCPMSG+0x1e8>)
 8001c14:	7912      	ldrb	r2, [r2, #4]
 8001c16:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8001c1a:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a28      	ldr	r2, [pc, #160]	@ (8001cc0 <makeDHCPMSG+0x1e8>)
 8001c20:	7952      	ldrb	r2, [r2, #5]
 8001c22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001c26:	2306      	movs	r3, #6
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e008      	b.n	8001c3e <makeDHCPMSG+0x166>
 8001c2c:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	4413      	add	r3, r2
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d9f3      	bls.n	8001c2c <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e009      	b.n	8001c5e <makeDHCPMSG+0x186>
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4413      	add	r3, r2
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c62:	d9f2      	bls.n	8001c4a <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e009      	b.n	8001c7e <makeDHCPMSG+0x1a6>
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4413      	add	r3, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	daf1      	bge.n	8001c6a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2263      	movs	r2, #99	@ 0x63
 8001c8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2282      	movs	r2, #130	@ 0x82
 8001c96:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2253      	movs	r2, #83	@ 0x53
 8001ca0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <makeDHCPMSG+0x1e0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2263      	movs	r2, #99	@ 0x63
 8001caa:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000acc 	.word	0x20000acc
 8001cbc:	20000ac8 	.word	0x20000ac8
 8001cc0:	20000ad0 	.word	0x20000ad0

08001cc4 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8001cce:	f7ff ff03 	bl	8001ad8 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8001cd2:	4b56      	ldr	r3, [pc, #344]	@ (8001e2c <send_DHCP_DISCOVER+0x168>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8001cd8:	4b54      	ldr	r3, [pc, #336]	@ (8001e2c <send_DHCP_DISCOVER+0x168>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8001cde:	4b53      	ldr	r3, [pc, #332]	@ (8001e2c <send_DHCP_DISCOVER+0x168>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001ce4:	4b51      	ldr	r3, [pc, #324]	@ (8001e2c <send_DHCP_DISCOVER+0x168>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8001cea:	4b51      	ldr	r3, [pc, #324]	@ (8001e30 <send_DHCP_DISCOVER+0x16c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e30 <send_DHCP_DISCOVER+0x16c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8001cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e30 <send_DHCP_DISCOVER+0x16c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e30 <send_DHCP_DISCOVER+0x16c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001d02:	2304      	movs	r3, #4
 8001d04:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001d06:	4b4b      	ldr	r3, [pc, #300]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	1c59      	adds	r1, r3, #1
 8001d0e:	80b9      	strh	r1, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	2235      	movs	r2, #53	@ 0x35
 8001d14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001d18:	4b46      	ldr	r3, [pc, #280]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	88bb      	ldrh	r3, [r7, #4]
 8001d1e:	1c59      	adds	r1, r3, #1
 8001d20:	80b9      	strh	r1, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8001d2a:	4b42      	ldr	r3, [pc, #264]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	88bb      	ldrh	r3, [r7, #4]
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	80b9      	strh	r1, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	88bb      	ldrh	r3, [r7, #4]
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	80b9      	strh	r1, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	223d      	movs	r2, #61	@ 0x3d
 8001d4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001d4e:	4b39      	ldr	r3, [pc, #228]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	88bb      	ldrh	r3, [r7, #4]
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	80b9      	strh	r1, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001d60:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	88bb      	ldrh	r3, [r7, #4]
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	80b9      	strh	r1, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001d72:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	88bb      	ldrh	r3, [r7, #4]
 8001d78:	1c59      	adds	r1, r3, #1
 8001d7a:	80b9      	strh	r1, [r7, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <send_DHCP_DISCOVER+0x174>)
 8001d80:	7819      	ldrb	r1, [r3, #0]
 8001d82:	1813      	adds	r3, r2, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	88bb      	ldrh	r3, [r7, #4]
 8001d90:	1c59      	adds	r1, r3, #1
 8001d92:	80b9      	strh	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <send_DHCP_DISCOVER+0x174>)
 8001d98:	7859      	ldrb	r1, [r3, #1]
 8001d9a:	1813      	adds	r3, r2, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	88bb      	ldrh	r3, [r7, #4]
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	80b9      	strh	r1, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <send_DHCP_DISCOVER+0x174>)
 8001db0:	7899      	ldrb	r1, [r3, #2]
 8001db2:	1813      	adds	r3, r2, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	1c59      	adds	r1, r3, #1
 8001dc2:	80b9      	strh	r1, [r7, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <send_DHCP_DISCOVER+0x174>)
 8001dc8:	78d9      	ldrb	r1, [r3, #3]
 8001dca:	1813      	adds	r3, r2, r0
 8001dcc:	460a      	mov	r2, r1
 8001dce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	88bb      	ldrh	r3, [r7, #4]
 8001dd8:	1c59      	adds	r1, r3, #1
 8001dda:	80b9      	strh	r1, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <send_DHCP_DISCOVER+0x174>)
 8001de0:	7919      	ldrb	r1, [r3, #4]
 8001de2:	1813      	adds	r3, r2, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	1c59      	adds	r1, r3, #1
 8001df2:	80b9      	strh	r1, [r7, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <send_DHCP_DISCOVER+0x174>)
 8001df8:	7959      	ldrb	r1, [r3, #5]
 8001dfa:	1813      	adds	r3, r2, r0
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	1c59      	adds	r1, r3, #1
 8001e0a:	80b9      	strh	r1, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	220c      	movs	r2, #12
 8001e10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <send_DHCP_DISCOVER+0x170>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	88bb      	ldrh	r3, [r7, #4]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	80b9      	strh	r1, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	80fb      	strh	r3, [r7, #6]
 8001e2a:	e017      	b.n	8001e5c <send_DHCP_DISCOVER+0x198>
 8001e2c:	20000aa4 	.word	0x20000aa4
 8001e30:	20000aa8 	.word	0x20000aa8
 8001e34:	20000acc 	.word	0x20000acc
 8001e38:	20000ad0 	.word	0x20000ad0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001e3c:	88f9      	ldrh	r1, [r7, #6]
 8001e3e:	4b80      	ldr	r3, [pc, #512]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	88bb      	ldrh	r3, [r7, #4]
 8001e44:	1c58      	adds	r0, r3, #1
 8001e46:	80b8      	strh	r0, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	4b7e      	ldr	r3, [pc, #504]	@ (8002044 <send_DHCP_DISCOVER+0x380>)
 8001e4c:	5c59      	ldrb	r1, [r3, r1]
 8001e4e:	1813      	adds	r3, r2, r0
 8001e50:	460a      	mov	r2, r1
 8001e52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	80fb      	strh	r3, [r7, #6]
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	4a79      	ldr	r2, [pc, #484]	@ (8002044 <send_DHCP_DISCOVER+0x380>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ea      	bne.n	8001e3c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001e66:	4b78      	ldr	r3, [pc, #480]	@ (8002048 <send_DHCP_DISCOVER+0x384>)
 8001e68:	78db      	ldrb	r3, [r3, #3]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b74      	ldr	r3, [pc, #464]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001e70:	681c      	ldr	r4, [r3, #0]
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	1c59      	adds	r1, r3, #1
 8001e76:	80b9      	strh	r1, [r7, #4]
 8001e78:	461d      	mov	r5, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f001 f960 	bl	8003140 <NibbleToHex>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	1963      	adds	r3, r4, r5
 8001e86:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002048 <send_DHCP_DISCOVER+0x384>)
 8001e8c:	78da      	ldrb	r2, [r3, #3]
 8001e8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001e90:	681c      	ldr	r4, [r3, #0]
 8001e92:	88bb      	ldrh	r3, [r7, #4]
 8001e94:	1c59      	adds	r1, r3, #1
 8001e96:	80b9      	strh	r1, [r7, #4]
 8001e98:	461d      	mov	r5, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f001 f950 	bl	8003140 <NibbleToHex>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	1963      	adds	r3, r4, r5
 8001ea6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001eaa:	4b67      	ldr	r3, [pc, #412]	@ (8002048 <send_DHCP_DISCOVER+0x384>)
 8001eac:	791b      	ldrb	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b63      	ldr	r3, [pc, #396]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001eb4:	681c      	ldr	r4, [r3, #0]
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	1c59      	adds	r1, r3, #1
 8001eba:	80b9      	strh	r1, [r7, #4]
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f001 f93e 	bl	8003140 <NibbleToHex>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	1963      	adds	r3, r4, r5
 8001eca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001ece:	4b5e      	ldr	r3, [pc, #376]	@ (8002048 <send_DHCP_DISCOVER+0x384>)
 8001ed0:	791a      	ldrb	r2, [r3, #4]
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001ed4:	681c      	ldr	r4, [r3, #0]
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	1c59      	adds	r1, r3, #1
 8001eda:	80b9      	strh	r1, [r7, #4]
 8001edc:	461d      	mov	r5, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f001 f92e 	bl	8003140 <NibbleToHex>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	1963      	adds	r3, r4, r5
 8001eea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001eee:	4b56      	ldr	r3, [pc, #344]	@ (8002048 <send_DHCP_DISCOVER+0x384>)
 8001ef0:	795b      	ldrb	r3, [r3, #5]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b52      	ldr	r3, [pc, #328]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001ef8:	681c      	ldr	r4, [r3, #0]
 8001efa:	88bb      	ldrh	r3, [r7, #4]
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	80b9      	strh	r1, [r7, #4]
 8001f00:	461d      	mov	r5, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f001 f91c 	bl	8003140 <NibbleToHex>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	1963      	adds	r3, r4, r5
 8001f0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001f12:	4b4d      	ldr	r3, [pc, #308]	@ (8002048 <send_DHCP_DISCOVER+0x384>)
 8001f14:	795a      	ldrb	r2, [r3, #5]
 8001f16:	4b4a      	ldr	r3, [pc, #296]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001f18:	681c      	ldr	r4, [r3, #0]
 8001f1a:	88bb      	ldrh	r3, [r7, #4]
 8001f1c:	1c59      	adds	r1, r3, #1
 8001f1e:	80b9      	strh	r1, [r7, #4]
 8001f20:	461d      	mov	r5, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f001 f90c 	bl	8003140 <NibbleToHex>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	1963      	adds	r3, r4, r5
 8001f2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	b2d9      	uxtb	r1, r3
 8001f36:	4b42      	ldr	r3, [pc, #264]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	88b8      	ldrh	r0, [r7, #4]
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	3307      	adds	r3, #7
 8001f40:	1ac3      	subs	r3, r0, r3
 8001f42:	3106      	adds	r1, #6
 8001f44:	b2c9      	uxtb	r1, r1
 8001f46:	4413      	add	r3, r2
 8001f48:	460a      	mov	r2, r1
 8001f4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	1c59      	adds	r1, r3, #1
 8001f56:	80b9      	strh	r1, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	2237      	movs	r2, #55	@ 0x37
 8001f5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001f60:	4b37      	ldr	r3, [pc, #220]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	88bb      	ldrh	r3, [r7, #4]
 8001f66:	1c59      	adds	r1, r3, #1
 8001f68:	80b9      	strh	r1, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2206      	movs	r2, #6
 8001f6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001f72:	4b33      	ldr	r3, [pc, #204]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	88bb      	ldrh	r3, [r7, #4]
 8001f78:	1c59      	adds	r1, r3, #1
 8001f7a:	80b9      	strh	r1, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001f84:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	1c59      	adds	r1, r3, #1
 8001f8c:	80b9      	strh	r1, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001f96:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	1c59      	adds	r1, r3, #1
 8001f9e:	80b9      	strh	r1, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001fa8:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	88bb      	ldrh	r3, [r7, #4]
 8001fae:	1c59      	adds	r1, r3, #1
 8001fb0:	80b9      	strh	r1, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001fba:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	88bb      	ldrh	r3, [r7, #4]
 8001fc0:	1c59      	adds	r1, r3, #1
 8001fc2:	80b9      	strh	r1, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	223a      	movs	r2, #58	@ 0x3a
 8001fc8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	88bb      	ldrh	r3, [r7, #4]
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	80b9      	strh	r1, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	223b      	movs	r2, #59	@ 0x3b
 8001fda:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	1c59      	adds	r1, r3, #1
 8001fe6:	80b9      	strh	r1, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	22ff      	movs	r2, #255	@ 0xff
 8001fec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	80fb      	strh	r3, [r7, #6]
 8001ff4:	e009      	b.n	800200a <send_DHCP_DISCOVER+0x346>
 8001ff6:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	3301      	adds	r3, #1
 8002008:	80fb      	strh	r3, [r7, #6]
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002010:	d3f1      	bcc.n	8001ff6 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8002012:	23ff      	movs	r3, #255	@ 0xff
 8002014:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8002016:	23ff      	movs	r3, #255	@ 0xff
 8002018:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800201a:	23ff      	movs	r3, #255	@ 0xff
 800201c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800201e:	23ff      	movs	r3, #255	@ 0xff
 8002020:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <send_DHCP_DISCOVER+0x388>)
 8002024:	7818      	ldrb	r0, [r3, #0]
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <send_DHCP_DISCOVER+0x37c>)
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	463b      	mov	r3, r7
 800202c:	2243      	movs	r2, #67	@ 0x43
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002034:	f002 fbcc 	bl	80047d0 <sendto>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bdb0      	pop	{r4, r5, r7, pc}
 8002040:	20000acc 	.word	0x20000acc
 8002044:	2000003c 	.word	0x2000003c
 8002048:	20000ad0 	.word	0x20000ad0
 800204c:	20000aa0 	.word	0x20000aa0

08002050 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800205a:	f7ff fd3d 	bl	8001ad8 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800205e:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <send_DHCP_REQUEST+0x7c>)
 8002060:	f993 3000 	ldrsb.w	r3, [r3]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d004      	beq.n	8002072 <send_DHCP_REQUEST+0x22>
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <send_DHCP_REQUEST+0x7c>)
 800206a:	f993 3000 	ldrsb.w	r3, [r3]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d134      	bne.n	80020dc <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002072:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <send_DHCP_REQUEST+0x80>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330a      	adds	r3, #10
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <send_DHCP_REQUEST+0x80>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330a      	adds	r3, #10
 8002082:	3301      	adds	r3, #1
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <send_DHCP_REQUEST+0x80>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <send_DHCP_REQUEST+0x84>)
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <send_DHCP_REQUEST+0x80>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <send_DHCP_REQUEST+0x84>)
 8002098:	7852      	ldrb	r2, [r2, #1]
 800209a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <send_DHCP_REQUEST+0x80>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	@ (80020d4 <send_DHCP_REQUEST+0x84>)
 80020a2:	7892      	ldrb	r2, [r2, #2]
 80020a4:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <send_DHCP_REQUEST+0x80>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <send_DHCP_REQUEST+0x84>)
 80020ac:	78d2      	ldrb	r2, [r2, #3]
 80020ae:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <send_DHCP_REQUEST+0x88>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <send_DHCP_REQUEST+0x88>)
 80020b8:	785b      	ldrb	r3, [r3, #1]
 80020ba:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <send_DHCP_REQUEST+0x88>)
 80020be:	789b      	ldrb	r3, [r3, #2]
 80020c0:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80020c2:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <send_DHCP_REQUEST+0x88>)
 80020c4:	78db      	ldrb	r3, [r3, #3]
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	e010      	b.n	80020ec <send_DHCP_REQUEST+0x9c>
 80020ca:	bf00      	nop
 80020cc:	20000ac0 	.word	0x20000ac0
 80020d0:	20000acc 	.word	0x20000acc
 80020d4:	20000ab0 	.word	0x20000ab0
 80020d8:	20000aa4 	.word	0x20000aa4
   }
   else
   {
   	ip[0] = 255;
 80020dc:	23ff      	movs	r3, #255	@ 0xff
 80020de:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80020e0:	23ff      	movs	r3, #255	@ 0xff
 80020e2:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80020e4:	23ff      	movs	r3, #255	@ 0xff
 80020e6:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80020e8:	23ff      	movs	r3, #255	@ 0xff
 80020ea:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80020ec:	2304      	movs	r3, #4
 80020ee:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80020f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	897b      	ldrh	r3, [r7, #10]
 80020f6:	1c59      	adds	r1, r3, #1
 80020f8:	8179      	strh	r1, [r7, #10]
 80020fa:	4413      	add	r3, r2
 80020fc:	2235      	movs	r2, #53	@ 0x35
 80020fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002102:	4b89      	ldr	r3, [pc, #548]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	1c59      	adds	r1, r3, #1
 800210a:	8179      	strh	r1, [r7, #10]
 800210c:	4413      	add	r3, r2
 800210e:	2201      	movs	r2, #1
 8002110:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8002114:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	897b      	ldrh	r3, [r7, #10]
 800211a:	1c59      	adds	r1, r3, #1
 800211c:	8179      	strh	r1, [r7, #10]
 800211e:	4413      	add	r3, r2
 8002120:	2203      	movs	r2, #3
 8002122:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002126:	4b80      	ldr	r3, [pc, #512]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	1c59      	adds	r1, r3, #1
 800212e:	8179      	strh	r1, [r7, #10]
 8002130:	4413      	add	r3, r2
 8002132:	223d      	movs	r2, #61	@ 0x3d
 8002134:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002138:	4b7b      	ldr	r3, [pc, #492]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	8179      	strh	r1, [r7, #10]
 8002142:	4413      	add	r3, r2
 8002144:	2207      	movs	r2, #7
 8002146:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800214a:	4b77      	ldr	r3, [pc, #476]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	1c59      	adds	r1, r3, #1
 8002152:	8179      	strh	r1, [r7, #10]
 8002154:	4413      	add	r3, r2
 8002156:	2201      	movs	r2, #1
 8002158:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800215c:	4b72      	ldr	r3, [pc, #456]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	897b      	ldrh	r3, [r7, #10]
 8002162:	1c59      	adds	r1, r3, #1
 8002164:	8179      	strh	r1, [r7, #10]
 8002166:	4618      	mov	r0, r3
 8002168:	4b70      	ldr	r3, [pc, #448]	@ (800232c <send_DHCP_REQUEST+0x2dc>)
 800216a:	7819      	ldrb	r1, [r3, #0]
 800216c:	1813      	adds	r3, r2, r0
 800216e:	460a      	mov	r2, r1
 8002170:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002174:	4b6c      	ldr	r3, [pc, #432]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	1c59      	adds	r1, r3, #1
 800217c:	8179      	strh	r1, [r7, #10]
 800217e:	4618      	mov	r0, r3
 8002180:	4b6a      	ldr	r3, [pc, #424]	@ (800232c <send_DHCP_REQUEST+0x2dc>)
 8002182:	7859      	ldrb	r1, [r3, #1]
 8002184:	1813      	adds	r3, r2, r0
 8002186:	460a      	mov	r2, r1
 8002188:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800218c:	4b66      	ldr	r3, [pc, #408]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	8179      	strh	r1, [r7, #10]
 8002196:	4618      	mov	r0, r3
 8002198:	4b64      	ldr	r3, [pc, #400]	@ (800232c <send_DHCP_REQUEST+0x2dc>)
 800219a:	7899      	ldrb	r1, [r3, #2]
 800219c:	1813      	adds	r3, r2, r0
 800219e:	460a      	mov	r2, r1
 80021a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80021a4:	4b60      	ldr	r3, [pc, #384]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	1c59      	adds	r1, r3, #1
 80021ac:	8179      	strh	r1, [r7, #10]
 80021ae:	4618      	mov	r0, r3
 80021b0:	4b5e      	ldr	r3, [pc, #376]	@ (800232c <send_DHCP_REQUEST+0x2dc>)
 80021b2:	78d9      	ldrb	r1, [r3, #3]
 80021b4:	1813      	adds	r3, r2, r0
 80021b6:	460a      	mov	r2, r1
 80021b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80021bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	897b      	ldrh	r3, [r7, #10]
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	8179      	strh	r1, [r7, #10]
 80021c6:	4618      	mov	r0, r3
 80021c8:	4b58      	ldr	r3, [pc, #352]	@ (800232c <send_DHCP_REQUEST+0x2dc>)
 80021ca:	7919      	ldrb	r1, [r3, #4]
 80021cc:	1813      	adds	r3, r2, r0
 80021ce:	460a      	mov	r2, r1
 80021d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80021d4:	4b54      	ldr	r3, [pc, #336]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	8179      	strh	r1, [r7, #10]
 80021de:	4618      	mov	r0, r3
 80021e0:	4b52      	ldr	r3, [pc, #328]	@ (800232c <send_DHCP_REQUEST+0x2dc>)
 80021e2:	7959      	ldrb	r1, [r3, #5]
 80021e4:	1813      	adds	r3, r2, r0
 80021e6:	460a      	mov	r2, r1
 80021e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2bff      	cmp	r3, #255	@ 0xff
 80021f0:	f040 8084 	bne.w	80022fc <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80021f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	897b      	ldrh	r3, [r7, #10]
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	8179      	strh	r1, [r7, #10]
 80021fe:	4413      	add	r3, r2
 8002200:	2232      	movs	r2, #50	@ 0x32
 8002202:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8002206:	4b48      	ldr	r3, [pc, #288]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	8179      	strh	r1, [r7, #10]
 8002210:	4413      	add	r3, r2
 8002212:	2204      	movs	r2, #4
 8002214:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002218:	4b43      	ldr	r3, [pc, #268]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	897b      	ldrh	r3, [r7, #10]
 800221e:	1c59      	adds	r1, r3, #1
 8002220:	8179      	strh	r1, [r7, #10]
 8002222:	4618      	mov	r0, r3
 8002224:	4b42      	ldr	r3, [pc, #264]	@ (8002330 <send_DHCP_REQUEST+0x2e0>)
 8002226:	7819      	ldrb	r1, [r3, #0]
 8002228:	1813      	adds	r3, r2, r0
 800222a:	460a      	mov	r2, r1
 800222c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002230:	4b3d      	ldr	r3, [pc, #244]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	897b      	ldrh	r3, [r7, #10]
 8002236:	1c59      	adds	r1, r3, #1
 8002238:	8179      	strh	r1, [r7, #10]
 800223a:	4618      	mov	r0, r3
 800223c:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <send_DHCP_REQUEST+0x2e0>)
 800223e:	7859      	ldrb	r1, [r3, #1]
 8002240:	1813      	adds	r3, r2, r0
 8002242:	460a      	mov	r2, r1
 8002244:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002248:	4b37      	ldr	r3, [pc, #220]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	8179      	strh	r1, [r7, #10]
 8002252:	4618      	mov	r0, r3
 8002254:	4b36      	ldr	r3, [pc, #216]	@ (8002330 <send_DHCP_REQUEST+0x2e0>)
 8002256:	7899      	ldrb	r1, [r3, #2]
 8002258:	1813      	adds	r3, r2, r0
 800225a:	460a      	mov	r2, r1
 800225c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002260:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	897b      	ldrh	r3, [r7, #10]
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	8179      	strh	r1, [r7, #10]
 800226a:	4618      	mov	r0, r3
 800226c:	4b30      	ldr	r3, [pc, #192]	@ (8002330 <send_DHCP_REQUEST+0x2e0>)
 800226e:	78d9      	ldrb	r1, [r3, #3]
 8002270:	1813      	adds	r3, r2, r0
 8002272:	460a      	mov	r2, r1
 8002274:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8002278:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	897b      	ldrh	r3, [r7, #10]
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	8179      	strh	r1, [r7, #10]
 8002282:	4413      	add	r3, r2
 8002284:	2236      	movs	r2, #54	@ 0x36
 8002286:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800228a:	4b27      	ldr	r3, [pc, #156]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	1c59      	adds	r1, r3, #1
 8002292:	8179      	strh	r1, [r7, #10]
 8002294:	4413      	add	r3, r2
 8002296:	2204      	movs	r2, #4
 8002298:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800229c:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	897b      	ldrh	r3, [r7, #10]
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	8179      	strh	r1, [r7, #10]
 80022a6:	4618      	mov	r0, r3
 80022a8:	4b22      	ldr	r3, [pc, #136]	@ (8002334 <send_DHCP_REQUEST+0x2e4>)
 80022aa:	7819      	ldrb	r1, [r3, #0]
 80022ac:	1813      	adds	r3, r2, r0
 80022ae:	460a      	mov	r2, r1
 80022b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80022b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	1c59      	adds	r1, r3, #1
 80022bc:	8179      	strh	r1, [r7, #10]
 80022be:	4618      	mov	r0, r3
 80022c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <send_DHCP_REQUEST+0x2e4>)
 80022c2:	7859      	ldrb	r1, [r3, #1]
 80022c4:	1813      	adds	r3, r2, r0
 80022c6:	460a      	mov	r2, r1
 80022c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	8179      	strh	r1, [r7, #10]
 80022d6:	4618      	mov	r0, r3
 80022d8:	4b16      	ldr	r3, [pc, #88]	@ (8002334 <send_DHCP_REQUEST+0x2e4>)
 80022da:	7899      	ldrb	r1, [r3, #2]
 80022dc:	1813      	adds	r3, r2, r0
 80022de:	460a      	mov	r2, r1
 80022e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	897b      	ldrh	r3, [r7, #10]
 80022ea:	1c59      	adds	r1, r3, #1
 80022ec:	8179      	strh	r1, [r7, #10]
 80022ee:	4618      	mov	r0, r3
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <send_DHCP_REQUEST+0x2e4>)
 80022f2:	78d9      	ldrb	r1, [r3, #3]
 80022f4:	1813      	adds	r3, r2, r0
 80022f6:	460a      	mov	r2, r1
 80022f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	897b      	ldrh	r3, [r7, #10]
 8002302:	1c59      	adds	r1, r3, #1
 8002304:	8179      	strh	r1, [r7, #10]
 8002306:	4413      	add	r3, r2
 8002308:	220c      	movs	r2, #12
 800230a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <send_DHCP_REQUEST+0x2d8>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	1c59      	adds	r1, r3, #1
 8002316:	8179      	strh	r1, [r7, #10]
 8002318:	4413      	add	r3, r2
 800231a:	2200      	movs	r2, #0
 800231c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e019      	b.n	800235a <send_DHCP_REQUEST+0x30a>
 8002326:	bf00      	nop
 8002328:	20000acc 	.word	0x20000acc
 800232c:	20000ad0 	.word	0x20000ad0
 8002330:	20000ab0 	.word	0x20000ab0
 8002334:	20000aa4 	.word	0x20000aa4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002338:	4b86      	ldr	r3, [pc, #536]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	897b      	ldrh	r3, [r7, #10]
 800233e:	1c59      	adds	r1, r3, #1
 8002340:	8179      	strh	r1, [r7, #10]
 8002342:	4618      	mov	r0, r3
 8002344:	4984      	ldr	r1, [pc, #528]	@ (8002558 <send_DHCP_REQUEST+0x508>)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	440b      	add	r3, r1
 800234a:	7819      	ldrb	r1, [r3, #0]
 800234c:	1813      	adds	r3, r2, r0
 800234e:	460a      	mov	r2, r1
 8002350:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4a7f      	ldr	r2, [pc, #508]	@ (8002558 <send_DHCP_REQUEST+0x508>)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1e8      	bne.n	8002338 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002366:	4b7d      	ldr	r3, [pc, #500]	@ (800255c <send_DHCP_REQUEST+0x50c>)
 8002368:	78db      	ldrb	r3, [r3, #3]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b79      	ldr	r3, [pc, #484]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002370:	681c      	ldr	r4, [r3, #0]
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	1c59      	adds	r1, r3, #1
 8002376:	8179      	strh	r1, [r7, #10]
 8002378:	461d      	mov	r5, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f000 fee0 	bl	8003140 <NibbleToHex>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	1963      	adds	r3, r4, r5
 8002386:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800238a:	4b74      	ldr	r3, [pc, #464]	@ (800255c <send_DHCP_REQUEST+0x50c>)
 800238c:	78da      	ldrb	r2, [r3, #3]
 800238e:	4b71      	ldr	r3, [pc, #452]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002390:	681c      	ldr	r4, [r3, #0]
 8002392:	897b      	ldrh	r3, [r7, #10]
 8002394:	1c59      	adds	r1, r3, #1
 8002396:	8179      	strh	r1, [r7, #10]
 8002398:	461d      	mov	r5, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f000 fed0 	bl	8003140 <NibbleToHex>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	1963      	adds	r3, r4, r5
 80023a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80023aa:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <send_DHCP_REQUEST+0x50c>)
 80023ac:	791b      	ldrb	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b68      	ldr	r3, [pc, #416]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80023b4:	681c      	ldr	r4, [r3, #0]
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	8179      	strh	r1, [r7, #10]
 80023bc:	461d      	mov	r5, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f000 febe 	bl	8003140 <NibbleToHex>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	1963      	adds	r3, r4, r5
 80023ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80023ce:	4b63      	ldr	r3, [pc, #396]	@ (800255c <send_DHCP_REQUEST+0x50c>)
 80023d0:	791a      	ldrb	r2, [r3, #4]
 80023d2:	4b60      	ldr	r3, [pc, #384]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80023d4:	681c      	ldr	r4, [r3, #0]
 80023d6:	897b      	ldrh	r3, [r7, #10]
 80023d8:	1c59      	adds	r1, r3, #1
 80023da:	8179      	strh	r1, [r7, #10]
 80023dc:	461d      	mov	r5, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f000 feae 	bl	8003140 <NibbleToHex>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	1963      	adds	r3, r4, r5
 80023ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80023ee:	4b5b      	ldr	r3, [pc, #364]	@ (800255c <send_DHCP_REQUEST+0x50c>)
 80023f0:	795b      	ldrb	r3, [r3, #5]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b57      	ldr	r3, [pc, #348]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80023f8:	681c      	ldr	r4, [r3, #0]
 80023fa:	897b      	ldrh	r3, [r7, #10]
 80023fc:	1c59      	adds	r1, r3, #1
 80023fe:	8179      	strh	r1, [r7, #10]
 8002400:	461d      	mov	r5, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 fe9c 	bl	8003140 <NibbleToHex>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	1963      	adds	r3, r4, r5
 800240e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8002412:	4b52      	ldr	r3, [pc, #328]	@ (800255c <send_DHCP_REQUEST+0x50c>)
 8002414:	795a      	ldrb	r2, [r3, #5]
 8002416:	4b4f      	ldr	r3, [pc, #316]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002418:	681c      	ldr	r4, [r3, #0]
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	1c59      	adds	r1, r3, #1
 800241e:	8179      	strh	r1, [r7, #10]
 8002420:	461d      	mov	r5, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f000 fe8c 	bl	8003140 <NibbleToHex>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	1963      	adds	r3, r4, r5
 800242e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	b2d9      	uxtb	r1, r3
 8002436:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	8978      	ldrh	r0, [r7, #10]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3307      	adds	r3, #7
 8002440:	1ac3      	subs	r3, r0, r3
 8002442:	3106      	adds	r1, #6
 8002444:	b2c9      	uxtb	r1, r1
 8002446:	4413      	add	r3, r2
 8002448:	460a      	mov	r2, r1
 800244a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800244e:	4b41      	ldr	r3, [pc, #260]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	897b      	ldrh	r3, [r7, #10]
 8002454:	1c59      	adds	r1, r3, #1
 8002456:	8179      	strh	r1, [r7, #10]
 8002458:	4413      	add	r3, r2
 800245a:	2237      	movs	r2, #55	@ 0x37
 800245c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8002460:	4b3c      	ldr	r3, [pc, #240]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	897b      	ldrh	r3, [r7, #10]
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	8179      	strh	r1, [r7, #10]
 800246a:	4413      	add	r3, r2
 800246c:	2208      	movs	r2, #8
 800246e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002472:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	897b      	ldrh	r3, [r7, #10]
 8002478:	1c59      	adds	r1, r3, #1
 800247a:	8179      	strh	r1, [r7, #10]
 800247c:	4413      	add	r3, r2
 800247e:	2201      	movs	r2, #1
 8002480:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002484:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	8179      	strh	r1, [r7, #10]
 800248e:	4413      	add	r3, r2
 8002490:	2203      	movs	r2, #3
 8002492:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002496:	4b2f      	ldr	r3, [pc, #188]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	1c59      	adds	r1, r3, #1
 800249e:	8179      	strh	r1, [r7, #10]
 80024a0:	4413      	add	r3, r2
 80024a2:	2206      	movs	r2, #6
 80024a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	897b      	ldrh	r3, [r7, #10]
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	8179      	strh	r1, [r7, #10]
 80024b2:	4413      	add	r3, r2
 80024b4:	220f      	movs	r2, #15
 80024b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80024ba:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	897b      	ldrh	r3, [r7, #10]
 80024c0:	1c59      	adds	r1, r3, #1
 80024c2:	8179      	strh	r1, [r7, #10]
 80024c4:	4413      	add	r3, r2
 80024c6:	223a      	movs	r2, #58	@ 0x3a
 80024c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	897b      	ldrh	r3, [r7, #10]
 80024d2:	1c59      	adds	r1, r3, #1
 80024d4:	8179      	strh	r1, [r7, #10]
 80024d6:	4413      	add	r3, r2
 80024d8:	223b      	movs	r2, #59	@ 0x3b
 80024da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80024de:	4b1d      	ldr	r3, [pc, #116]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	897b      	ldrh	r3, [r7, #10]
 80024e4:	1c59      	adds	r1, r3, #1
 80024e6:	8179      	strh	r1, [r7, #10]
 80024e8:	4413      	add	r3, r2
 80024ea:	221f      	movs	r2, #31
 80024ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80024f0:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	897b      	ldrh	r3, [r7, #10]
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	8179      	strh	r1, [r7, #10]
 80024fa:	4413      	add	r3, r2
 80024fc:	2221      	movs	r2, #33	@ 0x21
 80024fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	1c59      	adds	r1, r3, #1
 800250a:	8179      	strh	r1, [r7, #10]
 800250c:	4413      	add	r3, r2
 800250e:	22ff      	movs	r2, #255	@ 0xff
 8002510:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002514:	897b      	ldrh	r3, [r7, #10]
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e009      	b.n	800252e <send_DHCP_REQUEST+0x4de>
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	33ec      	adds	r3, #236	@ 0xec
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3301      	adds	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002534:	dbf1      	blt.n	800251a <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <send_DHCP_REQUEST+0x510>)
 8002538:	7818      	ldrb	r0, [r3, #0]
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <send_DHCP_REQUEST+0x504>)
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	2243      	movs	r2, #67	@ 0x43
 8002542:	9200      	str	r2, [sp, #0]
 8002544:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002548:	f002 f942 	bl	80047d0 <sendto>

}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	20000acc 	.word	0x20000acc
 8002558:	2000003c 	.word	0x2000003c
 800255c:	20000ad0 	.word	0x20000ad0
 8002560:	20000aa0 	.word	0x20000aa0

08002564 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800256e:	f7ff fab3 	bl	8001ad8 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002572:	2304      	movs	r3, #4
 8002574:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002576:	4b9f      	ldr	r3, [pc, #636]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330a      	adds	r3, #10
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002580:	4b9c      	ldr	r3, [pc, #624]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330a      	adds	r3, #10
 8002586:	3301      	adds	r3, #1
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800258c:	4b99      	ldr	r3, [pc, #612]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	897b      	ldrh	r3, [r7, #10]
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	8179      	strh	r1, [r7, #10]
 8002596:	4413      	add	r3, r2
 8002598:	2235      	movs	r2, #53	@ 0x35
 800259a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800259e:	4b95      	ldr	r3, [pc, #596]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	897b      	ldrh	r3, [r7, #10]
 80025a4:	1c59      	adds	r1, r3, #1
 80025a6:	8179      	strh	r1, [r7, #10]
 80025a8:	4413      	add	r3, r2
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80025b0:	4b90      	ldr	r3, [pc, #576]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	897b      	ldrh	r3, [r7, #10]
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	8179      	strh	r1, [r7, #10]
 80025ba:	4413      	add	r3, r2
 80025bc:	2204      	movs	r2, #4
 80025be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80025c2:	4b8c      	ldr	r3, [pc, #560]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	1c59      	adds	r1, r3, #1
 80025ca:	8179      	strh	r1, [r7, #10]
 80025cc:	4413      	add	r3, r2
 80025ce:	223d      	movs	r2, #61	@ 0x3d
 80025d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80025d4:	4b87      	ldr	r3, [pc, #540]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	897b      	ldrh	r3, [r7, #10]
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	8179      	strh	r1, [r7, #10]
 80025de:	4413      	add	r3, r2
 80025e0:	2207      	movs	r2, #7
 80025e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80025e6:	4b83      	ldr	r3, [pc, #524]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	897b      	ldrh	r3, [r7, #10]
 80025ec:	1c59      	adds	r1, r3, #1
 80025ee:	8179      	strh	r1, [r7, #10]
 80025f0:	4413      	add	r3, r2
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80025f8:	4b7e      	ldr	r3, [pc, #504]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	897b      	ldrh	r3, [r7, #10]
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	8179      	strh	r1, [r7, #10]
 8002602:	4618      	mov	r0, r3
 8002604:	4b7c      	ldr	r3, [pc, #496]	@ (80027f8 <send_DHCP_DECLINE+0x294>)
 8002606:	7819      	ldrb	r1, [r3, #0]
 8002608:	1813      	adds	r3, r2, r0
 800260a:	460a      	mov	r2, r1
 800260c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002610:	4b78      	ldr	r3, [pc, #480]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	1c59      	adds	r1, r3, #1
 8002618:	8179      	strh	r1, [r7, #10]
 800261a:	4618      	mov	r0, r3
 800261c:	4b76      	ldr	r3, [pc, #472]	@ (80027f8 <send_DHCP_DECLINE+0x294>)
 800261e:	7859      	ldrb	r1, [r3, #1]
 8002620:	1813      	adds	r3, r2, r0
 8002622:	460a      	mov	r2, r1
 8002624:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002628:	4b72      	ldr	r3, [pc, #456]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	897b      	ldrh	r3, [r7, #10]
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	8179      	strh	r1, [r7, #10]
 8002632:	4618      	mov	r0, r3
 8002634:	4b70      	ldr	r3, [pc, #448]	@ (80027f8 <send_DHCP_DECLINE+0x294>)
 8002636:	7899      	ldrb	r1, [r3, #2]
 8002638:	1813      	adds	r3, r2, r0
 800263a:	460a      	mov	r2, r1
 800263c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002640:	4b6c      	ldr	r3, [pc, #432]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	897b      	ldrh	r3, [r7, #10]
 8002646:	1c59      	adds	r1, r3, #1
 8002648:	8179      	strh	r1, [r7, #10]
 800264a:	4618      	mov	r0, r3
 800264c:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <send_DHCP_DECLINE+0x294>)
 800264e:	78d9      	ldrb	r1, [r3, #3]
 8002650:	1813      	adds	r3, r2, r0
 8002652:	460a      	mov	r2, r1
 8002654:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002658:	4b66      	ldr	r3, [pc, #408]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	8179      	strh	r1, [r7, #10]
 8002662:	4618      	mov	r0, r3
 8002664:	4b64      	ldr	r3, [pc, #400]	@ (80027f8 <send_DHCP_DECLINE+0x294>)
 8002666:	7919      	ldrb	r1, [r3, #4]
 8002668:	1813      	adds	r3, r2, r0
 800266a:	460a      	mov	r2, r1
 800266c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002670:	4b60      	ldr	r3, [pc, #384]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	8179      	strh	r1, [r7, #10]
 800267a:	4618      	mov	r0, r3
 800267c:	4b5e      	ldr	r3, [pc, #376]	@ (80027f8 <send_DHCP_DECLINE+0x294>)
 800267e:	7959      	ldrb	r1, [r3, #5]
 8002680:	1813      	adds	r3, r2, r0
 8002682:	460a      	mov	r2, r1
 8002684:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002688:	4b5a      	ldr	r3, [pc, #360]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	8179      	strh	r1, [r7, #10]
 8002692:	4413      	add	r3, r2
 8002694:	2232      	movs	r2, #50	@ 0x32
 8002696:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800269a:	4b56      	ldr	r3, [pc, #344]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	1c59      	adds	r1, r3, #1
 80026a2:	8179      	strh	r1, [r7, #10]
 80026a4:	4413      	add	r3, r2
 80026a6:	2204      	movs	r2, #4
 80026a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80026ac:	4b51      	ldr	r3, [pc, #324]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	897b      	ldrh	r3, [r7, #10]
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	8179      	strh	r1, [r7, #10]
 80026b6:	4618      	mov	r0, r3
 80026b8:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <send_DHCP_DECLINE+0x298>)
 80026ba:	7819      	ldrb	r1, [r3, #0]
 80026bc:	1813      	adds	r3, r2, r0
 80026be:	460a      	mov	r2, r1
 80026c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80026c4:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	897b      	ldrh	r3, [r7, #10]
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	8179      	strh	r1, [r7, #10]
 80026ce:	4618      	mov	r0, r3
 80026d0:	4b4a      	ldr	r3, [pc, #296]	@ (80027fc <send_DHCP_DECLINE+0x298>)
 80026d2:	7859      	ldrb	r1, [r3, #1]
 80026d4:	1813      	adds	r3, r2, r0
 80026d6:	460a      	mov	r2, r1
 80026d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80026dc:	4b45      	ldr	r3, [pc, #276]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	897b      	ldrh	r3, [r7, #10]
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	8179      	strh	r1, [r7, #10]
 80026e6:	4618      	mov	r0, r3
 80026e8:	4b44      	ldr	r3, [pc, #272]	@ (80027fc <send_DHCP_DECLINE+0x298>)
 80026ea:	7899      	ldrb	r1, [r3, #2]
 80026ec:	1813      	adds	r3, r2, r0
 80026ee:	460a      	mov	r2, r1
 80026f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80026f4:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	1c59      	adds	r1, r3, #1
 80026fc:	8179      	strh	r1, [r7, #10]
 80026fe:	4618      	mov	r0, r3
 8002700:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <send_DHCP_DECLINE+0x298>)
 8002702:	78d9      	ldrb	r1, [r3, #3]
 8002704:	1813      	adds	r3, r2, r0
 8002706:	460a      	mov	r2, r1
 8002708:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800270c:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	1c59      	adds	r1, r3, #1
 8002714:	8179      	strh	r1, [r7, #10]
 8002716:	4413      	add	r3, r2
 8002718:	2236      	movs	r2, #54	@ 0x36
 800271a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800271e:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	1c59      	adds	r1, r3, #1
 8002726:	8179      	strh	r1, [r7, #10]
 8002728:	4413      	add	r3, r2
 800272a:	2204      	movs	r2, #4
 800272c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002730:	4b30      	ldr	r3, [pc, #192]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	1c59      	adds	r1, r3, #1
 8002738:	8179      	strh	r1, [r7, #10]
 800273a:	4618      	mov	r0, r3
 800273c:	4b30      	ldr	r3, [pc, #192]	@ (8002800 <send_DHCP_DECLINE+0x29c>)
 800273e:	7819      	ldrb	r1, [r3, #0]
 8002740:	1813      	adds	r3, r2, r0
 8002742:	460a      	mov	r2, r1
 8002744:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8002748:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	8179      	strh	r1, [r7, #10]
 8002752:	4618      	mov	r0, r3
 8002754:	4b2a      	ldr	r3, [pc, #168]	@ (8002800 <send_DHCP_DECLINE+0x29c>)
 8002756:	7859      	ldrb	r1, [r3, #1]
 8002758:	1813      	adds	r3, r2, r0
 800275a:	460a      	mov	r2, r1
 800275c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002760:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	897b      	ldrh	r3, [r7, #10]
 8002766:	1c59      	adds	r1, r3, #1
 8002768:	8179      	strh	r1, [r7, #10]
 800276a:	4618      	mov	r0, r3
 800276c:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <send_DHCP_DECLINE+0x29c>)
 800276e:	7899      	ldrb	r1, [r3, #2]
 8002770:	1813      	adds	r3, r2, r0
 8002772:	460a      	mov	r2, r1
 8002774:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8002778:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	897b      	ldrh	r3, [r7, #10]
 800277e:	1c59      	adds	r1, r3, #1
 8002780:	8179      	strh	r1, [r7, #10]
 8002782:	4618      	mov	r0, r3
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <send_DHCP_DECLINE+0x29c>)
 8002786:	78d9      	ldrb	r1, [r3, #3]
 8002788:	1813      	adds	r3, r2, r0
 800278a:	460a      	mov	r2, r1
 800278c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8002790:	4b18      	ldr	r3, [pc, #96]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	897b      	ldrh	r3, [r7, #10]
 8002796:	1c59      	adds	r1, r3, #1
 8002798:	8179      	strh	r1, [r7, #10]
 800279a:	4413      	add	r3, r2
 800279c:	22ff      	movs	r2, #255	@ 0xff
 800279e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e009      	b.n	80027bc <send_DHCP_DECLINE+0x258>
 80027a8:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	33ec      	adds	r3, #236	@ 0xec
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80027c2:	dbf1      	blt.n	80027a8 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80027c4:	23ff      	movs	r3, #255	@ 0xff
 80027c6:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80027c8:	23ff      	movs	r3, #255	@ 0xff
 80027ca:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80027cc:	23ff      	movs	r3, #255	@ 0xff
 80027ce:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80027d0:	23ff      	movs	r3, #255	@ 0xff
 80027d2:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <send_DHCP_DECLINE+0x2a0>)
 80027d6:	7818      	ldrb	r0, [r3, #0]
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <send_DHCP_DECLINE+0x290>)
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	2243      	movs	r2, #67	@ 0x43
 80027e0:	9200      	str	r2, [sp, #0]
 80027e2:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80027e6:	f001 fff3 	bl	80047d0 <sendto>
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000acc 	.word	0x20000acc
 80027f8:	20000ad0 	.word	0x20000ad0
 80027fc:	20000ab0 	.word	0x20000ab0
 8002800:	20000aa4 	.word	0x20000aa4
 8002804:	20000aa0 	.word	0x20000aa0

08002808 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8002812:	4ba1      	ldr	r3, [pc, #644]	@ (8002a98 <parseDHCPMSG+0x290>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f001 fa8d 	bl	8003d36 <getSn_RX_RSR>
 800281c:	4603      	mov	r3, r0
 800281e:	823b      	strh	r3, [r7, #16]
 8002820:	8a3b      	ldrh	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d011      	beq.n	800284a <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8002826:	4b9c      	ldr	r3, [pc, #624]	@ (8002a98 <parseDHCPMSG+0x290>)
 8002828:	7818      	ldrb	r0, [r3, #0]
 800282a:	4b9c      	ldr	r3, [pc, #624]	@ (8002a9c <parseDHCPMSG+0x294>)
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	1d3c      	adds	r4, r7, #4
 8002830:	8a3a      	ldrh	r2, [r7, #16]
 8002832:	1cbb      	adds	r3, r7, #2
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4623      	mov	r3, r4
 8002838:	f002 f8fe 	bl	8004a38 <recvfrom>
 800283c:	4603      	mov	r3, r0
 800283e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	2b43      	cmp	r3, #67	@ 0x43
 8002844:	f040 81ed 	bne.w	8002c22 <parseDHCPMSG+0x41a>
 8002848:	e001      	b.n	800284e <parseDHCPMSG+0x46>
   else return 0;
 800284a:	2300      	movs	r3, #0
 800284c:	e1eb      	b.n	8002c26 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800284e:	4b93      	ldr	r3, [pc, #588]	@ (8002a9c <parseDHCPMSG+0x294>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	7f1a      	ldrb	r2, [r3, #28]
 8002854:	4b92      	ldr	r3, [pc, #584]	@ (8002aa0 <parseDHCPMSG+0x298>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d124      	bne.n	80028a6 <parseDHCPMSG+0x9e>
 800285c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a9c <parseDHCPMSG+0x294>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	7f5a      	ldrb	r2, [r3, #29]
 8002862:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <parseDHCPMSG+0x298>)
 8002864:	785b      	ldrb	r3, [r3, #1]
 8002866:	429a      	cmp	r2, r3
 8002868:	d11d      	bne.n	80028a6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800286a:	4b8c      	ldr	r3, [pc, #560]	@ (8002a9c <parseDHCPMSG+0x294>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	7f9a      	ldrb	r2, [r3, #30]
 8002870:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa0 <parseDHCPMSG+0x298>)
 8002872:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d116      	bne.n	80028a6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002878:	4b88      	ldr	r3, [pc, #544]	@ (8002a9c <parseDHCPMSG+0x294>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	7fda      	ldrb	r2, [r3, #31]
 800287e:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <parseDHCPMSG+0x298>)
 8002880:	78db      	ldrb	r3, [r3, #3]
 8002882:	429a      	cmp	r2, r3
 8002884:	d10f      	bne.n	80028a6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002886:	4b85      	ldr	r3, [pc, #532]	@ (8002a9c <parseDHCPMSG+0x294>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800288e:	4b84      	ldr	r3, [pc, #528]	@ (8002aa0 <parseDHCPMSG+0x298>)
 8002890:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d107      	bne.n	80028a6 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002896:	4b81      	ldr	r3, [pc, #516]	@ (8002a9c <parseDHCPMSG+0x294>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800289e:	4b80      	ldr	r3, [pc, #512]	@ (8002aa0 <parseDHCPMSG+0x298>)
 80028a0:	795b      	ldrb	r3, [r3, #5]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e1bd      	b.n	8002c26 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80028aa:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10b      	bne.n	80028ca <parseDHCPMSG+0xc2>
 80028b2:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <parseDHCPMSG+0xc2>
 80028ba:	4b7a      	ldr	r3, [pc, #488]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028bc:	789b      	ldrb	r3, [r3, #2]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <parseDHCPMSG+0xc2>
 80028c2:	4b78      	ldr	r3, [pc, #480]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028c4:	78db      	ldrb	r3, [r3, #3]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d029      	beq.n	800291e <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80028ca:	793a      	ldrb	r2, [r7, #4]
 80028cc:	4b75      	ldr	r3, [pc, #468]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d10e      	bne.n	80028f2 <parseDHCPMSG+0xea>
 80028d4:	797a      	ldrb	r2, [r7, #5]
 80028d6:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d109      	bne.n	80028f2 <parseDHCPMSG+0xea>
 80028de:	79ba      	ldrb	r2, [r7, #6]
 80028e0:	4b70      	ldr	r3, [pc, #448]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028e2:	789b      	ldrb	r3, [r3, #2]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d104      	bne.n	80028f2 <parseDHCPMSG+0xea>
 80028e8:	79fa      	ldrb	r2, [r7, #7]
 80028ea:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa4 <parseDHCPMSG+0x29c>)
 80028ec:	78db      	ldrb	r3, [r3, #3]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d015      	beq.n	800291e <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80028f2:	793a      	ldrb	r2, [r7, #4]
 80028f4:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa8 <parseDHCPMSG+0x2a0>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d10e      	bne.n	800291a <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80028fc:	797a      	ldrb	r2, [r7, #5]
 80028fe:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <parseDHCPMSG+0x2a0>)
 8002900:	785b      	ldrb	r3, [r3, #1]
 8002902:	429a      	cmp	r2, r3
 8002904:	d109      	bne.n	800291a <parseDHCPMSG+0x112>
 8002906:	79ba      	ldrb	r2, [r7, #6]
 8002908:	4b67      	ldr	r3, [pc, #412]	@ (8002aa8 <parseDHCPMSG+0x2a0>)
 800290a:	789b      	ldrb	r3, [r3, #2]
 800290c:	429a      	cmp	r2, r3
 800290e:	d104      	bne.n	800291a <parseDHCPMSG+0x112>
 8002910:	79fa      	ldrb	r2, [r7, #7]
 8002912:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <parseDHCPMSG+0x2a0>)
 8002914:	78db      	ldrb	r3, [r3, #3]
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800291a:	2300      	movs	r3, #0
 800291c:	e183      	b.n	8002c26 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800291e:	4b5f      	ldr	r3, [pc, #380]	@ (8002a9c <parseDHCPMSG+0x294>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	33f0      	adds	r3, #240	@ 0xf0
 8002928:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800292a:	8a3b      	ldrh	r3, [r7, #16]
 800292c:	3bf0      	subs	r3, #240	@ 0xf0
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4413      	add	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8002934:	e170      	b.n	8002c18 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b36      	cmp	r3, #54	@ 0x36
 800293c:	dc76      	bgt.n	8002a2c <parseDHCPMSG+0x224>
 800293e:	2b00      	cmp	r3, #0
 8002940:	f2c0 815d 	blt.w	8002bfe <parseDHCPMSG+0x3f6>
 8002944:	2b36      	cmp	r3, #54	@ 0x36
 8002946:	f200 815a 	bhi.w	8002bfe <parseDHCPMSG+0x3f6>
 800294a:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <parseDHCPMSG+0x148>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002a39 	.word	0x08002a39
 8002954:	08002a59 	.word	0x08002a59
 8002958:	08002bff 	.word	0x08002bff
 800295c:	08002ab1 	.word	0x08002ab1
 8002960:	08002bff 	.word	0x08002bff
 8002964:	08002bff 	.word	0x08002bff
 8002968:	08002afd 	.word	0x08002afd
 800296c:	08002bff 	.word	0x08002bff
 8002970:	08002bff 	.word	0x08002bff
 8002974:	08002bff 	.word	0x08002bff
 8002978:	08002bff 	.word	0x08002bff
 800297c:	08002bff 	.word	0x08002bff
 8002980:	08002bff 	.word	0x08002bff
 8002984:	08002bff 	.word	0x08002bff
 8002988:	08002bff 	.word	0x08002bff
 800298c:	08002bff 	.word	0x08002bff
 8002990:	08002bff 	.word	0x08002bff
 8002994:	08002bff 	.word	0x08002bff
 8002998:	08002bff 	.word	0x08002bff
 800299c:	08002bff 	.word	0x08002bff
 80029a0:	08002bff 	.word	0x08002bff
 80029a4:	08002bff 	.word	0x08002bff
 80029a8:	08002bff 	.word	0x08002bff
 80029ac:	08002bff 	.word	0x08002bff
 80029b0:	08002bff 	.word	0x08002bff
 80029b4:	08002bff 	.word	0x08002bff
 80029b8:	08002bff 	.word	0x08002bff
 80029bc:	08002bff 	.word	0x08002bff
 80029c0:	08002bff 	.word	0x08002bff
 80029c4:	08002bff 	.word	0x08002bff
 80029c8:	08002bff 	.word	0x08002bff
 80029cc:	08002bff 	.word	0x08002bff
 80029d0:	08002bff 	.word	0x08002bff
 80029d4:	08002bff 	.word	0x08002bff
 80029d8:	08002bff 	.word	0x08002bff
 80029dc:	08002bff 	.word	0x08002bff
 80029e0:	08002bff 	.word	0x08002bff
 80029e4:	08002bff 	.word	0x08002bff
 80029e8:	08002bff 	.word	0x08002bff
 80029ec:	08002bff 	.word	0x08002bff
 80029f0:	08002bff 	.word	0x08002bff
 80029f4:	08002bff 	.word	0x08002bff
 80029f8:	08002bff 	.word	0x08002bff
 80029fc:	08002bff 	.word	0x08002bff
 8002a00:	08002bff 	.word	0x08002bff
 8002a04:	08002bff 	.word	0x08002bff
 8002a08:	08002bff 	.word	0x08002bff
 8002a0c:	08002bff 	.word	0x08002bff
 8002a10:	08002bff 	.word	0x08002bff
 8002a14:	08002bff 	.word	0x08002bff
 8002a18:	08002bff 	.word	0x08002bff
 8002a1c:	08002b49 	.word	0x08002b49
 8002a20:	08002bff 	.word	0x08002bff
 8002a24:	08002a41 	.word	0x08002a41
 8002a28:	08002ba5 	.word	0x08002ba5
 8002a2c:	2bff      	cmp	r3, #255	@ 0xff
 8002a2e:	f040 80e6 	bne.w	8002bfe <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	617b      	str	r3, [r7, #20]
   				break;
 8002a36:	e0ef      	b.n	8002c18 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
   				break;
 8002a3e:	e0eb      	b.n	8002c18 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
   				p++;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	617a      	str	r2, [r7, #20]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	74fb      	strb	r3, [r7, #19]
   				break;
 8002a56:	e0df      	b.n	8002c18 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
   				p++;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	617a      	str	r2, [r7, #20]
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <parseDHCPMSG+0x2a4>)
 8002a6e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	617a      	str	r2, [r7, #20]
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <parseDHCPMSG+0x2a4>)
 8002a7a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	617a      	str	r2, [r7, #20]
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <parseDHCPMSG+0x2a4>)
 8002a86:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	617a      	str	r2, [r7, #20]
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <parseDHCPMSG+0x2a4>)
 8002a92:	70da      	strb	r2, [r3, #3]
   				break;
 8002a94:	e0c0      	b.n	8002c18 <parseDHCPMSG+0x410>
 8002a96:	bf00      	nop
 8002a98:	20000aa0 	.word	0x20000aa0
 8002a9c:	20000acc 	.word	0x20000acc
 8002aa0:	20000ad0 	.word	0x20000ad0
 8002aa4:	20000aa4 	.word	0x20000aa4
 8002aa8:	20000aa8 	.word	0x20000aa8
 8002aac:	20000ab8 	.word	0x20000ab8
   			case routersOnSubnet :
   				p++;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	617a      	str	r2, [r7, #20]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	617a      	str	r2, [r7, #20]
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	4b59      	ldr	r3, [pc, #356]	@ (8002c30 <parseDHCPMSG+0x428>)
 8002aca:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	617a      	str	r2, [r7, #20]
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	4b56      	ldr	r3, [pc, #344]	@ (8002c30 <parseDHCPMSG+0x428>)
 8002ad6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	617a      	str	r2, [r7, #20]
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	4b53      	ldr	r3, [pc, #332]	@ (8002c30 <parseDHCPMSG+0x428>)
 8002ae2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	617a      	str	r2, [r7, #20]
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	4b50      	ldr	r3, [pc, #320]	@ (8002c30 <parseDHCPMSG+0x428>)
 8002aee:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	3b04      	subs	r3, #4
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
   				break;
 8002afa:	e08d      	b.n	8002c18 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	617a      	str	r2, [r7, #20]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	617a      	str	r2, [r7, #20]
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	4b47      	ldr	r3, [pc, #284]	@ (8002c34 <parseDHCPMSG+0x42c>)
 8002b16:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	617a      	str	r2, [r7, #20]
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	4b44      	ldr	r3, [pc, #272]	@ (8002c34 <parseDHCPMSG+0x42c>)
 8002b22:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	617a      	str	r2, [r7, #20]
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	4b41      	ldr	r3, [pc, #260]	@ (8002c34 <parseDHCPMSG+0x42c>)
 8002b2e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	617a      	str	r2, [r7, #20]
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	4b3e      	ldr	r3, [pc, #248]	@ (8002c34 <parseDHCPMSG+0x42c>)
 8002b3a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4413      	add	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
   				break;
 8002b46:	e067      	b.n	8002c18 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	617a      	str	r2, [r7, #20]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	617a      	str	r2, [r7, #20]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <parseDHCPMSG+0x430>)
 8002b64:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002b66:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <parseDHCPMSG+0x430>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	021a      	lsls	r2, r3, #8
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1c59      	adds	r1, r3, #1
 8002b70:	6179      	str	r1, [r7, #20]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a30      	ldr	r2, [pc, #192]	@ (8002c38 <parseDHCPMSG+0x430>)
 8002b78:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <parseDHCPMSG+0x430>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	021a      	lsls	r2, r3, #8
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	6179      	str	r1, [r7, #20]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c38 <parseDHCPMSG+0x430>)
 8002b8c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c38 <parseDHCPMSG+0x430>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	021a      	lsls	r2, r3, #8
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	6179      	str	r1, [r7, #20]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a26      	ldr	r2, [pc, #152]	@ (8002c38 <parseDHCPMSG+0x430>)
 8002ba0:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8002ba2:	e039      	b.n	8002c18 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	617a      	str	r2, [r7, #20]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	617a      	str	r2, [r7, #20]
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <parseDHCPMSG+0x434>)
 8002bbe:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	617a      	str	r2, [r7, #20]
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <parseDHCPMSG+0x434>)
 8002bca:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	617a      	str	r2, [r7, #20]
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <parseDHCPMSG+0x434>)
 8002bd6:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	617a      	str	r2, [r7, #20]
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <parseDHCPMSG+0x434>)
 8002be2:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002be4:	793a      	ldrb	r2, [r7, #4]
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <parseDHCPMSG+0x438>)
 8002be8:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8002bea:	797a      	ldrb	r2, [r7, #5]
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <parseDHCPMSG+0x438>)
 8002bee:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002bf0:	79ba      	ldrb	r2, [r7, #6]
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <parseDHCPMSG+0x438>)
 8002bf4:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002bf6:	79fa      	ldrb	r2, [r7, #7]
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <parseDHCPMSG+0x438>)
 8002bfa:	70da      	strb	r2, [r3, #3]
   				break;
 8002bfc:	e00c      	b.n	8002c18 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	617a      	str	r2, [r7, #20]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8002c0e:	7afb      	ldrb	r3, [r7, #11]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4413      	add	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
   				break;
 8002c16:	bf00      	nop
		while ( p < e ) {
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	f4ff ae8a 	bcc.w	8002936 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8002c22:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000ab4 	.word	0x20000ab4
 8002c34:	20000abc 	.word	0x20000abc
 8002c38:	20000034 	.word	0x20000034
 8002c3c:	20000aa4 	.word	0x20000aa4
 8002c40:	20000aa8 	.word	0x20000aa8

08002c44 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e48 <DHCP_run+0x204>)
 8002c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d101      	bne.n	8002c58 <DHCP_run+0x14>
 8002c54:	2305      	movs	r3, #5
 8002c56:	e0f3      	b.n	8002e40 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002c58:	4b7c      	ldr	r3, [pc, #496]	@ (8002e4c <DHCP_run+0x208>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	3301      	adds	r3, #1
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fec2 	bl	80039f0 <WIZCHIP_READ>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b22      	cmp	r3, #34	@ 0x22
 8002c70:	d006      	beq.n	8002c80 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8002c72:	4b76      	ldr	r3, [pc, #472]	@ (8002e4c <DHCP_run+0x208>)
 8002c74:	7818      	ldrb	r0, [r3, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	2244      	movs	r2, #68	@ 0x44
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	f001 f99e 	bl	8003fbc <socket>

	ret = DHCP_RUNNING;
 8002c80:	2301      	movs	r3, #1
 8002c82:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002c84:	f7ff fdc0 	bl	8002808 <parseDHCPMSG>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8002c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e48 <DHCP_run+0x204>)
 8002c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	f200 80d0 	bhi.w	8002e38 <DHCP_run+0x1f4>
 8002c98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <DHCP_run+0x5c>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb5 	.word	0x08002cb5
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002d1d 	.word	0x08002d1d
 8002cac:	08002d6d 	.word	0x08002d6d
 8002cb0:	08002dc7 	.word	0x08002dc7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002cb4:	4b66      	ldr	r3, [pc, #408]	@ (8002e50 <DHCP_run+0x20c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8002cba:	4b65      	ldr	r3, [pc, #404]	@ (8002e50 <DHCP_run+0x20c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8002cc0:	4b63      	ldr	r3, [pc, #396]	@ (8002e50 <DHCP_run+0x20c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8002cc6:	4b62      	ldr	r3, [pc, #392]	@ (8002e50 <DHCP_run+0x20c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002ccc:	f7fe fffa 	bl	8001cc4 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8002e48 <DHCP_run+0x204>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
   		break;
 8002cd6:	e0b2      	b.n	8002e3e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d119      	bne.n	8002d12 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8002cde:	4b5d      	ldr	r3, [pc, #372]	@ (8002e54 <DHCP_run+0x210>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	7c1a      	ldrb	r2, [r3, #16]
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e50 <DHCP_run+0x20c>)
 8002ce6:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e54 <DHCP_run+0x210>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	7c5a      	ldrb	r2, [r3, #17]
 8002cee:	4b58      	ldr	r3, [pc, #352]	@ (8002e50 <DHCP_run+0x20c>)
 8002cf0:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002cf2:	4b58      	ldr	r3, [pc, #352]	@ (8002e54 <DHCP_run+0x210>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	7c9a      	ldrb	r2, [r3, #18]
 8002cf8:	4b55      	ldr	r3, [pc, #340]	@ (8002e50 <DHCP_run+0x20c>)
 8002cfa:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002cfc:	4b55      	ldr	r3, [pc, #340]	@ (8002e54 <DHCP_run+0x210>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	7cda      	ldrb	r2, [r3, #19]
 8002d02:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <DHCP_run+0x20c>)
 8002d04:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002d06:	f7ff f9a3 	bl	8002050 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002e48 <DHCP_run+0x204>)
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002d10:	e095      	b.n	8002e3e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002d12:	f000 f8c1 	bl	8002e98 <check_DHCP_timeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
         break;
 8002d1a:	e090      	b.n	8002e3e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8002d1c:	79bb      	ldrb	r3, [r7, #6]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d116      	bne.n	8002d50 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002d22:	f000 f919 	bl	8002f58 <check_DHCP_leasedIP>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8002d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e58 <DHCP_run+0x214>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4798      	blx	r3
					reset_DHCP_timeout();
 8002d32:	f000 f9e3 	bl	80030fc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002d36:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <DHCP_run+0x204>)
 8002d38:	2203      	movs	r2, #3
 8002d3a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8002d3c:	e07f      	b.n	8002e3e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8002d3e:	f000 f9dd 	bl	80030fc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002d42:	4b46      	ldr	r3, [pc, #280]	@ (8002e5c <DHCP_run+0x218>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002d48:	4b3f      	ldr	r3, [pc, #252]	@ (8002e48 <DHCP_run+0x204>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
		break;
 8002d4e:	e076      	b.n	8002e3e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002d50:	79bb      	ldrb	r3, [r7, #6]
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d105      	bne.n	8002d62 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002d56:	f000 f9d1 	bl	80030fc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <DHCP_run+0x204>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
		break;
 8002d60:	e06d      	b.n	8002e3e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002d62:	f000 f899 	bl	8002e98 <check_DHCP_timeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
		break;
 8002d6a:	e068      	b.n	8002e3e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002d70:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <DHCP_run+0x21c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d060      	beq.n	8002e3c <DHCP_run+0x1f8>
 8002d7a:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <DHCP_run+0x21c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	085a      	lsrs	r2, r3, #1
 8002d80:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <DHCP_run+0x220>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d259      	bcs.n	8002e3c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8002d8c:	4b30      	ldr	r3, [pc, #192]	@ (8002e50 <DHCP_run+0x20c>)
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	4b35      	ldr	r3, [pc, #212]	@ (8002e68 <DHCP_run+0x224>)
 8002d92:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002d94:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <DHCP_run+0x20c>)
 8002d96:	785a      	ldrb	r2, [r3, #1]
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <DHCP_run+0x224>)
 8002d9a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e50 <DHCP_run+0x20c>)
 8002d9e:	789a      	ldrb	r2, [r3, #2]
 8002da0:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <DHCP_run+0x224>)
 8002da2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002da4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e50 <DHCP_run+0x20c>)
 8002da6:	78da      	ldrb	r2, [r3, #3]
 8002da8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <DHCP_run+0x224>)
 8002daa:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8002dac:	4b2f      	ldr	r3, [pc, #188]	@ (8002e6c <DHCP_run+0x228>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	4a2e      	ldr	r2, [pc, #184]	@ (8002e6c <DHCP_run+0x228>)
 8002db4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8002db6:	f7ff f94b 	bl	8002050 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8002dba:	f000 f99f 	bl	80030fc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8002dbe:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <DHCP_run+0x204>)
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002dc4:	e03a      	b.n	8002e3c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8002dca:	79bb      	ldrb	r3, [r7, #6]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d125      	bne.n	8002e1c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8002dd0:	4b27      	ldr	r3, [pc, #156]	@ (8002e70 <DHCP_run+0x22c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002dd6:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <DHCP_run+0x224>)
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <DHCP_run+0x20c>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d111      	bne.n	8002e06 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002de2:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <DHCP_run+0x224>)
 8002de4:	785a      	ldrb	r2, [r3, #1]
 8002de6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <DHCP_run+0x20c>)
 8002de8:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d10b      	bne.n	8002e06 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <DHCP_run+0x224>)
 8002df0:	789a      	ldrb	r2, [r3, #2]
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <DHCP_run+0x20c>)
 8002df4:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d105      	bne.n	8002e06 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <DHCP_run+0x224>)
 8002dfc:	78da      	ldrb	r2, [r3, #3]
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <DHCP_run+0x20c>)
 8002e00:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d004      	beq.n	8002e10 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002e06:	2303      	movs	r3, #3
 8002e08:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <DHCP_run+0x230>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002e10:	f000 f974 	bl	80030fc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <DHCP_run+0x204>)
 8002e16:	2203      	movs	r2, #3
 8002e18:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8002e1a:	e010      	b.n	8002e3e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d105      	bne.n	8002e2e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002e22:	f000 f96b 	bl	80030fc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002e26:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <DHCP_run+0x204>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
	   	break;
 8002e2c:	e007      	b.n	8002e3e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002e2e:	f000 f833 	bl	8002e98 <check_DHCP_timeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002e36:	e002      	b.n	8002e3e <DHCP_run+0x1fa>
		default :
   		break;
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <DHCP_run+0x1fa>
		break;
 8002e3c:	bf00      	nop
	}

	return ret;
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000ac0 	.word	0x20000ac0
 8002e4c:	20000aa0 	.word	0x20000aa0
 8002e50:	20000ab0 	.word	0x20000ab0
 8002e54:	20000acc 	.word	0x20000acc
 8002e58:	20000044 	.word	0x20000044
 8002e5c:	2000004c 	.word	0x2000004c
 8002e60:	20000034 	.word	0x20000034
 8002e64:	20000ac4 	.word	0x20000ac4
 8002e68:	20000aac 	.word	0x20000aac
 8002e6c:	20000ac8 	.word	0x20000ac8
 8002e70:	20000ac1 	.word	0x20000ac1
 8002e74:	20000048 	.word	0x20000048

08002e78 <DHCP_stop>:

void    DHCP_stop(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <DHCP_stop+0x18>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f001 f9af 	bl	80041e4 <close>
   dhcp_state = STATE_DHCP_STOP;
 8002e86:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <DHCP_stop+0x1c>)
 8002e88:	2206      	movs	r2, #6
 8002e8a:	701a      	strb	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000aa0 	.word	0x20000aa0
 8002e94:	20000ac0 	.word	0x20000ac0

08002e98 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <check_DHCP_timeout+0xb0>)
 8002ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	dc2d      	bgt.n	8002f08 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002eac:	4b27      	ldr	r3, [pc, #156]	@ (8002f4c <check_DHCP_timeout+0xb4>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b27      	ldr	r3, [pc, #156]	@ (8002f50 <check_DHCP_timeout+0xb8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d242      	bcs.n	8002f3e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002eb8:	4b26      	ldr	r3, [pc, #152]	@ (8002f54 <check_DHCP_timeout+0xbc>)
 8002eba:	f993 3000 	ldrsb.w	r3, [r3]
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d00c      	beq.n	8002edc <check_DHCP_timeout+0x44>
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	dc0d      	bgt.n	8002ee2 <check_DHCP_timeout+0x4a>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d002      	beq.n	8002ed0 <check_DHCP_timeout+0x38>
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d003      	beq.n	8002ed6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8002ece:	e008      	b.n	8002ee2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8002ed0:	f7fe fef8 	bl	8001cc4 <send_DHCP_DISCOVER>
				break;
 8002ed4:	e006      	b.n	8002ee4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002ed6:	f7ff f8bb 	bl	8002050 <send_DHCP_REQUEST>
				break;
 8002eda:	e003      	b.n	8002ee4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002edc:	f7ff f8b8 	bl	8002050 <send_DHCP_REQUEST>
				break;
 8002ee0:	e000      	b.n	8002ee4 <check_DHCP_timeout+0x4c>
				break;
 8002ee2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <check_DHCP_timeout+0xb8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8002eea:	4b19      	ldr	r3, [pc, #100]	@ (8002f50 <check_DHCP_timeout+0xb8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330a      	adds	r3, #10
 8002ef0:	4a16      	ldr	r2, [pc, #88]	@ (8002f4c <check_DHCP_timeout+0xb4>)
 8002ef2:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002ef4:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <check_DHCP_timeout+0xb0>)
 8002ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	b25a      	sxtb	r2, r3
 8002f02:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <check_DHCP_timeout+0xb0>)
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e01a      	b.n	8002f3e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002f08:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <check_DHCP_timeout+0xbc>)
 8002f0a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d00c      	beq.n	8002f2c <check_DHCP_timeout+0x94>
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	dc10      	bgt.n	8002f38 <check_DHCP_timeout+0xa0>
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d002      	beq.n	8002f20 <check_DHCP_timeout+0x88>
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d006      	beq.n	8002f2c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002f1e:	e00b      	b.n	8002f38 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <check_DHCP_timeout+0xbc>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002f26:	2300      	movs	r3, #0
 8002f28:	71fb      	strb	r3, [r7, #7]
				break;
 8002f2a:	e006      	b.n	8002f3a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002f2c:	f7fe feca 	bl	8001cc4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002f30:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <check_DHCP_timeout+0xbc>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
				break;
 8002f36:	e000      	b.n	8002f3a <check_DHCP_timeout+0xa2>
				break;
 8002f38:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002f3a:	f000 f8df 	bl	80030fc <reset_DHCP_timeout>
	}
	return ret;
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000ac1 	.word	0x20000ac1
 8002f4c:	20000038 	.word	0x20000038
 8002f50:	20000ac4 	.word	0x20000ac4
 8002f54:	20000ac0 	.word	0x20000ac0

08002f58 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8002f5e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002f62:	f000 fd45 	bl	80039f0 <WIZCHIP_READ>
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002f70:	f000 fd8a 	bl	8003a88 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <check_DHCP_leasedIP+0x6c>)
 8002f76:	7818      	ldrb	r0, [r3, #0]
 8002f78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <check_DHCP_leasedIP+0x70>)
 8002f80:	2211      	movs	r2, #17
 8002f82:	4912      	ldr	r1, [pc, #72]	@ (8002fcc <check_DHCP_leasedIP+0x74>)
 8002f84:	f001 fc24 	bl	80047d0 <sendto>
 8002f88:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002f92:	f000 fd79 	bl	8003a88 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f113 0f0d 	cmn.w	r3, #13
 8002f9c:	d101      	bne.n	8002fa2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00c      	b.n	8002fbc <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002fa2:	f7ff fadf 	bl	8002564 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <check_DHCP_leasedIP+0x78>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002fac:	bf00      	nop
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <check_DHCP_leasedIP+0x78>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d9f9      	bls.n	8002fae <check_DHCP_leasedIP+0x56>

		return 0;
 8002fba:	2300      	movs	r3, #0
	}
}	
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000aa0 	.word	0x20000aa0
 8002fc8:	20000ab0 	.word	0x20000ab0
 8002fcc:	0800c3cc 	.word	0x0800c3cc
 8002fd0:	20000ac4 	.word	0x20000ac4

08002fd4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002fe4:	2206      	movs	r2, #6
 8002fe6:	493f      	ldr	r1, [pc, #252]	@ (80030e4 <DHCP_init+0x110>)
 8002fe8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002fec:	f000 fd9a 	bl	8003b24 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80030e4 <DHCP_init+0x110>)
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <DHCP_init+0x110>)
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b39      	ldr	r3, [pc, #228]	@ (80030e4 <DHCP_init+0x110>)
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	4313      	orrs	r3, r2
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b37      	ldr	r3, [pc, #220]	@ (80030e4 <DHCP_init+0x110>)
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	4313      	orrs	r3, r2
 800300a:	b2da      	uxtb	r2, r3
 800300c:	4b35      	ldr	r3, [pc, #212]	@ (80030e4 <DHCP_init+0x110>)
 800300e:	791b      	ldrb	r3, [r3, #4]
 8003010:	4313      	orrs	r3, r2
 8003012:	b2da      	uxtb	r2, r3
 8003014:	4b33      	ldr	r3, [pc, #204]	@ (80030e4 <DHCP_init+0x110>)
 8003016:	795b      	ldrb	r3, [r3, #5]
 8003018:	4313      	orrs	r3, r2
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d117      	bne.n	8003050 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8003020:	4b30      	ldr	r3, [pc, #192]	@ (80030e4 <DHCP_init+0x110>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8003026:	4b2f      	ldr	r3, [pc, #188]	@ (80030e4 <DHCP_init+0x110>)
 8003028:	2208      	movs	r2, #8
 800302a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800302c:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <DHCP_init+0x110>)
 800302e:	22dc      	movs	r2, #220	@ 0xdc
 8003030:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8003032:	4b2c      	ldr	r3, [pc, #176]	@ (80030e4 <DHCP_init+0x110>)
 8003034:	2200      	movs	r2, #0
 8003036:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8003038:	4b2a      	ldr	r3, [pc, #168]	@ (80030e4 <DHCP_init+0x110>)
 800303a:	2200      	movs	r2, #0
 800303c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800303e:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <DHCP_init+0x110>)
 8003040:	2200      	movs	r2, #0
 8003042:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8003044:	2206      	movs	r2, #6
 8003046:	4927      	ldr	r1, [pc, #156]	@ (80030e4 <DHCP_init+0x110>)
 8003048:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800304c:	f000 fdca 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8003050:	4a25      	ldr	r2, [pc, #148]	@ (80030e8 <DHCP_init+0x114>)
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8003056:	4a25      	ldr	r2, [pc, #148]	@ (80030ec <DHCP_init+0x118>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800305c:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <DHCP_init+0x11c>)
 800305e:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <DHCP_init+0x120>)
 8003060:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8003062:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <DHCP_init+0x110>)
 8003064:	78db      	ldrb	r3, [r3, #3]
 8003066:	461a      	mov	r2, r3
 8003068:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <DHCP_init+0x11c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4413      	add	r3, r2
 800306e:	4a20      	ldr	r2, [pc, #128]	@ (80030f0 <DHCP_init+0x11c>)
 8003070:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8003072:	4b1c      	ldr	r3, [pc, #112]	@ (80030e4 <DHCP_init+0x110>)
 8003074:	791b      	ldrb	r3, [r3, #4]
 8003076:	461a      	mov	r2, r3
 8003078:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <DHCP_init+0x11c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4413      	add	r3, r2
 800307e:	4a1c      	ldr	r2, [pc, #112]	@ (80030f0 <DHCP_init+0x11c>)
 8003080:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8003082:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <DHCP_init+0x110>)
 8003084:	795b      	ldrb	r3, [r3, #5]
 8003086:	461a      	mov	r2, r3
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <DHCP_init+0x11c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4413      	add	r3, r2
 800308e:	4a18      	ldr	r2, [pc, #96]	@ (80030f0 <DHCP_init+0x11c>)
 8003090:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8003092:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <DHCP_init+0x110>)
 8003094:	78da      	ldrb	r2, [r3, #3]
 8003096:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <DHCP_init+0x110>)
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	4053      	eors	r3, r2
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <DHCP_init+0x110>)
 80030a0:	795b      	ldrb	r3, [r3, #5]
 80030a2:	4053      	eors	r3, r2
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <DHCP_init+0x11c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	4a10      	ldr	r2, [pc, #64]	@ (80030f0 <DHCP_init+0x11c>)
 80030b0:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	2204      	movs	r2, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80030be:	f000 fd91 	bl	8003be4 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	2204      	movs	r2, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80030ce:	f000 fd89 	bl	8003be4 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80030d2:	f000 f813 	bl	80030fc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <DHCP_init+0x124>)
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000ad0 	.word	0x20000ad0
 80030e8:	20000aa0 	.word	0x20000aa0
 80030ec:	20000acc 	.word	0x20000acc
 80030f0:	20000ac8 	.word	0x20000ac8
 80030f4:	12345678 	.word	0x12345678
 80030f8:	20000ac0 	.word	0x20000ac0

080030fc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <reset_DHCP_timeout+0x20>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <reset_DHCP_timeout+0x24>)
 8003108:	220a      	movs	r2, #10
 800310a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <reset_DHCP_timeout+0x28>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	20000ac4 	.word	0x20000ac4
 8003120:	20000038 	.word	0x20000038
 8003124:	20000ac1 	.word	0x20000ac1

08003128 <getDHCPLeasetime>:
   ip[2] = DHCP_allocated_dns[2];
   ip[3] = DHCP_allocated_dns[3];         
}

uint32_t getDHCPLeasetime(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <getDHCPLeasetime+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000034 	.word	0x20000034

08003140 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d803      	bhi.n	8003160 <NibbleToHex+0x20>
    return nibble + '0';
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	3330      	adds	r3, #48	@ 0x30
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e002      	b.n	8003166 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	3337      	adds	r3, #55	@ 0x37
 8003164:	b2db      	uxtb	r3, r3
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	4413      	add	r3, r2
 8003190:	81fb      	strh	r3, [r7, #14]
	return i;
 8003192:	89fb      	ldrh	r3, [r7, #14]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	b299      	uxth	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	b2ca      	uxtb	r2, r1
 80031ba:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]
	return s;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b08b      	sub	sp, #44	@ 0x2c
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	623a      	str	r2, [r7, #32]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <parse_name+0x34>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 800320a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800320c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003210:	2bc0      	cmp	r3, #192	@ 0xc0
 8003212:	d117      	bne.n	8003244 <parse_name+0x6e>
		{
			if (!indirect)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <parse_name+0x4a>
				clen++;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8003220:	2301      	movs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8003224:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	4413      	add	r3, r2
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	623a      	str	r2, [r7, #32]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8003244:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02b      	beq.n	80032a2 <parse_name+0xcc>
			break;

		len -= slen + 1;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8003258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800325c:	2b00      	cmp	r3, #0
 800325e:	da02      	bge.n	8003266 <parse_name+0x90>
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	e038      	b.n	80032d8 <parse_name+0x102>

		if (!indirect) clen += slen;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10c      	bne.n	8003286 <parse_name+0xb0>
 800326c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8003274:	e007      	b.n	8003286 <parse_name+0xb0>
 8003276:	6a3a      	ldr	r2, [r7, #32]
 8003278:	1c53      	adds	r3, r2, #1
 800327a:	623b      	str	r3, [r7, #32]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	1c59      	adds	r1, r3, #1
 8003280:	6079      	str	r1, [r7, #4]
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f2      	bne.n	8003276 <parse_name+0xa0>
		*buf++ = '.';
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	222e      	movs	r2, #46	@ 0x2e
 8003298:	701a      	strb	r2, [r3, #0]
		nseg++;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 80032a0:	e7a8      	b.n	80031f4 <parse_name+0x1e>
			break;
 80032a2:	bf00      	nop
	}

	if (nseg == 0)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	222e      	movs	r2, #46	@ 0x2e
 80032b2:	701a      	strb	r2, [r3, #0]
		len--;
 80032b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29b      	uxth	r3, r3
 80032be:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
	len--;
 80032ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80032d6:	69fb      	ldr	r3, [r7, #28]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	372c      	adds	r7, #44	@ 0x2c
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b0b4      	sub	sp, #208	@ 0xd0
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80032ee:	f107 020c 	add.w	r2, r7, #12
 80032f2:	23c0      	movs	r3, #192	@ 0xc0
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ff6d 	bl	80031d6 <parse_name>
 80032fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8003300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d101      	bne.n	800330e <dns_question+0x2a>
 800330a:	2300      	movs	r3, #0
 800330c:	e00b      	b.n	8003326 <dns_question+0x42>

	cp += len;
 800330e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4413      	add	r3, r2
 8003316:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3302      	adds	r3, #2
 800331c:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	3302      	adds	r3, #2
 8003322:	603b      	str	r3, [r7, #0]

	return cp;
 8003324:	683b      	ldr	r3, [r7, #0]
}
 8003326:	4618      	mov	r0, r3
 8003328:	37d0      	adds	r7, #208	@ 0xd0
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b0b6      	sub	sp, #216	@ 0xd8
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800333a:	f107 0210 	add.w	r2, r7, #16
 800333e:	23c0      	movs	r3, #192	@ 0xc0
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f7ff ff47 	bl	80031d6 <parse_name>
 8003348:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 800334c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d101      	bne.n	800335a <dns_answer+0x2c>
 8003356:	2300      	movs	r3, #0
 8003358:	e0f9      	b.n	800354e <dns_answer+0x220>

	cp += len;
 800335a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4413      	add	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8003364:	68b8      	ldr	r0, [r7, #8]
 8003366:	f7ff ff04 	bl	8003172 <get16>
 800336a:	4603      	mov	r3, r0
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3302      	adds	r3, #2
 8003374:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3302      	adds	r3, #2
 800337a:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	3304      	adds	r3, #4
 8003380:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3302      	adds	r3, #2
 8003386:	60bb      	str	r3, [r7, #8]


	switch (type)
 8003388:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800338c:	2b10      	cmp	r3, #16
 800338e:	f000 80da 	beq.w	8003546 <dns_answer+0x218>
 8003392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003396:	2b10      	cmp	r3, #16
 8003398:	f300 80d7 	bgt.w	800354a <dns_answer+0x21c>
 800339c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d07d      	beq.n	80034a0 <dns_answer+0x172>
 80033a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033a8:	2b0f      	cmp	r3, #15
 80033aa:	f300 80ce 	bgt.w	800354a <dns_answer+0x21c>
 80033ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	dc26      	bgt.n	8003404 <dns_answer+0xd6>
 80033b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f340 80c5 	ble.w	800354a <dns_answer+0x21c>
 80033c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033c4:	2201      	movs	r2, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 80033ce:	401a      	ands	r2, r3
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2201      	movne	r2, #1
 80033d6:	2200      	moveq	r2, #0
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	2a00      	cmp	r2, #0
 80033dc:	d133      	bne.n	8003446 <dns_answer+0x118>
 80033de:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80033e2:	2a00      	cmp	r2, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2201      	movne	r2, #1
 80033e8:	2200      	moveq	r2, #0
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	2a00      	cmp	r2, #0
 80033ee:	d170      	bne.n	80034d2 <dns_answer+0x1a4>
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8003402:	e0a2      	b.n	800354a <dns_answer+0x21c>
	switch (type)
 8003404:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003408:	2b0d      	cmp	r3, #13
 800340a:	d032      	beq.n	8003472 <dns_answer+0x144>
		break;
 800340c:	e09d      	b.n	800354a <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	60ba      	str	r2, [r7, #8]
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	60ba      	str	r2, [r7, #8]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	3201      	adds	r2, #1
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	60ba      	str	r2, [r7, #8]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	3202      	adds	r2, #2
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	60ba      	str	r2, [r7, #8]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	3203      	adds	r2, #3
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	7013      	strb	r3, [r2, #0]
		break;
 8003444:	e082      	b.n	800354c <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8003446:	f107 0210 	add.w	r2, r7, #16
 800344a:	23c0      	movs	r3, #192	@ 0xc0
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff fec1 	bl	80031d6 <parse_name>
 8003454:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d101      	bne.n	8003466 <dns_answer+0x138>
 8003462:	2300      	movs	r3, #0
 8003464:	e073      	b.n	800354e <dns_answer+0x220>
		cp += len;
 8003466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	4413      	add	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
		break;
 8003470:	e06c      	b.n	800354c <dns_answer+0x21e>
		len = *cp++;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	60ba      	str	r2, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 800347e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	60ba      	str	r2, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8003494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4413      	add	r3, r2
 800349c:	60bb      	str	r3, [r7, #8]
		break;
 800349e:	e055      	b.n	800354c <dns_answer+0x21e>
		cp += 2;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3302      	adds	r3, #2
 80034a4:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80034a6:	f107 0210 	add.w	r2, r7, #16
 80034aa:	23c0      	movs	r3, #192	@ 0xc0
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fe91 	bl	80031d6 <parse_name>
 80034b4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80034b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d101      	bne.n	80034c6 <dns_answer+0x198>
 80034c2:	2300      	movs	r3, #0
 80034c4:	e043      	b.n	800354e <dns_answer+0x220>
		cp += len;
 80034c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	4413      	add	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
		break;
 80034d0:	e03c      	b.n	800354c <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80034d2:	f107 0210 	add.w	r2, r7, #16
 80034d6:	23c0      	movs	r3, #192	@ 0xc0
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fe7b 	bl	80031d6 <parse_name>
 80034e0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80034e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d101      	bne.n	80034f2 <dns_answer+0x1c4>
 80034ee:	2300      	movs	r3, #0
 80034f0:	e02d      	b.n	800354e <dns_answer+0x220>
		cp += len;
 80034f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4413      	add	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80034fc:	f107 0210 	add.w	r2, r7, #16
 8003500:	23c0      	movs	r3, #192	@ 0xc0
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fe66 	bl	80031d6 <parse_name>
 800350a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800350e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d101      	bne.n	800351c <dns_answer+0x1ee>
 8003518:	2300      	movs	r3, #0
 800351a:	e018      	b.n	800354e <dns_answer+0x220>
		cp += len;
 800351c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	4413      	add	r3, r2
 8003524:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3304      	adds	r3, #4
 800352a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3304      	adds	r3, #4
 8003530:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3304      	adds	r3, #4
 8003536:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3304      	adds	r3, #4
 800353c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3304      	adds	r3, #4
 8003542:	60bb      	str	r3, [r7, #8]
		break;
 8003544:	e002      	b.n	800354c <dns_answer+0x21e>
		break;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <dns_answer+0x21e>
		break;
 800354a:	bf00      	nop
	}

	return cp;
 800354c:	68bb      	ldr	r3, [r7, #8]
}
 800354e:	4618      	mov	r0, r3
 8003550:	37d8      	adds	r7, #216	@ 0xd8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8003566:	2212      	movs	r2, #18
 8003568:	2100      	movs	r1, #0
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f007 fc44 	bl	800adf8 <memset>

	pdhdr->id = get16(&msg[0]);
 8003570:	6978      	ldr	r0, [r7, #20]
 8003572:	f7ff fdfe 	bl	8003172 <get16>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3302      	adds	r3, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fdf5 	bl	8003172 <get16>
 8003588:	4603      	mov	r3, r0
 800358a:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800358c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003590:	2b00      	cmp	r3, #0
 8003592:	da02      	bge.n	800359a <parseDNSMSG+0x44>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 800359a:	8a7b      	ldrh	r3, [r7, #18]
 800359c:	0adb      	lsrs	r3, r3, #11
 800359e:	b29b      	uxth	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 80035ac:	8a7b      	ldrh	r3, [r7, #18]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <parseDNSMSG+0x66>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 80035bc:	8a7b      	ldrh	r3, [r7, #18]
 80035be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <parseDNSMSG+0x76>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80035cc:	8a7b      	ldrh	r3, [r7, #18]
 80035ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <parseDNSMSG+0x86>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80035dc:	8a7b      	ldrh	r3, [r7, #18]
 80035de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <parseDNSMSG+0x96>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80035ec:	8a7b      	ldrh	r3, [r7, #18]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fdb7 	bl	8003172 <get16>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3306      	adds	r3, #6
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fdae 	bl	8003172 <get16>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3308      	adds	r3, #8
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fda5 	bl	8003172 <get16>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	330a      	adds	r3, #10
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fd9c 	bl	8003172 <get16>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	330c      	adds	r3, #12
 8003646:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8003648:	2300      	movs	r3, #0
 800364a:	83fb      	strh	r3, [r7, #30]
 800364c:	e00d      	b.n	800366a <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	6978      	ldr	r0, [r7, #20]
 8003652:	f7ff fe47 	bl	80032e4 <dns_question>
 8003656:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <parseDNSMSG+0x10e>
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	e03b      	b.n	80036dc <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8003664:	8bfb      	ldrh	r3, [r7, #30]
 8003666:	3301      	adds	r3, #1
 8003668:	83fb      	strh	r3, [r7, #30]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	895b      	ldrh	r3, [r3, #10]
 800366e:	8bfa      	ldrh	r2, [r7, #30]
 8003670:	429a      	cmp	r2, r3
 8003672:	d3ec      	bcc.n	800364e <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	83fb      	strh	r3, [r7, #30]
 8003678:	e00e      	b.n	8003698 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff fe55 	bl	800332e <dns_answer>
 8003684:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <parseDNSMSG+0x13c>
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	e024      	b.n	80036dc <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8003692:	8bfb      	ldrh	r3, [r7, #30]
 8003694:	3301      	adds	r3, #1
 8003696:	83fb      	strh	r3, [r7, #30]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	899b      	ldrh	r3, [r3, #12]
 800369c:	8bfa      	ldrh	r2, [r7, #30]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3eb      	bcc.n	800367a <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	83fb      	strh	r3, [r7, #30]
 80036a6:	e002      	b.n	80036ae <parseDNSMSG+0x158>
 80036a8:	8bfb      	ldrh	r3, [r7, #30]
 80036aa:	3301      	adds	r3, #1
 80036ac:	83fb      	strh	r3, [r7, #30]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	89db      	ldrh	r3, [r3, #14]
 80036b2:	8bfa      	ldrh	r2, [r7, #30]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3f7      	bcc.n	80036a8 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	83fb      	strh	r3, [r7, #30]
 80036bc:	e002      	b.n	80036c4 <parseDNSMSG+0x16e>
 80036be:	8bfb      	ldrh	r3, [r7, #30]
 80036c0:	3301      	adds	r3, #1
 80036c2:	83fb      	strh	r3, [r7, #30]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8a1b      	ldrh	r3, [r3, #16]
 80036c8:	8bfa      	ldrh	r2, [r7, #30]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d3f7      	bcc.n	80036be <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	7a1b      	ldrb	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <parseDNSMSG+0x184>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <parseDNSMSG+0x186>
	else return 0;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b0b8      	sub	sp, #224	@ 0xe0
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	4603      	mov	r3, r0
 80036f2:	81fb      	strh	r3, [r7, #14]
 80036f4:	4613      	mov	r3, r2
 80036f6:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 80036fe:	4b57      	ldr	r3, [pc, #348]	@ (800385c <dns_makequery+0x178>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	4b55      	ldr	r3, [pc, #340]	@ (800385c <dns_makequery+0x178>)
 8003708:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 800370a:	4b54      	ldr	r3, [pc, #336]	@ (800385c <dns_makequery+0x178>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	4619      	mov	r1, r3
 8003710:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003714:	f7ff fd44 	bl	80031a0 <put16>
 8003718:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	02db      	lsls	r3, r3, #11
 8003720:	b21b      	sxth	r3, r3
 8003722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003726:	b21b      	sxth	r3, r3
 8003728:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 800372c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8003730:	4619      	mov	r1, r3
 8003732:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003736:	f7ff fd33 	bl	80031a0 <put16>
 800373a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 800373e:	2101      	movs	r1, #1
 8003740:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003744:	f7ff fd2c 	bl	80031a0 <put16>
 8003748:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 800374c:	2100      	movs	r1, #0
 800374e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003752:	f7ff fd25 	bl	80031a0 <put16>
 8003756:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 800375a:	2100      	movs	r1, #0
 800375c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003760:	f7ff fd1e 	bl	80031a0 <put16>
 8003764:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8003768:	2100      	movs	r1, #0
 800376a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800376e:	f7ff fd17 	bl	80031a0 <put16>
 8003772:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 8003776:	f107 0310 	add.w	r3, r7, #16
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	4618      	mov	r0, r3
 800377e:	f007 fc52 	bl	800b026 <strcpy>
	dname = sname;
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 800378a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800378e:	f7fc fd1f 	bl	80001d0 <strlen>
 8003792:	4603      	mov	r3, r0
 8003794:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8003798:	212e      	movs	r1, #46	@ 0x2e
 800379a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800379e:	f007 fb33 	bl	800ae08 <strchr>
 80037a2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 80037a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <dns_makequery+0xd8>
 80037ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	81bb      	strh	r3, [r7, #12]
 80037ba:	e002      	b.n	80037c2 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 80037bc:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80037c0:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 80037c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037cc:	89ba      	ldrh	r2, [r7, #12]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 80037d2:	89bb      	ldrh	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d029      	beq.n	800382c <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80037d8:	89bb      	ldrh	r3, [r7, #12]
 80037da:	461a      	mov	r2, r3
 80037dc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80037e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80037e4:	f007 fb1d 	bl	800ae22 <strncpy>
		cp += len;
 80037e8:	89bb      	ldrh	r3, [r7, #12]
 80037ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80037ee:	4413      	add	r3, r2
 80037f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 80037f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d107      	bne.n	800380c <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80037fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
			break;
 800380a:	e010      	b.n	800382e <dns_makequery+0x14a>
		}
		dname += len+1;
 800380c:	89bb      	ldrh	r3, [r7, #12]
 800380e:	3301      	adds	r3, #1
 8003810:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8003814:	4413      	add	r3, r2
 8003816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 800381a:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 800381e:	89bb      	ldrh	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 800382a:	e7b5      	b.n	8003798 <dns_makequery+0xb4>
		if (len == 0) break;
 800382c:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 800382e:	2101      	movs	r1, #1
 8003830:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003834:	f7ff fcb4 	bl	80031a0 <put16>
 8003838:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 800383c:	2101      	movs	r1, #1
 800383e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003842:	f7ff fcad 	bl	80031a0 <put16>
 8003846:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800384a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b21b      	sxth	r3, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	37e0      	adds	r7, #224	@ 0xe0
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000ade 	.word	0x20000ade

08003860 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <check_DNS_timeout+0x44>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d914      	bls.n	8003896 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 800386c:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <check_DNS_timeout+0x44>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <check_DNS_timeout+0x48>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d905      	bls.n	8003886 <check_DNS_timeout+0x26>
			retry_count = 0;
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <check_DNS_timeout+0x48>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	e008      	b.n	8003898 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8003886:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <check_DNS_timeout+0x48>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	3301      	adds	r3, #1
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <check_DNS_timeout+0x48>)
 8003890:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000ae0 	.word	0x20000ae0
 80038a8:	20000ae4 	.word	0x20000ae4

080038ac <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 80038b8:	4a07      	ldr	r2, [pc, #28]	@ (80038d8 <DNS_init+0x2c>)
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 80038be:	4a07      	ldr	r2, [pc, #28]	@ (80038dc <DNS_init+0x30>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <DNS_init+0x34>)
 80038c6:	f241 1222 	movw	r2, #4386	@ 0x1122
 80038ca:	801a      	strh	r2, [r3, #0]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	20000adc 	.word	0x20000adc
 80038dc:	20000ad8 	.word	0x20000ad8
 80038e0:	20000ade 	.word	0x20000ade

080038e4 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b08f      	sub	sp, #60	@ 0x3c
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80038f0:	4b3b      	ldr	r3, [pc, #236]	@ (80039e0 <DNS_run+0xfc>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80038f6:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <DNS_run+0x100>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80038fc:	4b3a      	ldr	r3, [pc, #232]	@ (80039e8 <DNS_run+0x104>)
 80038fe:	7818      	ldrb	r0, [r3, #0]
 8003900:	2300      	movs	r3, #0
 8003902:	2200      	movs	r2, #0
 8003904:	2102      	movs	r1, #2
 8003906:	f000 fb59 	bl	8003fbc <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 800390a:	4b38      	ldr	r3, [pc, #224]	@ (80039ec <DNS_run+0x108>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	2000      	movs	r0, #0
 8003916:	f7ff fee5 	bl	80036e4 <dns_makequery>
 800391a:	4603      	mov	r3, r0
 800391c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800391e:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <DNS_run+0x104>)
 8003920:	7818      	ldrb	r0, [r3, #0]
 8003922:	4b32      	ldr	r3, [pc, #200]	@ (80039ec <DNS_run+0x108>)
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003928:	2335      	movs	r3, #53	@ 0x35
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f000 ff4f 	bl	80047d0 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8003932:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <DNS_run+0x104>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f9fd 	bl	8003d36 <getSn_RX_RSR>
 800393c:	4603      	mov	r3, r0
 800393e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003940:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003942:	2b00      	cmp	r3, #0
 8003944:	d029      	beq.n	800399a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8003946:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394c:	d902      	bls.n	8003954 <DNS_run+0x70>
 800394e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003952:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8003954:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <DNS_run+0x104>)
 8003956:	7818      	ldrb	r0, [r3, #0]
 8003958:	4b24      	ldr	r3, [pc, #144]	@ (80039ec <DNS_run+0x108>)
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	f107 0414 	add.w	r4, r7, #20
 8003960:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003962:	f107 0312 	add.w	r3, r7, #18
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4623      	mov	r3, r4
 800396a:	f001 f865 	bl	8004a38 <recvfrom>
 800396e:	4603      	mov	r3, r0
 8003970:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8003972:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <DNS_run+0x108>)
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	f107 0318 	add.w	r3, r7, #24
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fdea 	bl	8003556 <parseDNSMSG>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8003988:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 800398a:	4b17      	ldr	r3, [pc, #92]	@ (80039e8 <DNS_run+0x104>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fc28 	bl	80041e4 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8003994:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8003998:	e01e      	b.n	80039d8 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 800399a:	f7ff ff61 	bl	8003860 <check_DNS_timeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 80039a4:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da06      	bge.n	80039ba <DNS_run+0xd6>
			close(DNS_SOCKET);
 80039ac:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <DNS_run+0x104>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fc17 	bl	80041e4 <close>
			return 0; // timeout occurred
 80039b6:	2300      	movs	r3, #0
 80039b8:	e00e      	b.n	80039d8 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 80039ba:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1b7      	bne.n	8003932 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <DNS_run+0x104>)
 80039c4:	7818      	ldrb	r0, [r3, #0]
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <DNS_run+0x108>)
 80039c8:	6819      	ldr	r1, [r3, #0]
 80039ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80039cc:	2335      	movs	r3, #53	@ 0x35
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f000 fefd 	bl	80047d0 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80039d6:	e7ac      	b.n	8003932 <DNS_run+0x4e>
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3734      	adds	r7, #52	@ 0x34
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd90      	pop	{r4, r7, pc}
 80039e0:	20000ae4 	.word	0x20000ae4
 80039e4:	20000ae0 	.word	0x20000ae0
 80039e8:	20000adc 	.word	0x20000adc
 80039ec:	20000ad8 	.word	0x20000ad8

080039f0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80039f8:	4b22      	ldr	r3, [pc, #136]	@ (8003a84 <WIZCHIP_READ+0x94>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80039fe:	4b21      	ldr	r3, [pc, #132]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003a04:	4b1f      	ldr	r3, [pc, #124]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <WIZCHIP_READ+0x24>
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	0c12      	lsrs	r2, r2, #16
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003a22:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	0a12      	lsrs	r2, r2, #8
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003a30:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4798      	blx	r3
 8003a3c:	e011      	b.n	8003a62 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	f107 020c 	add.w	r2, r7, #12
 8003a5c:	2103      	movs	r1, #3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003a62:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4798      	blx	r3
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003a72:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <WIZCHIP_READ+0x94>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	4798      	blx	r3
   return ret;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000054 	.word	0x20000054

08003a88 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003a94:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003a9a:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f043 0304 	orr.w	r3, r3, #4
 8003aa6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d119      	bne.n	8003ae4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	0c12      	lsrs	r2, r2, #16
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	4610      	mov	r0, r2
 8003abc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	0a12      	lsrs	r2, r2, #8
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003acc:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003ad8:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4798      	blx	r3
 8003ae2:	e013      	b.n	8003b0c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f107 020c 	add.w	r2, r7, #12
 8003b06:	2104      	movs	r1, #4
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003b0c:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003b12:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <WIZCHIP_WRITE+0x98>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	4798      	blx	r3
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000054 	.word	0x20000054

08003b24 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003b32:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003b38:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003b3e:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <WIZCHIP_READ_BUF+0x2a>
 8003b46:	4b26      	ldr	r3, [pc, #152]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d126      	bne.n	8003b9c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003b4e:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	0c12      	lsrs	r2, r2, #16
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003b5c:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	0a12      	lsrs	r2, r2, #8
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	4610      	mov	r0, r2
 8003b68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	4610      	mov	r0, r2
 8003b74:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	82fb      	strh	r3, [r7, #22]
 8003b7a:	e00a      	b.n	8003b92 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003b7c:	4b18      	ldr	r3, [pc, #96]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	8afa      	ldrh	r2, [r7, #22]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	188c      	adds	r4, r1, r2
 8003b86:	4798      	blx	r3
 8003b88:	4603      	mov	r3, r0
 8003b8a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003b8c:	8afb      	ldrh	r3, [r7, #22]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	82fb      	strh	r3, [r7, #22]
 8003b92:	8afa      	ldrh	r2, [r7, #22]
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d3f0      	bcc.n	8003b7c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003b9a:	e017      	b.n	8003bcc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	f107 0210 	add.w	r2, r7, #16
 8003bba:	2103      	movs	r1, #3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003bc0:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	68b8      	ldr	r0, [r7, #8]
 8003bca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003bcc:	4b04      	ldr	r3, [pc, #16]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003bd2:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <WIZCHIP_READ_BUF+0xbc>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4798      	blx	r3
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd90      	pop	{r4, r7, pc}
 8003be0:	20000054 	.word	0x20000054

08003be4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003bf8:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003c06:	4b26      	ldr	r3, [pc, #152]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d126      	bne.n	8003c5c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003c0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	0c12      	lsrs	r2, r2, #16
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003c1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	0a12      	lsrs	r2, r2, #8
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	4610      	mov	r0, r2
 8003c28:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	4610      	mov	r0, r2
 8003c34:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	82fb      	strh	r3, [r7, #22]
 8003c3a:	e00a      	b.n	8003c52 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003c3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	8afa      	ldrh	r2, [r7, #22]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	440a      	add	r2, r1
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003c4c:	8afb      	ldrh	r3, [r7, #22]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	82fb      	strh	r3, [r7, #22]
 8003c52:	8afa      	ldrh	r2, [r7, #22]
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3f0      	bcc.n	8003c3c <WIZCHIP_WRITE_BUF+0x58>
 8003c5a:	e017      	b.n	8003c8c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	0a1b      	lsrs	r3, r3, #8
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003c72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	f107 0210 	add.w	r2, r7, #16
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	4611      	mov	r1, r2
 8003c88:	68b8      	ldr	r0, [r7, #8]
 8003c8a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003c8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003c92:	4b03      	ldr	r3, [pc, #12]	@ (8003ca0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4798      	blx	r3
}
 8003c98:	bf00      	nop
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000054 	.word	0x20000054

08003ca4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	81fb      	strh	r3, [r7, #14]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	3301      	adds	r3, #1
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fe94 	bl	80039f0 <WIZCHIP_READ>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003ccc:	89bb      	ldrh	r3, [r7, #12]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	b29c      	uxth	r4, r3
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fe86 	bl	80039f0 <WIZCHIP_READ>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4423      	add	r3, r4
 8003ce8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003cea:	89bb      	ldrh	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fe77 	bl	80039f0 <WIZCHIP_READ>
 8003d02:	4603      	mov	r3, r0
 8003d04:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003d06:	89fb      	ldrh	r3, [r7, #14]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	b29c      	uxth	r4, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	3301      	adds	r3, #1
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fe69 	bl	80039f0 <WIZCHIP_READ>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4423      	add	r3, r4
 8003d22:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003d24:	89fa      	ldrh	r2, [r7, #14]
 8003d26:	89bb      	ldrh	r3, [r7, #12]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1c4      	bne.n	8003cb6 <getSn_TX_FSR+0x12>
   return val;
 8003d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd90      	pop	{r4, r7, pc}

08003d36 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003d36:	b590      	push	{r4, r7, lr}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	81fb      	strh	r3, [r7, #14]
 8003d44:	2300      	movs	r3, #0
 8003d46:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fe4b 	bl	80039f0 <WIZCHIP_READ>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003d5e:	89bb      	ldrh	r3, [r7, #12]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	b29c      	uxth	r4, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	3301      	adds	r3, #1
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fe3d 	bl	80039f0 <WIZCHIP_READ>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4423      	add	r3, r4
 8003d7a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003d7c:	89bb      	ldrh	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3301      	adds	r3, #1
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fe2e 	bl	80039f0 <WIZCHIP_READ>
 8003d94:	4603      	mov	r3, r0
 8003d96:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003d98:	89fb      	ldrh	r3, [r7, #14]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	b29c      	uxth	r4, r3
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3301      	adds	r3, #1
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fe20 	bl	80039f0 <WIZCHIP_READ>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4423      	add	r3, r4
 8003db4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003db6:	89fa      	ldrh	r2, [r7, #14]
 8003db8:	89bb      	ldrh	r3, [r7, #12]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d1c4      	bne.n	8003d48 <getSn_RX_RSR+0x12>
   return val;
 8003dbe:	89fb      	ldrh	r3, [r7, #14]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd90      	pop	{r4, r7, pc}

08003dc8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	6039      	str	r1, [r7, #0]
 8003dd2:	71fb      	strb	r3, [r7, #7]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003de0:	88bb      	ldrh	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d046      	beq.n	8003e74 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	3301      	adds	r3, #1
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fdfc 	bl	80039f0 <WIZCHIP_READ>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	b29c      	uxth	r4, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	3301      	adds	r3, #1
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fdf0 	bl	80039f0 <WIZCHIP_READ>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4423      	add	r3, r4
 8003e14:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	79fa      	ldrb	r2, [r7, #7]
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	3202      	adds	r2, #2
 8003e20:	00d2      	lsls	r2, r2, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003e26:	88bb      	ldrh	r3, [r7, #4]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	68b8      	ldr	r0, [r7, #8]
 8003e2e:	f7ff fed9 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003e32:	89fa      	ldrh	r2, [r7, #14]
 8003e34:	88bb      	ldrh	r3, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3301      	adds	r3, #1
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003e46:	461a      	mov	r2, r3
 8003e48:	89fb      	ldrh	r3, [r7, #14]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7ff fe18 	bl	8003a88 <WIZCHIP_WRITE>
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003e64:	461a      	mov	r2, r3
 8003e66:	89fb      	ldrh	r3, [r7, #14]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7ff fe0b 	bl	8003a88 <WIZCHIP_WRITE>
 8003e72:	e000      	b.n	8003e76 <wiz_send_data+0xae>
   if(len == 0)  return;
 8003e74:	bf00      	nop
}
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd90      	pop	{r4, r7, pc}

08003e7c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003e94:	88bb      	ldrh	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d046      	beq.n	8003f28 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fda2 	bl	80039f0 <WIZCHIP_READ>
 8003eac:	4603      	mov	r3, r0
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	b29c      	uxth	r4, r3
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fd96 	bl	80039f0 <WIZCHIP_READ>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4423      	add	r3, r4
 8003ec8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	79fa      	ldrb	r2, [r7, #7]
 8003ed0:	0092      	lsls	r2, r2, #2
 8003ed2:	3203      	adds	r2, #3
 8003ed4:	00d2      	lsls	r2, r2, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003eda:	88bb      	ldrh	r3, [r7, #4]
 8003edc:	461a      	mov	r2, r3
 8003ede:	6839      	ldr	r1, [r7, #0]
 8003ee0:	68b8      	ldr	r0, [r7, #8]
 8003ee2:	f7ff fe1f 	bl	8003b24 <WIZCHIP_READ_BUF>
   ptr += len;
 8003ee6:	89fa      	ldrh	r2, [r7, #14]
 8003ee8:	88bb      	ldrh	r3, [r7, #4]
 8003eea:	4413      	add	r3, r2
 8003eec:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003efa:	461a      	mov	r2, r3
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f7ff fdbe 	bl	8003a88 <WIZCHIP_WRITE>
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	3301      	adds	r3, #1
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003f18:	461a      	mov	r2, r3
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7ff fdb1 	bl	8003a88 <WIZCHIP_WRITE>
 8003f26:	e000      	b.n	8003f2a <wiz_recv_data+0xae>
   if(len == 0) return;
 8003f28:	bf00      	nop
}
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	460a      	mov	r2, r1
 8003f3a:	71fb      	strb	r3, [r7, #7]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	3301      	adds	r3, #1
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fd4d 	bl	80039f0 <WIZCHIP_READ>
 8003f56:	4603      	mov	r3, r0
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	b29c      	uxth	r4, r3
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	3301      	adds	r3, #1
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fd41 	bl	80039f0 <WIZCHIP_READ>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4423      	add	r3, r4
 8003f72:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003f74:	89fa      	ldrh	r2, [r7, #14]
 8003f76:	88bb      	ldrh	r3, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	3301      	adds	r3, #1
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003f88:	461a      	mov	r2, r3
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7ff fd77 	bl	8003a88 <WIZCHIP_WRITE>
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	89fb      	ldrh	r3, [r7, #14]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f7ff fd6a 	bl	8003a88 <WIZCHIP_WRITE>
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd90      	pop	{r4, r7, pc}

08003fbc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	71fb      	strb	r3, [r7, #7]
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71bb      	strb	r3, [r7, #6]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	80bb      	strh	r3, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d902      	bls.n	8003fe6 <socket+0x2a>
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe4:	e0f0      	b.n	80041c8 <socket+0x20c>
	switch(protocol)
 8003fe6:	79bb      	ldrb	r3, [r7, #6]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d005      	beq.n	8003ff8 <socket+0x3c>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	dd11      	ble.n	8004014 <socket+0x58>
 8003ff0:	3b02      	subs	r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d80e      	bhi.n	8004014 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003ff6:	e011      	b.n	800401c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004004:	f7ff fd8e 	bl	8003b24 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <socket+0x5e>
 800400e:	f06f 0302 	mvn.w	r3, #2
 8004012:	e0d9      	b.n	80041c8 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004014:	f06f 0304 	mvn.w	r3, #4
 8004018:	e0d6      	b.n	80041c8 <socket+0x20c>
	    break;
 800401a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <socket+0x70>
 8004026:	f06f 0305 	mvn.w	r3, #5
 800402a:	e0cd      	b.n	80041c8 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d028      	beq.n	8004084 <socket+0xc8>
	{
   	switch(protocol)
 8004032:	79bb      	ldrb	r3, [r7, #6]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d002      	beq.n	800403e <socket+0x82>
 8004038:	2b02      	cmp	r3, #2
 800403a:	d008      	beq.n	800404e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800403c:	e022      	b.n	8004084 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11a      	bne.n	800407e <socket+0xc2>
 8004048:	f06f 0305 	mvn.w	r3, #5
 800404c:	e0bc      	b.n	80041c8 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	db02      	blt.n	8004066 <socket+0xaa>
 8004060:	f06f 0305 	mvn.w	r3, #5
 8004064:	e0b0      	b.n	80041c8 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004074:	2b00      	cmp	r3, #0
 8004076:	db04      	blt.n	8004082 <socket+0xc6>
 8004078:	f06f 0305 	mvn.w	r3, #5
 800407c:	e0a4      	b.n	80041c8 <socket+0x20c>
   	      break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <socket+0xc8>
   	      break;
 8004082:	bf00      	nop
   	}
   }
	close(sn);
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f8ac 	bl	80041e4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	3301      	adds	r3, #1
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4618      	mov	r0, r3
 8004096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800409a:	f023 030f 	bic.w	r3, r3, #15
 800409e:	b25a      	sxtb	r2, r3
 80040a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7ff fcec 	bl	8003a88 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80040b0:	88bb      	ldrh	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d110      	bne.n	80040d8 <socket+0x11c>
	{
	   port = sock_any_port++;
 80040b6:	4b46      	ldr	r3, [pc, #280]	@ (80041d0 <socket+0x214>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	b291      	uxth	r1, r2
 80040be:	4a44      	ldr	r2, [pc, #272]	@ (80041d0 <socket+0x214>)
 80040c0:	8011      	strh	r1, [r2, #0]
 80040c2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80040c4:	4b42      	ldr	r3, [pc, #264]	@ (80041d0 <socket+0x214>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <socket+0x11c>
 80040d0:	4b3f      	ldr	r3, [pc, #252]	@ (80041d0 <socket+0x214>)
 80040d2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80040d6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	3301      	adds	r3, #1
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040e4:	461a      	mov	r2, r3
 80040e6:	88bb      	ldrh	r3, [r7, #4]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f7ff fcc9 	bl	8003a88 <WIZCHIP_WRITE>
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	3301      	adds	r3, #1
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	88bb      	ldrh	r3, [r7, #4]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7ff fcbc 	bl	8003a88 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	3301      	adds	r3, #1
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fcb2 	bl	8003a88 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004124:	bf00      	nop
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	3301      	adds	r3, #1
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fc5c 	bl	80039f0 <WIZCHIP_READ>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f3      	bne.n	8004126 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2201      	movs	r2, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	b21b      	sxth	r3, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	b21a      	sxth	r2, r3
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <socket+0x218>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b21b      	sxth	r3, r3
 8004152:	4013      	ands	r3, r2
 8004154:	b21b      	sxth	r3, r3
 8004156:	b29a      	uxth	r2, r3
 8004158:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <socket+0x218>)
 800415a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 0201 	and.w	r2, r3, #1
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	b21a      	sxth	r2, r3
 800416a:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <socket+0x218>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b21b      	sxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b21b      	sxth	r3, r3
 8004174:	b29a      	uxth	r2, r3
 8004176:	4b17      	ldr	r3, [pc, #92]	@ (80041d4 <socket+0x218>)
 8004178:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2201      	movs	r2, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	b21b      	sxth	r3, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	b21a      	sxth	r2, r3
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <socket+0x21c>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b21b      	sxth	r3, r3
 800418e:	4013      	ands	r3, r2
 8004190:	b21b      	sxth	r3, r3
 8004192:	b29a      	uxth	r2, r3
 8004194:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <socket+0x21c>)
 8004196:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <socket+0x220>)
 800419c:	2100      	movs	r1, #0
 800419e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	4a0e      	ldr	r2, [pc, #56]	@ (80041e0 <socket+0x224>)
 80041a6:	2100      	movs	r1, #0
 80041a8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80041aa:	bf00      	nop
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	3301      	adds	r3, #1
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fc19 	bl	80039f0 <WIZCHIP_READ>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f3      	beq.n	80041ac <socket+0x1f0>
   return (int8_t)sn;
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd90      	pop	{r4, r7, pc}
 80041d0:	20000050 	.word	0x20000050
 80041d4:	20000ae6 	.word	0x20000ae6
 80041d8:	20000ae8 	.word	0x20000ae8
 80041dc:	20000aec 	.word	0x20000aec
 80041e0:	20000afc 	.word	0x20000afc

080041e4 <close>:

int8_t close(uint8_t sn)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d902      	bls.n	80041fa <close+0x16>
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295
 80041f8:	e055      	b.n	80042a6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	3301      	adds	r3, #1
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004206:	2110      	movs	r1, #16
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fc3d 	bl	8003a88 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800420e:	bf00      	nop
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	3301      	adds	r3, #1
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fbe7 	bl	80039f0 <WIZCHIP_READ>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f3      	bne.n	8004210 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	3301      	adds	r3, #1
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004234:	211f      	movs	r1, #31
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fc26 	bl	8003a88 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	2201      	movs	r2, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	b21b      	sxth	r3, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	b21a      	sxth	r2, r3
 800424a:	4b19      	ldr	r3, [pc, #100]	@ (80042b0 <close+0xcc>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b21b      	sxth	r3, r3
 8004250:	4013      	ands	r3, r2
 8004252:	b21b      	sxth	r3, r3
 8004254:	b29a      	uxth	r2, r3
 8004256:	4b16      	ldr	r3, [pc, #88]	@ (80042b0 <close+0xcc>)
 8004258:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	2201      	movs	r2, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	b21b      	sxth	r3, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	b21a      	sxth	r2, r3
 8004268:	4b12      	ldr	r3, [pc, #72]	@ (80042b4 <close+0xd0>)
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b21b      	sxth	r3, r3
 800426e:	4013      	ands	r3, r2
 8004270:	b21b      	sxth	r3, r3
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b0f      	ldr	r3, [pc, #60]	@ (80042b4 <close+0xd0>)
 8004276:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	4a0f      	ldr	r2, [pc, #60]	@ (80042b8 <close+0xd4>)
 800427c:	2100      	movs	r1, #0
 800427e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	4a0d      	ldr	r2, [pc, #52]	@ (80042bc <close+0xd8>)
 8004286:	2100      	movs	r1, #0
 8004288:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800428a:	bf00      	nop
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	3301      	adds	r3, #1
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fba9 	bl	80039f0 <WIZCHIP_READ>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f3      	bne.n	800428c <close+0xa8>
	return SOCK_OK;
 80042a4:	2301      	movs	r3, #1
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000ae6 	.word	0x20000ae6
 80042b4:	20000ae8 	.word	0x20000ae8
 80042b8:	20000aec 	.word	0x20000aec
 80042bc:	20000afc 	.word	0x20000afc

080042c0 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	4613      	mov	r3, r2
 80042ce:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d902      	bls.n	80042dc <connect+0x1c>
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	e0c6      	b.n	800446a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	3301      	adds	r3, #1
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fb83 	bl	80039f0 <WIZCHIP_READ>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d002      	beq.n	80042fa <connect+0x3a>
 80042f4:	f06f 0304 	mvn.w	r3, #4
 80042f8:	e0b7      	b.n	800446a <connect+0x1aa>
   CHECK_SOCKINIT();
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	3301      	adds	r3, #1
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fb72 	bl	80039f0 <WIZCHIP_READ>
 800430c:	4603      	mov	r3, r0
 800430e:	2b13      	cmp	r3, #19
 8004310:	d002      	beq.n	8004318 <connect+0x58>
 8004312:	f06f 0302 	mvn.w	r3, #2
 8004316:	e0a8      	b.n	800446a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	3201      	adds	r2, #1
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	4413      	add	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	3202      	adds	r2, #2
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	4413      	add	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	3203      	adds	r2, #3
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	4413      	add	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d002      	beq.n	8004356 <connect+0x96>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <connect+0x9c>
 8004356:	f06f 030b 	mvn.w	r3, #11
 800435a:	e086      	b.n	800446a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800435c:	88bb      	ldrh	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <connect+0xa8>
 8004362:	f06f 030a 	mvn.w	r3, #10
 8004366:	e080      	b.n	800446a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	3301      	adds	r3, #1
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004374:	2204      	movs	r2, #4
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fc33 	bl	8003be4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	3301      	adds	r3, #1
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438a:	461a      	mov	r2, r3
 800438c:	88bb      	ldrh	r3, [r7, #4]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	b29b      	uxth	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7ff fb76 	bl	8003a88 <WIZCHIP_WRITE>
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	3301      	adds	r3, #1
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80043a8:	461a      	mov	r2, r3
 80043aa:	88bb      	ldrh	r3, [r7, #4]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7ff fb69 	bl	8003a88 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	3301      	adds	r3, #1
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043c2:	2104      	movs	r1, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fb5f 	bl	8003a88 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80043ca:	bf00      	nop
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	3301      	adds	r3, #1
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fb09 	bl	80039f0 <WIZCHIP_READ>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f3      	bne.n	80043cc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80043e4:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <connect+0x1b4>)
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	fa42 f303 	asr.w	r3, r2, r3
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d02b      	beq.n	8004450 <connect+0x190>
 80043f8:	2300      	movs	r3, #0
 80043fa:	e036      	b.n	800446a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	3301      	adds	r3, #1
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff faf1 	bl	80039f0 <WIZCHIP_READ>
 800440e:	4603      	mov	r3, r0
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00c      	beq.n	8004432 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	3301      	adds	r3, #1
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004424:	2108      	movs	r1, #8
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fb2e 	bl	8003a88 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800442c:	f06f 030c 	mvn.w	r3, #12
 8004430:	e01b      	b.n	800446a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	3301      	adds	r3, #1
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fad6 	bl	80039f0 <WIZCHIP_READ>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800444a:	f06f 0303 	mvn.w	r3, #3
 800444e:	e00c      	b.n	800446a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	3301      	adds	r3, #1
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fac7 	bl	80039f0 <WIZCHIP_READ>
 8004462:	4603      	mov	r3, r0
 8004464:	2b17      	cmp	r3, #23
 8004466:	d1c9      	bne.n	80043fc <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004468:	2301      	movs	r3, #1
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000ae6 	.word	0x20000ae6

08004478 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	6039      	str	r1, [r7, #0]
 8004482:	71fb      	strb	r3, [r7, #7]
 8004484:	4613      	mov	r3, r2
 8004486:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800448c:	2300      	movs	r3, #0
 800448e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b08      	cmp	r3, #8
 8004494:	d902      	bls.n	800449c <send+0x24>
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	e0dd      	b.n	8004658 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	3301      	adds	r3, #1
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff faa3 	bl	80039f0 <WIZCHIP_READ>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d002      	beq.n	80044ba <send+0x42>
 80044b4:	f06f 0304 	mvn.w	r3, #4
 80044b8:	e0ce      	b.n	8004658 <send+0x1e0>
   CHECK_SOCKDATA();
 80044ba:	88bb      	ldrh	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <send+0x4e>
 80044c0:	f06f 030d 	mvn.w	r3, #13
 80044c4:	e0c8      	b.n	8004658 <send+0x1e0>
   tmp = getSn_SR(sn);
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	3301      	adds	r3, #1
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fa8c 	bl	80039f0 <WIZCHIP_READ>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b17      	cmp	r3, #23
 80044e0:	d005      	beq.n	80044ee <send+0x76>
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b1c      	cmp	r3, #28
 80044e6:	d002      	beq.n	80044ee <send+0x76>
 80044e8:	f06f 0306 	mvn.w	r3, #6
 80044ec:	e0b4      	b.n	8004658 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 80044ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004660 <send+0x1e8>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	fa42 f303 	asr.w	r3, r2, r3
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d039      	beq.n	8004576 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3301      	adds	r3, #1
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fa6e 	bl	80039f0 <WIZCHIP_READ>
 8004514:	4603      	mov	r3, r0
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b00      	cmp	r3, #0
 8004524:	d019      	beq.n	800455a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3301      	adds	r3, #1
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004532:	2110      	movs	r1, #16
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff faa7 	bl	8003a88 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	2201      	movs	r2, #1
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	b21b      	sxth	r3, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	b21a      	sxth	r2, r3
 8004548:	4b45      	ldr	r3, [pc, #276]	@ (8004660 <send+0x1e8>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b21b      	sxth	r3, r3
 800454e:	4013      	ands	r3, r2
 8004550:	b21b      	sxth	r3, r3
 8004552:	b29a      	uxth	r2, r3
 8004554:	4b42      	ldr	r3, [pc, #264]	@ (8004660 <send+0x1e8>)
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e00d      	b.n	8004576 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <send+0xfa>
      {
         close(sn);
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe3c 	bl	80041e4 <close>
         return SOCKERR_TIMEOUT;
 800456c:	f06f 030c 	mvn.w	r3, #12
 8004570:	e072      	b.n	8004658 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004572:	2300      	movs	r3, #0
 8004574:	e070      	b.n	8004658 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	3301      	adds	r3, #1
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fa34 	bl	80039f0 <WIZCHIP_READ>
 8004588:	4603      	mov	r3, r0
 800458a:	029b      	lsls	r3, r3, #10
 800458c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800458e:	88ba      	ldrh	r2, [r7, #4]
 8004590:	89bb      	ldrh	r3, [r7, #12]
 8004592:	429a      	cmp	r2, r3
 8004594:	d901      	bls.n	800459a <send+0x122>
 8004596:	89bb      	ldrh	r3, [r7, #12]
 8004598:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fb81 	bl	8003ca4 <getSn_TX_FSR>
 80045a2:	4603      	mov	r3, r0
 80045a4:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	3301      	adds	r3, #1
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fa1c 	bl	80039f0 <WIZCHIP_READ>
 80045b8:	4603      	mov	r3, r0
 80045ba:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b17      	cmp	r3, #23
 80045c0:	d009      	beq.n	80045d6 <send+0x15e>
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b1c      	cmp	r3, #28
 80045c6:	d006      	beq.n	80045d6 <send+0x15e>
      {
         close(sn);
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fe0a 	bl	80041e4 <close>
         return SOCKERR_SOCKSTATUS;
 80045d0:	f06f 0306 	mvn.w	r3, #6
 80045d4:	e040      	b.n	8004658 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80045d6:	4b23      	ldr	r3, [pc, #140]	@ (8004664 <send+0x1ec>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	fa42 f303 	asr.w	r3, r2, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <send+0x17e>
 80045ea:	88ba      	ldrh	r2, [r7, #4]
 80045ec:	89bb      	ldrh	r3, [r7, #12]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d901      	bls.n	80045f6 <send+0x17e>
 80045f2:	2300      	movs	r3, #0
 80045f4:	e030      	b.n	8004658 <send+0x1e0>
      if(len <= freesize) break;
 80045f6:	88ba      	ldrh	r2, [r7, #4]
 80045f8:	89bb      	ldrh	r3, [r7, #12]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d900      	bls.n	8004600 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 80045fe:	e7cc      	b.n	800459a <send+0x122>
      if(len <= freesize) break;
 8004600:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004602:	88ba      	ldrh	r2, [r7, #4]
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fbdd 	bl	8003dc8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	3301      	adds	r3, #1
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800461a:	2120      	movs	r1, #32
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fa33 	bl	8003a88 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004622:	bf00      	nop
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3301      	adds	r3, #1
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f9dd 	bl	80039f0 <WIZCHIP_READ>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f3      	bne.n	8004624 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2201      	movs	r2, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	b21a      	sxth	r2, r3
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <send+0x1e8>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b21b      	sxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b21b      	sxth	r3, r3
 8004650:	b29a      	uxth	r2, r3
 8004652:	4b03      	ldr	r3, [pc, #12]	@ (8004660 <send+0x1e8>)
 8004654:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004656:	88bb      	ldrh	r3, [r7, #4]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000ae8 	.word	0x20000ae8
 8004664:	20000ae6 	.word	0x20000ae6

08004668 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
 8004674:	4613      	mov	r3, r2
 8004676:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	2b08      	cmp	r3, #8
 8004684:	d902      	bls.n	800468c <recv+0x24>
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	e09b      	b.n	80047c4 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	3301      	adds	r3, #1
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff f9ab 	bl	80039f0 <WIZCHIP_READ>
 800469a:	4603      	mov	r3, r0
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d002      	beq.n	80046aa <recv+0x42>
 80046a4:	f06f 0304 	mvn.w	r3, #4
 80046a8:	e08c      	b.n	80047c4 <recv+0x15c>
   CHECK_SOCKDATA();
 80046aa:	88bb      	ldrh	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <recv+0x4e>
 80046b0:	f06f 030d 	mvn.w	r3, #13
 80046b4:	e086      	b.n	80047c4 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	3301      	adds	r3, #1
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff f994 	bl	80039f0 <WIZCHIP_READ>
 80046c8:	4603      	mov	r3, r0
 80046ca:	029b      	lsls	r3, r3, #10
 80046cc:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80046ce:	89ba      	ldrh	r2, [r7, #12]
 80046d0:	88bb      	ldrh	r3, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d201      	bcs.n	80046da <recv+0x72>
 80046d6:	89bb      	ldrh	r3, [r7, #12]
 80046d8:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fb2a 	bl	8003d36 <getSn_RX_RSR>
 80046e2:	4603      	mov	r3, r0
 80046e4:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	3301      	adds	r3, #1
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f97c 	bl	80039f0 <WIZCHIP_READ>
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b17      	cmp	r3, #23
 8004700:	d026      	beq.n	8004750 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b1c      	cmp	r3, #28
 8004706:	d11c      	bne.n	8004742 <recv+0xda>
            {
               if(recvsize != 0) break;
 8004708:	89bb      	ldrh	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d133      	bne.n	8004776 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fac7 	bl	8003ca4 <getSn_TX_FSR>
 8004716:	4603      	mov	r3, r0
 8004718:	461c      	mov	r4, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	3301      	adds	r3, #1
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f962 	bl	80039f0 <WIZCHIP_READ>
 800472c:	4603      	mov	r3, r0
 800472e:	029b      	lsls	r3, r3, #10
 8004730:	429c      	cmp	r4, r3
 8004732:	d10d      	bne.n	8004750 <recv+0xe8>
               {
                  close(sn);
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fd54 	bl	80041e4 <close>
                  return SOCKERR_SOCKSTATUS;
 800473c:	f06f 0306 	mvn.w	r3, #6
 8004740:	e040      	b.n	80047c4 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fd4d 	bl	80041e4 <close>
               return SOCKERR_SOCKSTATUS;
 800474a:	f06f 0306 	mvn.w	r3, #6
 800474e:	e039      	b.n	80047c4 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004750:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <recv+0x164>)
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	fa42 f303 	asr.w	r3, r2, r3
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <recv+0x106>
 8004764:	89bb      	ldrh	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <recv+0x106>
 800476a:	2300      	movs	r3, #0
 800476c:	e02a      	b.n	80047c4 <recv+0x15c>
         if(recvsize != 0) break;
 800476e:	89bb      	ldrh	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004774:	e7b1      	b.n	80046da <recv+0x72>
               if(recvsize != 0) break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <recv+0x114>
         if(recvsize != 0) break;
 800477a:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800477c:	89ba      	ldrh	r2, [r7, #12]
 800477e:	88bb      	ldrh	r3, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d201      	bcs.n	8004788 <recv+0x120>
 8004784:	89bb      	ldrh	r3, [r7, #12]
 8004786:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004788:	88ba      	ldrh	r2, [r7, #4]
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	6839      	ldr	r1, [r7, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fb74 	bl	8003e7c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	3301      	adds	r3, #1
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80047a0:	2140      	movs	r1, #64	@ 0x40
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f970 	bl	8003a88 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80047a8:	bf00      	nop
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	3301      	adds	r3, #1
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f91a 	bl	80039f0 <WIZCHIP_READ>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f3      	bne.n	80047aa <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80047c2:	88bb      	ldrh	r3, [r7, #4]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	20000ae6 	.word	0x20000ae6

080047d0 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	4603      	mov	r3, r0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	4613      	mov	r3, r2
 80047e0:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d902      	bls.n	80047f6 <sendto+0x26>
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295
 80047f4:	e11a      	b.n	8004a2c <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	3301      	adds	r3, #1
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f8f6 	bl	80039f0 <WIZCHIP_READ>
 8004804:	4603      	mov	r3, r0
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	3b02      	subs	r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d902      	bls.n	8004816 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004810:	f06f 0304 	mvn.w	r3, #4
 8004814:	e10a      	b.n	8004a2c <sendto+0x25c>
         break;
 8004816:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004818:	89bb      	ldrh	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <sendto+0x54>
 800481e:	f06f 030d 	mvn.w	r3, #13
 8004822:	e103      	b.n	8004a2c <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	3201      	adds	r2, #1
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	4413      	add	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	3202      	adds	r2, #2
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	4413      	add	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	3203      	adds	r2, #3
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	4413      	add	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10e      	bne.n	8004878 <sendto+0xa8>
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	3301      	adds	r3, #1
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f8c4 	bl	80039f0 <WIZCHIP_READ>
 8004868:	4603      	mov	r3, r0
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d002      	beq.n	8004878 <sendto+0xa8>
 8004872:	f06f 030b 	mvn.w	r3, #11
 8004876:	e0d9      	b.n	8004a2c <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004878:	8c3b      	ldrh	r3, [r7, #32]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10e      	bne.n	800489c <sendto+0xcc>
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	3301      	adds	r3, #1
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff f8b2 	bl	80039f0 <WIZCHIP_READ>
 800488c:	4603      	mov	r3, r0
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b04      	cmp	r3, #4
 8004894:	d002      	beq.n	800489c <sendto+0xcc>
 8004896:	f06f 030a 	mvn.w	r3, #10
 800489a:	e0c7      	b.n	8004a2c <sendto+0x25c>
   tmp = getSn_SR(sn);
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	3301      	adds	r3, #1
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff f8a1 	bl	80039f0 <WIZCHIP_READ>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b42      	cmp	r3, #66	@ 0x42
 80048b6:	d008      	beq.n	80048ca <sendto+0xfa>
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b22      	cmp	r3, #34	@ 0x22
 80048bc:	d005      	beq.n	80048ca <sendto+0xfa>
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	2b32      	cmp	r3, #50	@ 0x32
 80048c2:	d002      	beq.n	80048ca <sendto+0xfa>
 80048c4:	f06f 0306 	mvn.w	r3, #6
 80048c8:	e0b0      	b.n	8004a2c <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	3301      	adds	r3, #1
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80048d6:	2204      	movs	r2, #4
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f982 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	3301      	adds	r3, #1
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ec:	461a      	mov	r2, r3
 80048ee:	8c3b      	ldrh	r3, [r7, #32]
 80048f0:	0a1b      	lsrs	r3, r3, #8
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f7ff f8c5 	bl	8003a88 <WIZCHIP_WRITE>
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	3301      	adds	r3, #1
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800490a:	461a      	mov	r2, r3
 800490c:	8c3b      	ldrh	r3, [r7, #32]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f7ff f8b8 	bl	8003a88 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3301      	adds	r3, #1
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff f863 	bl	80039f0 <WIZCHIP_READ>
 800492a:	4603      	mov	r3, r0
 800492c:	029b      	lsls	r3, r3, #10
 800492e:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004930:	89ba      	ldrh	r2, [r7, #12]
 8004932:	8abb      	ldrh	r3, [r7, #20]
 8004934:	429a      	cmp	r2, r3
 8004936:	d901      	bls.n	800493c <sendto+0x16c>
 8004938:	8abb      	ldrh	r3, [r7, #20]
 800493a:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f9b0 	bl	8003ca4 <getSn_TX_FSR>
 8004944:	4603      	mov	r3, r0
 8004946:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	3301      	adds	r3, #1
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff f84b 	bl	80039f0 <WIZCHIP_READ>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <sendto+0x196>
 8004960:	f06f 0303 	mvn.w	r3, #3
 8004964:	e062      	b.n	8004a2c <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004966:	4b33      	ldr	r3, [pc, #204]	@ (8004a34 <sendto+0x264>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	fa42 f303 	asr.w	r3, r2, r3
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <sendto+0x1b6>
 800497a:	89ba      	ldrh	r2, [r7, #12]
 800497c:	8abb      	ldrh	r3, [r7, #20]
 800497e:	429a      	cmp	r2, r3
 8004980:	d901      	bls.n	8004986 <sendto+0x1b6>
 8004982:	2300      	movs	r3, #0
 8004984:	e052      	b.n	8004a2c <sendto+0x25c>
      if(len <= freesize) break;
 8004986:	89ba      	ldrh	r2, [r7, #12]
 8004988:	8abb      	ldrh	r3, [r7, #20]
 800498a:	429a      	cmp	r2, r3
 800498c:	d900      	bls.n	8004990 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 800498e:	e7d5      	b.n	800493c <sendto+0x16c>
      if(len <= freesize) break;
 8004990:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8004992:	89ba      	ldrh	r2, [r7, #12]
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fa15 	bl	8003dc8 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	3301      	adds	r3, #1
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049aa:	2120      	movs	r1, #32
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff f86b 	bl	8003a88 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80049b2:	bf00      	nop
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3301      	adds	r3, #1
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff f815 	bl	80039f0 <WIZCHIP_READ>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f3      	bne.n	80049b4 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	3301      	adds	r3, #1
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff f809 	bl	80039f0 <WIZCHIP_READ>
 80049de:	4603      	mov	r3, r0
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00c      	beq.n	8004a0a <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	3301      	adds	r3, #1
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049fc:	2110      	movs	r1, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff f842 	bl	8003a88 <WIZCHIP_WRITE>
         break;
 8004a04:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004a06:	89bb      	ldrh	r3, [r7, #12]
 8004a08:	e010      	b.n	8004a2c <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0db      	beq.n	80049cc <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	3301      	adds	r3, #1
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a20:	2108      	movs	r1, #8
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff f830 	bl	8003a88 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004a28:	f06f 030c 	mvn.w	r3, #12
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000ae6 	.word	0x20000ae6

08004a38 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	4613      	mov	r3, r2
 8004a48:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d902      	bls.n	8004a5a <recvfrom+0x22>
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
 8004a58:	e1d2      	b.n	8004e00 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	3301      	adds	r3, #1
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe ffc4 	bl	80039f0 <WIZCHIP_READ>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	777b      	strb	r3, [r7, #29]
 8004a6c:	7f7b      	ldrb	r3, [r7, #29]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3b02      	subs	r3, #2
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d902      	bls.n	8004a7e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004a78:	f06f 0304 	mvn.w	r3, #4
 8004a7c:	e1c0      	b.n	8004e00 <recvfrom+0x3c8>
         break;
 8004a7e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004a80:	89bb      	ldrh	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <recvfrom+0x54>
 8004a86:	f06f 030d 	mvn.w	r3, #13
 8004a8a:	e1b9      	b.n	8004e00 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	4a87      	ldr	r2, [pc, #540]	@ (8004cac <recvfrom+0x274>)
 8004a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d128      	bne.n	8004aea <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f94b 	bl	8003d36 <getSn_RX_RSR>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe ff9d 	bl	80039f0 <WIZCHIP_READ>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <recvfrom+0x8a>
 8004abc:	f06f 0303 	mvn.w	r3, #3
 8004ac0:	e19e      	b.n	8004e00 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb0 <recvfrom+0x278>)
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	fa42 f303 	asr.w	r3, r2, r3
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <recvfrom+0xa8>
 8004ad6:	8bfb      	ldrh	r3, [r7, #30]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <recvfrom+0xa8>
 8004adc:	2300      	movs	r3, #0
 8004ade:	e18f      	b.n	8004e00 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8004ae0:	8bfb      	ldrh	r3, [r7, #30]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d100      	bne.n	8004ae8 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8004ae6:	e7d7      	b.n	8004a98 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004ae8:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004aea:	7f7b      	ldrb	r3, [r7, #29]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d078      	beq.n	8004be6 <recvfrom+0x1ae>
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	f300 8140 	bgt.w	8004d7a <recvfrom+0x342>
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <recvfrom+0xce>
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	f000 80da 	beq.w	8004cb8 <recvfrom+0x280>
 8004b04:	e139      	b.n	8004d7a <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	4a68      	ldr	r2, [pc, #416]	@ (8004cac <recvfrom+0x274>)
 8004b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d151      	bne.n	8004bb6 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8004b12:	f107 0114 	add.w	r1, r7, #20
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff f9ae 	bl	8003e7c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3301      	adds	r3, #1
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b2c:	2140      	movs	r1, #64	@ 0x40
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe ffaa 	bl	8003a88 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004b34:	bf00      	nop
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe ff54 	bl	80039f0 <WIZCHIP_READ>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f3      	bne.n	8004b36 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8004b4e:	7d3a      	ldrb	r2, [r7, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3301      	adds	r3, #1
 8004b58:	7d7a      	ldrb	r2, [r7, #21]
 8004b5a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3302      	adds	r3, #2
 8004b60:	7dba      	ldrb	r2, [r7, #22]
 8004b62:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3303      	adds	r3, #3
 8004b68:	7dfa      	ldrb	r2, [r7, #23]
 8004b6a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8004b6c:	7e3b      	ldrb	r3, [r7, #24]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	7e7a      	ldrb	r2, [r7, #25]
 8004b7e:	4413      	add	r3, r2
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8004b86:	7eba      	ldrb	r2, [r7, #26]
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4a47      	ldr	r2, [pc, #284]	@ (8004cac <recvfrom+0x274>)
 8004b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	4a45      	ldr	r2, [pc, #276]	@ (8004cac <recvfrom+0x274>)
 8004b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	7efb      	ldrb	r3, [r7, #27]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	b291      	uxth	r1, r2
 8004ba8:	4a40      	ldr	r2, [pc, #256]	@ (8004cac <recvfrom+0x274>)
 8004baa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	4a40      	ldr	r2, [pc, #256]	@ (8004cb4 <recvfrom+0x27c>)
 8004bb2:	2180      	movs	r1, #128	@ 0x80
 8004bb4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cac <recvfrom+0x274>)
 8004bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bbe:	89ba      	ldrh	r2, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d202      	bcs.n	8004bca <recvfrom+0x192>
 8004bc4:	89bb      	ldrh	r3, [r7, #12]
 8004bc6:	83fb      	strh	r3, [r7, #30]
 8004bc8:	e004      	b.n	8004bd4 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	4a37      	ldr	r2, [pc, #220]	@ (8004cac <recvfrom+0x274>)
 8004bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd2:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8004bd4:	8bfb      	ldrh	r3, [r7, #30]
 8004bd6:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004bd8:	8bfa      	ldrh	r2, [r7, #30]
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff f94c 	bl	8003e7c <wiz_recv_data>
			break;
 8004be4:	e0d5      	b.n	8004d92 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	4a30      	ldr	r2, [pc, #192]	@ (8004cac <recvfrom+0x274>)
 8004bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d145      	bne.n	8004c7e <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8004bf2:	f107 0114 	add.w	r1, r7, #20
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f93e 	bl	8003e7c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	3301      	adds	r3, #1
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c0c:	2140      	movs	r1, #64	@ 0x40
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe ff3a 	bl	8003a88 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004c14:	bf00      	nop
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fee4 	bl	80039f0 <WIZCHIP_READ>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f3      	bne.n	8004c16 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004c2e:	7d3a      	ldrb	r2, [r7, #20]
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	4611      	mov	r1, r2
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <recvfrom+0x274>)
 8004c36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <recvfrom+0x274>)
 8004c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	7d7a      	ldrb	r2, [r7, #21]
 8004c48:	4413      	add	r3, r2
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	3a02      	subs	r2, #2
 8004c50:	b291      	uxth	r1, r2
 8004c52:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <recvfrom+0x274>)
 8004c54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <recvfrom+0x274>)
 8004c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c60:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d906      	bls.n	8004c76 <recvfrom+0x23e>
   			{
   			   close(sn);
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff faba 	bl	80041e4 <close>
   			   return SOCKFATAL_PACKLEN;
 8004c70:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8004c74:	e0c4      	b.n	8004e00 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb4 <recvfrom+0x27c>)
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <recvfrom+0x274>)
 8004c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c86:	89ba      	ldrh	r2, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d202      	bcs.n	8004c92 <recvfrom+0x25a>
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	83fb      	strh	r3, [r7, #30]
 8004c90:	e004      	b.n	8004c9c <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	4a05      	ldr	r2, [pc, #20]	@ (8004cac <recvfrom+0x274>)
 8004c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8004c9c:	8bfa      	ldrh	r2, [r7, #30]
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff f8ea 	bl	8003e7c <wiz_recv_data>
		   break;
 8004ca8:	e073      	b.n	8004d92 <recvfrom+0x35a>
 8004caa:	bf00      	nop
 8004cac:	20000aec 	.word	0x20000aec
 8004cb0:	20000ae6 	.word	0x20000ae6
 8004cb4:	20000afc 	.word	0x20000afc
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	4a53      	ldr	r2, [pc, #332]	@ (8004e08 <recvfrom+0x3d0>)
 8004cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d144      	bne.n	8004d4e <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8004cc4:	f107 0114 	add.w	r1, r7, #20
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2206      	movs	r2, #6
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff f8d5 	bl	8003e7c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cde:	2140      	movs	r1, #64	@ 0x40
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fed1 	bl	8003a88 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004ce6:	bf00      	nop
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	3301      	adds	r3, #1
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe fe7b 	bl	80039f0 <WIZCHIP_READ>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f3      	bne.n	8004ce8 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8004d00:	7d3a      	ldrb	r2, [r7, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	7d7a      	ldrb	r2, [r7, #21]
 8004d0c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3302      	adds	r3, #2
 8004d12:	7dba      	ldrb	r2, [r7, #22]
 8004d14:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3303      	adds	r3, #3
 8004d1a:	7dfa      	ldrb	r2, [r7, #23]
 8004d1c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004d1e:	7e3a      	ldrb	r2, [r7, #24]
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4a38      	ldr	r2, [pc, #224]	@ (8004e08 <recvfrom+0x3d0>)
 8004d26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	4a36      	ldr	r2, [pc, #216]	@ (8004e08 <recvfrom+0x3d0>)
 8004d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	7e7b      	ldrb	r3, [r7, #25]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	b291      	uxth	r1, r2
 8004d40:	4a31      	ldr	r2, [pc, #196]	@ (8004e08 <recvfrom+0x3d0>)
 8004d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	4a30      	ldr	r2, [pc, #192]	@ (8004e0c <recvfrom+0x3d4>)
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	@ (8004e08 <recvfrom+0x3d0>)
 8004d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d56:	89ba      	ldrh	r2, [r7, #12]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d202      	bcs.n	8004d62 <recvfrom+0x32a>
 8004d5c:	89bb      	ldrh	r3, [r7, #12]
 8004d5e:	83fb      	strh	r3, [r7, #30]
 8004d60:	e004      	b.n	8004d6c <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	4a28      	ldr	r2, [pc, #160]	@ (8004e08 <recvfrom+0x3d0>)
 8004d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d6a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004d6c:	8bfa      	ldrh	r2, [r7, #30]
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff f882 	bl	8003e7c <wiz_recv_data>
			break;
 8004d78:	e00b      	b.n	8004d92 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004d7a:	8bfa      	ldrh	r2, [r7, #30]
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff f8d5 	bl	8003f30 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	491f      	ldr	r1, [pc, #124]	@ (8004e08 <recvfrom+0x3d0>)
 8004d8a:	8bfa      	ldrh	r2, [r7, #30]
 8004d8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8004d90:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	3301      	adds	r3, #1
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d9e:	2140      	movs	r1, #64	@ 0x40
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fe71 	bl	8003a88 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8004da6:	bf00      	nop
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3301      	adds	r3, #1
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fe1b 	bl	80039f0 <WIZCHIP_READ>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f3      	bne.n	8004da8 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	4a11      	ldr	r2, [pc, #68]	@ (8004e08 <recvfrom+0x3d0>)
 8004dc4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	8bfa      	ldrh	r2, [r7, #30]
 8004dcc:	1a8a      	subs	r2, r1, r2
 8004dce:	b291      	uxth	r1, r2
 8004dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e08 <recvfrom+0x3d0>)
 8004dd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8004e08 <recvfrom+0x3d0>)
 8004dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	4a09      	ldr	r2, [pc, #36]	@ (8004e0c <recvfrom+0x3d4>)
 8004de6:	5cd2      	ldrb	r2, [r2, r3]
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	b2d1      	uxtb	r1, r2
 8004df0:	4a06      	ldr	r2, [pc, #24]	@ (8004e0c <recvfrom+0x3d4>)
 8004df2:	54d1      	strb	r1, [r2, r3]
 8004df4:	e003      	b.n	8004dfe <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	4a04      	ldr	r2, [pc, #16]	@ (8004e0c <recvfrom+0x3d4>)
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004dfe:	8bfb      	ldrh	r3, [r7, #30]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000aec 	.word	0x20000aec
 8004e0c:	20000afc 	.word	0x20000afc

08004e10 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	bf00      	nop
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	70fb      	strb	r3, [r7, #3]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <reg_wizchip_cs_cbfunc+0x16>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <reg_wizchip_cs_cbfunc+0x40>)
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8004eec <reg_wizchip_cs_cbfunc+0x44>)
 8004ec2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <reg_wizchip_cs_cbfunc+0x40>)
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef0 <reg_wizchip_cs_cbfunc+0x48>)
 8004ec8:	619a      	str	r2, [r3, #24]
 8004eca:	e006      	b.n	8004eda <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004ecc:	4a06      	ldr	r2, [pc, #24]	@ (8004ee8 <reg_wizchip_cs_cbfunc+0x40>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004ed2:	4a05      	ldr	r2, [pc, #20]	@ (8004ee8 <reg_wizchip_cs_cbfunc+0x40>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6193      	str	r3, [r2, #24]
   }
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000054 	.word	0x20000054
 8004eec:	08004e2d 	.word	0x08004e2d
 8004ef0:	08004e3b 	.word	0x08004e3b

08004ef4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004efe:	bf00      	nop
 8004f00:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <reg_wizchip_spi_cbfunc+0x4c>)
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f9      	beq.n	8004f00 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <reg_wizchip_spi_cbfunc+0x24>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <reg_wizchip_spi_cbfunc+0x4c>)
 8004f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <reg_wizchip_spi_cbfunc+0x50>)
 8004f1c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004f1e:	4b08      	ldr	r3, [pc, #32]	@ (8004f40 <reg_wizchip_spi_cbfunc+0x4c>)
 8004f20:	4a09      	ldr	r2, [pc, #36]	@ (8004f48 <reg_wizchip_spi_cbfunc+0x54>)
 8004f22:	621a      	str	r2, [r3, #32]
 8004f24:	e006      	b.n	8004f34 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004f26:	4a06      	ldr	r2, [pc, #24]	@ (8004f40 <reg_wizchip_spi_cbfunc+0x4c>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004f2c:	4a04      	ldr	r2, [pc, #16]	@ (8004f40 <reg_wizchip_spi_cbfunc+0x4c>)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6213      	str	r3, [r2, #32]
   }
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	20000054 	.word	0x20000054
 8004f44:	08004e81 	.word	0x08004e81
 8004f48:	08004e91 	.word	0x08004e91

08004f4c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	6039      	str	r1, [r7, #0]
 8004f56:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	f200 80c5 	bhi.w	80050f6 <ctlwizchip+0x1aa>
 8004f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <ctlwizchip+0x28>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004fb5 	.word	0x08004fb5
 8004f78:	08004fbb 	.word	0x08004fbb
 8004f7c:	08004fe7 	.word	0x08004fe7
 8004f80:	08004fdb 	.word	0x08004fdb
 8004f84:	08004ff5 	.word	0x08004ff5
 8004f88:	08005001 	.word	0x08005001
 8004f8c:	0800500f 	.word	0x0800500f
 8004f90:	08005035 	.word	0x08005035
 8004f94:	08005057 	.word	0x08005057
 8004f98:	0800509b 	.word	0x0800509b
 8004f9c:	080050a1 	.word	0x080050a1
 8004fa0:	080050a9 	.word	0x080050a9
 8004fa4:	080050fd 	.word	0x080050fd
 8004fa8:	080050b1 	.word	0x080050b1
 8004fac:	080050bf 	.word	0x080050bf
 8004fb0:	080050db 	.word	0x080050db
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004fb4:	f000 f8e8 	bl	8005188 <wizchip_sw_reset>
         break;
 8004fb8:	e0a1      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f925 	bl	8005220 <wizchip_init>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	e092      	b.n	8005100 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f9aa 	bl	8005338 <wizchip_clrinterrupt>
         break;
 8004fe4:	e08b      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004fe6:	f000 f9db 	bl	80053a0 <wizchip_getinterrupt>
 8004fea:	4603      	mov	r3, r0
 8004fec:	461a      	mov	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	801a      	strh	r2, [r3, #0]
         break;
 8004ff2:	e084      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 f9f6 	bl	80053ea <wizchip_setinterruptmask>
         break;         
 8004ffe:	e07e      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005000:	f000 fa0e 	bl	8005420 <wizchip_getinterruptmask>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	801a      	strh	r2, [r3, #0]
         break;
 800500c:	e077      	b.n	80050fe <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	b29b      	uxth	r3, r3
 8005016:	b2db      	uxtb	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800501e:	f7fe fd33 	bl	8003a88 <WIZCHIP_WRITE>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4619      	mov	r1, r3
 800502a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800502e:	f7fe fd2b 	bl	8003a88 <WIZCHIP_WRITE>
         break;
 8005032:	e064      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005034:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005038:	f7fe fcda 	bl	80039f0 <WIZCHIP_READ>
 800503c:	4603      	mov	r3, r0
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	b29c      	uxth	r4, r3
 8005042:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005046:	f7fe fcd3 	bl	80039f0 <WIZCHIP_READ>
 800504a:	4603      	mov	r3, r0
 800504c:	4423      	add	r3, r4
 800504e:	b29a      	uxth	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	801a      	strh	r2, [r3, #0]
         break;
 8005054:	e053      	b.n	80050fe <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005056:	4b2c      	ldr	r3, [pc, #176]	@ (8005108 <ctlwizchip+0x1bc>)
 8005058:	789a      	ldrb	r2, [r3, #2]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	4a29      	ldr	r2, [pc, #164]	@ (8005108 <ctlwizchip+0x1bc>)
 8005064:	78d2      	ldrb	r2, [r2, #3]
 8005066:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	3302      	adds	r3, #2
 800506c:	4a26      	ldr	r2, [pc, #152]	@ (8005108 <ctlwizchip+0x1bc>)
 800506e:	7912      	ldrb	r2, [r2, #4]
 8005070:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	3303      	adds	r3, #3
 8005076:	4a24      	ldr	r2, [pc, #144]	@ (8005108 <ctlwizchip+0x1bc>)
 8005078:	7952      	ldrb	r2, [r2, #5]
 800507a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	3304      	adds	r3, #4
 8005080:	4a21      	ldr	r2, [pc, #132]	@ (8005108 <ctlwizchip+0x1bc>)
 8005082:	7992      	ldrb	r2, [r2, #6]
 8005084:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	3305      	adds	r3, #5
 800508a:	4a1f      	ldr	r2, [pc, #124]	@ (8005108 <ctlwizchip+0x1bc>)
 800508c:	79d2      	ldrb	r2, [r2, #7]
 800508e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	3306      	adds	r3, #6
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
         break;
 8005098:	e031      	b.n	80050fe <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800509a:	f000 fa13 	bl	80054c4 <wizphy_reset>
         break;
 800509e:	e02e      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80050a0:	6838      	ldr	r0, [r7, #0]
 80050a2:	f000 fa36 	bl	8005512 <wizphy_setphyconf>
         break;
 80050a6:	e02a      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80050a8:	6838      	ldr	r0, [r7, #0]
 80050aa:	f000 fa75 	bl	8005598 <wizphy_getphyconf>
         break;
 80050ae:	e026      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fad9 	bl	800566c <wizphy_setphypmode>
 80050ba:	4603      	mov	r3, r0
 80050bc:	e020      	b.n	8005100 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80050be:	f000 f9e8 	bl	8005492 <wizphy_getphypmode>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	2bff      	cmp	r3, #255	@ 0xff
 80050ca:	d102      	bne.n	80050d2 <ctlwizchip+0x186>
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	e016      	b.n	8005100 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	7dfa      	ldrb	r2, [r7, #23]
 80050d6:	701a      	strb	r2, [r3, #0]
         break;
 80050d8:	e011      	b.n	80050fe <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80050da:	f000 f9c4 	bl	8005466 <wizphy_getphylink>
 80050de:	4603      	mov	r3, r0
 80050e0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	2bff      	cmp	r3, #255	@ 0xff
 80050e6:	d102      	bne.n	80050ee <ctlwizchip+0x1a2>
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ec:	e008      	b.n	8005100 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	7dfa      	ldrb	r2, [r7, #23]
 80050f2:	701a      	strb	r2, [r3, #0]
         break;
 80050f4:	e003      	b.n	80050fe <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295
 80050fa:	e001      	b.n	8005100 <ctlwizchip+0x1b4>
         break;
 80050fc:	bf00      	nop
   }
   return 0;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	20000054 	.word	0x20000054

0800510c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	2b05      	cmp	r3, #5
 800511c:	d82c      	bhi.n	8005178 <ctlnetwork+0x6c>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <ctlnetwork+0x18>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	0800513d 	.word	0x0800513d
 8005128:	08005145 	.word	0x08005145
 800512c:	0800514d 	.word	0x0800514d
 8005130:	0800515b 	.word	0x0800515b
 8005134:	08005169 	.word	0x08005169
 8005138:	08005171 	.word	0x08005171
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f000 fadf 	bl	8005700 <wizchip_setnetinfo>
         break;
 8005142:	e01c      	b.n	800517e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005144:	6838      	ldr	r0, [r7, #0]
 8005146:	f000 fb1b 	bl	8005780 <wizchip_getnetinfo>
         break;
 800514a:	e018      	b.n	800517e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fb55 	bl	8005800 <wizchip_setnetmode>
 8005156:	4603      	mov	r3, r0
 8005158:	e012      	b.n	8005180 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800515a:	f000 fb73 	bl	8005844 <wizchip_getnetmode>
 800515e:	4603      	mov	r3, r0
 8005160:	461a      	mov	r2, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	701a      	strb	r2, [r3, #0]
         break;
 8005166:	e00a      	b.n	800517e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005168:	6838      	ldr	r0, [r7, #0]
 800516a:	f000 fb73 	bl	8005854 <wizchip_settimeout>
         break;
 800516e:	e006      	b.n	800517e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005170:	6838      	ldr	r0, [r7, #0]
 8005172:	f000 fb90 	bl	8005896 <wizchip_gettimeout>
         break;
 8005176:	e002      	b.n	800517e <ctlnetwork+0x72>
      default:
         return -1;
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
 800517c:	e000      	b.n	8005180 <ctlnetwork+0x74>
   }
   return 0;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	2206      	movs	r2, #6
 8005192:	4619      	mov	r1, r3
 8005194:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005198:	f7fe fcc4 	bl	8003b24 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800519c:	f107 0314 	add.w	r3, r7, #20
 80051a0:	2204      	movs	r2, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80051a8:	f7fe fcbc 	bl	8003b24 <WIZCHIP_READ_BUF>
 80051ac:	f107 0310 	add.w	r3, r7, #16
 80051b0:	2204      	movs	r2, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80051b8:	f7fe fcb4 	bl	8003b24 <WIZCHIP_READ_BUF>
 80051bc:	f107 030c 	add.w	r3, r7, #12
 80051c0:	2204      	movs	r2, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80051c8:	f7fe fcac 	bl	8003b24 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80051cc:	2180      	movs	r1, #128	@ 0x80
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fe fc5a 	bl	8003a88 <WIZCHIP_WRITE>
   getMR(); // for delay
 80051d4:	2000      	movs	r0, #0
 80051d6:	f7fe fc0b 	bl	80039f0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	2206      	movs	r2, #6
 80051de:	4619      	mov	r1, r3
 80051e0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80051e4:	f7fe fcfe 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80051e8:	f107 0314 	add.w	r3, r7, #20
 80051ec:	2204      	movs	r2, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80051f4:	f7fe fcf6 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80051f8:	f107 0310 	add.w	r3, r7, #16
 80051fc:	2204      	movs	r2, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005204:	f7fe fcee 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005208:	f107 030c 	add.w	r3, r7, #12
 800520c:	2204      	movs	r2, #4
 800520e:	4619      	mov	r1, r3
 8005210:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005214:	f7fe fce6 	bl	8003be4 <WIZCHIP_WRITE_BUF>
}
 8005218:	bf00      	nop
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800522e:	f7ff ffab 	bl	8005188 <wizchip_sw_reset>
   if(txsize)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d03b      	beq.n	80052b0 <wizchip_init+0x90>
   {
      tmp = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]
 8005240:	e015      	b.n	800526e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4413      	add	r3, r2
 800524a:	781a      	ldrb	r2, [r3, #0]
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	4413      	add	r3, r2
 8005250:	b2db      	uxtb	r3, r3
 8005252:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005258:	2b10      	cmp	r3, #16
 800525a:	dd02      	ble.n	8005262 <wizchip_init+0x42>
 800525c:	f04f 33ff 	mov.w	r3, #4294967295
 8005260:	e066      	b.n	8005330 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	3301      	adds	r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005272:	2b07      	cmp	r3, #7
 8005274:	dde5      	ble.n	8005242 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	e015      	b.n	80052a8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800527c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	3301      	adds	r3, #1
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800528a:	4618      	mov	r0, r3
 800528c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	f7fe fbf6 	bl	8003a88 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800529c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ac:	2b07      	cmp	r3, #7
 80052ae:	dde5      	ble.n	800527c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d03b      	beq.n	800532e <wizchip_init+0x10e>
   {
      tmp = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
 80052be:	e015      	b.n	80052ec <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80052c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	4413      	add	r3, r2
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	4413      	add	r3, r2
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80052d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	dd02      	ble.n	80052e0 <wizchip_init+0xc0>
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	e027      	b.n	8005330 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	3301      	adds	r3, #1
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f0:	2b07      	cmp	r3, #7
 80052f2:	dde5      	ble.n	80052c0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e015      	b.n	8005326 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80052fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	3301      	adds	r3, #1
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005308:	4618      	mov	r0, r3
 800530a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4413      	add	r3, r2
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	4619      	mov	r1, r3
 8005316:	f7fe fbb7 	bl	8003a88 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800531a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	3301      	adds	r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	73fb      	strb	r3, [r7, #15]
 8005326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532a:	2b07      	cmp	r3, #7
 800532c:	dde5      	ble.n	80052fa <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	b29b      	uxth	r3, r3
 800534c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	f023 030f 	bic.w	r3, r3, #15
 8005354:	b2db      	uxtb	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800535c:	f7fe fb94 	bl	8003a88 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e014      	b.n	8005390 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8005366:	7bba      	ldrb	r2, [r7, #14]
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	fa42 f303 	asr.w	r3, r2, r3
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <wizchip_clrinterrupt+0x52>
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	3301      	adds	r3, #1
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005382:	211f      	movs	r1, #31
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fb7f 	bl	8003a88 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	3301      	adds	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b07      	cmp	r3, #7
 8005394:	d9e7      	bls.n	8005366 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80053b2:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80053b6:	f7fe fb1b 	bl	80039f0 <WIZCHIP_READ>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f023 030f 	bic.w	r3, r3, #15
 80053c0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80053c2:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80053c6:	f7fe fb13 	bl	80039f0 <WIZCHIP_READ>
 80053ca:	4603      	mov	r3, r0
 80053cc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80053ce:	79bb      	ldrb	r3, [r7, #6]
 80053d0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80053d2:	88bb      	ldrh	r3, [r7, #4]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4413      	add	r3, r2
 80053de:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80053e0:	88bb      	ldrh	r3, [r7, #4]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	4619      	mov	r1, r3
 8005404:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005408:	f7fe fb3e 	bl	8003a88 <WIZCHIP_WRITE>
   setSIMR(simr);
 800540c:	7bbb      	ldrb	r3, [r7, #14]
 800540e:	4619      	mov	r1, r3
 8005410:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005414:	f7fe fb38 	bl	8003a88 <WIZCHIP_WRITE>
#endif   
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8005432:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005436:	f7fe fadb 	bl	80039f0 <WIZCHIP_READ>
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800543e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005442:	f7fe fad5 	bl	80039f0 <WIZCHIP_READ>
 8005446:	4603      	mov	r3, r0
 8005448:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800544a:	79bb      	ldrb	r3, [r7, #6]
 800544c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800544e:	88bb      	ldrh	r3, [r7, #4]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	b29a      	uxth	r2, r3
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	b29b      	uxth	r3, r3
 8005458:	4413      	add	r3, r2
 800545a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800545c:	88bb      	ldrh	r3, [r7, #4]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800546c:	2300      	movs	r3, #0
 800546e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8005470:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005474:	f7fe fabc 	bl	80039f0 <WIZCHIP_READ>
 8005478:	4603      	mov	r3, r0
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8005482:	2301      	movs	r3, #1
 8005484:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8005486:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800549c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80054a0:	f7fe faa6 	bl	80039f0 <WIZCHIP_READ>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054aa:	2b30      	cmp	r3, #48	@ 0x30
 80054ac:	d102      	bne.n	80054b4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80054ae:	2301      	movs	r3, #1
 80054b0:	71fb      	strb	r3, [r7, #7]
 80054b2:	e001      	b.n	80054b8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80054b4:	2300      	movs	r3, #0
 80054b6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80054b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80054ca:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80054ce:	f7fe fa8f 	bl	80039f0 <WIZCHIP_READ>
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054dc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80054e6:	f7fe facf 	bl	8003a88 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80054ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80054ee:	f7fe fa7f 	bl	80039f0 <WIZCHIP_READ>
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054fc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	4619      	mov	r1, r3
 8005502:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005506:	f7fe fabf 	bl	8003a88 <WIZCHIP_WRITE>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d104      	bne.n	8005530 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e003      	b.n	8005538 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005536:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d104      	bne.n	800554a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e019      	b.n	800557e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d10d      	bne.n	800556e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	789b      	ldrb	r3, [r3, #2]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d104      	bne.n	8005564 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	f043 0318 	orr.w	r3, r3, #24
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e00c      	b.n	800557e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	f043 0308 	orr.w	r3, r3, #8
 800556a:	73fb      	strb	r3, [r7, #15]
 800556c:	e007      	b.n	800557e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	789b      	ldrb	r3, [r3, #2]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d103      	bne.n	800557e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	f043 0310 	orr.w	r3, r3, #16
 800557c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	4619      	mov	r1, r3
 8005582:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005586:	f7fe fa7f 	bl	8003a88 <WIZCHIP_WRITE>
   wizphy_reset();
 800558a:	f7ff ff9b 	bl	80054c4 <wizphy_reset>
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80055a4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80055a8:	f7fe fa22 	bl	80039f0 <WIZCHIP_READ>
 80055ac:	4603      	mov	r3, r0
 80055ae:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	119b      	asrs	r3, r3, #6
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d001      	beq.n	80055ce <wizphy_getphyconf+0x36>
 80055ca:	2b38      	cmp	r3, #56	@ 0x38
 80055cc:	d103      	bne.n	80055d6 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	705a      	strb	r2, [r3, #1]
         break;
 80055d4:	e003      	b.n	80055de <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	705a      	strb	r2, [r3, #1]
         break;
 80055dc:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055e4:	3b10      	subs	r3, #16
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	bf8c      	ite	hi
 80055ea:	2201      	movhi	r2, #1
 80055ec:	2200      	movls	r2, #0
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d10f      	bne.n	8005614 <wizphy_getphyconf+0x7c>
 80055f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <wizphy_getphyconf+0xcc>)
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	709a      	strb	r2, [r3, #2]
         break;
 8005612:	e003      	b.n	800561c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	709a      	strb	r2, [r3, #2]
         break;
 800561a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005622:	3b08      	subs	r3, #8
 8005624:	2b18      	cmp	r3, #24
 8005626:	bf8c      	ite	hi
 8005628:	2201      	movhi	r2, #1
 800562a:	2200      	movls	r2, #0
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	2a00      	cmp	r2, #0
 8005630:	d10f      	bne.n	8005652 <wizphy_getphyconf+0xba>
 8005632:	4a0d      	ldr	r2, [pc, #52]	@ (8005668 <wizphy_getphyconf+0xd0>)
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	70da      	strb	r2, [r3, #3]
         break;
 8005650:	e003      	b.n	800565a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	70da      	strb	r2, [r3, #3]
         break;
 8005658:	bf00      	nop
   }
}
 800565a:	bf00      	nop
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	00010101 	.word	0x00010101
 8005668:	01010001 	.word	0x01010001

0800566c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800567a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800567e:	f7fe f9b7 	bl	80039f0 <WIZCHIP_READ>
 8005682:	4603      	mov	r3, r0
 8005684:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <wizphy_setphypmode+0x2a>
 8005690:	f04f 33ff 	mov.w	r3, #4294967295
 8005694:	e030      	b.n	80056f8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800569c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d104      	bne.n	80056ae <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80056aa:	73fb      	strb	r3, [r7, #15]
 80056ac:	e003      	b.n	80056b6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80056b4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	4619      	mov	r1, r3
 80056ba:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80056be:	f7fe f9e3 	bl	8003a88 <WIZCHIP_WRITE>
   wizphy_reset();
 80056c2:	f7ff feff 	bl	80054c4 <wizphy_reset>
   tmp = getPHYCFGR();
 80056c6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80056ca:	f7fe f991 	bl	80039f0 <WIZCHIP_READ>
 80056ce:	4603      	mov	r3, r0
 80056d0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d106      	bne.n	80056e6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <wizphy_setphypmode+0x88>
 80056e2:	2300      	movs	r3, #0
 80056e4:	e008      	b.n	80056f8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <wizphy_setphypmode+0x88>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e001      	b.n	80056f8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2206      	movs	r2, #6
 800570c:	4619      	mov	r1, r3
 800570e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005712:	f7fe fa67 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	330e      	adds	r3, #14
 800571a:	2204      	movs	r2, #4
 800571c:	4619      	mov	r1, r3
 800571e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005722:	f7fe fa5f 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	330a      	adds	r3, #10
 800572a:	2204      	movs	r2, #4
 800572c:	4619      	mov	r1, r3
 800572e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005732:	f7fe fa57 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3306      	adds	r3, #6
 800573a:	2204      	movs	r2, #4
 800573c:	4619      	mov	r1, r3
 800573e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005742:	f7fe fa4f 	bl	8003be4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7c9a      	ldrb	r2, [r3, #18]
 800574a:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <wizchip_setnetinfo+0x78>)
 800574c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	7cda      	ldrb	r2, [r3, #19]
 8005752:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <wizchip_setnetinfo+0x78>)
 8005754:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	7d1a      	ldrb	r2, [r3, #20]
 800575a:	4b07      	ldr	r3, [pc, #28]	@ (8005778 <wizchip_setnetinfo+0x78>)
 800575c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7d5a      	ldrb	r2, [r3, #21]
 8005762:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <wizchip_setnetinfo+0x78>)
 8005764:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7d9a      	ldrb	r2, [r3, #22]
 800576a:	4b04      	ldr	r3, [pc, #16]	@ (800577c <wizchip_setnetinfo+0x7c>)
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000b04 	.word	0x20000b04
 800577c:	20000b08 	.word	0x20000b08

08005780 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2206      	movs	r2, #6
 800578c:	4619      	mov	r1, r3
 800578e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005792:	f7fe f9c7 	bl	8003b24 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	330e      	adds	r3, #14
 800579a:	2204      	movs	r2, #4
 800579c:	4619      	mov	r1, r3
 800579e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80057a2:	f7fe f9bf 	bl	8003b24 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	330a      	adds	r3, #10
 80057aa:	2204      	movs	r2, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80057b2:	f7fe f9b7 	bl	8003b24 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3306      	adds	r3, #6
 80057ba:	2204      	movs	r2, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80057c2:	f7fe f9af 	bl	8003b24 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80057c6:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <wizchip_getnetinfo+0x78>)
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80057ce:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <wizchip_getnetinfo+0x78>)
 80057d0:	785a      	ldrb	r2, [r3, #1]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80057d6:	4b08      	ldr	r3, [pc, #32]	@ (80057f8 <wizchip_getnetinfo+0x78>)
 80057d8:	789a      	ldrb	r2, [r3, #2]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <wizchip_getnetinfo+0x78>)
 80057e0:	78da      	ldrb	r2, [r3, #3]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80057e6:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <wizchip_getnetinfo+0x7c>)
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	759a      	strb	r2, [r3, #22]
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000b04 	.word	0x20000b04
 80057fc:	20000b08 	.word	0x20000b08

08005800 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <wizchip_setnetmode+0x1e>
 8005818:	f04f 33ff 	mov.w	r3, #4294967295
 800581c:	e00e      	b.n	800583c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800581e:	2000      	movs	r0, #0
 8005820:	f7fe f8e6 	bl	80039f0 <WIZCHIP_READ>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8005828:	7bfa      	ldrb	r2, [r7, #15]
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	4313      	orrs	r3, r2
 800582e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	4619      	mov	r1, r3
 8005834:	2000      	movs	r0, #0
 8005836:	f7fe f927 	bl	8003a88 <WIZCHIP_WRITE>
   return 0;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8005848:	2000      	movs	r0, #0
 800584a:	f7fe f8d1 	bl	80039f0 <WIZCHIP_READ>
 800584e:	4603      	mov	r3, r0
}
 8005850:	4618      	mov	r0, r3
 8005852:	bd80      	pop	{r7, pc}

08005854 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4619      	mov	r1, r3
 8005862:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8005866:	f7fe f90f 	bl	8003a88 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	885b      	ldrh	r3, [r3, #2]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	b29b      	uxth	r3, r3
 8005872:	b2db      	uxtb	r3, r3
 8005874:	4619      	mov	r1, r3
 8005876:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800587a:	f7fe f905 	bl	8003a88 <WIZCHIP_WRITE>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	885b      	ldrh	r3, [r3, #2]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	4619      	mov	r1, r3
 8005886:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800588a:	f7fe f8fd 	bl	8003a88 <WIZCHIP_WRITE>
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8005896:	b590      	push	{r4, r7, lr}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800589e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80058a2:	f7fe f8a5 	bl	80039f0 <WIZCHIP_READ>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80058ae:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80058b2:	f7fe f89d 	bl	80039f0 <WIZCHIP_READ>
 80058b6:	4603      	mov	r3, r0
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	b29c      	uxth	r4, r3
 80058bc:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80058c0:	f7fe f896 	bl	80039f0 <WIZCHIP_READ>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4423      	add	r3, r4
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	805a      	strh	r2, [r3, #2]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd90      	pop	{r4, r7, pc}
	...

080058d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80058d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005910 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80058dc:	f7fb ffd0 	bl	8001880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80058e0:	480c      	ldr	r0, [pc, #48]	@ (8005914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058e2:	490d      	ldr	r1, [pc, #52]	@ (8005918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058e4:	4a0d      	ldr	r2, [pc, #52]	@ (800591c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058e8:	e002      	b.n	80058f0 <LoopCopyDataInit>

080058ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ee:	3304      	adds	r3, #4

080058f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058f4:	d3f9      	bcc.n	80058ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058f8:	4c0a      	ldr	r4, [pc, #40]	@ (8005924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058fc:	e001      	b.n	8005902 <LoopFillZerobss>

080058fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005900:	3204      	adds	r2, #4

08005902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005904:	d3fb      	bcc.n	80058fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005906:	f005 fb67 	bl	800afd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800590a:	f7fa fe31 	bl	8000570 <main>
  bx  lr    
 800590e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005918:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 800591c:	0800c49c 	.word	0x0800c49c
  ldr r2, =_sbss
 8005920:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8005924:	20005644 	.word	0x20005644

08005928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005928:	e7fe      	b.n	8005928 <ADC_IRQHandler>
	...

0800592c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005930:	4b0e      	ldr	r3, [pc, #56]	@ (800596c <HAL_Init+0x40>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a0d      	ldr	r2, [pc, #52]	@ (800596c <HAL_Init+0x40>)
 8005936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800593a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800593c:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <HAL_Init+0x40>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <HAL_Init+0x40>)
 8005942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005948:	4b08      	ldr	r3, [pc, #32]	@ (800596c <HAL_Init+0x40>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a07      	ldr	r2, [pc, #28]	@ (800596c <HAL_Init+0x40>)
 800594e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005954:	2003      	movs	r0, #3
 8005956:	f000 f8fc 	bl	8005b52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800595a:	200f      	movs	r0, #15
 800595c:	f7fb fe6e 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005960:	f7fb fd02 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40023c00 	.word	0x40023c00

08005970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005974:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <HAL_IncTick+0x20>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <HAL_IncTick+0x24>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4413      	add	r3, r2
 8005980:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <HAL_IncTick+0x24>)
 8005982:	6013      	str	r3, [r2, #0]
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000084 	.word	0x20000084
 8005994:	20000b0c 	.word	0x20000b0c

08005998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return uwTick;
 800599c:	4b03      	ldr	r3, [pc, #12]	@ (80059ac <HAL_GetTick+0x14>)
 800599e:	681b      	ldr	r3, [r3, #0]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000b0c 	.word	0x20000b0c

080059b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059b8:	f7ff ffee 	bl	8005998 <HAL_GetTick>
 80059bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d005      	beq.n	80059d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ca:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <HAL_Delay+0x44>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059d6:	bf00      	nop
 80059d8:	f7ff ffde 	bl	8005998 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d8f7      	bhi.n	80059d8 <HAL_Delay+0x28>
  {
  }
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000084 	.word	0x20000084

080059f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a08:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <__NVIC_SetPriorityGrouping+0x44>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a14:	4013      	ands	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a2a:	4a04      	ldr	r2, [pc, #16]	@ (8005a3c <__NVIC_SetPriorityGrouping+0x44>)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	60d3      	str	r3, [r2, #12]
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a44:	4b04      	ldr	r3, [pc, #16]	@ (8005a58 <__NVIC_GetPriorityGrouping+0x18>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	0a1b      	lsrs	r3, r3, #8
 8005a4a:	f003 0307 	and.w	r3, r3, #7
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	e000ed00 	.word	0xe000ed00

08005a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	db0b      	blt.n	8005a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	f003 021f 	and.w	r2, r3, #31
 8005a74:	4907      	ldr	r1, [pc, #28]	@ (8005a94 <__NVIC_EnableIRQ+0x38>)
 8005a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	e000e100 	.word	0xe000e100

08005a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	6039      	str	r1, [r7, #0]
 8005aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	db0a      	blt.n	8005ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	490c      	ldr	r1, [pc, #48]	@ (8005ae4 <__NVIC_SetPriority+0x4c>)
 8005ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab6:	0112      	lsls	r2, r2, #4
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	440b      	add	r3, r1
 8005abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ac0:	e00a      	b.n	8005ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	4908      	ldr	r1, [pc, #32]	@ (8005ae8 <__NVIC_SetPriority+0x50>)
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	3b04      	subs	r3, #4
 8005ad0:	0112      	lsls	r2, r2, #4
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	761a      	strb	r2, [r3, #24]
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000e100 	.word	0xe000e100
 8005ae8:	e000ed00 	.word	0xe000ed00

08005aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b089      	sub	sp, #36	@ 0x24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f1c3 0307 	rsb	r3, r3, #7
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	bf28      	it	cs
 8005b0a:	2304      	movcs	r3, #4
 8005b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3304      	adds	r3, #4
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d902      	bls.n	8005b1c <NVIC_EncodePriority+0x30>
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3b03      	subs	r3, #3
 8005b1a:	e000      	b.n	8005b1e <NVIC_EncodePriority+0x32>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b20:	f04f 32ff 	mov.w	r2, #4294967295
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	43da      	mvns	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	401a      	ands	r2, r3
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b34:	f04f 31ff 	mov.w	r1, #4294967295
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	43d9      	mvns	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b44:	4313      	orrs	r3, r2
         );
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3724      	adds	r7, #36	@ 0x24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ff4c 	bl	80059f8 <__NVIC_SetPriorityGrouping>
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b7a:	f7ff ff61 	bl	8005a40 <__NVIC_GetPriorityGrouping>
 8005b7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	6978      	ldr	r0, [r7, #20]
 8005b86:	f7ff ffb1 	bl	8005aec <NVIC_EncodePriority>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b90:	4611      	mov	r1, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff ff80 	bl	8005a98 <__NVIC_SetPriority>
}
 8005b98:	bf00      	nop
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff ff54 	bl	8005a5c <__NVIC_EnableIRQ>
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b089      	sub	sp, #36	@ 0x24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	e16b      	b.n	8005eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bd8:	2201      	movs	r2, #1
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4013      	ands	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	f040 815a 	bne.w	8005eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d005      	beq.n	8005c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d130      	bne.n	8005c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	2203      	movs	r2, #3
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c44:	2201      	movs	r2, #1
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4013      	ands	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	f003 0201 	and.w	r2, r3, #1
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d017      	beq.n	8005cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	2203      	movs	r2, #3
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d123      	bne.n	8005d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	08da      	lsrs	r2, r3, #3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3208      	adds	r2, #8
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	220f      	movs	r2, #15
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	08da      	lsrs	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3208      	adds	r2, #8
 8005cfa:	69b9      	ldr	r1, [r7, #24]
 8005cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4013      	ands	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 0203 	and.w	r2, r3, #3
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80b4 	beq.w	8005eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b60      	ldr	r3, [pc, #384]	@ (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d52:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8005ecc <HAL_GPIO_Init+0x310>)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	220f      	movs	r2, #15
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a52      	ldr	r2, [pc, #328]	@ (8005ed0 <HAL_GPIO_Init+0x314>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02b      	beq.n	8005de2 <HAL_GPIO_Init+0x226>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a51      	ldr	r2, [pc, #324]	@ (8005ed4 <HAL_GPIO_Init+0x318>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d025      	beq.n	8005dde <HAL_GPIO_Init+0x222>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a50      	ldr	r2, [pc, #320]	@ (8005ed8 <HAL_GPIO_Init+0x31c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01f      	beq.n	8005dda <HAL_GPIO_Init+0x21e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8005edc <HAL_GPIO_Init+0x320>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d019      	beq.n	8005dd6 <HAL_GPIO_Init+0x21a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a4e      	ldr	r2, [pc, #312]	@ (8005ee0 <HAL_GPIO_Init+0x324>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_GPIO_Init+0x216>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a4d      	ldr	r2, [pc, #308]	@ (8005ee4 <HAL_GPIO_Init+0x328>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00d      	beq.n	8005dce <HAL_GPIO_Init+0x212>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a4c      	ldr	r2, [pc, #304]	@ (8005ee8 <HAL_GPIO_Init+0x32c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <HAL_GPIO_Init+0x20e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8005eec <HAL_GPIO_Init+0x330>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d101      	bne.n	8005dc6 <HAL_GPIO_Init+0x20a>
 8005dc2:	2307      	movs	r3, #7
 8005dc4:	e00e      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	e00c      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dca:	2306      	movs	r3, #6
 8005dcc:	e00a      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dce:	2305      	movs	r3, #5
 8005dd0:	e008      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	e006      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e004      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e002      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005de2:	2300      	movs	r3, #0
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	f002 0203 	and.w	r2, r2, #3
 8005dea:	0092      	lsls	r2, r2, #2
 8005dec:	4093      	lsls	r3, r2
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df4:	4935      	ldr	r1, [pc, #212]	@ (8005ecc <HAL_GPIO_Init+0x310>)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e02:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e26:	4a32      	ldr	r2, [pc, #200]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e2c:	4b30      	ldr	r3, [pc, #192]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e50:	4a27      	ldr	r2, [pc, #156]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e56:	4b26      	ldr	r3, [pc, #152]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ea4:	4a12      	ldr	r2, [pc, #72]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	f67f ae90 	bls.w	8005bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	@ 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40020000 	.word	0x40020000
 8005ed4:	40020400 	.word	0x40020400
 8005ed8:	40020800 	.word	0x40020800
 8005edc:	40020c00 	.word	0x40020c00
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40021400 	.word	0x40021400
 8005ee8:	40021800 	.word	0x40021800
 8005eec:	40021c00 	.word	0x40021c00
 8005ef0:	40013c00 	.word	0x40013c00

08005ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
 8005f00:	4613      	mov	r3, r2
 8005f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f04:	787b      	ldrb	r3, [r7, #1]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f10:	e003      	b.n	8005f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f12:	887b      	ldrh	r3, [r7, #2]
 8005f14:	041a      	lsls	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	619a      	str	r2, [r3, #24]
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f38:	887a      	ldrh	r2, [r7, #2]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	041a      	lsls	r2, r3, #16
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	43d9      	mvns	r1, r3
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	400b      	ands	r3, r1
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	619a      	str	r2, [r3, #24]
}
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e267      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d075      	beq.n	8006066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f7a:	4b88      	ldr	r3, [pc, #544]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d00c      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f86:	4b85      	ldr	r3, [pc, #532]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d112      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f92:	4b82      	ldr	r3, [pc, #520]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f9e:	d10b      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05b      	beq.n	8006064 <HAL_RCC_OscConfig+0x108>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d157      	bne.n	8006064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e242      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x74>
 8005fc2:	4b76      	ldr	r3, [pc, #472]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a75      	ldr	r2, [pc, #468]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e01d      	b.n	800600c <HAL_RCC_OscConfig+0xb0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x98>
 8005fda:	4b70      	ldr	r3, [pc, #448]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6f      	ldr	r2, [pc, #444]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6c      	ldr	r2, [pc, #432]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0xb0>
 8005ff4:	4b69      	ldr	r3, [pc, #420]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a68      	ldr	r2, [pc, #416]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b66      	ldr	r3, [pc, #408]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a65      	ldr	r2, [pc, #404]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800600a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d013      	beq.n	800603c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7ff fcc0 	bl	8005998 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800601c:	f7ff fcbc 	bl	8005998 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	@ 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e207      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	4b5b      	ldr	r3, [pc, #364]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0xc0>
 800603a:	e014      	b.n	8006066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603c:	f7ff fcac 	bl	8005998 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006044:	f7ff fca8 	bl	8005998 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b64      	cmp	r3, #100	@ 0x64
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1f3      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	4b51      	ldr	r3, [pc, #324]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0xe8>
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d063      	beq.n	800613a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006072:	4b4a      	ldr	r3, [pc, #296]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 030c 	and.w	r3, r3, #12
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800607e:	4b47      	ldr	r3, [pc, #284]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006086:	2b08      	cmp	r3, #8
 8006088:	d11c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800608a:	4b44      	ldr	r3, [pc, #272]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006096:	4b41      	ldr	r3, [pc, #260]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_RCC_OscConfig+0x152>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d001      	beq.n	80060ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e1c7      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ae:	4b3b      	ldr	r3, [pc, #236]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4937      	ldr	r1, [pc, #220]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c2:	e03a      	b.n	800613a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060cc:	4b34      	ldr	r3, [pc, #208]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7ff fc61 	bl	8005998 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060da:	f7ff fc5d 	bl	8005998 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e1a8      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	4b2b      	ldr	r3, [pc, #172]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f8:	4b28      	ldr	r3, [pc, #160]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4925      	ldr	r1, [pc, #148]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006108:	4313      	orrs	r3, r2
 800610a:	600b      	str	r3, [r1, #0]
 800610c:	e015      	b.n	800613a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610e:	4b24      	ldr	r3, [pc, #144]	@ (80061a0 <HAL_RCC_OscConfig+0x244>)
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7ff fc40 	bl	8005998 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800611c:	f7ff fc3c 	bl	8005998 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e187      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	4b1b      	ldr	r3, [pc, #108]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d036      	beq.n	80061b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d016      	beq.n	800617c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614e:	4b15      	ldr	r3, [pc, #84]	@ (80061a4 <HAL_RCC_OscConfig+0x248>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006154:	f7ff fc20 	bl	8005998 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800615c:	f7ff fc1c 	bl	8005998 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e167      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <HAL_RCC_OscConfig+0x240>)
 8006170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f0      	beq.n	800615c <HAL_RCC_OscConfig+0x200>
 800617a:	e01b      	b.n	80061b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800617c:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <HAL_RCC_OscConfig+0x248>)
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006182:	f7ff fc09 	bl	8005998 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006188:	e00e      	b.n	80061a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800618a:	f7ff fc05 	bl	8005998 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d907      	bls.n	80061a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e150      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
 800619c:	40023800 	.word	0x40023800
 80061a0:	42470000 	.word	0x42470000
 80061a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a8:	4b88      	ldr	r3, [pc, #544]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80061aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1ea      	bne.n	800618a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8097 	beq.w	80062f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061c6:	4b81      	ldr	r3, [pc, #516]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10f      	bne.n	80061f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	4b7d      	ldr	r3, [pc, #500]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061da:	4a7c      	ldr	r2, [pc, #496]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80061dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80061e2:	4b7a      	ldr	r3, [pc, #488]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ea:	60bb      	str	r3, [r7, #8]
 80061ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ee:	2301      	movs	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f2:	4b77      	ldr	r3, [pc, #476]	@ (80063d0 <HAL_RCC_OscConfig+0x474>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d118      	bne.n	8006230 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061fe:	4b74      	ldr	r3, [pc, #464]	@ (80063d0 <HAL_RCC_OscConfig+0x474>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a73      	ldr	r2, [pc, #460]	@ (80063d0 <HAL_RCC_OscConfig+0x474>)
 8006204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800620a:	f7ff fbc5 	bl	8005998 <HAL_GetTick>
 800620e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006210:	e008      	b.n	8006224 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006212:	f7ff fbc1 	bl	8005998 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e10c      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	4b6a      	ldr	r3, [pc, #424]	@ (80063d0 <HAL_RCC_OscConfig+0x474>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0f0      	beq.n	8006212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d106      	bne.n	8006246 <HAL_RCC_OscConfig+0x2ea>
 8006238:	4b64      	ldr	r3, [pc, #400]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623c:	4a63      	ldr	r2, [pc, #396]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	6713      	str	r3, [r2, #112]	@ 0x70
 8006244:	e01c      	b.n	8006280 <HAL_RCC_OscConfig+0x324>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b05      	cmp	r3, #5
 800624c:	d10c      	bne.n	8006268 <HAL_RCC_OscConfig+0x30c>
 800624e:	4b5f      	ldr	r3, [pc, #380]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	4a5e      	ldr	r2, [pc, #376]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 8006254:	f043 0304 	orr.w	r3, r3, #4
 8006258:	6713      	str	r3, [r2, #112]	@ 0x70
 800625a:	4b5c      	ldr	r3, [pc, #368]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625e:	4a5b      	ldr	r2, [pc, #364]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	6713      	str	r3, [r2, #112]	@ 0x70
 8006266:	e00b      	b.n	8006280 <HAL_RCC_OscConfig+0x324>
 8006268:	4b58      	ldr	r3, [pc, #352]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626c:	4a57      	ldr	r2, [pc, #348]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	6713      	str	r3, [r2, #112]	@ 0x70
 8006274:	4b55      	ldr	r3, [pc, #340]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006278:	4a54      	ldr	r2, [pc, #336]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 800627a:	f023 0304 	bic.w	r3, r3, #4
 800627e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7ff fb86 	bl	8005998 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628e:	e00a      	b.n	80062a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006290:	f7ff fb82 	bl	8005998 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e0cb      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a6:	4b49      	ldr	r3, [pc, #292]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ee      	beq.n	8006290 <HAL_RCC_OscConfig+0x334>
 80062b2:	e014      	b.n	80062de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062b4:	f7ff fb70 	bl	8005998 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062bc:	f7ff fb6c 	bl	8005998 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e0b5      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d2:	4b3e      	ldr	r3, [pc, #248]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1ee      	bne.n	80062bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d105      	bne.n	80062f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062e4:	4b39      	ldr	r3, [pc, #228]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	4a38      	ldr	r2, [pc, #224]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80062ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80a1 	beq.w	800643c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062fa:	4b34      	ldr	r3, [pc, #208]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	2b08      	cmp	r3, #8
 8006304:	d05c      	beq.n	80063c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d141      	bne.n	8006392 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630e:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <HAL_RCC_OscConfig+0x478>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006314:	f7ff fb40 	bl	8005998 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631c:	f7ff fb3c 	bl	8005998 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e087      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632e:	4b27      	ldr	r3, [pc, #156]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69da      	ldr	r2, [r3, #28]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	019b      	lsls	r3, r3, #6
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	3b01      	subs	r3, #1
 8006354:	041b      	lsls	r3, r3, #16
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	061b      	lsls	r3, r3, #24
 800635e:	491b      	ldr	r1, [pc, #108]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006364:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <HAL_RCC_OscConfig+0x478>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636a:	f7ff fb15 	bl	8005998 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006372:	f7ff fb11 	bl	8005998 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e05c      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006384:	4b11      	ldr	r3, [pc, #68]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x416>
 8006390:	e054      	b.n	800643c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006392:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <HAL_RCC_OscConfig+0x478>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7ff fafe 	bl	8005998 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a0:	f7ff fafa 	bl	8005998 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e045      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b2:	4b06      	ldr	r3, [pc, #24]	@ (80063cc <HAL_RCC_OscConfig+0x470>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0x444>
 80063be:	e03d      	b.n	800643c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d107      	bne.n	80063d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e038      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40007000 	.word	0x40007000
 80063d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <HAL_RCC_OscConfig+0x4ec>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d028      	beq.n	8006438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d121      	bne.n	8006438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fe:	429a      	cmp	r2, r3
 8006400:	d11a      	bne.n	8006438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800640e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006410:	4293      	cmp	r3, r2
 8006412:	d111      	bne.n	8006438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	3b01      	subs	r3, #1
 8006422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006424:	429a      	cmp	r2, r3
 8006426:	d107      	bne.n	8006438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006434:	429a      	cmp	r2, r3
 8006436:	d001      	beq.n	800643c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40023800 	.word	0x40023800

0800644c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0cc      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006460:	4b68      	ldr	r3, [pc, #416]	@ (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d90c      	bls.n	8006488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646e:	4b65      	ldr	r3, [pc, #404]	@ (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b63      	ldr	r3, [pc, #396]	@ (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0b8      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d020      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064a0:	4b59      	ldr	r3, [pc, #356]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a58      	ldr	r2, [pc, #352]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80064aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064b8:	4b53      	ldr	r3, [pc, #332]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a52      	ldr	r2, [pc, #328]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80064c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c4:	4b50      	ldr	r3, [pc, #320]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	494d      	ldr	r1, [pc, #308]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d044      	beq.n	800656c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ea:	4b47      	ldr	r3, [pc, #284]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d119      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e07f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d003      	beq.n	800650a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006506:	2b03      	cmp	r3, #3
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650a:	4b3f      	ldr	r3, [pc, #252]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e06f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651a:	4b3b      	ldr	r3, [pc, #236]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e067      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800652a:	4b37      	ldr	r3, [pc, #220]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f023 0203 	bic.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4934      	ldr	r1, [pc, #208]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	4313      	orrs	r3, r2
 800653a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800653c:	f7ff fa2c 	bl	8005998 <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006542:	e00a      	b.n	800655a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006544:	f7ff fa28 	bl	8005998 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e04f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655a:	4b2b      	ldr	r3, [pc, #172]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 020c 	and.w	r2, r3, #12
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	429a      	cmp	r2, r3
 800656a:	d1eb      	bne.n	8006544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800656c:	4b25      	ldr	r3, [pc, #148]	@ (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d20c      	bcs.n	8006594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657a:	4b22      	ldr	r3, [pc, #136]	@ (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006582:	4b20      	ldr	r3, [pc, #128]	@ (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d001      	beq.n	8006594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e032      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a0:	4b19      	ldr	r3, [pc, #100]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4916      	ldr	r1, [pc, #88]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065be:	4b12      	ldr	r3, [pc, #72]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	490e      	ldr	r1, [pc, #56]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065d2:	f000 f821 	bl	8006618 <HAL_RCC_GetSysClockFreq>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	490a      	ldr	r1, [pc, #40]	@ (800660c <HAL_RCC_ClockConfig+0x1c0>)
 80065e4:	5ccb      	ldrb	r3, [r1, r3]
 80065e6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ea:	4a09      	ldr	r2, [pc, #36]	@ (8006610 <HAL_RCC_ClockConfig+0x1c4>)
 80065ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065ee:	4b09      	ldr	r3, [pc, #36]	@ (8006614 <HAL_RCC_ClockConfig+0x1c8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fb f822 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40023c00 	.word	0x40023c00
 8006608:	40023800 	.word	0x40023800
 800660c:	0800c440 	.word	0x0800c440
 8006610:	20000030 	.word	0x20000030
 8006614:	20000080 	.word	0x20000080

08006618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800661c:	b094      	sub	sp, #80	@ 0x50
 800661e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	647b      	str	r3, [r7, #68]	@ 0x44
 8006624:	2300      	movs	r3, #0
 8006626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006628:	2300      	movs	r3, #0
 800662a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006630:	4b79      	ldr	r3, [pc, #484]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x200>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 030c 	and.w	r3, r3, #12
 8006638:	2b08      	cmp	r3, #8
 800663a:	d00d      	beq.n	8006658 <HAL_RCC_GetSysClockFreq+0x40>
 800663c:	2b08      	cmp	r3, #8
 800663e:	f200 80e1 	bhi.w	8006804 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_RCC_GetSysClockFreq+0x34>
 8006646:	2b04      	cmp	r3, #4
 8006648:	d003      	beq.n	8006652 <HAL_RCC_GetSysClockFreq+0x3a>
 800664a:	e0db      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800664c:	4b73      	ldr	r3, [pc, #460]	@ (800681c <HAL_RCC_GetSysClockFreq+0x204>)
 800664e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006650:	e0db      	b.n	800680a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006652:	4b73      	ldr	r3, [pc, #460]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x208>)
 8006654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006656:	e0d8      	b.n	800680a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006658:	4b6f      	ldr	r3, [pc, #444]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x200>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006660:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006662:	4b6d      	ldr	r3, [pc, #436]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x200>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d063      	beq.n	8006736 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666e:	4b6a      	ldr	r3, [pc, #424]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x200>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	099b      	lsrs	r3, r3, #6
 8006674:	2200      	movs	r2, #0
 8006676:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006678:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800667a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006680:	633b      	str	r3, [r7, #48]	@ 0x30
 8006682:	2300      	movs	r3, #0
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
 8006686:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800668a:	4622      	mov	r2, r4
 800668c:	462b      	mov	r3, r5
 800668e:	f04f 0000 	mov.w	r0, #0
 8006692:	f04f 0100 	mov.w	r1, #0
 8006696:	0159      	lsls	r1, r3, #5
 8006698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800669c:	0150      	lsls	r0, r2, #5
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4621      	mov	r1, r4
 80066a4:	1a51      	subs	r1, r2, r1
 80066a6:	6139      	str	r1, [r7, #16]
 80066a8:	4629      	mov	r1, r5
 80066aa:	eb63 0301 	sbc.w	r3, r3, r1
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066bc:	4659      	mov	r1, fp
 80066be:	018b      	lsls	r3, r1, #6
 80066c0:	4651      	mov	r1, sl
 80066c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066c6:	4651      	mov	r1, sl
 80066c8:	018a      	lsls	r2, r1, #6
 80066ca:	4651      	mov	r1, sl
 80066cc:	ebb2 0801 	subs.w	r8, r2, r1
 80066d0:	4659      	mov	r1, fp
 80066d2:	eb63 0901 	sbc.w	r9, r3, r1
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ea:	4690      	mov	r8, r2
 80066ec:	4699      	mov	r9, r3
 80066ee:	4623      	mov	r3, r4
 80066f0:	eb18 0303 	adds.w	r3, r8, r3
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	462b      	mov	r3, r5
 80066f8:	eb49 0303 	adc.w	r3, r9, r3
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800670a:	4629      	mov	r1, r5
 800670c:	024b      	lsls	r3, r1, #9
 800670e:	4621      	mov	r1, r4
 8006710:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006714:	4621      	mov	r1, r4
 8006716:	024a      	lsls	r2, r1, #9
 8006718:	4610      	mov	r0, r2
 800671a:	4619      	mov	r1, r3
 800671c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800671e:	2200      	movs	r2, #0
 8006720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006724:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006728:	f7f9 fdaa 	bl	8000280 <__aeabi_uldivmod>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4613      	mov	r3, r2
 8006732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006734:	e058      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006736:	4b38      	ldr	r3, [pc, #224]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x200>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	099b      	lsrs	r3, r3, #6
 800673c:	2200      	movs	r2, #0
 800673e:	4618      	mov	r0, r3
 8006740:	4611      	mov	r1, r2
 8006742:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006746:	623b      	str	r3, [r7, #32]
 8006748:	2300      	movs	r3, #0
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
 800674c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	f04f 0000 	mov.w	r0, #0
 8006758:	f04f 0100 	mov.w	r1, #0
 800675c:	0159      	lsls	r1, r3, #5
 800675e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006762:	0150      	lsls	r0, r2, #5
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4641      	mov	r1, r8
 800676a:	ebb2 0a01 	subs.w	sl, r2, r1
 800676e:	4649      	mov	r1, r9
 8006770:	eb63 0b01 	sbc.w	fp, r3, r1
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006780:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006784:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006788:	ebb2 040a 	subs.w	r4, r2, sl
 800678c:	eb63 050b 	sbc.w	r5, r3, fp
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	00eb      	lsls	r3, r5, #3
 800679a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800679e:	00e2      	lsls	r2, r4, #3
 80067a0:	4614      	mov	r4, r2
 80067a2:	461d      	mov	r5, r3
 80067a4:	4643      	mov	r3, r8
 80067a6:	18e3      	adds	r3, r4, r3
 80067a8:	603b      	str	r3, [r7, #0]
 80067aa:	464b      	mov	r3, r9
 80067ac:	eb45 0303 	adc.w	r3, r5, r3
 80067b0:	607b      	str	r3, [r7, #4]
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067be:	4629      	mov	r1, r5
 80067c0:	028b      	lsls	r3, r1, #10
 80067c2:	4621      	mov	r1, r4
 80067c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067c8:	4621      	mov	r1, r4
 80067ca:	028a      	lsls	r2, r1, #10
 80067cc:	4610      	mov	r0, r2
 80067ce:	4619      	mov	r1, r3
 80067d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d2:	2200      	movs	r2, #0
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	61fa      	str	r2, [r7, #28]
 80067d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067dc:	f7f9 fd50 	bl	8000280 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4613      	mov	r3, r2
 80067e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	3301      	adds	r3, #1
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80067f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006802:	e002      	b.n	800680a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006804:	4b05      	ldr	r3, [pc, #20]	@ (800681c <HAL_RCC_GetSysClockFreq+0x204>)
 8006806:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800680a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800680c:	4618      	mov	r0, r3
 800680e:	3750      	adds	r7, #80	@ 0x50
 8006810:	46bd      	mov	sp, r7
 8006812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006816:	bf00      	nop
 8006818:	40023800 	.word	0x40023800
 800681c:	00f42400 	.word	0x00f42400
 8006820:	007a1200 	.word	0x007a1200

08006824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006828:	4b03      	ldr	r3, [pc, #12]	@ (8006838 <HAL_RCC_GetHCLKFreq+0x14>)
 800682a:	681b      	ldr	r3, [r3, #0]
}
 800682c:	4618      	mov	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000030 	.word	0x20000030

0800683c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006840:	f7ff fff0 	bl	8006824 <HAL_RCC_GetHCLKFreq>
 8006844:	4602      	mov	r2, r0
 8006846:	4b05      	ldr	r3, [pc, #20]	@ (800685c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	0a9b      	lsrs	r3, r3, #10
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	4903      	ldr	r1, [pc, #12]	@ (8006860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006852:	5ccb      	ldrb	r3, [r1, r3]
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006858:	4618      	mov	r0, r3
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40023800 	.word	0x40023800
 8006860:	0800c450 	.word	0x0800c450

08006864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006868:	f7ff ffdc 	bl	8006824 <HAL_RCC_GetHCLKFreq>
 800686c:	4602      	mov	r2, r0
 800686e:	4b05      	ldr	r3, [pc, #20]	@ (8006884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	0b5b      	lsrs	r3, r3, #13
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	4903      	ldr	r1, [pc, #12]	@ (8006888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800687a:	5ccb      	ldrb	r3, [r1, r3]
 800687c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40023800 	.word	0x40023800
 8006888:	0800c450 	.word	0x0800c450

0800688c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	220f      	movs	r2, #15
 800689a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800689c:	4b12      	ldr	r3, [pc, #72]	@ (80068e8 <HAL_RCC_GetClockConfig+0x5c>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0203 	and.w	r2, r3, #3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068a8:	4b0f      	ldr	r3, [pc, #60]	@ (80068e8 <HAL_RCC_GetClockConfig+0x5c>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068b4:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <HAL_RCC_GetClockConfig+0x5c>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80068c0:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <HAL_RCC_GetClockConfig+0x5c>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068ce:	4b07      	ldr	r3, [pc, #28]	@ (80068ec <HAL_RCC_GetClockConfig+0x60>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0207 	and.w	r2, r3, #7
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40023800 	.word	0x40023800
 80068ec:	40023c00 	.word	0x40023c00

080068f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e07b      	b.n	80069fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d108      	bne.n	800691c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006912:	d009      	beq.n	8006928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	61da      	str	r2, [r3, #28]
 800691a:	e005      	b.n	8006928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fa fd3c 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800695e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ac:	ea42 0103 	orr.w	r1, r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	f003 0104 	and.w	r1, r3, #4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	f003 0210 	and.w	r2, r3, #16
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b08c      	sub	sp, #48	@ 0x30
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a10:	2301      	movs	r3, #1
 8006a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_SPI_TransmitReceive+0x26>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e198      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x358>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a30:	f7fe ffb2 	bl	8005998 <HAL_GetTick>
 8006a34:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a46:	887b      	ldrh	r3, [r7, #2]
 8006a48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d00f      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x70>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a58:	d107      	bne.n	8006a6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <HAL_SPI_TransmitReceive+0x68>
 8006a62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d003      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006a70:	e16d      	b.n	8006d4e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d005      	beq.n	8006a84 <HAL_SPI_TransmitReceive+0x82>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_SPI_TransmitReceive+0x82>
 8006a7e:	887b      	ldrh	r3, [r7, #2]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006a8a:	e160      	b.n	8006d4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d003      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2205      	movs	r2, #5
 8006a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	887a      	ldrh	r2, [r7, #2]
 8006ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	887a      	ldrh	r2, [r7, #2]
 8006ab6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	887a      	ldrh	r2, [r7, #2]
 8006ac2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	887a      	ldrh	r2, [r7, #2]
 8006ac8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	d007      	beq.n	8006af4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006afc:	d17c      	bne.n	8006bf8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <HAL_SPI_TransmitReceive+0x10a>
 8006b06:	8b7b      	ldrh	r3, [r7, #26]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d16a      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	881a      	ldrh	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b30:	e057      	b.n	8006be2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d11b      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x176>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d016      	beq.n	8006b78 <HAL_SPI_TransmitReceive+0x176>
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d113      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b54:	881a      	ldrh	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b60:	1c9a      	adds	r2, r3, #2
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d119      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x1b8>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d014      	beq.n	8006bba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	b292      	uxth	r2, r2
 8006b9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	1c9a      	adds	r2, r3, #2
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bba:	f7fe feed 	bl	8005998 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d80b      	bhi.n	8006be2 <HAL_SPI_TransmitReceive+0x1e0>
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d007      	beq.n	8006be2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006be0:	e0b5      	b.n	8006d4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1a2      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x130>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d19d      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x130>
 8006bf6:	e080      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_SPI_TransmitReceive+0x204>
 8006c00:	8b7b      	ldrh	r3, [r7, #26]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d16f      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	330c      	adds	r3, #12
 8006c10:	7812      	ldrb	r2, [r2, #0]
 8006c12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2c:	e05b      	b.n	8006ce6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d11c      	bne.n	8006c76 <HAL_SPI_TransmitReceive+0x274>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d017      	beq.n	8006c76 <HAL_SPI_TransmitReceive+0x274>
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d114      	bne.n	8006c76 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d119      	bne.n	8006cb8 <HAL_SPI_TransmitReceive+0x2b6>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d014      	beq.n	8006cb8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cb8:	f7fe fe6e 	bl	8005998 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d803      	bhi.n	8006cd0 <HAL_SPI_TransmitReceive+0x2ce>
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d102      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x2d4>
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006ce4:	e033      	b.n	8006d4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d19e      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x22c>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d199      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f8b8 	bl	8006e74 <SPI_EndRxTxTransaction>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d006      	beq.n	8006d18 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006d16:	e01a      	b.n	8006d4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d44:	e003      	b.n	8006d4e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006d56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3730      	adds	r7, #48	@ 0x30
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d74:	f7fe fe10 	bl	8005998 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4413      	add	r3, r2
 8006d82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d84:	f7fe fe08 	bl	8005998 <HAL_GetTick>
 8006d88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d8a:	4b39      	ldr	r3, [pc, #228]	@ (8006e70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	015b      	lsls	r3, r3, #5
 8006d90:	0d1b      	lsrs	r3, r3, #20
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	fb02 f303 	mul.w	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d9a:	e054      	b.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d050      	beq.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006da4:	f7fe fdf8 	bl	8005998 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d902      	bls.n	8006dba <SPI_WaitFlagStateUntilTimeout+0x56>
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d13d      	bne.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dd2:	d111      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ddc:	d004      	beq.n	8006de8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de6:	d107      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e00:	d10f      	bne.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e017      	b.n	8006e66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	bf0c      	ite	eq
 8006e56:	2301      	moveq	r3, #1
 8006e58:	2300      	movne	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d19b      	bne.n	8006d9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000030 	.word	0x20000030

08006e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2201      	movs	r2, #1
 8006e88:	2102      	movs	r1, #2
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff ff6a 	bl	8006d64 <SPI_WaitFlagStateUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e032      	b.n	8006f0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f14 <SPI_EndRxTxTransaction+0xa0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f18 <SPI_EndRxTxTransaction+0xa4>)
 8006eac:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb0:	0d5b      	lsrs	r3, r3, #21
 8006eb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006eb6:	fb02 f303 	mul.w	r3, r2, r3
 8006eba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ec4:	d112      	bne.n	8006eec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2180      	movs	r1, #128	@ 0x80
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff ff47 	bl	8006d64 <SPI_WaitFlagStateUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d016      	beq.n	8006f0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee0:	f043 0220 	orr.w	r2, r3, #32
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e00f      	b.n	8006f0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f02:	2b80      	cmp	r3, #128	@ 0x80
 8006f04:	d0f2      	beq.n	8006eec <SPI_EndRxTxTransaction+0x78>
 8006f06:	e000      	b.n	8006f0a <SPI_EndRxTxTransaction+0x96>
        break;
 8006f08:	bf00      	nop
  }

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000030 	.word	0x20000030
 8006f18:	165e9f81 	.word	0x165e9f81

08006f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e041      	b.n	8006fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f839 	bl	8006fba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 f9c0 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e04e      	b.n	8007086 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a23      	ldr	r2, [pc, #140]	@ (8007094 <HAL_TIM_Base_Start_IT+0xc4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d022      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007012:	d01d      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1f      	ldr	r2, [pc, #124]	@ (8007098 <HAL_TIM_Base_Start_IT+0xc8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d018      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1e      	ldr	r2, [pc, #120]	@ (800709c <HAL_TIM_Base_Start_IT+0xcc>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1c      	ldr	r2, [pc, #112]	@ (80070a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1b      	ldr	r2, [pc, #108]	@ (80070a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d009      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a19      	ldr	r2, [pc, #100]	@ (80070a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <HAL_TIM_Base_Start_IT+0xdc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d111      	bne.n	8007074 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b06      	cmp	r3, #6
 8007060:	d010      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0201 	orr.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007072:	e007      	b.n	8007084 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40010000 	.word	0x40010000
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40010400 	.word	0x40010400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40001800 	.word	0x40001800

080070b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d020      	beq.n	8007114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01b      	beq.n	8007114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0202 	mvn.w	r2, #2
 80070e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f8d2 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f8c4 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8d5 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d020      	beq.n	8007160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01b      	beq.n	8007160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0204 	mvn.w	r2, #4
 8007130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8ac 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 800714c:	e005      	b.n	800715a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f89e 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f8af 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d020      	beq.n	80071ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01b      	beq.n	80071ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0208 	mvn.w	r2, #8
 800717c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2204      	movs	r2, #4
 8007182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f886 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8007198:	e005      	b.n	80071a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f878 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f889 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d020      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01b      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0210 	mvn.w	r2, #16
 80071c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2208      	movs	r2, #8
 80071ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f860 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f852 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f863 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0201 	mvn.w	r2, #1
 8007214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7f9 fe6a 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00c      	beq.n	8007240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f906 	bl	800744c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00c      	beq.n	8007264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800725c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f834 	bl	80072cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f06f 0220 	mvn.w	r2, #32
 8007280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f8d8 	bl	8007438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a46      	ldr	r2, [pc, #280]	@ (800740c <TIM_Base_SetConfig+0x12c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a43      	ldr	r2, [pc, #268]	@ (8007410 <TIM_Base_SetConfig+0x130>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a42      	ldr	r2, [pc, #264]	@ (8007414 <TIM_Base_SetConfig+0x134>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a41      	ldr	r2, [pc, #260]	@ (8007418 <TIM_Base_SetConfig+0x138>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a40      	ldr	r2, [pc, #256]	@ (800741c <TIM_Base_SetConfig+0x13c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a35      	ldr	r2, [pc, #212]	@ (800740c <TIM_Base_SetConfig+0x12c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d02b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007340:	d027      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a32      	ldr	r2, [pc, #200]	@ (8007410 <TIM_Base_SetConfig+0x130>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d023      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a31      	ldr	r2, [pc, #196]	@ (8007414 <TIM_Base_SetConfig+0x134>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a30      	ldr	r2, [pc, #192]	@ (8007418 <TIM_Base_SetConfig+0x138>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a2f      	ldr	r2, [pc, #188]	@ (800741c <TIM_Base_SetConfig+0x13c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d017      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2e      	ldr	r2, [pc, #184]	@ (8007420 <TIM_Base_SetConfig+0x140>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a2d      	ldr	r2, [pc, #180]	@ (8007424 <TIM_Base_SetConfig+0x144>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a2c      	ldr	r2, [pc, #176]	@ (8007428 <TIM_Base_SetConfig+0x148>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2b      	ldr	r2, [pc, #172]	@ (800742c <TIM_Base_SetConfig+0x14c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a2a      	ldr	r2, [pc, #168]	@ (8007430 <TIM_Base_SetConfig+0x150>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a29      	ldr	r2, [pc, #164]	@ (8007434 <TIM_Base_SetConfig+0x154>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a10      	ldr	r2, [pc, #64]	@ (800740c <TIM_Base_SetConfig+0x12c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d003      	beq.n	80073d8 <TIM_Base_SetConfig+0xf8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a12      	ldr	r2, [pc, #72]	@ (800741c <TIM_Base_SetConfig+0x13c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d103      	bne.n	80073e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d105      	bne.n	80073fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f023 0201 	bic.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	611a      	str	r2, [r3, #16]
  }
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40010400 	.word	0x40010400
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800
 800742c:	40001800 	.word	0x40001800
 8007430:	40001c00 	.word	0x40001c00
 8007434:	40002000 	.word	0x40002000

08007438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e042      	b.n	80074f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fa f838 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2224      	movs	r2, #36	@ 0x24
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f973 	bl	8007790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695a      	ldr	r2, [r3, #20]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	@ 0x28
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b20      	cmp	r3, #32
 800751e:	d175      	bne.n	800760c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_UART_Transmit+0x2c>
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e06e      	b.n	800760e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2221      	movs	r2, #33	@ 0x21
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753e:	f7fe fa2b 	bl	8005998 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007558:	d108      	bne.n	800756c <HAL_UART_Transmit+0x6c>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e003      	b.n	8007574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007574:	e02e      	b.n	80075d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2200      	movs	r2, #0
 800757e:	2180      	movs	r1, #128	@ 0x80
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f848 	bl	8007616 <UART_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e03a      	b.n	800760e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10b      	bne.n	80075b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	3302      	adds	r3, #2
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	e007      	b.n	80075c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	781a      	ldrb	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	3301      	adds	r3, #1
 80075c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1cb      	bne.n	8007576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2200      	movs	r2, #0
 80075e6:	2140      	movs	r1, #64	@ 0x40
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f814 	bl	8007616 <UART_WaitOnFlagUntilTimeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e006      	b.n	800760e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	e000      	b.n	800760e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800760c:	2302      	movs	r3, #2
  }
}
 800760e:	4618      	mov	r0, r3
 8007610:	3720      	adds	r7, #32
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	603b      	str	r3, [r7, #0]
 8007622:	4613      	mov	r3, r2
 8007624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007626:	e03b      	b.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d037      	beq.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007630:	f7fe f9b2 	bl	8005998 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	6a3a      	ldr	r2, [r7, #32]
 800763c:	429a      	cmp	r2, r3
 800763e:	d302      	bcc.n	8007646 <UART_WaitOnFlagUntilTimeout+0x30>
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e03a      	b.n	80076c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d023      	beq.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b80      	cmp	r3, #128	@ 0x80
 800765c:	d020      	beq.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b40      	cmp	r3, #64	@ 0x40
 8007662:	d01d      	beq.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b08      	cmp	r3, #8
 8007670:	d116      	bne.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f81d 	bl	80076c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2208      	movs	r2, #8
 8007692:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e00f      	b.n	80076c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4013      	ands	r3, r2
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d0b4      	beq.n	8007628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b095      	sub	sp, #84	@ 0x54
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80076f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e5      	bne.n	80076d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3314      	adds	r3, #20
 800770a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	61fb      	str	r3, [r7, #28]
   return(result);
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f023 0301 	bic.w	r3, r3, #1
 800771a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3314      	adds	r3, #20
 8007722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e5      	bne.n	8007704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773c:	2b01      	cmp	r3, #1
 800773e:	d119      	bne.n	8007774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	330c      	adds	r3, #12
 8007746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0310 	bic.w	r3, r3, #16
 8007756:	647b      	str	r3, [r7, #68]	@ 0x44
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007760:	61ba      	str	r2, [r7, #24]
 8007762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6979      	ldr	r1, [r7, #20]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	613b      	str	r3, [r7, #16]
   return(result);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e5      	bne.n	8007740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007782:	bf00      	nop
 8007784:	3754      	adds	r7, #84	@ 0x54
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007794:	b0c0      	sub	sp, #256	@ 0x100
 8007796:	af00      	add	r7, sp, #0
 8007798:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	68d9      	ldr	r1, [r3, #12]
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	ea40 0301 	orr.w	r3, r0, r1
 80077b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077e8:	f021 010c 	bic.w	r1, r1, #12
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077f6:	430b      	orrs	r3, r1
 80077f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780a:	6999      	ldr	r1, [r3, #24]
 800780c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	ea40 0301 	orr.w	r3, r0, r1
 8007816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b8f      	ldr	r3, [pc, #572]	@ (8007a5c <UART_SetConfig+0x2cc>)
 8007820:	429a      	cmp	r2, r3
 8007822:	d005      	beq.n	8007830 <UART_SetConfig+0xa0>
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a60 <UART_SetConfig+0x2d0>)
 800782c:	429a      	cmp	r2, r3
 800782e:	d104      	bne.n	800783a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007830:	f7ff f818 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 8007834:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007838:	e003      	b.n	8007842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800783a:	f7fe ffff 	bl	800683c <HAL_RCC_GetPCLK1Freq>
 800783e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800784c:	f040 810c 	bne.w	8007a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007854:	2200      	movs	r2, #0
 8007856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800785a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800785e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	1891      	adds	r1, r2, r2
 8007868:	65b9      	str	r1, [r7, #88]	@ 0x58
 800786a:	415b      	adcs	r3, r3
 800786c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800786e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007872:	4621      	mov	r1, r4
 8007874:	eb12 0801 	adds.w	r8, r2, r1
 8007878:	4629      	mov	r1, r5
 800787a:	eb43 0901 	adc.w	r9, r3, r1
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800788a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800788e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007892:	4690      	mov	r8, r2
 8007894:	4699      	mov	r9, r3
 8007896:	4623      	mov	r3, r4
 8007898:	eb18 0303 	adds.w	r3, r8, r3
 800789c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078a0:	462b      	mov	r3, r5
 80078a2:	eb49 0303 	adc.w	r3, r9, r3
 80078a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80078ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80078be:	460b      	mov	r3, r1
 80078c0:	18db      	adds	r3, r3, r3
 80078c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80078c4:	4613      	mov	r3, r2
 80078c6:	eb42 0303 	adc.w	r3, r2, r3
 80078ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80078cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80078d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80078d4:	f7f8 fcd4 	bl	8000280 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4b61      	ldr	r3, [pc, #388]	@ (8007a64 <UART_SetConfig+0x2d4>)
 80078de:	fba3 2302 	umull	r2, r3, r3, r2
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	011c      	lsls	r4, r3, #4
 80078e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078f8:	4642      	mov	r2, r8
 80078fa:	464b      	mov	r3, r9
 80078fc:	1891      	adds	r1, r2, r2
 80078fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007900:	415b      	adcs	r3, r3
 8007902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007908:	4641      	mov	r1, r8
 800790a:	eb12 0a01 	adds.w	sl, r2, r1
 800790e:	4649      	mov	r1, r9
 8007910:	eb43 0b01 	adc.w	fp, r3, r1
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007928:	4692      	mov	sl, r2
 800792a:	469b      	mov	fp, r3
 800792c:	4643      	mov	r3, r8
 800792e:	eb1a 0303 	adds.w	r3, sl, r3
 8007932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007936:	464b      	mov	r3, r9
 8007938:	eb4b 0303 	adc.w	r3, fp, r3
 800793c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800794c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007954:	460b      	mov	r3, r1
 8007956:	18db      	adds	r3, r3, r3
 8007958:	643b      	str	r3, [r7, #64]	@ 0x40
 800795a:	4613      	mov	r3, r2
 800795c:	eb42 0303 	adc.w	r3, r2, r3
 8007960:	647b      	str	r3, [r7, #68]	@ 0x44
 8007962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800796a:	f7f8 fc89 	bl	8000280 <__aeabi_uldivmod>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4611      	mov	r1, r2
 8007974:	4b3b      	ldr	r3, [pc, #236]	@ (8007a64 <UART_SetConfig+0x2d4>)
 8007976:	fba3 2301 	umull	r2, r3, r3, r1
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	2264      	movs	r2, #100	@ 0x64
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	1acb      	subs	r3, r1, r3
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800798a:	4b36      	ldr	r3, [pc, #216]	@ (8007a64 <UART_SetConfig+0x2d4>)
 800798c:	fba3 2302 	umull	r2, r3, r3, r2
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007998:	441c      	add	r4, r3
 800799a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80079a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	1891      	adds	r1, r2, r2
 80079b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80079b4:	415b      	adcs	r3, r3
 80079b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80079bc:	4641      	mov	r1, r8
 80079be:	1851      	adds	r1, r2, r1
 80079c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80079c2:	4649      	mov	r1, r9
 80079c4:	414b      	adcs	r3, r1
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80079d4:	4659      	mov	r1, fp
 80079d6:	00cb      	lsls	r3, r1, #3
 80079d8:	4651      	mov	r1, sl
 80079da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079de:	4651      	mov	r1, sl
 80079e0:	00ca      	lsls	r2, r1, #3
 80079e2:	4610      	mov	r0, r2
 80079e4:	4619      	mov	r1, r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	4642      	mov	r2, r8
 80079ea:	189b      	adds	r3, r3, r2
 80079ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079f0:	464b      	mov	r3, r9
 80079f2:	460a      	mov	r2, r1
 80079f4:	eb42 0303 	adc.w	r3, r2, r3
 80079f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a10:	460b      	mov	r3, r1
 8007a12:	18db      	adds	r3, r3, r3
 8007a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a16:	4613      	mov	r3, r2
 8007a18:	eb42 0303 	adc.w	r3, r2, r3
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a26:	f7f8 fc2b 	bl	8000280 <__aeabi_uldivmod>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <UART_SetConfig+0x2d4>)
 8007a30:	fba3 1302 	umull	r1, r3, r3, r2
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	2164      	movs	r1, #100	@ 0x64
 8007a38:	fb01 f303 	mul.w	r3, r1, r3
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	3332      	adds	r3, #50	@ 0x32
 8007a42:	4a08      	ldr	r2, [pc, #32]	@ (8007a64 <UART_SetConfig+0x2d4>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	f003 0207 	and.w	r2, r3, #7
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4422      	add	r2, r4
 8007a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a58:	e106      	b.n	8007c68 <UART_SetConfig+0x4d8>
 8007a5a:	bf00      	nop
 8007a5c:	40011000 	.word	0x40011000
 8007a60:	40011400 	.word	0x40011400
 8007a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	1891      	adds	r1, r2, r2
 8007a80:	6239      	str	r1, [r7, #32]
 8007a82:	415b      	adcs	r3, r3
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	1854      	adds	r4, r2, r1
 8007a8e:	4649      	mov	r1, r9
 8007a90:	eb43 0501 	adc.w	r5, r3, r1
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	00eb      	lsls	r3, r5, #3
 8007a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aa2:	00e2      	lsls	r2, r4, #3
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	4643      	mov	r3, r8
 8007aaa:	18e3      	adds	r3, r4, r3
 8007aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	eb45 0303 	adc.w	r3, r5, r3
 8007ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	008b      	lsls	r3, r1, #2
 8007ada:	4621      	mov	r1, r4
 8007adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	008a      	lsls	r2, r1, #2
 8007ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ae8:	f7f8 fbca 	bl	8000280 <__aeabi_uldivmod>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4b60      	ldr	r3, [pc, #384]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007af2:	fba3 2302 	umull	r2, r3, r3, r2
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	011c      	lsls	r4, r3, #4
 8007afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	1891      	adds	r1, r2, r2
 8007b12:	61b9      	str	r1, [r7, #24]
 8007b14:	415b      	adcs	r3, r3
 8007b16:	61fb      	str	r3, [r7, #28]
 8007b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	1851      	adds	r1, r2, r1
 8007b20:	6139      	str	r1, [r7, #16]
 8007b22:	4649      	mov	r1, r9
 8007b24:	414b      	adcs	r3, r1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b34:	4659      	mov	r1, fp
 8007b36:	00cb      	lsls	r3, r1, #3
 8007b38:	4651      	mov	r1, sl
 8007b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b3e:	4651      	mov	r1, sl
 8007b40:	00ca      	lsls	r2, r1, #3
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	4642      	mov	r2, r8
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b50:	464b      	mov	r3, r9
 8007b52:	460a      	mov	r2, r1
 8007b54:	eb42 0303 	adc.w	r3, r2, r3
 8007b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b74:	4649      	mov	r1, r9
 8007b76:	008b      	lsls	r3, r1, #2
 8007b78:	4641      	mov	r1, r8
 8007b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7e:	4641      	mov	r1, r8
 8007b80:	008a      	lsls	r2, r1, #2
 8007b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b86:	f7f8 fb7b 	bl	8000280 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4b38      	ldr	r3, [pc, #224]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007b92:	fba3 2301 	umull	r2, r3, r3, r1
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	2264      	movs	r2, #100	@ 0x64
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	1acb      	subs	r3, r1, r3
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	3332      	adds	r3, #50	@ 0x32
 8007ba4:	4a33      	ldr	r2, [pc, #204]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bb0:	441c      	add	r4, r3
 8007bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bba:	677a      	str	r2, [r7, #116]	@ 0x74
 8007bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	1891      	adds	r1, r2, r2
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	415b      	adcs	r3, r3
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	1851      	adds	r1, r2, r1
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	414b      	adcs	r3, r1
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007be8:	4659      	mov	r1, fp
 8007bea:	00cb      	lsls	r3, r1, #3
 8007bec:	4651      	mov	r1, sl
 8007bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bf2:	4651      	mov	r1, sl
 8007bf4:	00ca      	lsls	r2, r1, #3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c02:	464b      	mov	r3, r9
 8007c04:	460a      	mov	r2, r1
 8007c06:	eb42 0303 	adc.w	r3, r2, r3
 8007c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c16:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c24:	4649      	mov	r1, r9
 8007c26:	008b      	lsls	r3, r1, #2
 8007c28:	4641      	mov	r1, r8
 8007c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c2e:	4641      	mov	r1, r8
 8007c30:	008a      	lsls	r2, r1, #2
 8007c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c36:	f7f8 fb23 	bl	8000280 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007c40:	fba3 1302 	umull	r1, r3, r3, r2
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	2164      	movs	r1, #100	@ 0x64
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	3332      	adds	r3, #50	@ 0x32
 8007c52:	4a08      	ldr	r2, [pc, #32]	@ (8007c74 <UART_SetConfig+0x4e4>)
 8007c54:	fba2 2303 	umull	r2, r3, r2, r3
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4422      	add	r2, r4
 8007c66:	609a      	str	r2, [r3, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c74:	51eb851f 	.word	0x51eb851f

08007c78 <__NVIC_SetPriority>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	db0a      	blt.n	8007ca2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	490c      	ldr	r1, [pc, #48]	@ (8007cc4 <__NVIC_SetPriority+0x4c>)
 8007c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c96:	0112      	lsls	r2, r2, #4
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ca0:	e00a      	b.n	8007cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	4908      	ldr	r1, [pc, #32]	@ (8007cc8 <__NVIC_SetPriority+0x50>)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	3b04      	subs	r3, #4
 8007cb0:	0112      	lsls	r2, r2, #4
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	761a      	strb	r2, [r3, #24]
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	e000e100 	.word	0xe000e100
 8007cc8:	e000ed00 	.word	0xe000ed00

08007ccc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007cd0:	4b05      	ldr	r3, [pc, #20]	@ (8007ce8 <SysTick_Handler+0x1c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007cd4:	f001 fd2a 	bl	800972c <xTaskGetSchedulerState>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d001      	beq.n	8007ce2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007cde:	f002 fb23 	bl	800a328 <xPortSysTickHandler>
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	e000e010 	.word	0xe000e010

08007cec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	f06f 0004 	mvn.w	r0, #4
 8007cf6:	f7ff ffbf 	bl	8007c78 <__NVIC_SetPriority>
#endif
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d06:	f3ef 8305 	mrs	r3, IPSR
 8007d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d12:	f06f 0305 	mvn.w	r3, #5
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	e00c      	b.n	8007d34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <osKernelInitialize+0x44>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d105      	bne.n	8007d2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d22:	4b08      	ldr	r3, [pc, #32]	@ (8007d44 <osKernelInitialize+0x44>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	607b      	str	r3, [r7, #4]
 8007d2c:	e002      	b.n	8007d34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d34:	687b      	ldr	r3, [r7, #4]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20000b10 	.word	0x20000b10

08007d48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d4e:	f3ef 8305 	mrs	r3, IPSR
 8007d52:	603b      	str	r3, [r7, #0]
  return(result);
 8007d54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d5a:	f06f 0305 	mvn.w	r3, #5
 8007d5e:	607b      	str	r3, [r7, #4]
 8007d60:	e010      	b.n	8007d84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d62:	4b0b      	ldr	r3, [pc, #44]	@ (8007d90 <osKernelStart+0x48>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d109      	bne.n	8007d7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d6a:	f7ff ffbf 	bl	8007cec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d6e:	4b08      	ldr	r3, [pc, #32]	@ (8007d90 <osKernelStart+0x48>)
 8007d70:	2202      	movs	r2, #2
 8007d72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d74:	f001 f876 	bl	8008e64 <vTaskStartScheduler>
      stat = osOK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	607b      	str	r3, [r7, #4]
 8007d7c:	e002      	b.n	8007d84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d84:	687b      	ldr	r3, [r7, #4]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000b10 	.word	0x20000b10

08007d94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08e      	sub	sp, #56	@ 0x38
 8007d98:	af04      	add	r7, sp, #16
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da4:	f3ef 8305 	mrs	r3, IPSR
 8007da8:	617b      	str	r3, [r7, #20]
  return(result);
 8007daa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d17e      	bne.n	8007eae <osThreadNew+0x11a>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d07b      	beq.n	8007eae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007db6:	2380      	movs	r3, #128	@ 0x80
 8007db8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007dba:	2318      	movs	r3, #24
 8007dbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d045      	beq.n	8007e5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <osThreadNew+0x48>
        name = attr->name;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <osThreadNew+0x6e>
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b38      	cmp	r3, #56	@ 0x38
 8007df4:	d805      	bhi.n	8007e02 <osThreadNew+0x6e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <osThreadNew+0x72>
        return (NULL);
 8007e02:	2300      	movs	r3, #0
 8007e04:	e054      	b.n	8007eb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	089b      	lsrs	r3, r3, #2
 8007e14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <osThreadNew+0xa8>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2ba7      	cmp	r3, #167	@ 0xa7
 8007e24:	d90a      	bls.n	8007e3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d006      	beq.n	8007e3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <osThreadNew+0xa8>
        mem = 1;
 8007e36:	2301      	movs	r3, #1
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	e010      	b.n	8007e5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10c      	bne.n	8007e5e <osThreadNew+0xca>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d108      	bne.n	8007e5e <osThreadNew+0xca>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <osThreadNew+0xca>
          mem = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
 8007e58:	e001      	b.n	8007e5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d110      	bne.n	8007e86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e6c:	9202      	str	r2, [sp, #8]
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fdfe 	bl	8008a7c <xTaskCreateStatic>
 8007e80:	4603      	mov	r3, r0
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	e013      	b.n	8007eae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d110      	bne.n	8007eae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	f107 0310 	add.w	r3, r7, #16
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 fe4c 	bl	8008b3c <xTaskCreate>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d001      	beq.n	8007eae <osThreadNew+0x11a>
            hTask = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007eae:	693b      	ldr	r3, [r7, #16]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3728      	adds	r7, #40	@ 0x28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4a07      	ldr	r2, [pc, #28]	@ (8007ee4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ec8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	4a06      	ldr	r2, [pc, #24]	@ (8007ee8 <vApplicationGetIdleTaskMemory+0x30>)
 8007ece:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2280      	movs	r2, #128	@ 0x80
 8007ed4:	601a      	str	r2, [r3, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000b14 	.word	0x20000b14
 8007ee8:	20000bbc 	.word	0x20000bbc

08007eec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a07      	ldr	r2, [pc, #28]	@ (8007f18 <vApplicationGetTimerTaskMemory+0x2c>)
 8007efc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4a06      	ldr	r2, [pc, #24]	@ (8007f1c <vApplicationGetTimerTaskMemory+0x30>)
 8007f02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f0a:	601a      	str	r2, [r3, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	20000dbc 	.word	0x20000dbc
 8007f1c:	20000e64 	.word	0x20000e64

08007f20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f103 0208 	add.w	r2, r3, #8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f04f 32ff 	mov.w	r2, #4294967295
 8007f38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f103 0208 	add.w	r2, r3, #8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f103 0208 	add.w	r2, r3, #8
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd8:	d103      	bne.n	8007fe2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e00c      	b.n	8007ffc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e002      	b.n	8007ff0 <vListInsert+0x2e>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d2f6      	bcs.n	8007fea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]
}
 8008028:	bf00      	nop
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6892      	ldr	r2, [r2, #8]
 800804a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6852      	ldr	r2, [r2, #4]
 8008054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d103      	bne.n	8008068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	1e5a      	subs	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10b      	bne.n	80080b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
 80080b2:	e7fd      	b.n	80080b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080b4:	f002 f8a8 	bl	800a208 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c0:	68f9      	ldr	r1, [r7, #12]
 80080c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080c4:	fb01 f303 	mul.w	r3, r1, r3
 80080c8:	441a      	add	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e4:	3b01      	subs	r3, #1
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080ea:	fb01 f303 	mul.w	r3, r1, r3
 80080ee:	441a      	add	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	22ff      	movs	r2, #255	@ 0xff
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	22ff      	movs	r2, #255	@ 0xff
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d114      	bne.n	8008134 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01a      	beq.n	8008148 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3310      	adds	r3, #16
 8008116:	4618      	mov	r0, r3
 8008118:	f001 f942 	bl	80093a0 <xTaskRemoveFromEventList>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d012      	beq.n	8008148 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <xQueueGenericReset+0xd0>)
 8008124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	e009      	b.n	8008148 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3310      	adds	r3, #16
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fef1 	bl	8007f20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3324      	adds	r3, #36	@ 0x24
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff feec 	bl	8007f20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008148:	f002 f890 	bl	800a26c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800814c:	2301      	movs	r3, #1
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08e      	sub	sp, #56	@ 0x38
 8008160:	af02      	add	r7, sp, #8
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10b      	bne.n	80081a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <xQueueGenericCreateStatic+0x56>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <xQueueGenericCreateStatic+0x5a>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e000      	b.n	80081b8 <xQueueGenericCreateStatic+0x5c>
 80081b6:	2300      	movs	r3, #0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10b      	bne.n	80081d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	623b      	str	r3, [r7, #32]
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	e7fd      	b.n	80081d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <xQueueGenericCreateStatic+0x84>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <xQueueGenericCreateStatic+0x88>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e000      	b.n	80081e6 <xQueueGenericCreateStatic+0x8a>
 80081e4:	2300      	movs	r3, #0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	61fb      	str	r3, [r7, #28]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008202:	2350      	movs	r3, #80	@ 0x50
 8008204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b50      	cmp	r3, #80	@ 0x50
 800820a:	d00b      	beq.n	8008224 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61bb      	str	r3, [r7, #24]
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	e7fd      	b.n	8008220 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008224:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00d      	beq.n	800824c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008238:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800823c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f805 	bl	8008256 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800824e:	4618      	mov	r0, r3
 8008250:	3730      	adds	r7, #48	@ 0x30
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e002      	b.n	8008278 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008284:	2101      	movs	r1, #1
 8008286:	69b8      	ldr	r0, [r7, #24]
 8008288:	f7ff fefe 	bl	8008088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	@ 0x38
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082aa:	2300      	movs	r3, #0
 80082ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80082b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <xQueueGenericSend+0x34>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <xQueueGenericSend+0x42>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <xQueueGenericSend+0x46>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <xQueueGenericSend+0x48>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <xQueueGenericSend+0x64>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	e7fd      	b.n	80082fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d103      	bne.n	800830e <xQueueGenericSend+0x72>
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830a:	2b01      	cmp	r3, #1
 800830c:	d101      	bne.n	8008312 <xQueueGenericSend+0x76>
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <xQueueGenericSend+0x78>
 8008312:	2300      	movs	r3, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10b      	bne.n	8008330 <xQueueGenericSend+0x94>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	623b      	str	r3, [r7, #32]
}
 800832a:	bf00      	nop
 800832c:	bf00      	nop
 800832e:	e7fd      	b.n	800832c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008330:	f001 f9fc 	bl	800972c <xTaskGetSchedulerState>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <xQueueGenericSend+0xa4>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <xQueueGenericSend+0xa8>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <xQueueGenericSend+0xaa>
 8008344:	2300      	movs	r3, #0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10b      	bne.n	8008362 <xQueueGenericSend+0xc6>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	61fb      	str	r3, [r7, #28]
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	e7fd      	b.n	800835e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008362:	f001 ff51 	bl	800a208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836e:	429a      	cmp	r2, r3
 8008370:	d302      	bcc.n	8008378 <xQueueGenericSend+0xdc>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d129      	bne.n	80083cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800837e:	f000 fa0f 	bl	80087a0 <prvCopyDataToQueue>
 8008382:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	d010      	beq.n	80083ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	3324      	adds	r3, #36	@ 0x24
 8008390:	4618      	mov	r0, r3
 8008392:	f001 f805 	bl	80093a0 <xTaskRemoveFromEventList>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d013      	beq.n	80083c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800839c:	4b3f      	ldr	r3, [pc, #252]	@ (800849c <xQueueGenericSend+0x200>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	e00a      	b.n	80083c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d007      	beq.n	80083c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083b4:	4b39      	ldr	r3, [pc, #228]	@ (800849c <xQueueGenericSend+0x200>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083c4:	f001 ff52 	bl	800a26c <vPortExitCritical>
				return pdPASS;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e063      	b.n	8008494 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083d2:	f001 ff4b 	bl	800a26c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e05c      	b.n	8008494 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d106      	bne.n	80083ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 f83f 	bl	8009468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ee:	f001 ff3d 	bl	800a26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083f2:	f000 fda7 	bl	8008f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083f6:	f001 ff07 	bl	800a208 <vPortEnterCritical>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008400:	b25b      	sxtb	r3, r3
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d103      	bne.n	8008410 <xQueueGenericSend+0x174>
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008416:	b25b      	sxtb	r3, r3
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841c:	d103      	bne.n	8008426 <xQueueGenericSend+0x18a>
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008426:	f001 ff21 	bl	800a26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800842a:	1d3a      	adds	r2, r7, #4
 800842c:	f107 0314 	add.w	r3, r7, #20
 8008430:	4611      	mov	r1, r2
 8008432:	4618      	mov	r0, r3
 8008434:	f001 f82e 	bl	8009494 <xTaskCheckForTimeOut>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d124      	bne.n	8008488 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800843e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008440:	f000 faa6 	bl	8008990 <prvIsQueueFull>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d018      	beq.n	800847c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	3310      	adds	r3, #16
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f000 ff52 	bl	80092fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800845a:	f000 fa31 	bl	80088c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800845e:	f000 fd7f 	bl	8008f60 <xTaskResumeAll>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	f47f af7c 	bne.w	8008362 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800846a:	4b0c      	ldr	r3, [pc, #48]	@ (800849c <xQueueGenericSend+0x200>)
 800846c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	e772      	b.n	8008362 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800847c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800847e:	f000 fa1f 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008482:	f000 fd6d 	bl	8008f60 <xTaskResumeAll>
 8008486:	e76c      	b.n	8008362 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800848a:	f000 fa19 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800848e:	f000 fd67 	bl	8008f60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008492:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008494:	4618      	mov	r0, r3
 8008496:	3738      	adds	r7, #56	@ 0x38
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b090      	sub	sp, #64	@ 0x40
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80084b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	e7fd      	b.n	80084cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d103      	bne.n	80084de <xQueueGenericSendFromISR+0x3e>
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <xQueueGenericSendFromISR+0x42>
 80084de:	2301      	movs	r3, #1
 80084e0:	e000      	b.n	80084e4 <xQueueGenericSendFromISR+0x44>
 80084e2:	2300      	movs	r3, #0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10b      	bne.n	8008500 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084fa:	bf00      	nop
 80084fc:	bf00      	nop
 80084fe:	e7fd      	b.n	80084fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b02      	cmp	r3, #2
 8008504:	d103      	bne.n	800850e <xQueueGenericSendFromISR+0x6e>
 8008506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <xQueueGenericSendFromISR+0x72>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <xQueueGenericSendFromISR+0x74>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10b      	bne.n	8008530 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	623b      	str	r3, [r7, #32]
}
 800852a:	bf00      	nop
 800852c:	bf00      	nop
 800852e:	e7fd      	b.n	800852c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008530:	f001 ff4a 	bl	800a3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008534:	f3ef 8211 	mrs	r2, BASEPRI
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	61fa      	str	r2, [r7, #28]
 800854a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800854c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800854e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008558:	429a      	cmp	r2, r3
 800855a:	d302      	bcc.n	8008562 <xQueueGenericSendFromISR+0xc2>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b02      	cmp	r3, #2
 8008560:	d12f      	bne.n	80085c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008568:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008578:	f000 f912 	bl	80087a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800857c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d112      	bne.n	80085ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	d016      	beq.n	80085bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800858e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008590:	3324      	adds	r3, #36	@ 0x24
 8008592:	4618      	mov	r0, r3
 8008594:	f000 ff04 	bl	80093a0 <xTaskRemoveFromEventList>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e007      	b.n	80085bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80085b0:	3301      	adds	r3, #1
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	b25a      	sxtb	r2, r3
 80085b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80085bc:	2301      	movs	r3, #1
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80085c0:	e001      	b.n	80085c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3740      	adds	r7, #64	@ 0x40
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08c      	sub	sp, #48	@ 0x30
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10b      	bne.n	800860e <xQueueReceive+0x32>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	623b      	str	r3, [r7, #32]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <xQueueReceive+0x40>
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <xQueueReceive+0x44>
 800861c:	2301      	movs	r3, #1
 800861e:	e000      	b.n	8008622 <xQueueReceive+0x46>
 8008620:	2300      	movs	r3, #0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10b      	bne.n	800863e <xQueueReceive+0x62>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	61fb      	str	r3, [r7, #28]
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800863e:	f001 f875 	bl	800972c <xTaskGetSchedulerState>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <xQueueReceive+0x72>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <xQueueReceive+0x76>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <xQueueReceive+0x78>
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10b      	bne.n	8008670 <xQueueReceive+0x94>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	61bb      	str	r3, [r7, #24]
}
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	e7fd      	b.n	800866c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008670:	f001 fdca 	bl	800a208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01f      	beq.n	80086c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008684:	f000 f8f6 	bl	8008874 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00f      	beq.n	80086b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869a:	3310      	adds	r3, #16
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fe7f 	bl	80093a0 <xTaskRemoveFromEventList>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086a8:	4b3c      	ldr	r3, [pc, #240]	@ (800879c <xQueueReceive+0x1c0>)
 80086aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086b8:	f001 fdd8 	bl	800a26c <vPortExitCritical>
				return pdPASS;
 80086bc:	2301      	movs	r3, #1
 80086be:	e069      	b.n	8008794 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086c6:	f001 fdd1 	bl	800a26c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e062      	b.n	8008794 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086d4:	f107 0310 	add.w	r3, r7, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fec5 	bl	8009468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086e2:	f001 fdc3 	bl	800a26c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086e6:	f000 fc2d 	bl	8008f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ea:	f001 fd8d 	bl	800a208 <vPortEnterCritical>
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086f4:	b25b      	sxtb	r3, r3
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fa:	d103      	bne.n	8008704 <xQueueReceive+0x128>
 80086fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800870a:	b25b      	sxtb	r3, r3
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d103      	bne.n	800871a <xQueueReceive+0x13e>
 8008712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800871a:	f001 fda7 	bl	800a26c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800871e:	1d3a      	adds	r2, r7, #4
 8008720:	f107 0310 	add.w	r3, r7, #16
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f000 feb4 	bl	8009494 <xTaskCheckForTimeOut>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d123      	bne.n	800877a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008734:	f000 f916 	bl	8008964 <prvIsQueueEmpty>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d017      	beq.n	800876e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	3324      	adds	r3, #36	@ 0x24
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fdd8 	bl	80092fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800874c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800874e:	f000 f8b7 	bl	80088c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008752:	f000 fc05 	bl	8008f60 <xTaskResumeAll>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d189      	bne.n	8008670 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800875c:	4b0f      	ldr	r3, [pc, #60]	@ (800879c <xQueueReceive+0x1c0>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	e780      	b.n	8008670 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800876e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008770:	f000 f8a6 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008774:	f000 fbf4 	bl	8008f60 <xTaskResumeAll>
 8008778:	e77a      	b.n	8008670 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800877a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877c:	f000 f8a0 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008780:	f000 fbee 	bl	8008f60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008786:	f000 f8ed 	bl	8008964 <prvIsQueueEmpty>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	f43f af6f 	beq.w	8008670 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008794:	4618      	mov	r0, r3
 8008796:	3730      	adds	r7, #48	@ 0x30
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10d      	bne.n	80087da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d14d      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 ffcc 	bl	8009768 <xTaskPriorityDisinherit>
 80087d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	609a      	str	r2, [r3, #8]
 80087d8:	e043      	b.n	8008862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d119      	bne.n	8008814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6858      	ldr	r0, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e8:	461a      	mov	r2, r3
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	f002 fc23 	bl	800b036 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f8:	441a      	add	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d32b      	bcc.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	e026      	b.n	8008862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68d8      	ldr	r0, [r3, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881c:	461a      	mov	r2, r3
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	f002 fc09 	bl	800b036 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	425b      	negs	r3, r3
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d207      	bcs.n	8008850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	425b      	negs	r3, r3
 800884a:	441a      	add	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d105      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3b01      	subs	r3, #1
 8008860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888e:	441a      	add	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	429a      	cmp	r2, r3
 800889e:	d303      	bcc.n	80088a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68d9      	ldr	r1, [r3, #12]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b0:	461a      	mov	r2, r3
 80088b2:	6838      	ldr	r0, [r7, #0]
 80088b4:	f002 fbbf 	bl	800b036 <memcpy>
	}
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088c8:	f001 fc9e 	bl	800a208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d4:	e011      	b.n	80088fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3324      	adds	r3, #36	@ 0x24
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fd5c 	bl	80093a0 <xTaskRemoveFromEventList>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088ee:	f000 fe35 	bl	800955c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dce9      	bgt.n	80088d6 <prvUnlockQueue+0x16>
 8008902:	e000      	b.n	8008906 <prvUnlockQueue+0x46>
					break;
 8008904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	22ff      	movs	r2, #255	@ 0xff
 800890a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800890e:	f001 fcad 	bl	800a26c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008912:	f001 fc79 	bl	800a208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800891c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800891e:	e011      	b.n	8008944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d012      	beq.n	800894e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3310      	adds	r3, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fd37 	bl	80093a0 <xTaskRemoveFromEventList>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008938:	f000 fe10 	bl	800955c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	3b01      	subs	r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dce9      	bgt.n	8008920 <prvUnlockQueue+0x60>
 800894c:	e000      	b.n	8008950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800894e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	22ff      	movs	r2, #255	@ 0xff
 8008954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008958:	f001 fc88 	bl	800a26c <vPortExitCritical>
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800896c:	f001 fc4c 	bl	800a208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e001      	b.n	8008982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008982:	f001 fc73 	bl	800a26c <vPortExitCritical>

	return xReturn;
 8008986:	68fb      	ldr	r3, [r7, #12]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008998:	f001 fc36 	bl	800a208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d102      	bne.n	80089ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e001      	b.n	80089b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b2:	f001 fc5b 	bl	800a26c <vPortExitCritical>

	return xReturn;
 80089b6:	68fb      	ldr	r3, [r7, #12]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e014      	b.n	80089fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008a10 <vQueueAddToRegistry+0x50>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089dc:	490c      	ldr	r1, [pc, #48]	@ (8008a10 <vQueueAddToRegistry+0x50>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008a10 <vQueueAddToRegistry+0x50>)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4413      	add	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089f2:	e006      	b.n	8008a02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b07      	cmp	r3, #7
 80089fe:	d9e7      	bls.n	80089d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20001264 	.word	0x20001264

08008a14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a24:	f001 fbf0 	bl	800a208 <vPortEnterCritical>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d103      	bne.n	8008a3e <vQueueWaitForMessageRestricted+0x2a>
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d103      	bne.n	8008a54 <vQueueWaitForMessageRestricted+0x40>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a54:	f001 fc0a 	bl	800a26c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3324      	adds	r3, #36	@ 0x24
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fc6d 	bl	8009348 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f7ff ff26 	bl	80088c0 <prvUnlockQueue>
	}
 8008a74:	bf00      	nop
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08e      	sub	sp, #56	@ 0x38
 8008a80:	af04      	add	r7, sp, #16
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10b      	bne.n	8008aa8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	623b      	str	r3, [r7, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ac6:	23a8      	movs	r3, #168	@ 0xa8
 8008ac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2ba8      	cmp	r3, #168	@ 0xa8
 8008ace:	d00b      	beq.n	8008ae8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	61bb      	str	r3, [r7, #24]
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ae8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01e      	beq.n	8008b2e <xTaskCreateStatic+0xb2>
 8008af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01b      	beq.n	8008b2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008afe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	f107 0314 	add.w	r3, r7, #20
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f851 	bl	8008bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b28:	f000 f8f6 	bl	8008d18 <prvAddNewTaskToReadyList>
 8008b2c:	e001      	b.n	8008b32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b32:	697b      	ldr	r3, [r7, #20]
	}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3728      	adds	r7, #40	@ 0x28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08c      	sub	sp, #48	@ 0x30
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f001 fc7b 	bl	800a44c <pvPortMalloc>
 8008b56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b5e:	20a8      	movs	r0, #168	@ 0xa8
 8008b60:	f001 fc74 	bl	800a44c <pvPortMalloc>
 8008b64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b72:	e005      	b.n	8008b80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b74:	6978      	ldr	r0, [r7, #20]
 8008b76:	f001 fd37 	bl	800a5e8 <vPortFree>
 8008b7a:	e001      	b.n	8008b80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d017      	beq.n	8008bb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	2300      	movs	r3, #0
 8008b92:	9303      	str	r3, [sp, #12]
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	68b9      	ldr	r1, [r7, #8]
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f80f 	bl	8008bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008baa:	69f8      	ldr	r0, [r7, #28]
 8008bac:	f000 f8b4 	bl	8008d18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	61bb      	str	r3, [r7, #24]
 8008bb4:	e002      	b.n	8008bbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
	}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	461a      	mov	r2, r3
 8008be0:	21a5      	movs	r1, #165	@ 0xa5
 8008be2:	f002 f909 	bl	800adf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	f023 0307 	bic.w	r3, r3, #7
 8008bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00b      	beq.n	8008c22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	617b      	str	r3, [r7, #20]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01f      	beq.n	8008c68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e012      	b.n	8008c54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	4413      	add	r3, r2
 8008c34:	7819      	ldrb	r1, [r3, #0]
 8008c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3334      	adds	r3, #52	@ 0x34
 8008c3e:	460a      	mov	r2, r1
 8008c40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	4413      	add	r3, r2
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d006      	beq.n	8008c5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	3301      	adds	r3, #1
 8008c52:	61fb      	str	r3, [r7, #28]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d9e9      	bls.n	8008c2e <prvInitialiseNewTask+0x66>
 8008c5a:	e000      	b.n	8008c5e <prvInitialiseNewTask+0x96>
			{
				break;
 8008c5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c66:	e003      	b.n	8008c70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	2b37      	cmp	r3, #55	@ 0x37
 8008c74:	d901      	bls.n	8008c7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c76:	2337      	movs	r3, #55	@ 0x37
 8008c78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	2200      	movs	r2, #0
 8008c8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff f965 	bl	8007f60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	3318      	adds	r3, #24
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff f960 	bl	8007f60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	3354      	adds	r3, #84	@ 0x54
 8008cca:	224c      	movs	r2, #76	@ 0x4c
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 f892 	bl	800adf8 <memset>
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8008d0c <prvInitialiseNewTask+0x144>)
 8008cd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8008d10 <prvInitialiseNewTask+0x148>)
 8008cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8008d14 <prvInitialiseNewTask+0x14c>)
 8008ce4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	69b8      	ldr	r0, [r7, #24]
 8008cec:	f001 f95a 	bl	8009fa4 <pxPortInitialiseStack>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d02:	bf00      	nop
 8008d04:	3720      	adds	r7, #32
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20005500 	.word	0x20005500
 8008d10:	20005568 	.word	0x20005568
 8008d14:	200055d0 	.word	0x200055d0

08008d18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d20:	f001 fa72 	bl	800a208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d24:	4b2d      	ldr	r3, [pc, #180]	@ (8008ddc <prvAddNewTaskToReadyList+0xc4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008ddc <prvAddNewTaskToReadyList+0xc4>)
 8008d2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d36:	4a2a      	ldr	r2, [pc, #168]	@ (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d3c:	4b27      	ldr	r3, [pc, #156]	@ (8008ddc <prvAddNewTaskToReadyList+0xc4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d110      	bne.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d44:	f000 fc2e 	bl	80095a4 <prvInitialiseTaskLists>
 8008d48:	e00d      	b.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d4a:	4b26      	ldr	r3, [pc, #152]	@ (8008de4 <prvAddNewTaskToReadyList+0xcc>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d52:	4b23      	ldr	r3, [pc, #140]	@ (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d802      	bhi.n	8008d66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d60:	4a1f      	ldr	r2, [pc, #124]	@ (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d66:	4b20      	ldr	r3, [pc, #128]	@ (8008de8 <prvAddNewTaskToReadyList+0xd0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8008de8 <prvAddNewTaskToReadyList+0xd0>)
 8008d6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d70:	4b1d      	ldr	r3, [pc, #116]	@ (8008de8 <prvAddNewTaskToReadyList+0xd0>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008dec <prvAddNewTaskToReadyList+0xd4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d903      	bls.n	8008d8c <prvAddNewTaskToReadyList+0x74>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	4a18      	ldr	r2, [pc, #96]	@ (8008dec <prvAddNewTaskToReadyList+0xd4>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4a15      	ldr	r2, [pc, #84]	@ (8008df0 <prvAddNewTaskToReadyList+0xd8>)
 8008d9a:	441a      	add	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7ff f8e9 	bl	8007f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008da8:	f001 fa60 	bl	800a26c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dac:	4b0d      	ldr	r3, [pc, #52]	@ (8008de4 <prvAddNewTaskToReadyList+0xcc>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00e      	beq.n	8008dd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008db4:	4b0a      	ldr	r3, [pc, #40]	@ (8008de0 <prvAddNewTaskToReadyList+0xc8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d207      	bcs.n	8008dd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008df4 <prvAddNewTaskToReadyList+0xdc>)
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20001778 	.word	0x20001778
 8008de0:	200012a4 	.word	0x200012a4
 8008de4:	20001784 	.word	0x20001784
 8008de8:	20001794 	.word	0x20001794
 8008dec:	20001780 	.word	0x20001780
 8008df0:	200012a8 	.word	0x200012a8
 8008df4:	e000ed04 	.word	0xe000ed04

08008df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d018      	beq.n	8008e3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e0a:	4b14      	ldr	r3, [pc, #80]	@ (8008e5c <vTaskDelay+0x64>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <vTaskDelay+0x32>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	e7fd      	b.n	8008e26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e2a:	f000 f88b 	bl	8008f44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e2e:	2100      	movs	r1, #0
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fd09 	bl	8009848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e36:	f000 f893 	bl	8008f60 <xTaskResumeAll>
 8008e3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d107      	bne.n	8008e52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e42:	4b07      	ldr	r3, [pc, #28]	@ (8008e60 <vTaskDelay+0x68>)
 8008e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200017a0 	.word	0x200017a0
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	@ 0x28
 8008e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e72:	463a      	mov	r2, r7
 8008e74:	1d39      	adds	r1, r7, #4
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff f81c 	bl	8007eb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	9202      	str	r2, [sp, #8]
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	460a      	mov	r2, r1
 8008e92:	4924      	ldr	r1, [pc, #144]	@ (8008f24 <vTaskStartScheduler+0xc0>)
 8008e94:	4824      	ldr	r0, [pc, #144]	@ (8008f28 <vTaskStartScheduler+0xc4>)
 8008e96:	f7ff fdf1 	bl	8008a7c <xTaskCreateStatic>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4a23      	ldr	r2, [pc, #140]	@ (8008f2c <vTaskStartScheduler+0xc8>)
 8008e9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ea0:	4b22      	ldr	r3, [pc, #136]	@ (8008f2c <vTaskStartScheduler+0xc8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e001      	b.n	8008eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d102      	bne.n	8008ebe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008eb8:	f000 fd1a 	bl	80098f0 <xTimerCreateTimerTask>
 8008ebc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d11b      	bne.n	8008efc <vTaskStartScheduler+0x98>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	613b      	str	r3, [r7, #16]
}
 8008ed6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ed8:	4b15      	ldr	r3, [pc, #84]	@ (8008f30 <vTaskStartScheduler+0xcc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3354      	adds	r3, #84	@ 0x54
 8008ede:	4a15      	ldr	r2, [pc, #84]	@ (8008f34 <vTaskStartScheduler+0xd0>)
 8008ee0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee2:	4b15      	ldr	r3, [pc, #84]	@ (8008f38 <vTaskStartScheduler+0xd4>)
 8008ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eea:	4b14      	ldr	r3, [pc, #80]	@ (8008f3c <vTaskStartScheduler+0xd8>)
 8008eec:	2201      	movs	r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ef0:	4b13      	ldr	r3, [pc, #76]	@ (8008f40 <vTaskStartScheduler+0xdc>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ef6:	f001 f8e3 	bl	800a0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008efa:	e00f      	b.n	8008f1c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d10b      	bne.n	8008f1c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	60fb      	str	r3, [r7, #12]
}
 8008f16:	bf00      	nop
 8008f18:	bf00      	nop
 8008f1a:	e7fd      	b.n	8008f18 <vTaskStartScheduler+0xb4>
}
 8008f1c:	bf00      	nop
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	0800c3e0 	.word	0x0800c3e0
 8008f28:	08009575 	.word	0x08009575
 8008f2c:	2000179c 	.word	0x2000179c
 8008f30:	200012a4 	.word	0x200012a4
 8008f34:	20000098 	.word	0x20000098
 8008f38:	20001798 	.word	0x20001798
 8008f3c:	20001784 	.word	0x20001784
 8008f40:	2000177c 	.word	0x2000177c

08008f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f48:	4b04      	ldr	r3, [pc, #16]	@ (8008f5c <vTaskSuspendAll+0x18>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	4a03      	ldr	r2, [pc, #12]	@ (8008f5c <vTaskSuspendAll+0x18>)
 8008f50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f52:	bf00      	nop
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	200017a0 	.word	0x200017a0

08008f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f6e:	4b42      	ldr	r3, [pc, #264]	@ (8009078 <xTaskResumeAll+0x118>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10b      	bne.n	8008f8e <xTaskResumeAll+0x2e>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	603b      	str	r3, [r7, #0]
}
 8008f88:	bf00      	nop
 8008f8a:	bf00      	nop
 8008f8c:	e7fd      	b.n	8008f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f8e:	f001 f93b 	bl	800a208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f92:	4b39      	ldr	r3, [pc, #228]	@ (8009078 <xTaskResumeAll+0x118>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	4a37      	ldr	r2, [pc, #220]	@ (8009078 <xTaskResumeAll+0x118>)
 8008f9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f9c:	4b36      	ldr	r3, [pc, #216]	@ (8009078 <xTaskResumeAll+0x118>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d162      	bne.n	800906a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fa4:	4b35      	ldr	r3, [pc, #212]	@ (800907c <xTaskResumeAll+0x11c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d05e      	beq.n	800906a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fac:	e02f      	b.n	800900e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fae:	4b34      	ldr	r3, [pc, #208]	@ (8009080 <xTaskResumeAll+0x120>)
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3318      	adds	r3, #24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff f83a 	bl	8008034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff f835 	bl	8008034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fce:	4b2d      	ldr	r3, [pc, #180]	@ (8009084 <xTaskResumeAll+0x124>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d903      	bls.n	8008fde <xTaskResumeAll+0x7e>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fda:	4a2a      	ldr	r2, [pc, #168]	@ (8009084 <xTaskResumeAll+0x124>)
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4a27      	ldr	r2, [pc, #156]	@ (8009088 <xTaskResumeAll+0x128>)
 8008fec:	441a      	add	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	f7fe ffc0 	bl	8007f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffe:	4b23      	ldr	r3, [pc, #140]	@ (800908c <xTaskResumeAll+0x12c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009004:	429a      	cmp	r2, r3
 8009006:	d302      	bcc.n	800900e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009008:	4b21      	ldr	r3, [pc, #132]	@ (8009090 <xTaskResumeAll+0x130>)
 800900a:	2201      	movs	r2, #1
 800900c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800900e:	4b1c      	ldr	r3, [pc, #112]	@ (8009080 <xTaskResumeAll+0x120>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1cb      	bne.n	8008fae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800901c:	f000 fb66 	bl	80096ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009020:	4b1c      	ldr	r3, [pc, #112]	@ (8009094 <xTaskResumeAll+0x134>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d010      	beq.n	800904e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800902c:	f000 f846 	bl	80090bc <xTaskIncrementTick>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009036:	4b16      	ldr	r3, [pc, #88]	@ (8009090 <xTaskResumeAll+0x130>)
 8009038:	2201      	movs	r2, #1
 800903a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3b01      	subs	r3, #1
 8009040:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1f1      	bne.n	800902c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009048:	4b12      	ldr	r3, [pc, #72]	@ (8009094 <xTaskResumeAll+0x134>)
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800904e:	4b10      	ldr	r3, [pc, #64]	@ (8009090 <xTaskResumeAll+0x130>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009056:	2301      	movs	r3, #1
 8009058:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800905a:	4b0f      	ldr	r3, [pc, #60]	@ (8009098 <xTaskResumeAll+0x138>)
 800905c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800906a:	f001 f8ff 	bl	800a26c <vPortExitCritical>

	return xAlreadyYielded;
 800906e:	68bb      	ldr	r3, [r7, #8]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200017a0 	.word	0x200017a0
 800907c:	20001778 	.word	0x20001778
 8009080:	20001738 	.word	0x20001738
 8009084:	20001780 	.word	0x20001780
 8009088:	200012a8 	.word	0x200012a8
 800908c:	200012a4 	.word	0x200012a4
 8009090:	2000178c 	.word	0x2000178c
 8009094:	20001788 	.word	0x20001788
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090a2:	4b05      	ldr	r3, [pc, #20]	@ (80090b8 <xTaskGetTickCount+0x1c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090a8:	687b      	ldr	r3, [r7, #4]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	2000177c 	.word	0x2000177c

080090bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c6:	4b4f      	ldr	r3, [pc, #316]	@ (8009204 <xTaskIncrementTick+0x148>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f040 8090 	bne.w	80091f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009208 <xTaskIncrementTick+0x14c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3301      	adds	r3, #1
 80090d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090d8:	4a4b      	ldr	r2, [pc, #300]	@ (8009208 <xTaskIncrementTick+0x14c>)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d121      	bne.n	8009128 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80090e4:	4b49      	ldr	r3, [pc, #292]	@ (800920c <xTaskIncrementTick+0x150>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <xTaskIncrementTick+0x4a>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	603b      	str	r3, [r7, #0]
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	e7fd      	b.n	8009102 <xTaskIncrementTick+0x46>
 8009106:	4b41      	ldr	r3, [pc, #260]	@ (800920c <xTaskIncrementTick+0x150>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	4b40      	ldr	r3, [pc, #256]	@ (8009210 <xTaskIncrementTick+0x154>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a3e      	ldr	r2, [pc, #248]	@ (800920c <xTaskIncrementTick+0x150>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	4a3e      	ldr	r2, [pc, #248]	@ (8009210 <xTaskIncrementTick+0x154>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	4b3e      	ldr	r3, [pc, #248]	@ (8009214 <xTaskIncrementTick+0x158>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3301      	adds	r3, #1
 8009120:	4a3c      	ldr	r2, [pc, #240]	@ (8009214 <xTaskIncrementTick+0x158>)
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	f000 fae2 	bl	80096ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009128:	4b3b      	ldr	r3, [pc, #236]	@ (8009218 <xTaskIncrementTick+0x15c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	429a      	cmp	r2, r3
 8009130:	d349      	bcc.n	80091c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009132:	4b36      	ldr	r3, [pc, #216]	@ (800920c <xTaskIncrementTick+0x150>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d104      	bne.n	8009146 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800913c:	4b36      	ldr	r3, [pc, #216]	@ (8009218 <xTaskIncrementTick+0x15c>)
 800913e:	f04f 32ff 	mov.w	r2, #4294967295
 8009142:	601a      	str	r2, [r3, #0]
					break;
 8009144:	e03f      	b.n	80091c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009146:	4b31      	ldr	r3, [pc, #196]	@ (800920c <xTaskIncrementTick+0x150>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d203      	bcs.n	8009166 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800915e:	4a2e      	ldr	r2, [pc, #184]	@ (8009218 <xTaskIncrementTick+0x15c>)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009164:	e02f      	b.n	80091c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe ff62 	bl	8008034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3318      	adds	r3, #24
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe ff59 	bl	8008034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009186:	4b25      	ldr	r3, [pc, #148]	@ (800921c <xTaskIncrementTick+0x160>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d903      	bls.n	8009196 <xTaskIncrementTick+0xda>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009192:	4a22      	ldr	r2, [pc, #136]	@ (800921c <xTaskIncrementTick+0x160>)
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009220 <xTaskIncrementTick+0x164>)
 80091a4:	441a      	add	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f7fe fee4 	bl	8007f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b6:	4b1b      	ldr	r3, [pc, #108]	@ (8009224 <xTaskIncrementTick+0x168>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091bc:	429a      	cmp	r2, r3
 80091be:	d3b8      	bcc.n	8009132 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80091c0:	2301      	movs	r3, #1
 80091c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c4:	e7b5      	b.n	8009132 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091c6:	4b17      	ldr	r3, [pc, #92]	@ (8009224 <xTaskIncrementTick+0x168>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091cc:	4914      	ldr	r1, [pc, #80]	@ (8009220 <xTaskIncrementTick+0x164>)
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d901      	bls.n	80091e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80091de:	2301      	movs	r3, #1
 80091e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091e2:	4b11      	ldr	r3, [pc, #68]	@ (8009228 <xTaskIncrementTick+0x16c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80091ea:	2301      	movs	r3, #1
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	e004      	b.n	80091fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091f0:	4b0e      	ldr	r3, [pc, #56]	@ (800922c <xTaskIncrementTick+0x170>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	4a0d      	ldr	r2, [pc, #52]	@ (800922c <xTaskIncrementTick+0x170>)
 80091f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091fa:	697b      	ldr	r3, [r7, #20]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	200017a0 	.word	0x200017a0
 8009208:	2000177c 	.word	0x2000177c
 800920c:	20001730 	.word	0x20001730
 8009210:	20001734 	.word	0x20001734
 8009214:	20001790 	.word	0x20001790
 8009218:	20001798 	.word	0x20001798
 800921c:	20001780 	.word	0x20001780
 8009220:	200012a8 	.word	0x200012a8
 8009224:	200012a4 	.word	0x200012a4
 8009228:	2000178c 	.word	0x2000178c
 800922c:	20001788 	.word	0x20001788

08009230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009236:	4b2b      	ldr	r3, [pc, #172]	@ (80092e4 <vTaskSwitchContext+0xb4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800923e:	4b2a      	ldr	r3, [pc, #168]	@ (80092e8 <vTaskSwitchContext+0xb8>)
 8009240:	2201      	movs	r2, #1
 8009242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009244:	e047      	b.n	80092d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009246:	4b28      	ldr	r3, [pc, #160]	@ (80092e8 <vTaskSwitchContext+0xb8>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800924c:	4b27      	ldr	r3, [pc, #156]	@ (80092ec <vTaskSwitchContext+0xbc>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e011      	b.n	8009278 <vTaskSwitchContext+0x48>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <vTaskSwitchContext+0x42>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	607b      	str	r3, [r7, #4]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <vTaskSwitchContext+0x3e>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3b01      	subs	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	491d      	ldr	r1, [pc, #116]	@ (80092f0 <vTaskSwitchContext+0xc0>)
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0e3      	beq.n	8009254 <vTaskSwitchContext+0x24>
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4a16      	ldr	r2, [pc, #88]	@ (80092f0 <vTaskSwitchContext+0xc0>)
 8009298:	4413      	add	r3, r2
 800929a:	60bb      	str	r3, [r7, #8]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	3308      	adds	r3, #8
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d104      	bne.n	80092bc <vTaskSwitchContext+0x8c>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	605a      	str	r2, [r3, #4]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	4a0c      	ldr	r2, [pc, #48]	@ (80092f4 <vTaskSwitchContext+0xc4>)
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	4a09      	ldr	r2, [pc, #36]	@ (80092ec <vTaskSwitchContext+0xbc>)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092cc:	4b09      	ldr	r3, [pc, #36]	@ (80092f4 <vTaskSwitchContext+0xc4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3354      	adds	r3, #84	@ 0x54
 80092d2:	4a09      	ldr	r2, [pc, #36]	@ (80092f8 <vTaskSwitchContext+0xc8>)
 80092d4:	6013      	str	r3, [r2, #0]
}
 80092d6:	bf00      	nop
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	200017a0 	.word	0x200017a0
 80092e8:	2000178c 	.word	0x2000178c
 80092ec:	20001780 	.word	0x20001780
 80092f0:	200012a8 	.word	0x200012a8
 80092f4:	200012a4 	.word	0x200012a4
 80092f8:	20000098 	.word	0x20000098

080092fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10b      	bne.n	8009324 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	60fb      	str	r3, [r7, #12]
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	e7fd      	b.n	8009320 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009324:	4b07      	ldr	r3, [pc, #28]	@ (8009344 <vTaskPlaceOnEventList+0x48>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3318      	adds	r3, #24
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7fe fe48 	bl	8007fc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009332:	2101      	movs	r1, #1
 8009334:	6838      	ldr	r0, [r7, #0]
 8009336:	f000 fa87 	bl	8009848 <prvAddCurrentTaskToDelayedList>
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	200012a4 	.word	0x200012a4

08009348 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10b      	bne.n	8009372 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	617b      	str	r3, [r7, #20]
}
 800936c:	bf00      	nop
 800936e:	bf00      	nop
 8009370:	e7fd      	b.n	800936e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009372:	4b0a      	ldr	r3, [pc, #40]	@ (800939c <vTaskPlaceOnEventListRestricted+0x54>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3318      	adds	r3, #24
 8009378:	4619      	mov	r1, r3
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7fe fdfd 	bl	8007f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009386:	f04f 33ff 	mov.w	r3, #4294967295
 800938a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	68b8      	ldr	r0, [r7, #8]
 8009390:	f000 fa5a 	bl	8009848 <prvAddCurrentTaskToDelayedList>
	}
 8009394:	bf00      	nop
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	200012a4 	.word	0x200012a4

080093a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10b      	bne.n	80093ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	3318      	adds	r3, #24
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe fe2e 	bl	8008034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009450 <xTaskRemoveFromEventList+0xb0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d11d      	bne.n	800941c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3304      	adds	r3, #4
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fe25 	bl	8008034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ee:	4b19      	ldr	r3, [pc, #100]	@ (8009454 <xTaskRemoveFromEventList+0xb4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d903      	bls.n	80093fe <xTaskRemoveFromEventList+0x5e>
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fa:	4a16      	ldr	r2, [pc, #88]	@ (8009454 <xTaskRemoveFromEventList+0xb4>)
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4a13      	ldr	r2, [pc, #76]	@ (8009458 <xTaskRemoveFromEventList+0xb8>)
 800940c:	441a      	add	r2, r3
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	3304      	adds	r3, #4
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7fe fdb0 	bl	8007f7a <vListInsertEnd>
 800941a:	e005      	b.n	8009428 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	3318      	adds	r3, #24
 8009420:	4619      	mov	r1, r3
 8009422:	480e      	ldr	r0, [pc, #56]	@ (800945c <xTaskRemoveFromEventList+0xbc>)
 8009424:	f7fe fda9 	bl	8007f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942c:	4b0c      	ldr	r3, [pc, #48]	@ (8009460 <xTaskRemoveFromEventList+0xc0>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009432:	429a      	cmp	r2, r3
 8009434:	d905      	bls.n	8009442 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009436:	2301      	movs	r3, #1
 8009438:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800943a:	4b0a      	ldr	r3, [pc, #40]	@ (8009464 <xTaskRemoveFromEventList+0xc4>)
 800943c:	2201      	movs	r2, #1
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	e001      	b.n	8009446 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009446:	697b      	ldr	r3, [r7, #20]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	200017a0 	.word	0x200017a0
 8009454:	20001780 	.word	0x20001780
 8009458:	200012a8 	.word	0x200012a8
 800945c:	20001738 	.word	0x20001738
 8009460:	200012a4 	.word	0x200012a4
 8009464:	2000178c 	.word	0x2000178c

08009468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009470:	4b06      	ldr	r3, [pc, #24]	@ (800948c <vTaskInternalSetTimeOutState+0x24>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009478:	4b05      	ldr	r3, [pc, #20]	@ (8009490 <vTaskInternalSetTimeOutState+0x28>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	605a      	str	r2, [r3, #4]
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20001790 	.word	0x20001790
 8009490:	2000177c 	.word	0x2000177c

08009494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10b      	bne.n	80094bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	613b      	str	r3, [r7, #16]
}
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
 80094ba:	e7fd      	b.n	80094b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10b      	bne.n	80094da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60fb      	str	r3, [r7, #12]
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	e7fd      	b.n	80094d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80094da:	f000 fe95 	bl	800a208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094de:	4b1d      	ldr	r3, [pc, #116]	@ (8009554 <xTaskCheckForTimeOut+0xc0>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d102      	bne.n	80094fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	61fb      	str	r3, [r7, #28]
 80094fc:	e023      	b.n	8009546 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	4b15      	ldr	r3, [pc, #84]	@ (8009558 <xTaskCheckForTimeOut+0xc4>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d007      	beq.n	800951a <xTaskCheckForTimeOut+0x86>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	429a      	cmp	r2, r3
 8009512:	d302      	bcc.n	800951a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	e015      	b.n	8009546 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	429a      	cmp	r2, r3
 8009522:	d20b      	bcs.n	800953c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff ff99 	bl	8009468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009536:	2300      	movs	r3, #0
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	e004      	b.n	8009546 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009542:	2301      	movs	r3, #1
 8009544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009546:	f000 fe91 	bl	800a26c <vPortExitCritical>

	return xReturn;
 800954a:	69fb      	ldr	r3, [r7, #28]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	2000177c 	.word	0x2000177c
 8009558:	20001790 	.word	0x20001790

0800955c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009560:	4b03      	ldr	r3, [pc, #12]	@ (8009570 <vTaskMissedYield+0x14>)
 8009562:	2201      	movs	r2, #1
 8009564:	601a      	str	r2, [r3, #0]
}
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	2000178c 	.word	0x2000178c

08009574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800957c:	f000 f852 	bl	8009624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009580:	4b06      	ldr	r3, [pc, #24]	@ (800959c <prvIdleTask+0x28>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d9f9      	bls.n	800957c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009588:	4b05      	ldr	r3, [pc, #20]	@ (80095a0 <prvIdleTask+0x2c>)
 800958a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009598:	e7f0      	b.n	800957c <prvIdleTask+0x8>
 800959a:	bf00      	nop
 800959c:	200012a8 	.word	0x200012a8
 80095a0:	e000ed04 	.word	0xe000ed04

080095a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095aa:	2300      	movs	r3, #0
 80095ac:	607b      	str	r3, [r7, #4]
 80095ae:	e00c      	b.n	80095ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4a12      	ldr	r2, [pc, #72]	@ (8009604 <prvInitialiseTaskLists+0x60>)
 80095bc:	4413      	add	r3, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fcae 	bl	8007f20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3301      	adds	r3, #1
 80095c8:	607b      	str	r3, [r7, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b37      	cmp	r3, #55	@ 0x37
 80095ce:	d9ef      	bls.n	80095b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095d0:	480d      	ldr	r0, [pc, #52]	@ (8009608 <prvInitialiseTaskLists+0x64>)
 80095d2:	f7fe fca5 	bl	8007f20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095d6:	480d      	ldr	r0, [pc, #52]	@ (800960c <prvInitialiseTaskLists+0x68>)
 80095d8:	f7fe fca2 	bl	8007f20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095dc:	480c      	ldr	r0, [pc, #48]	@ (8009610 <prvInitialiseTaskLists+0x6c>)
 80095de:	f7fe fc9f 	bl	8007f20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095e2:	480c      	ldr	r0, [pc, #48]	@ (8009614 <prvInitialiseTaskLists+0x70>)
 80095e4:	f7fe fc9c 	bl	8007f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095e8:	480b      	ldr	r0, [pc, #44]	@ (8009618 <prvInitialiseTaskLists+0x74>)
 80095ea:	f7fe fc99 	bl	8007f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095ee:	4b0b      	ldr	r3, [pc, #44]	@ (800961c <prvInitialiseTaskLists+0x78>)
 80095f0:	4a05      	ldr	r2, [pc, #20]	@ (8009608 <prvInitialiseTaskLists+0x64>)
 80095f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009620 <prvInitialiseTaskLists+0x7c>)
 80095f6:	4a05      	ldr	r2, [pc, #20]	@ (800960c <prvInitialiseTaskLists+0x68>)
 80095f8:	601a      	str	r2, [r3, #0]
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	200012a8 	.word	0x200012a8
 8009608:	20001708 	.word	0x20001708
 800960c:	2000171c 	.word	0x2000171c
 8009610:	20001738 	.word	0x20001738
 8009614:	2000174c 	.word	0x2000174c
 8009618:	20001764 	.word	0x20001764
 800961c:	20001730 	.word	0x20001730
 8009620:	20001734 	.word	0x20001734

08009624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800962a:	e019      	b.n	8009660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800962c:	f000 fdec 	bl	800a208 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009630:	4b10      	ldr	r3, [pc, #64]	@ (8009674 <prvCheckTasksWaitingTermination+0x50>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fcf9 	bl	8008034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009642:	4b0d      	ldr	r3, [pc, #52]	@ (8009678 <prvCheckTasksWaitingTermination+0x54>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3b01      	subs	r3, #1
 8009648:	4a0b      	ldr	r2, [pc, #44]	@ (8009678 <prvCheckTasksWaitingTermination+0x54>)
 800964a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800964c:	4b0b      	ldr	r3, [pc, #44]	@ (800967c <prvCheckTasksWaitingTermination+0x58>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3b01      	subs	r3, #1
 8009652:	4a0a      	ldr	r2, [pc, #40]	@ (800967c <prvCheckTasksWaitingTermination+0x58>)
 8009654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009656:	f000 fe09 	bl	800a26c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f810 	bl	8009680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009660:	4b06      	ldr	r3, [pc, #24]	@ (800967c <prvCheckTasksWaitingTermination+0x58>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e1      	bne.n	800962c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	2000174c 	.word	0x2000174c
 8009678:	20001778 	.word	0x20001778
 800967c:	20001760 	.word	0x20001760

08009680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3354      	adds	r3, #84	@ 0x54
 800968c:	4618      	mov	r0, r3
 800968e:	f001 fc01 	bl	800ae94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009698:	2b00      	cmp	r3, #0
 800969a:	d108      	bne.n	80096ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 ffa1 	bl	800a5e8 <vPortFree>
				vPortFree( pxTCB );
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 ff9e 	bl	800a5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096ac:	e019      	b.n	80096e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d103      	bne.n	80096c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 ff95 	bl	800a5e8 <vPortFree>
	}
 80096be:	e010      	b.n	80096e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d00b      	beq.n	80096e2 <prvDeleteTCB+0x62>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	60fb      	str	r3, [r7, #12]
}
 80096dc:	bf00      	nop
 80096de:	bf00      	nop
 80096e0:	e7fd      	b.n	80096de <prvDeleteTCB+0x5e>
	}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009724 <prvResetNextTaskUnblockTime+0x38>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <prvResetNextTaskUnblockTime+0x3c>)
 80096fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009704:	e008      	b.n	8009718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009706:	4b07      	ldr	r3, [pc, #28]	@ (8009724 <prvResetNextTaskUnblockTime+0x38>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	4a04      	ldr	r2, [pc, #16]	@ (8009728 <prvResetNextTaskUnblockTime+0x3c>)
 8009716:	6013      	str	r3, [r2, #0]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	20001730 	.word	0x20001730
 8009728:	20001798 	.word	0x20001798

0800972c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009732:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <xTaskGetSchedulerState+0x34>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800973a:	2301      	movs	r3, #1
 800973c:	607b      	str	r3, [r7, #4]
 800973e:	e008      	b.n	8009752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009740:	4b08      	ldr	r3, [pc, #32]	@ (8009764 <xTaskGetSchedulerState+0x38>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009748:	2302      	movs	r3, #2
 800974a:	607b      	str	r3, [r7, #4]
 800974c:	e001      	b.n	8009752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800974e:	2300      	movs	r3, #0
 8009750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009752:	687b      	ldr	r3, [r7, #4]
	}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20001784 	.word	0x20001784
 8009764:	200017a0 	.word	0x200017a0

08009768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d058      	beq.n	8009830 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800977e:	4b2f      	ldr	r3, [pc, #188]	@ (800983c <xTaskPriorityDisinherit+0xd4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	429a      	cmp	r2, r3
 8009786:	d00b      	beq.n	80097a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	60fb      	str	r3, [r7, #12]
}
 800979a:	bf00      	nop
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10b      	bne.n	80097c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	60bb      	str	r3, [r7, #8]
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	e7fd      	b.n	80097bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097c4:	1e5a      	subs	r2, r3, #1
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d02c      	beq.n	8009830 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d128      	bne.n	8009830 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fc26 	bl	8008034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009800:	4b0f      	ldr	r3, [pc, #60]	@ (8009840 <xTaskPriorityDisinherit+0xd8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d903      	bls.n	8009810 <xTaskPriorityDisinherit+0xa8>
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980c:	4a0c      	ldr	r2, [pc, #48]	@ (8009840 <xTaskPriorityDisinherit+0xd8>)
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4a09      	ldr	r2, [pc, #36]	@ (8009844 <xTaskPriorityDisinherit+0xdc>)
 800981e:	441a      	add	r2, r3
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	3304      	adds	r3, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f7fe fba7 	bl	8007f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009830:	697b      	ldr	r3, [r7, #20]
	}
 8009832:	4618      	mov	r0, r3
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200012a4 	.word	0x200012a4
 8009840:	20001780 	.word	0x20001780
 8009844:	200012a8 	.word	0x200012a8

08009848 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009852:	4b21      	ldr	r3, [pc, #132]	@ (80098d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009858:	4b20      	ldr	r3, [pc, #128]	@ (80098dc <prvAddCurrentTaskToDelayedList+0x94>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3304      	adds	r3, #4
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fbe8 	bl	8008034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986a:	d10a      	bne.n	8009882 <prvAddCurrentTaskToDelayedList+0x3a>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d007      	beq.n	8009882 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009872:	4b1a      	ldr	r3, [pc, #104]	@ (80098dc <prvAddCurrentTaskToDelayedList+0x94>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3304      	adds	r3, #4
 8009878:	4619      	mov	r1, r3
 800987a:	4819      	ldr	r0, [pc, #100]	@ (80098e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800987c:	f7fe fb7d 	bl	8007f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009880:	e026      	b.n	80098d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4413      	add	r3, r2
 8009888:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800988a:	4b14      	ldr	r3, [pc, #80]	@ (80098dc <prvAddCurrentTaskToDelayedList+0x94>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	429a      	cmp	r2, r3
 8009898:	d209      	bcs.n	80098ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800989a:	4b12      	ldr	r3, [pc, #72]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	4b0f      	ldr	r3, [pc, #60]	@ (80098dc <prvAddCurrentTaskToDelayedList+0x94>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7fe fb8b 	bl	8007fc2 <vListInsert>
}
 80098ac:	e010      	b.n	80098d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ae:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b0a      	ldr	r3, [pc, #40]	@ (80098dc <prvAddCurrentTaskToDelayedList+0x94>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4619      	mov	r1, r3
 80098ba:	4610      	mov	r0, r2
 80098bc:	f7fe fb81 	bl	8007fc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098c0:	4b0a      	ldr	r3, [pc, #40]	@ (80098ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d202      	bcs.n	80098d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098ca:	4a08      	ldr	r2, [pc, #32]	@ (80098ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	6013      	str	r3, [r2, #0]
}
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	2000177c 	.word	0x2000177c
 80098dc:	200012a4 	.word	0x200012a4
 80098e0:	20001764 	.word	0x20001764
 80098e4:	20001734 	.word	0x20001734
 80098e8:	20001730 	.word	0x20001730
 80098ec:	20001798 	.word	0x20001798

080098f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	@ 0x28
 80098f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098fa:	f000 fb13 	bl	8009f24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <xTimerCreateTimerTask+0x84>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d021      	beq.n	800994a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800990a:	2300      	movs	r3, #0
 800990c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800990e:	1d3a      	adds	r2, r7, #4
 8009910:	f107 0108 	add.w	r1, r7, #8
 8009914:	f107 030c 	add.w	r3, r7, #12
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fae7 	bl	8007eec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	9202      	str	r2, [sp, #8]
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	2302      	movs	r3, #2
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	2300      	movs	r3, #0
 800992e:	460a      	mov	r2, r1
 8009930:	4911      	ldr	r1, [pc, #68]	@ (8009978 <xTimerCreateTimerTask+0x88>)
 8009932:	4812      	ldr	r0, [pc, #72]	@ (800997c <xTimerCreateTimerTask+0x8c>)
 8009934:	f7ff f8a2 	bl	8008a7c <xTaskCreateStatic>
 8009938:	4603      	mov	r3, r0
 800993a:	4a11      	ldr	r2, [pc, #68]	@ (8009980 <xTimerCreateTimerTask+0x90>)
 800993c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800993e:	4b10      	ldr	r3, [pc, #64]	@ (8009980 <xTimerCreateTimerTask+0x90>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009946:	2301      	movs	r3, #1
 8009948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10b      	bne.n	8009968 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	613b      	str	r3, [r7, #16]
}
 8009962:	bf00      	nop
 8009964:	bf00      	nop
 8009966:	e7fd      	b.n	8009964 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009968:	697b      	ldr	r3, [r7, #20]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200017d4 	.word	0x200017d4
 8009978:	0800c3e8 	.word	0x0800c3e8
 800997c:	08009abd 	.word	0x08009abd
 8009980:	200017d8 	.word	0x200017d8

08009984 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08a      	sub	sp, #40	@ 0x28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009992:	2300      	movs	r3, #0
 8009994:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10b      	bne.n	80099b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	623b      	str	r3, [r7, #32]
}
 80099ae:	bf00      	nop
 80099b0:	bf00      	nop
 80099b2:	e7fd      	b.n	80099b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099b4:	4b19      	ldr	r3, [pc, #100]	@ (8009a1c <xTimerGenericCommand+0x98>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d02a      	beq.n	8009a12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b05      	cmp	r3, #5
 80099cc:	dc18      	bgt.n	8009a00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099ce:	f7ff fead 	bl	800972c <xTaskGetSchedulerState>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d109      	bne.n	80099ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099d8:	4b10      	ldr	r3, [pc, #64]	@ (8009a1c <xTimerGenericCommand+0x98>)
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	f107 0110 	add.w	r1, r7, #16
 80099e0:	2300      	movs	r3, #0
 80099e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099e4:	f7fe fc5a 	bl	800829c <xQueueGenericSend>
 80099e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80099ea:	e012      	b.n	8009a12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099ec:	4b0b      	ldr	r3, [pc, #44]	@ (8009a1c <xTimerGenericCommand+0x98>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	f107 0110 	add.w	r1, r7, #16
 80099f4:	2300      	movs	r3, #0
 80099f6:	2200      	movs	r2, #0
 80099f8:	f7fe fc50 	bl	800829c <xQueueGenericSend>
 80099fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80099fe:	e008      	b.n	8009a12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a00:	4b06      	ldr	r3, [pc, #24]	@ (8009a1c <xTimerGenericCommand+0x98>)
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	f107 0110 	add.w	r1, r7, #16
 8009a08:	2300      	movs	r3, #0
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	f7fe fd48 	bl	80084a0 <xQueueGenericSendFromISR>
 8009a10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3728      	adds	r7, #40	@ 0x28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	200017d4 	.word	0x200017d4

08009a20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af02      	add	r7, sp, #8
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2a:	4b23      	ldr	r3, [pc, #140]	@ (8009ab8 <prvProcessExpiredTimer+0x98>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fafb 	bl	8008034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d023      	beq.n	8009a94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	699a      	ldr	r2, [r3, #24]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	18d1      	adds	r1, r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	6978      	ldr	r0, [r7, #20]
 8009a5a:	f000 f8d5 	bl	8009c08 <prvInsertTimerInActiveList>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d020      	beq.n	8009aa6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a64:	2300      	movs	r3, #0
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6978      	ldr	r0, [r7, #20]
 8009a70:	f7ff ff88 	bl	8009984 <xTimerGenericCommand>
 8009a74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d114      	bne.n	8009aa6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	60fb      	str	r3, [r7, #12]
}
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
 8009a92:	e7fd      	b.n	8009a90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a9a:	f023 0301 	bic.w	r3, r3, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	6978      	ldr	r0, [r7, #20]
 8009aac:	4798      	blx	r3
}
 8009aae:	bf00      	nop
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200017cc 	.word	0x200017cc

08009abc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ac4:	f107 0308 	add.w	r3, r7, #8
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f859 	bl	8009b80 <prvGetNextExpireTime>
 8009ace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f805 	bl	8009ae4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ada:	f000 f8d7 	bl	8009c8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ade:	bf00      	nop
 8009ae0:	e7f0      	b.n	8009ac4 <prvTimerTask+0x8>
	...

08009ae4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009aee:	f7ff fa29 	bl	8008f44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009af2:	f107 0308 	add.w	r3, r7, #8
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f866 	bl	8009bc8 <prvSampleTimeNow>
 8009afc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d130      	bne.n	8009b66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10a      	bne.n	8009b20 <prvProcessTimerOrBlockTask+0x3c>
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d806      	bhi.n	8009b20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b12:	f7ff fa25 	bl	8008f60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b16:	68f9      	ldr	r1, [r7, #12]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff ff81 	bl	8009a20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b1e:	e024      	b.n	8009b6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d008      	beq.n	8009b38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b26:	4b13      	ldr	r3, [pc, #76]	@ (8009b74 <prvProcessTimerOrBlockTask+0x90>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <prvProcessTimerOrBlockTask+0x50>
 8009b30:	2301      	movs	r3, #1
 8009b32:	e000      	b.n	8009b36 <prvProcessTimerOrBlockTask+0x52>
 8009b34:	2300      	movs	r3, #0
 8009b36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b38:	4b0f      	ldr	r3, [pc, #60]	@ (8009b78 <prvProcessTimerOrBlockTask+0x94>)
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	4619      	mov	r1, r3
 8009b46:	f7fe ff65 	bl	8008a14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b4a:	f7ff fa09 	bl	8008f60 <xTaskResumeAll>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b54:	4b09      	ldr	r3, [pc, #36]	@ (8009b7c <prvProcessTimerOrBlockTask+0x98>)
 8009b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	f3bf 8f6f 	isb	sy
}
 8009b64:	e001      	b.n	8009b6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b66:	f7ff f9fb 	bl	8008f60 <xTaskResumeAll>
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200017d0 	.word	0x200017d0
 8009b78:	200017d4 	.word	0x200017d4
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b88:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc4 <prvGetNextExpireTime+0x44>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <prvGetNextExpireTime+0x16>
 8009b92:	2201      	movs	r2, #1
 8009b94:	e000      	b.n	8009b98 <prvGetNextExpireTime+0x18>
 8009b96:	2200      	movs	r2, #0
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d105      	bne.n	8009bb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ba4:	4b07      	ldr	r3, [pc, #28]	@ (8009bc4 <prvGetNextExpireTime+0x44>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	e001      	b.n	8009bb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200017cc 	.word	0x200017cc

08009bc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009bd0:	f7ff fa64 	bl	800909c <xTaskGetTickCount>
 8009bd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c04 <prvSampleTimeNow+0x3c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d205      	bcs.n	8009bec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009be0:	f000 f93a 	bl	8009e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	e002      	b.n	8009bf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009bf2:	4a04      	ldr	r2, [pc, #16]	@ (8009c04 <prvSampleTimeNow+0x3c>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200017dc 	.word	0x200017dc

08009c08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d812      	bhi.n	8009c54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	1ad2      	subs	r2, r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d302      	bcc.n	8009c42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	e01b      	b.n	8009c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c42:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <prvInsertTimerInActiveList+0x7c>)
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	f7fe f9b8 	bl	8007fc2 <vListInsert>
 8009c52:	e012      	b.n	8009c7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d206      	bcs.n	8009c6a <prvInsertTimerInActiveList+0x62>
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d302      	bcc.n	8009c6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c64:	2301      	movs	r3, #1
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e007      	b.n	8009c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c6a:	4b07      	ldr	r3, [pc, #28]	@ (8009c88 <prvInsertTimerInActiveList+0x80>)
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f7fe f9a4 	bl	8007fc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c7a:	697b      	ldr	r3, [r7, #20]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	200017d0 	.word	0x200017d0
 8009c88:	200017cc 	.word	0x200017cc

08009c8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	@ 0x38
 8009c90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c92:	e0ce      	b.n	8009e32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	da19      	bge.n	8009cce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c9a:	1d3b      	adds	r3, r7, #4
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10b      	bne.n	8009cbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	61fb      	str	r3, [r7, #28]
}
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
 8009cbc:	e7fd      	b.n	8009cba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cc4:	6850      	ldr	r0, [r2, #4]
 8009cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cc8:	6892      	ldr	r2, [r2, #8]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f2c0 80ae 	blt.w	8009e32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d004      	beq.n	8009cec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe f9a4 	bl	8008034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cec:	463b      	mov	r3, r7
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff ff6a 	bl	8009bc8 <prvSampleTimeNow>
 8009cf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b09      	cmp	r3, #9
 8009cfa:	f200 8097 	bhi.w	8009e2c <prvProcessReceivedCommands+0x1a0>
 8009cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009d04 <prvProcessReceivedCommands+0x78>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009d2d 	.word	0x08009d2d
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d2d 	.word	0x08009d2d
 8009d10:	08009da3 	.word	0x08009da3
 8009d14:	08009db7 	.word	0x08009db7
 8009d18:	08009e03 	.word	0x08009e03
 8009d1c:	08009d2d 	.word	0x08009d2d
 8009d20:	08009d2d 	.word	0x08009d2d
 8009d24:	08009da3 	.word	0x08009da3
 8009d28:	08009db7 	.word	0x08009db7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d32:	f043 0301 	orr.w	r3, r3, #1
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	18d1      	adds	r1, r2, r3
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d4c:	f7ff ff5c 	bl	8009c08 <prvInsertTimerInActiveList>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d06c      	beq.n	8009e30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d64:	f003 0304 	and.w	r3, r3, #4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d061      	beq.n	8009e30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	441a      	add	r2, r3
 8009d74:	2300      	movs	r3, #0
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d7e:	f7ff fe01 	bl	8009984 <xTimerGenericCommand>
 8009d82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d152      	bne.n	8009e30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	61bb      	str	r3, [r7, #24]
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	e7fd      	b.n	8009d9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009da8:	f023 0301 	bic.w	r3, r3, #1
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009db4:	e03d      	b.n	8009e32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dbc:	f043 0301 	orr.w	r3, r3, #1
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10b      	bne.n	8009dee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	617b      	str	r3, [r7, #20]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df4:	18d1      	adds	r1, r2, r3
 8009df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dfc:	f7ff ff04 	bl	8009c08 <prvInsertTimerInActiveList>
					break;
 8009e00:	e017      	b.n	8009e32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d103      	bne.n	8009e18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009e10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e12:	f000 fbe9 	bl	800a5e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e16:	e00c      	b.n	8009e32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e1e:	f023 0301 	bic.w	r3, r3, #1
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e2a:	e002      	b.n	8009e32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009e2c:	bf00      	nop
 8009e2e:	e000      	b.n	8009e32 <prvProcessReceivedCommands+0x1a6>
					break;
 8009e30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e32:	4b08      	ldr	r3, [pc, #32]	@ (8009e54 <prvProcessReceivedCommands+0x1c8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	1d39      	adds	r1, r7, #4
 8009e38:	2200      	movs	r2, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fbce 	bl	80085dc <xQueueReceive>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f47f af26 	bne.w	8009c94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	3730      	adds	r7, #48	@ 0x30
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	200017d4 	.word	0x200017d4

08009e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e5e:	e049      	b.n	8009ef4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e60:	4b2e      	ldr	r3, [pc, #184]	@ (8009f1c <prvSwitchTimerLists+0xc4>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8009f1c <prvSwitchTimerLists+0xc4>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe f8db 	bl	8008034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d02f      	beq.n	8009ef4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d90e      	bls.n	8009ec4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8009f1c <prvSwitchTimerLists+0xc4>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	f7fe f880 	bl	8007fc2 <vListInsert>
 8009ec2:	e017      	b.n	8009ef4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7ff fd58 	bl	8009984 <xTimerGenericCommand>
 8009ed4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	603b      	str	r3, [r7, #0]
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ef4:	4b09      	ldr	r3, [pc, #36]	@ (8009f1c <prvSwitchTimerLists+0xc4>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1b0      	bne.n	8009e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009efe:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <prvSwitchTimerLists+0xc4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f04:	4b06      	ldr	r3, [pc, #24]	@ (8009f20 <prvSwitchTimerLists+0xc8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a04      	ldr	r2, [pc, #16]	@ (8009f1c <prvSwitchTimerLists+0xc4>)
 8009f0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f0c:	4a04      	ldr	r2, [pc, #16]	@ (8009f20 <prvSwitchTimerLists+0xc8>)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	6013      	str	r3, [r2, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200017cc 	.word	0x200017cc
 8009f20:	200017d0 	.word	0x200017d0

08009f24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f2a:	f000 f96d 	bl	800a208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f2e:	4b15      	ldr	r3, [pc, #84]	@ (8009f84 <prvCheckForValidListAndQueue+0x60>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d120      	bne.n	8009f78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f36:	4814      	ldr	r0, [pc, #80]	@ (8009f88 <prvCheckForValidListAndQueue+0x64>)
 8009f38:	f7fd fff2 	bl	8007f20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f3c:	4813      	ldr	r0, [pc, #76]	@ (8009f8c <prvCheckForValidListAndQueue+0x68>)
 8009f3e:	f7fd ffef 	bl	8007f20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f42:	4b13      	ldr	r3, [pc, #76]	@ (8009f90 <prvCheckForValidListAndQueue+0x6c>)
 8009f44:	4a10      	ldr	r2, [pc, #64]	@ (8009f88 <prvCheckForValidListAndQueue+0x64>)
 8009f46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f48:	4b12      	ldr	r3, [pc, #72]	@ (8009f94 <prvCheckForValidListAndQueue+0x70>)
 8009f4a:	4a10      	ldr	r2, [pc, #64]	@ (8009f8c <prvCheckForValidListAndQueue+0x68>)
 8009f4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f4e:	2300      	movs	r3, #0
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	4b11      	ldr	r3, [pc, #68]	@ (8009f98 <prvCheckForValidListAndQueue+0x74>)
 8009f54:	4a11      	ldr	r2, [pc, #68]	@ (8009f9c <prvCheckForValidListAndQueue+0x78>)
 8009f56:	2110      	movs	r1, #16
 8009f58:	200a      	movs	r0, #10
 8009f5a:	f7fe f8ff 	bl	800815c <xQueueGenericCreateStatic>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	4a08      	ldr	r2, [pc, #32]	@ (8009f84 <prvCheckForValidListAndQueue+0x60>)
 8009f62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f64:	4b07      	ldr	r3, [pc, #28]	@ (8009f84 <prvCheckForValidListAndQueue+0x60>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f6c:	4b05      	ldr	r3, [pc, #20]	@ (8009f84 <prvCheckForValidListAndQueue+0x60>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	490b      	ldr	r1, [pc, #44]	@ (8009fa0 <prvCheckForValidListAndQueue+0x7c>)
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fd24 	bl	80089c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f78:	f000 f978 	bl	800a26c <vPortExitCritical>
}
 8009f7c:	bf00      	nop
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	200017d4 	.word	0x200017d4
 8009f88:	200017a4 	.word	0x200017a4
 8009f8c:	200017b8 	.word	0x200017b8
 8009f90:	200017cc 	.word	0x200017cc
 8009f94:	200017d0 	.word	0x200017d0
 8009f98:	20001880 	.word	0x20001880
 8009f9c:	200017e0 	.word	0x200017e0
 8009fa0:	0800c3f0 	.word	0x0800c3f0

08009fa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3b04      	subs	r3, #4
 8009fb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3b04      	subs	r3, #4
 8009fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f023 0201 	bic.w	r2, r3, #1
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3b04      	subs	r3, #4
 8009fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fd4:	4a0c      	ldr	r2, [pc, #48]	@ (800a008 <pxPortInitialiseStack+0x64>)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3b14      	subs	r3, #20
 8009fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3b04      	subs	r3, #4
 8009fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f06f 0202 	mvn.w	r2, #2
 8009ff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3b20      	subs	r3, #32
 8009ff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	0800a00d 	.word	0x0800a00d

0800a00c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a016:	4b13      	ldr	r3, [pc, #76]	@ (800a064 <prvTaskExitError+0x58>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d00b      	beq.n	800a038 <prvTaskExitError+0x2c>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	60fb      	str	r3, [r7, #12]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <prvTaskExitError+0x28>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	60bb      	str	r3, [r7, #8]
}
 800a04a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a04c:	bf00      	nop
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0fc      	beq.n	800a04e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	20000088 	.word	0x20000088
	...

0800a070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a070:	4b07      	ldr	r3, [pc, #28]	@ (800a090 <pxCurrentTCBConst2>)
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	6808      	ldr	r0, [r1, #0]
 800a076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07a:	f380 8809 	msr	PSP, r0
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f380 8811 	msr	BASEPRI, r0
 800a08a:	4770      	bx	lr
 800a08c:	f3af 8000 	nop.w

0800a090 <pxCurrentTCBConst2>:
 800a090:	200012a4 	.word	0x200012a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop

0800a098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a098:	4808      	ldr	r0, [pc, #32]	@ (800a0bc <prvPortStartFirstTask+0x24>)
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	6800      	ldr	r0, [r0, #0]
 800a09e:	f380 8808 	msr	MSP, r0
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	f380 8814 	msr	CONTROL, r0
 800a0aa:	b662      	cpsie	i
 800a0ac:	b661      	cpsie	f
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	df00      	svc	0
 800a0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ba:	bf00      	nop
 800a0bc:	e000ed08 	.word	0xe000ed08

0800a0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0c6:	4b47      	ldr	r3, [pc, #284]	@ (800a1e4 <xPortStartScheduler+0x124>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a47      	ldr	r2, [pc, #284]	@ (800a1e8 <xPortStartScheduler+0x128>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10b      	bne.n	800a0e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	613b      	str	r3, [r7, #16]
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e4 <xPortStartScheduler+0x124>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a1ec <xPortStartScheduler+0x12c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d10b      	bne.n	800a10a <xPortStartScheduler+0x4a>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60fb      	str	r3, [r7, #12]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a10a:	4b39      	ldr	r3, [pc, #228]	@ (800a1f0 <xPortStartScheduler+0x130>)
 800a10c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	22ff      	movs	r2, #255	@ 0xff
 800a11a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	4b31      	ldr	r3, [pc, #196]	@ (800a1f4 <xPortStartScheduler+0x134>)
 800a130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a132:	4b31      	ldr	r3, [pc, #196]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a134:	2207      	movs	r2, #7
 800a136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a138:	e009      	b.n	800a14e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a13a:	4b2f      	ldr	r3, [pc, #188]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3b01      	subs	r3, #1
 800a140:	4a2d      	ldr	r2, [pc, #180]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14e:	78fb      	ldrb	r3, [r7, #3]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a156:	2b80      	cmp	r3, #128	@ 0x80
 800a158:	d0ef      	beq.n	800a13a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a15a:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f1c3 0307 	rsb	r3, r3, #7
 800a162:	2b04      	cmp	r3, #4
 800a164:	d00b      	beq.n	800a17e <xPortStartScheduler+0xbe>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a17e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a188:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a190:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <xPortStartScheduler+0x138>)
 800a192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a19c:	4b17      	ldr	r3, [pc, #92]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a16      	ldr	r2, [pc, #88]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a8:	4b14      	ldr	r3, [pc, #80]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a13      	ldr	r2, [pc, #76]	@ (800a1fc <xPortStartScheduler+0x13c>)
 800a1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a1b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1b4:	f000 f8da 	bl	800a36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1b8:	4b11      	ldr	r3, [pc, #68]	@ (800a200 <xPortStartScheduler+0x140>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1be:	f000 f8f9 	bl	800a3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1c2:	4b10      	ldr	r3, [pc, #64]	@ (800a204 <xPortStartScheduler+0x144>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a204 <xPortStartScheduler+0x144>)
 800a1c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a1cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1ce:	f7ff ff63 	bl	800a098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1d2:	f7ff f82d 	bl	8009230 <vTaskSwitchContext>
	prvTaskExitError();
 800a1d6:	f7ff ff19 	bl	800a00c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed00 	.word	0xe000ed00
 800a1e8:	410fc271 	.word	0x410fc271
 800a1ec:	410fc270 	.word	0x410fc270
 800a1f0:	e000e400 	.word	0xe000e400
 800a1f4:	200018d0 	.word	0x200018d0
 800a1f8:	200018d4 	.word	0x200018d4
 800a1fc:	e000ed20 	.word	0xe000ed20
 800a200:	20000088 	.word	0x20000088
 800a204:	e000ef34 	.word	0xe000ef34

0800a208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	607b      	str	r3, [r7, #4]
}
 800a220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a222:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	4a0e      	ldr	r2, [pc, #56]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a22a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a22c:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <vPortEnterCritical+0x5c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d110      	bne.n	800a256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a234:	4b0c      	ldr	r3, [pc, #48]	@ (800a268 <vPortEnterCritical+0x60>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00b      	beq.n	800a256 <vPortEnterCritical+0x4e>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	603b      	str	r3, [r7, #0]
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	e7fd      	b.n	800a252 <vPortEnterCritical+0x4a>
	}
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000088 	.word	0x20000088
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a272:	4b12      	ldr	r3, [pc, #72]	@ (800a2bc <vPortExitCritical+0x50>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <vPortExitCritical+0x26>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	607b      	str	r3, [r7, #4]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vPortExitCritical+0x50>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	4a08      	ldr	r2, [pc, #32]	@ (800a2bc <vPortExitCritical+0x50>)
 800a29a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a29c:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <vPortExitCritical+0x50>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <vPortExitCritical+0x44>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	20000088 	.word	0x20000088

0800a2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2c0:	f3ef 8009 	mrs	r0, PSP
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4b15      	ldr	r3, [pc, #84]	@ (800a320 <pxCurrentTCBConst>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	f01e 0f10 	tst.w	lr, #16
 800a2d0:	bf08      	it	eq
 800a2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	6010      	str	r0, [r2, #0]
 800a2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a2e4:	f380 8811 	msr	BASEPRI, r0
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f7fe ff9e 	bl	8009230 <vTaskSwitchContext>
 800a2f4:	f04f 0000 	mov.w	r0, #0
 800a2f8:	f380 8811 	msr	BASEPRI, r0
 800a2fc:	bc09      	pop	{r0, r3}
 800a2fe:	6819      	ldr	r1, [r3, #0]
 800a300:	6808      	ldr	r0, [r1, #0]
 800a302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a306:	f01e 0f10 	tst.w	lr, #16
 800a30a:	bf08      	it	eq
 800a30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a310:	f380 8809 	msr	PSP, r0
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w

0800a320 <pxCurrentTCBConst>:
 800a320:	200012a4 	.word	0x200012a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a342:	f7fe febb 	bl	80090bc <xTaskIncrementTick>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a34c:	4b06      	ldr	r3, [pc, #24]	@ (800a368 <xPortSysTickHandler+0x40>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	2300      	movs	r3, #0
 800a356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	f383 8811 	msr	BASEPRI, r3
}
 800a35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a370:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a376:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <vPortSetupTimerInterrupt+0x38>)
 800a378:	2200      	movs	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <vPortSetupTimerInterrupt+0x3c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0a      	ldr	r2, [pc, #40]	@ (800a3ac <vPortSetupTimerInterrupt+0x40>)
 800a382:	fba2 2303 	umull	r2, r3, r2, r3
 800a386:	099b      	lsrs	r3, r3, #6
 800a388:	4a09      	ldr	r2, [pc, #36]	@ (800a3b0 <vPortSetupTimerInterrupt+0x44>)
 800a38a:	3b01      	subs	r3, #1
 800a38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a38e:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a390:	2207      	movs	r2, #7
 800a392:	601a      	str	r2, [r3, #0]
}
 800a394:	bf00      	nop
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	e000e010 	.word	0xe000e010
 800a3a4:	e000e018 	.word	0xe000e018
 800a3a8:	20000030 	.word	0x20000030
 800a3ac:	10624dd3 	.word	0x10624dd3
 800a3b0:	e000e014 	.word	0xe000e014

0800a3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a3c4 <vPortEnableVFP+0x10>
 800a3b8:	6801      	ldr	r1, [r0, #0]
 800a3ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a3be:	6001      	str	r1, [r0, #0]
 800a3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3c2:	bf00      	nop
 800a3c4:	e000ed88 	.word	0xe000ed88

0800a3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3ce:	f3ef 8305 	mrs	r3, IPSR
 800a3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b0f      	cmp	r3, #15
 800a3d8:	d915      	bls.n	800a406 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3da:	4a18      	ldr	r2, [pc, #96]	@ (800a43c <vPortValidateInterruptPriority+0x74>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4413      	add	r3, r2
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3e4:	4b16      	ldr	r3, [pc, #88]	@ (800a440 <vPortValidateInterruptPriority+0x78>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	7afa      	ldrb	r2, [r7, #11]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d20b      	bcs.n	800a406 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	607b      	str	r3, [r7, #4]
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	e7fd      	b.n	800a402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a406:	4b0f      	ldr	r3, [pc, #60]	@ (800a444 <vPortValidateInterruptPriority+0x7c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a40e:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <vPortValidateInterruptPriority+0x80>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	429a      	cmp	r2, r3
 800a414:	d90b      	bls.n	800a42e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	603b      	str	r3, [r7, #0]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <vPortValidateInterruptPriority+0x62>
	}
 800a42e:	bf00      	nop
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	e000e3f0 	.word	0xe000e3f0
 800a440:	200018d0 	.word	0x200018d0
 800a444:	e000ed0c 	.word	0xe000ed0c
 800a448:	200018d4 	.word	0x200018d4

0800a44c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08a      	sub	sp, #40	@ 0x28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a454:	2300      	movs	r3, #0
 800a456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a458:	f7fe fd74 	bl	8008f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a45c:	4b5c      	ldr	r3, [pc, #368]	@ (800a5d0 <pvPortMalloc+0x184>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a464:	f000 f924 	bl	800a6b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a468:	4b5a      	ldr	r3, [pc, #360]	@ (800a5d4 <pvPortMalloc+0x188>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4013      	ands	r3, r2
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 8095 	bne.w	800a5a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01e      	beq.n	800a4ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a47c:	2208      	movs	r2, #8
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4413      	add	r3, r2
 800a482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d015      	beq.n	800a4ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f023 0307 	bic.w	r3, r3, #7
 800a494:	3308      	adds	r3, #8
 800a496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00b      	beq.n	800a4ba <pvPortMalloc+0x6e>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	617b      	str	r3, [r7, #20]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d06f      	beq.n	800a5a0 <pvPortMalloc+0x154>
 800a4c0:	4b45      	ldr	r3, [pc, #276]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d86a      	bhi.n	800a5a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4ca:	4b44      	ldr	r3, [pc, #272]	@ (800a5dc <pvPortMalloc+0x190>)
 800a4cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4ce:	4b43      	ldr	r3, [pc, #268]	@ (800a5dc <pvPortMalloc+0x190>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4d4:	e004      	b.n	800a4e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d903      	bls.n	800a4f2 <pvPortMalloc+0xa6>
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f1      	bne.n	800a4d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4f2:	4b37      	ldr	r3, [pc, #220]	@ (800a5d0 <pvPortMalloc+0x184>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d051      	beq.n	800a5a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2208      	movs	r2, #8
 800a502:	4413      	add	r3, r2
 800a504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	1ad2      	subs	r2, r2, r3
 800a516:	2308      	movs	r3, #8
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d920      	bls.n	800a560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4413      	add	r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <pvPortMalloc+0xfc>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	613b      	str	r3, [r7, #16]
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	e7fd      	b.n	800a544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a55a:	69b8      	ldr	r0, [r7, #24]
 800a55c:	f000 f90a 	bl	800a774 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a560:	4b1d      	ldr	r3, [pc, #116]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a56c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a56e:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e0 <pvPortMalloc+0x194>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	d203      	bcs.n	800a582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a57a:	4b17      	ldr	r3, [pc, #92]	@ (800a5d8 <pvPortMalloc+0x18c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a18      	ldr	r2, [pc, #96]	@ (800a5e0 <pvPortMalloc+0x194>)
 800a580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	4b13      	ldr	r3, [pc, #76]	@ (800a5d4 <pvPortMalloc+0x188>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	431a      	orrs	r2, r3
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a596:	4b13      	ldr	r3, [pc, #76]	@ (800a5e4 <pvPortMalloc+0x198>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	4a11      	ldr	r2, [pc, #68]	@ (800a5e4 <pvPortMalloc+0x198>)
 800a59e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5a0:	f7fe fcde 	bl	8008f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	60fb      	str	r3, [r7, #12]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3728      	adds	r7, #40	@ 0x28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	200054e0 	.word	0x200054e0
 800a5d4:	200054f4 	.word	0x200054f4
 800a5d8:	200054e4 	.word	0x200054e4
 800a5dc:	200054d8 	.word	0x200054d8
 800a5e0:	200054e8 	.word	0x200054e8
 800a5e4:	200054ec 	.word	0x200054ec

0800a5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d04f      	beq.n	800a69a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5fa:	2308      	movs	r3, #8
 800a5fc:	425b      	negs	r3, r3
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	4413      	add	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b25      	ldr	r3, [pc, #148]	@ (800a6a4 <vPortFree+0xbc>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4013      	ands	r3, r2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10b      	bne.n	800a62e <vPortFree+0x46>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60fb      	str	r3, [r7, #12]
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	e7fd      	b.n	800a62a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00b      	beq.n	800a64e <vPortFree+0x66>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	60bb      	str	r3, [r7, #8]
}
 800a648:	bf00      	nop
 800a64a:	bf00      	nop
 800a64c:	e7fd      	b.n	800a64a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	4b14      	ldr	r3, [pc, #80]	@ (800a6a4 <vPortFree+0xbc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4013      	ands	r3, r2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01e      	beq.n	800a69a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d11a      	bne.n	800a69a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a4 <vPortFree+0xbc>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	43db      	mvns	r3, r3
 800a66e:	401a      	ands	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a674:	f7fe fc66 	bl	8008f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a8 <vPortFree+0xc0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4413      	add	r3, r2
 800a682:	4a09      	ldr	r2, [pc, #36]	@ (800a6a8 <vPortFree+0xc0>)
 800a684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a686:	6938      	ldr	r0, [r7, #16]
 800a688:	f000 f874 	bl	800a774 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a68c:	4b07      	ldr	r3, [pc, #28]	@ (800a6ac <vPortFree+0xc4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3301      	adds	r3, #1
 800a692:	4a06      	ldr	r2, [pc, #24]	@ (800a6ac <vPortFree+0xc4>)
 800a694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a696:	f7fe fc63 	bl	8008f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a69a:	bf00      	nop
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	200054f4 	.word	0x200054f4
 800a6a8:	200054e4 	.word	0x200054e4
 800a6ac:	200054f0 	.word	0x200054f0

0800a6b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a6ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6bc:	4b27      	ldr	r3, [pc, #156]	@ (800a75c <prvHeapInit+0xac>)
 800a6be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00c      	beq.n	800a6e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3307      	adds	r3, #7
 800a6ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f023 0307 	bic.w	r3, r3, #7
 800a6d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	4a1f      	ldr	r2, [pc, #124]	@ (800a75c <prvHeapInit+0xac>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a760 <prvHeapInit+0xb0>)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a760 <prvHeapInit+0xb0>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6fc:	2208      	movs	r2, #8
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4a15      	ldr	r2, [pc, #84]	@ (800a764 <prvHeapInit+0xb4>)
 800a710:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a712:	4b14      	ldr	r3, [pc, #80]	@ (800a764 <prvHeapInit+0xb4>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2200      	movs	r2, #0
 800a718:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a71a:	4b12      	ldr	r3, [pc, #72]	@ (800a764 <prvHeapInit+0xb4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	1ad2      	subs	r2, r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a730:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <prvHeapInit+0xb4>)
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	4a0a      	ldr	r2, [pc, #40]	@ (800a768 <prvHeapInit+0xb8>)
 800a73e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	4a09      	ldr	r2, [pc, #36]	@ (800a76c <prvHeapInit+0xbc>)
 800a746:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a748:	4b09      	ldr	r3, [pc, #36]	@ (800a770 <prvHeapInit+0xc0>)
 800a74a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a74e:	601a      	str	r2, [r3, #0]
}
 800a750:	bf00      	nop
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	200018d8 	.word	0x200018d8
 800a760:	200054d8 	.word	0x200054d8
 800a764:	200054e0 	.word	0x200054e0
 800a768:	200054e8 	.word	0x200054e8
 800a76c:	200054e4 	.word	0x200054e4
 800a770:	200054f4 	.word	0x200054f4

0800a774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a77c:	4b28      	ldr	r3, [pc, #160]	@ (800a820 <prvInsertBlockIntoFreeList+0xac>)
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	e002      	b.n	800a788 <prvInsertBlockIntoFreeList+0x14>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d8f7      	bhi.n	800a782 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4413      	add	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d108      	bne.n	800a7b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	441a      	add	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d118      	bne.n	800a7fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <prvInsertBlockIntoFreeList+0xb0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d00d      	beq.n	800a7f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	e008      	b.n	800a804 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <prvInsertBlockIntoFreeList+0xb0>)
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	e003      	b.n	800a804 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d002      	beq.n	800a812 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	200054d8 	.word	0x200054d8
 800a824:	200054e0 	.word	0x200054e0

0800a828 <malloc>:
 800a828:	4b02      	ldr	r3, [pc, #8]	@ (800a834 <malloc+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f000 b82d 	b.w	800a88c <_malloc_r>
 800a832:	bf00      	nop
 800a834:	20000098 	.word	0x20000098

0800a838 <free>:
 800a838:	4b02      	ldr	r3, [pc, #8]	@ (800a844 <free+0xc>)
 800a83a:	4601      	mov	r1, r0
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	f000 bc09 	b.w	800b054 <_free_r>
 800a842:	bf00      	nop
 800a844:	20000098 	.word	0x20000098

0800a848 <sbrk_aligned>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	4e0f      	ldr	r6, [pc, #60]	@ (800a888 <sbrk_aligned+0x40>)
 800a84c:	460c      	mov	r4, r1
 800a84e:	6831      	ldr	r1, [r6, #0]
 800a850:	4605      	mov	r5, r0
 800a852:	b911      	cbnz	r1, 800a85a <sbrk_aligned+0x12>
 800a854:	f000 fb98 	bl	800af88 <_sbrk_r>
 800a858:	6030      	str	r0, [r6, #0]
 800a85a:	4621      	mov	r1, r4
 800a85c:	4628      	mov	r0, r5
 800a85e:	f000 fb93 	bl	800af88 <_sbrk_r>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d103      	bne.n	800a86e <sbrk_aligned+0x26>
 800a866:	f04f 34ff 	mov.w	r4, #4294967295
 800a86a:	4620      	mov	r0, r4
 800a86c:	bd70      	pop	{r4, r5, r6, pc}
 800a86e:	1cc4      	adds	r4, r0, #3
 800a870:	f024 0403 	bic.w	r4, r4, #3
 800a874:	42a0      	cmp	r0, r4
 800a876:	d0f8      	beq.n	800a86a <sbrk_aligned+0x22>
 800a878:	1a21      	subs	r1, r4, r0
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 fb84 	bl	800af88 <_sbrk_r>
 800a880:	3001      	adds	r0, #1
 800a882:	d1f2      	bne.n	800a86a <sbrk_aligned+0x22>
 800a884:	e7ef      	b.n	800a866 <sbrk_aligned+0x1e>
 800a886:	bf00      	nop
 800a888:	200054f8 	.word	0x200054f8

0800a88c <_malloc_r>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	1ccd      	adds	r5, r1, #3
 800a892:	f025 0503 	bic.w	r5, r5, #3
 800a896:	3508      	adds	r5, #8
 800a898:	2d0c      	cmp	r5, #12
 800a89a:	bf38      	it	cc
 800a89c:	250c      	movcc	r5, #12
 800a89e:	2d00      	cmp	r5, #0
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	db01      	blt.n	800a8a8 <_malloc_r+0x1c>
 800a8a4:	42a9      	cmp	r1, r5
 800a8a6:	d904      	bls.n	800a8b2 <_malloc_r+0x26>
 800a8a8:	230c      	movs	r3, #12
 800a8aa:	6033      	str	r3, [r6, #0]
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a988 <_malloc_r+0xfc>
 800a8b6:	f000 f869 	bl	800a98c <__malloc_lock>
 800a8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a8be:	461c      	mov	r4, r3
 800a8c0:	bb44      	cbnz	r4, 800a914 <_malloc_r+0x88>
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f7ff ffbf 	bl	800a848 <sbrk_aligned>
 800a8ca:	1c43      	adds	r3, r0, #1
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	d158      	bne.n	800a982 <_malloc_r+0xf6>
 800a8d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a8d4:	4627      	mov	r7, r4
 800a8d6:	2f00      	cmp	r7, #0
 800a8d8:	d143      	bne.n	800a962 <_malloc_r+0xd6>
 800a8da:	2c00      	cmp	r4, #0
 800a8dc:	d04b      	beq.n	800a976 <_malloc_r+0xea>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	eb04 0903 	add.w	r9, r4, r3
 800a8e8:	f000 fb4e 	bl	800af88 <_sbrk_r>
 800a8ec:	4581      	cmp	r9, r0
 800a8ee:	d142      	bne.n	800a976 <_malloc_r+0xea>
 800a8f0:	6821      	ldr	r1, [r4, #0]
 800a8f2:	1a6d      	subs	r5, r5, r1
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7ff ffa6 	bl	800a848 <sbrk_aligned>
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d03a      	beq.n	800a976 <_malloc_r+0xea>
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	442b      	add	r3, r5
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	f8d8 3000 	ldr.w	r3, [r8]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	bb62      	cbnz	r2, 800a968 <_malloc_r+0xdc>
 800a90e:	f8c8 7000 	str.w	r7, [r8]
 800a912:	e00f      	b.n	800a934 <_malloc_r+0xa8>
 800a914:	6822      	ldr	r2, [r4, #0]
 800a916:	1b52      	subs	r2, r2, r5
 800a918:	d420      	bmi.n	800a95c <_malloc_r+0xd0>
 800a91a:	2a0b      	cmp	r2, #11
 800a91c:	d917      	bls.n	800a94e <_malloc_r+0xc2>
 800a91e:	1961      	adds	r1, r4, r5
 800a920:	42a3      	cmp	r3, r4
 800a922:	6025      	str	r5, [r4, #0]
 800a924:	bf18      	it	ne
 800a926:	6059      	strne	r1, [r3, #4]
 800a928:	6863      	ldr	r3, [r4, #4]
 800a92a:	bf08      	it	eq
 800a92c:	f8c8 1000 	streq.w	r1, [r8]
 800a930:	5162      	str	r2, [r4, r5]
 800a932:	604b      	str	r3, [r1, #4]
 800a934:	4630      	mov	r0, r6
 800a936:	f000 f82f 	bl	800a998 <__malloc_unlock>
 800a93a:	f104 000b 	add.w	r0, r4, #11
 800a93e:	1d23      	adds	r3, r4, #4
 800a940:	f020 0007 	bic.w	r0, r0, #7
 800a944:	1ac2      	subs	r2, r0, r3
 800a946:	bf1c      	itt	ne
 800a948:	1a1b      	subne	r3, r3, r0
 800a94a:	50a3      	strne	r3, [r4, r2]
 800a94c:	e7af      	b.n	800a8ae <_malloc_r+0x22>
 800a94e:	6862      	ldr	r2, [r4, #4]
 800a950:	42a3      	cmp	r3, r4
 800a952:	bf0c      	ite	eq
 800a954:	f8c8 2000 	streq.w	r2, [r8]
 800a958:	605a      	strne	r2, [r3, #4]
 800a95a:	e7eb      	b.n	800a934 <_malloc_r+0xa8>
 800a95c:	4623      	mov	r3, r4
 800a95e:	6864      	ldr	r4, [r4, #4]
 800a960:	e7ae      	b.n	800a8c0 <_malloc_r+0x34>
 800a962:	463c      	mov	r4, r7
 800a964:	687f      	ldr	r7, [r7, #4]
 800a966:	e7b6      	b.n	800a8d6 <_malloc_r+0x4a>
 800a968:	461a      	mov	r2, r3
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	d1fb      	bne.n	800a968 <_malloc_r+0xdc>
 800a970:	2300      	movs	r3, #0
 800a972:	6053      	str	r3, [r2, #4]
 800a974:	e7de      	b.n	800a934 <_malloc_r+0xa8>
 800a976:	230c      	movs	r3, #12
 800a978:	6033      	str	r3, [r6, #0]
 800a97a:	4630      	mov	r0, r6
 800a97c:	f000 f80c 	bl	800a998 <__malloc_unlock>
 800a980:	e794      	b.n	800a8ac <_malloc_r+0x20>
 800a982:	6005      	str	r5, [r0, #0]
 800a984:	e7d6      	b.n	800a934 <_malloc_r+0xa8>
 800a986:	bf00      	nop
 800a988:	200054fc 	.word	0x200054fc

0800a98c <__malloc_lock>:
 800a98c:	4801      	ldr	r0, [pc, #4]	@ (800a994 <__malloc_lock+0x8>)
 800a98e:	f000 bb48 	b.w	800b022 <__retarget_lock_acquire_recursive>
 800a992:	bf00      	nop
 800a994:	20005640 	.word	0x20005640

0800a998 <__malloc_unlock>:
 800a998:	4801      	ldr	r0, [pc, #4]	@ (800a9a0 <__malloc_unlock+0x8>)
 800a99a:	f000 bb43 	b.w	800b024 <__retarget_lock_release_recursive>
 800a99e:	bf00      	nop
 800a9a0:	20005640 	.word	0x20005640

0800a9a4 <std>:
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	b510      	push	{r4, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9b2:	6083      	str	r3, [r0, #8]
 800a9b4:	8181      	strh	r1, [r0, #12]
 800a9b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9b8:	81c2      	strh	r2, [r0, #14]
 800a9ba:	6183      	str	r3, [r0, #24]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	2208      	movs	r2, #8
 800a9c0:	305c      	adds	r0, #92	@ 0x5c
 800a9c2:	f000 fa19 	bl	800adf8 <memset>
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9fc <std+0x58>)
 800a9c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <std+0x5c>)
 800a9cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <std+0x60>)
 800a9d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa08 <std+0x64>)
 800a9d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa0c <std+0x68>)
 800a9d8:	6224      	str	r4, [r4, #32]
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	d006      	beq.n	800a9ec <std+0x48>
 800a9de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9e2:	4294      	cmp	r4, r2
 800a9e4:	d002      	beq.n	800a9ec <std+0x48>
 800a9e6:	33d0      	adds	r3, #208	@ 0xd0
 800a9e8:	429c      	cmp	r4, r3
 800a9ea:	d105      	bne.n	800a9f8 <std+0x54>
 800a9ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f4:	f000 bb14 	b.w	800b020 <__retarget_lock_init_recursive>
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	bf00      	nop
 800a9fc:	0800ac49 	.word	0x0800ac49
 800aa00:	0800ac6b 	.word	0x0800ac6b
 800aa04:	0800aca3 	.word	0x0800aca3
 800aa08:	0800acc7 	.word	0x0800acc7
 800aa0c:	20005500 	.word	0x20005500

0800aa10 <stdio_exit_handler>:
 800aa10:	4a02      	ldr	r2, [pc, #8]	@ (800aa1c <stdio_exit_handler+0xc>)
 800aa12:	4903      	ldr	r1, [pc, #12]	@ (800aa20 <stdio_exit_handler+0x10>)
 800aa14:	4803      	ldr	r0, [pc, #12]	@ (800aa24 <stdio_exit_handler+0x14>)
 800aa16:	f000 b869 	b.w	800aaec <_fwalk_sglue>
 800aa1a:	bf00      	nop
 800aa1c:	2000008c 	.word	0x2000008c
 800aa20:	0800ba41 	.word	0x0800ba41
 800aa24:	2000009c 	.word	0x2000009c

0800aa28 <cleanup_stdio>:
 800aa28:	6841      	ldr	r1, [r0, #4]
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa5c <cleanup_stdio+0x34>)
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	4604      	mov	r4, r0
 800aa32:	d001      	beq.n	800aa38 <cleanup_stdio+0x10>
 800aa34:	f001 f804 	bl	800ba40 <_fflush_r>
 800aa38:	68a1      	ldr	r1, [r4, #8]
 800aa3a:	4b09      	ldr	r3, [pc, #36]	@ (800aa60 <cleanup_stdio+0x38>)
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	d002      	beq.n	800aa46 <cleanup_stdio+0x1e>
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fffd 	bl	800ba40 <_fflush_r>
 800aa46:	68e1      	ldr	r1, [r4, #12]
 800aa48:	4b06      	ldr	r3, [pc, #24]	@ (800aa64 <cleanup_stdio+0x3c>)
 800aa4a:	4299      	cmp	r1, r3
 800aa4c:	d004      	beq.n	800aa58 <cleanup_stdio+0x30>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa54:	f000 bff4 	b.w	800ba40 <_fflush_r>
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20005500 	.word	0x20005500
 800aa60:	20005568 	.word	0x20005568
 800aa64:	200055d0 	.word	0x200055d0

0800aa68 <global_stdio_init.part.0>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa98 <global_stdio_init.part.0+0x30>)
 800aa6c:	4c0b      	ldr	r4, [pc, #44]	@ (800aa9c <global_stdio_init.part.0+0x34>)
 800aa6e:	4a0c      	ldr	r2, [pc, #48]	@ (800aaa0 <global_stdio_init.part.0+0x38>)
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	4620      	mov	r0, r4
 800aa74:	2200      	movs	r2, #0
 800aa76:	2104      	movs	r1, #4
 800aa78:	f7ff ff94 	bl	800a9a4 <std>
 800aa7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa80:	2201      	movs	r2, #1
 800aa82:	2109      	movs	r1, #9
 800aa84:	f7ff ff8e 	bl	800a9a4 <std>
 800aa88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa92:	2112      	movs	r1, #18
 800aa94:	f7ff bf86 	b.w	800a9a4 <std>
 800aa98:	20005638 	.word	0x20005638
 800aa9c:	20005500 	.word	0x20005500
 800aaa0:	0800aa11 	.word	0x0800aa11

0800aaa4 <__sfp_lock_acquire>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	@ (800aaac <__sfp_lock_acquire+0x8>)
 800aaa6:	f000 babc 	b.w	800b022 <__retarget_lock_acquire_recursive>
 800aaaa:	bf00      	nop
 800aaac:	20005641 	.word	0x20005641

0800aab0 <__sfp_lock_release>:
 800aab0:	4801      	ldr	r0, [pc, #4]	@ (800aab8 <__sfp_lock_release+0x8>)
 800aab2:	f000 bab7 	b.w	800b024 <__retarget_lock_release_recursive>
 800aab6:	bf00      	nop
 800aab8:	20005641 	.word	0x20005641

0800aabc <__sinit>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4604      	mov	r4, r0
 800aac0:	f7ff fff0 	bl	800aaa4 <__sfp_lock_acquire>
 800aac4:	6a23      	ldr	r3, [r4, #32]
 800aac6:	b11b      	cbz	r3, 800aad0 <__sinit+0x14>
 800aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aacc:	f7ff bff0 	b.w	800aab0 <__sfp_lock_release>
 800aad0:	4b04      	ldr	r3, [pc, #16]	@ (800aae4 <__sinit+0x28>)
 800aad2:	6223      	str	r3, [r4, #32]
 800aad4:	4b04      	ldr	r3, [pc, #16]	@ (800aae8 <__sinit+0x2c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1f5      	bne.n	800aac8 <__sinit+0xc>
 800aadc:	f7ff ffc4 	bl	800aa68 <global_stdio_init.part.0>
 800aae0:	e7f2      	b.n	800aac8 <__sinit+0xc>
 800aae2:	bf00      	nop
 800aae4:	0800aa29 	.word	0x0800aa29
 800aae8:	20005638 	.word	0x20005638

0800aaec <_fwalk_sglue>:
 800aaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4688      	mov	r8, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	2600      	movs	r6, #0
 800aaf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aafc:	f1b9 0901 	subs.w	r9, r9, #1
 800ab00:	d505      	bpl.n	800ab0e <_fwalk_sglue+0x22>
 800ab02:	6824      	ldr	r4, [r4, #0]
 800ab04:	2c00      	cmp	r4, #0
 800ab06:	d1f7      	bne.n	800aaf8 <_fwalk_sglue+0xc>
 800ab08:	4630      	mov	r0, r6
 800ab0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d907      	bls.n	800ab24 <_fwalk_sglue+0x38>
 800ab14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	d003      	beq.n	800ab24 <_fwalk_sglue+0x38>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c0      	blx	r8
 800ab22:	4306      	orrs	r6, r0
 800ab24:	3568      	adds	r5, #104	@ 0x68
 800ab26:	e7e9      	b.n	800aafc <_fwalk_sglue+0x10>

0800ab28 <iprintf>:
 800ab28:	b40f      	push	{r0, r1, r2, r3}
 800ab2a:	b507      	push	{r0, r1, r2, lr}
 800ab2c:	4906      	ldr	r1, [pc, #24]	@ (800ab48 <iprintf+0x20>)
 800ab2e:	ab04      	add	r3, sp, #16
 800ab30:	6808      	ldr	r0, [r1, #0]
 800ab32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab36:	6881      	ldr	r1, [r0, #8]
 800ab38:	9301      	str	r3, [sp, #4]
 800ab3a:	f000 fc57 	bl	800b3ec <_vfiprintf_r>
 800ab3e:	b003      	add	sp, #12
 800ab40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab44:	b004      	add	sp, #16
 800ab46:	4770      	bx	lr
 800ab48:	20000098 	.word	0x20000098

0800ab4c <_puts_r>:
 800ab4c:	6a03      	ldr	r3, [r0, #32]
 800ab4e:	b570      	push	{r4, r5, r6, lr}
 800ab50:	6884      	ldr	r4, [r0, #8]
 800ab52:	4605      	mov	r5, r0
 800ab54:	460e      	mov	r6, r1
 800ab56:	b90b      	cbnz	r3, 800ab5c <_puts_r+0x10>
 800ab58:	f7ff ffb0 	bl	800aabc <__sinit>
 800ab5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab5e:	07db      	lsls	r3, r3, #31
 800ab60:	d405      	bmi.n	800ab6e <_puts_r+0x22>
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	0598      	lsls	r0, r3, #22
 800ab66:	d402      	bmi.n	800ab6e <_puts_r+0x22>
 800ab68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab6a:	f000 fa5a 	bl	800b022 <__retarget_lock_acquire_recursive>
 800ab6e:	89a3      	ldrh	r3, [r4, #12]
 800ab70:	0719      	lsls	r1, r3, #28
 800ab72:	d502      	bpl.n	800ab7a <_puts_r+0x2e>
 800ab74:	6923      	ldr	r3, [r4, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d135      	bne.n	800abe6 <_puts_r+0x9a>
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f000 f8e5 	bl	800ad4c <__swsetup_r>
 800ab82:	b380      	cbz	r0, 800abe6 <_puts_r+0x9a>
 800ab84:	f04f 35ff 	mov.w	r5, #4294967295
 800ab88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab8a:	07da      	lsls	r2, r3, #31
 800ab8c:	d405      	bmi.n	800ab9a <_puts_r+0x4e>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	059b      	lsls	r3, r3, #22
 800ab92:	d402      	bmi.n	800ab9a <_puts_r+0x4e>
 800ab94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab96:	f000 fa45 	bl	800b024 <__retarget_lock_release_recursive>
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	bd70      	pop	{r4, r5, r6, pc}
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	da04      	bge.n	800abac <_puts_r+0x60>
 800aba2:	69a2      	ldr	r2, [r4, #24]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	dc17      	bgt.n	800abd8 <_puts_r+0x8c>
 800aba8:	290a      	cmp	r1, #10
 800abaa:	d015      	beq.n	800abd8 <_puts_r+0x8c>
 800abac:	6823      	ldr	r3, [r4, #0]
 800abae:	1c5a      	adds	r2, r3, #1
 800abb0:	6022      	str	r2, [r4, #0]
 800abb2:	7019      	strb	r1, [r3, #0]
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abba:	3b01      	subs	r3, #1
 800abbc:	60a3      	str	r3, [r4, #8]
 800abbe:	2900      	cmp	r1, #0
 800abc0:	d1ed      	bne.n	800ab9e <_puts_r+0x52>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da11      	bge.n	800abea <_puts_r+0x9e>
 800abc6:	4622      	mov	r2, r4
 800abc8:	210a      	movs	r1, #10
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 f87f 	bl	800acce <__swbuf_r>
 800abd0:	3001      	adds	r0, #1
 800abd2:	d0d7      	beq.n	800ab84 <_puts_r+0x38>
 800abd4:	250a      	movs	r5, #10
 800abd6:	e7d7      	b.n	800ab88 <_puts_r+0x3c>
 800abd8:	4622      	mov	r2, r4
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 f877 	bl	800acce <__swbuf_r>
 800abe0:	3001      	adds	r0, #1
 800abe2:	d1e7      	bne.n	800abb4 <_puts_r+0x68>
 800abe4:	e7ce      	b.n	800ab84 <_puts_r+0x38>
 800abe6:	3e01      	subs	r6, #1
 800abe8:	e7e4      	b.n	800abb4 <_puts_r+0x68>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	6022      	str	r2, [r4, #0]
 800abf0:	220a      	movs	r2, #10
 800abf2:	701a      	strb	r2, [r3, #0]
 800abf4:	e7ee      	b.n	800abd4 <_puts_r+0x88>
	...

0800abf8 <puts>:
 800abf8:	4b02      	ldr	r3, [pc, #8]	@ (800ac04 <puts+0xc>)
 800abfa:	4601      	mov	r1, r0
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	f7ff bfa5 	b.w	800ab4c <_puts_r>
 800ac02:	bf00      	nop
 800ac04:	20000098 	.word	0x20000098

0800ac08 <siprintf>:
 800ac08:	b40e      	push	{r1, r2, r3}
 800ac0a:	b500      	push	{lr}
 800ac0c:	b09c      	sub	sp, #112	@ 0x70
 800ac0e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac10:	9002      	str	r0, [sp, #8]
 800ac12:	9006      	str	r0, [sp, #24]
 800ac14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac18:	4809      	ldr	r0, [pc, #36]	@ (800ac40 <siprintf+0x38>)
 800ac1a:	9107      	str	r1, [sp, #28]
 800ac1c:	9104      	str	r1, [sp, #16]
 800ac1e:	4909      	ldr	r1, [pc, #36]	@ (800ac44 <siprintf+0x3c>)
 800ac20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac24:	9105      	str	r1, [sp, #20]
 800ac26:	6800      	ldr	r0, [r0, #0]
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	a902      	add	r1, sp, #8
 800ac2c:	f000 fab8 	bl	800b1a0 <_svfiprintf_r>
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	2200      	movs	r2, #0
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	b01c      	add	sp, #112	@ 0x70
 800ac38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac3c:	b003      	add	sp, #12
 800ac3e:	4770      	bx	lr
 800ac40:	20000098 	.word	0x20000098
 800ac44:	ffff0208 	.word	0xffff0208

0800ac48 <__sread>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac50:	f000 f988 	bl	800af64 <_read_r>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	bfab      	itete	ge
 800ac58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac5c:	181b      	addge	r3, r3, r0
 800ac5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac62:	bfac      	ite	ge
 800ac64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac66:	81a3      	strhlt	r3, [r4, #12]
 800ac68:	bd10      	pop	{r4, pc}

0800ac6a <__swrite>:
 800ac6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	461f      	mov	r7, r3
 800ac70:	898b      	ldrh	r3, [r1, #12]
 800ac72:	05db      	lsls	r3, r3, #23
 800ac74:	4605      	mov	r5, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	4616      	mov	r6, r2
 800ac7a:	d505      	bpl.n	800ac88 <__swrite+0x1e>
 800ac7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac80:	2302      	movs	r3, #2
 800ac82:	2200      	movs	r2, #0
 800ac84:	f000 f95c 	bl	800af40 <_lseek_r>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	4632      	mov	r2, r6
 800ac96:	463b      	mov	r3, r7
 800ac98:	4628      	mov	r0, r5
 800ac9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9e:	f000 b983 	b.w	800afa8 <_write_r>

0800aca2 <__sseek>:
 800aca2:	b510      	push	{r4, lr}
 800aca4:	460c      	mov	r4, r1
 800aca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acaa:	f000 f949 	bl	800af40 <_lseek_r>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	bf15      	itete	ne
 800acb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800acb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800acba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acbe:	81a3      	strheq	r3, [r4, #12]
 800acc0:	bf18      	it	ne
 800acc2:	81a3      	strhne	r3, [r4, #12]
 800acc4:	bd10      	pop	{r4, pc}

0800acc6 <__sclose>:
 800acc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acca:	f000 b8d3 	b.w	800ae74 <_close_r>

0800acce <__swbuf_r>:
 800acce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd0:	460e      	mov	r6, r1
 800acd2:	4614      	mov	r4, r2
 800acd4:	4605      	mov	r5, r0
 800acd6:	b118      	cbz	r0, 800ace0 <__swbuf_r+0x12>
 800acd8:	6a03      	ldr	r3, [r0, #32]
 800acda:	b90b      	cbnz	r3, 800ace0 <__swbuf_r+0x12>
 800acdc:	f7ff feee 	bl	800aabc <__sinit>
 800ace0:	69a3      	ldr	r3, [r4, #24]
 800ace2:	60a3      	str	r3, [r4, #8]
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	071a      	lsls	r2, r3, #28
 800ace8:	d501      	bpl.n	800acee <__swbuf_r+0x20>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	b943      	cbnz	r3, 800ad00 <__swbuf_r+0x32>
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 f82b 	bl	800ad4c <__swsetup_r>
 800acf6:	b118      	cbz	r0, 800ad00 <__swbuf_r+0x32>
 800acf8:	f04f 37ff 	mov.w	r7, #4294967295
 800acfc:	4638      	mov	r0, r7
 800acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	6922      	ldr	r2, [r4, #16]
 800ad04:	1a98      	subs	r0, r3, r2
 800ad06:	6963      	ldr	r3, [r4, #20]
 800ad08:	b2f6      	uxtb	r6, r6
 800ad0a:	4283      	cmp	r3, r0
 800ad0c:	4637      	mov	r7, r6
 800ad0e:	dc05      	bgt.n	800ad1c <__swbuf_r+0x4e>
 800ad10:	4621      	mov	r1, r4
 800ad12:	4628      	mov	r0, r5
 800ad14:	f000 fe94 	bl	800ba40 <_fflush_r>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1ed      	bne.n	800acf8 <__swbuf_r+0x2a>
 800ad1c:	68a3      	ldr	r3, [r4, #8]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	60a3      	str	r3, [r4, #8]
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	6022      	str	r2, [r4, #0]
 800ad28:	701e      	strb	r6, [r3, #0]
 800ad2a:	6962      	ldr	r2, [r4, #20]
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d004      	beq.n	800ad3c <__swbuf_r+0x6e>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	07db      	lsls	r3, r3, #31
 800ad36:	d5e1      	bpl.n	800acfc <__swbuf_r+0x2e>
 800ad38:	2e0a      	cmp	r6, #10
 800ad3a:	d1df      	bne.n	800acfc <__swbuf_r+0x2e>
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f000 fe7e 	bl	800ba40 <_fflush_r>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d0d9      	beq.n	800acfc <__swbuf_r+0x2e>
 800ad48:	e7d6      	b.n	800acf8 <__swbuf_r+0x2a>
	...

0800ad4c <__swsetup_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4b29      	ldr	r3, [pc, #164]	@ (800adf4 <__swsetup_r+0xa8>)
 800ad50:	4605      	mov	r5, r0
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	460c      	mov	r4, r1
 800ad56:	b118      	cbz	r0, 800ad60 <__swsetup_r+0x14>
 800ad58:	6a03      	ldr	r3, [r0, #32]
 800ad5a:	b90b      	cbnz	r3, 800ad60 <__swsetup_r+0x14>
 800ad5c:	f7ff feae 	bl	800aabc <__sinit>
 800ad60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad64:	0719      	lsls	r1, r3, #28
 800ad66:	d422      	bmi.n	800adae <__swsetup_r+0x62>
 800ad68:	06da      	lsls	r2, r3, #27
 800ad6a:	d407      	bmi.n	800ad7c <__swsetup_r+0x30>
 800ad6c:	2209      	movs	r2, #9
 800ad6e:	602a      	str	r2, [r5, #0]
 800ad70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7a:	e033      	b.n	800ade4 <__swsetup_r+0x98>
 800ad7c:	0758      	lsls	r0, r3, #29
 800ad7e:	d512      	bpl.n	800ada6 <__swsetup_r+0x5a>
 800ad80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad82:	b141      	cbz	r1, 800ad96 <__swsetup_r+0x4a>
 800ad84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	d002      	beq.n	800ad92 <__swsetup_r+0x46>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 f961 	bl	800b054 <_free_r>
 800ad92:	2300      	movs	r3, #0
 800ad94:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad9c:	81a3      	strh	r3, [r4, #12]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f043 0308 	orr.w	r3, r3, #8
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	b94b      	cbnz	r3, 800adc6 <__swsetup_r+0x7a>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adbc:	d003      	beq.n	800adc6 <__swsetup_r+0x7a>
 800adbe:	4621      	mov	r1, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	f000 fe8b 	bl	800badc <__smakebuf_r>
 800adc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adca:	f013 0201 	ands.w	r2, r3, #1
 800adce:	d00a      	beq.n	800ade6 <__swsetup_r+0x9a>
 800add0:	2200      	movs	r2, #0
 800add2:	60a2      	str	r2, [r4, #8]
 800add4:	6962      	ldr	r2, [r4, #20]
 800add6:	4252      	negs	r2, r2
 800add8:	61a2      	str	r2, [r4, #24]
 800adda:	6922      	ldr	r2, [r4, #16]
 800addc:	b942      	cbnz	r2, 800adf0 <__swsetup_r+0xa4>
 800adde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ade2:	d1c5      	bne.n	800ad70 <__swsetup_r+0x24>
 800ade4:	bd38      	pop	{r3, r4, r5, pc}
 800ade6:	0799      	lsls	r1, r3, #30
 800ade8:	bf58      	it	pl
 800adea:	6962      	ldrpl	r2, [r4, #20]
 800adec:	60a2      	str	r2, [r4, #8]
 800adee:	e7f4      	b.n	800adda <__swsetup_r+0x8e>
 800adf0:	2000      	movs	r0, #0
 800adf2:	e7f7      	b.n	800ade4 <__swsetup_r+0x98>
 800adf4:	20000098 	.word	0x20000098

0800adf8 <memset>:
 800adf8:	4402      	add	r2, r0
 800adfa:	4603      	mov	r3, r0
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d100      	bne.n	800ae02 <memset+0xa>
 800ae00:	4770      	bx	lr
 800ae02:	f803 1b01 	strb.w	r1, [r3], #1
 800ae06:	e7f9      	b.n	800adfc <memset+0x4>

0800ae08 <strchr>:
 800ae08:	b2c9      	uxtb	r1, r1
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae12:	b112      	cbz	r2, 800ae1a <strchr+0x12>
 800ae14:	428a      	cmp	r2, r1
 800ae16:	d1f9      	bne.n	800ae0c <strchr+0x4>
 800ae18:	4770      	bx	lr
 800ae1a:	2900      	cmp	r1, #0
 800ae1c:	bf18      	it	ne
 800ae1e:	2000      	movne	r0, #0
 800ae20:	4770      	bx	lr

0800ae22 <strncpy>:
 800ae22:	b510      	push	{r4, lr}
 800ae24:	3901      	subs	r1, #1
 800ae26:	4603      	mov	r3, r0
 800ae28:	b132      	cbz	r2, 800ae38 <strncpy+0x16>
 800ae2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ae2e:	f803 4b01 	strb.w	r4, [r3], #1
 800ae32:	3a01      	subs	r2, #1
 800ae34:	2c00      	cmp	r4, #0
 800ae36:	d1f7      	bne.n	800ae28 <strncpy+0x6>
 800ae38:	441a      	add	r2, r3
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d100      	bne.n	800ae42 <strncpy+0x20>
 800ae40:	bd10      	pop	{r4, pc}
 800ae42:	f803 1b01 	strb.w	r1, [r3], #1
 800ae46:	e7f9      	b.n	800ae3c <strncpy+0x1a>

0800ae48 <strstr>:
 800ae48:	780a      	ldrb	r2, [r1, #0]
 800ae4a:	b570      	push	{r4, r5, r6, lr}
 800ae4c:	b96a      	cbnz	r2, 800ae6a <strstr+0x22>
 800ae4e:	bd70      	pop	{r4, r5, r6, pc}
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d109      	bne.n	800ae68 <strstr+0x20>
 800ae54:	460c      	mov	r4, r1
 800ae56:	4605      	mov	r5, r0
 800ae58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0f6      	beq.n	800ae4e <strstr+0x6>
 800ae60:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ae64:	429e      	cmp	r6, r3
 800ae66:	d0f7      	beq.n	800ae58 <strstr+0x10>
 800ae68:	3001      	adds	r0, #1
 800ae6a:	7803      	ldrb	r3, [r0, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1ef      	bne.n	800ae50 <strstr+0x8>
 800ae70:	4618      	mov	r0, r3
 800ae72:	e7ec      	b.n	800ae4e <strstr+0x6>

0800ae74 <_close_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d06      	ldr	r5, [pc, #24]	@ (800ae90 <_close_r+0x1c>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	602b      	str	r3, [r5, #0]
 800ae80:	f7f6 fc93 	bl	80017aa <_close>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_close_r+0x1a>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_close_r+0x1a>
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	2000563c 	.word	0x2000563c

0800ae94 <_reclaim_reent>:
 800ae94:	4b29      	ldr	r3, [pc, #164]	@ (800af3c <_reclaim_reent+0xa8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4283      	cmp	r3, r0
 800ae9a:	b570      	push	{r4, r5, r6, lr}
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	d04b      	beq.n	800af38 <_reclaim_reent+0xa4>
 800aea0:	69c3      	ldr	r3, [r0, #28]
 800aea2:	b1ab      	cbz	r3, 800aed0 <_reclaim_reent+0x3c>
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	b16b      	cbz	r3, 800aec4 <_reclaim_reent+0x30>
 800aea8:	2500      	movs	r5, #0
 800aeaa:	69e3      	ldr	r3, [r4, #28]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	5959      	ldr	r1, [r3, r5]
 800aeb0:	2900      	cmp	r1, #0
 800aeb2:	d13b      	bne.n	800af2c <_reclaim_reent+0x98>
 800aeb4:	3504      	adds	r5, #4
 800aeb6:	2d80      	cmp	r5, #128	@ 0x80
 800aeb8:	d1f7      	bne.n	800aeaa <_reclaim_reent+0x16>
 800aeba:	69e3      	ldr	r3, [r4, #28]
 800aebc:	4620      	mov	r0, r4
 800aebe:	68d9      	ldr	r1, [r3, #12]
 800aec0:	f000 f8c8 	bl	800b054 <_free_r>
 800aec4:	69e3      	ldr	r3, [r4, #28]
 800aec6:	6819      	ldr	r1, [r3, #0]
 800aec8:	b111      	cbz	r1, 800aed0 <_reclaim_reent+0x3c>
 800aeca:	4620      	mov	r0, r4
 800aecc:	f000 f8c2 	bl	800b054 <_free_r>
 800aed0:	6961      	ldr	r1, [r4, #20]
 800aed2:	b111      	cbz	r1, 800aeda <_reclaim_reent+0x46>
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 f8bd 	bl	800b054 <_free_r>
 800aeda:	69e1      	ldr	r1, [r4, #28]
 800aedc:	b111      	cbz	r1, 800aee4 <_reclaim_reent+0x50>
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 f8b8 	bl	800b054 <_free_r>
 800aee4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aee6:	b111      	cbz	r1, 800aeee <_reclaim_reent+0x5a>
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 f8b3 	bl	800b054 <_free_r>
 800aeee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aef0:	b111      	cbz	r1, 800aef8 <_reclaim_reent+0x64>
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 f8ae 	bl	800b054 <_free_r>
 800aef8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800aefa:	b111      	cbz	r1, 800af02 <_reclaim_reent+0x6e>
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 f8a9 	bl	800b054 <_free_r>
 800af02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800af04:	b111      	cbz	r1, 800af0c <_reclaim_reent+0x78>
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f8a4 	bl	800b054 <_free_r>
 800af0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800af0e:	b111      	cbz	r1, 800af16 <_reclaim_reent+0x82>
 800af10:	4620      	mov	r0, r4
 800af12:	f000 f89f 	bl	800b054 <_free_r>
 800af16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af18:	b111      	cbz	r1, 800af20 <_reclaim_reent+0x8c>
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 f89a 	bl	800b054 <_free_r>
 800af20:	6a23      	ldr	r3, [r4, #32]
 800af22:	b14b      	cbz	r3, 800af38 <_reclaim_reent+0xa4>
 800af24:	4620      	mov	r0, r4
 800af26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af2a:	4718      	bx	r3
 800af2c:	680e      	ldr	r6, [r1, #0]
 800af2e:	4620      	mov	r0, r4
 800af30:	f000 f890 	bl	800b054 <_free_r>
 800af34:	4631      	mov	r1, r6
 800af36:	e7bb      	b.n	800aeb0 <_reclaim_reent+0x1c>
 800af38:	bd70      	pop	{r4, r5, r6, pc}
 800af3a:	bf00      	nop
 800af3c:	20000098 	.word	0x20000098

0800af40 <_lseek_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d07      	ldr	r5, [pc, #28]	@ (800af60 <_lseek_r+0x20>)
 800af44:	4604      	mov	r4, r0
 800af46:	4608      	mov	r0, r1
 800af48:	4611      	mov	r1, r2
 800af4a:	2200      	movs	r2, #0
 800af4c:	602a      	str	r2, [r5, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	f7f6 fc52 	bl	80017f8 <_lseek>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d102      	bne.n	800af5e <_lseek_r+0x1e>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	b103      	cbz	r3, 800af5e <_lseek_r+0x1e>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	2000563c 	.word	0x2000563c

0800af64 <_read_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d07      	ldr	r5, [pc, #28]	@ (800af84 <_read_r+0x20>)
 800af68:	4604      	mov	r4, r0
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	602a      	str	r2, [r5, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f7f6 fbfc 	bl	8001770 <_read>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_read_r+0x1e>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_read_r+0x1e>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	2000563c 	.word	0x2000563c

0800af88 <_sbrk_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d06      	ldr	r5, [pc, #24]	@ (800afa4 <_sbrk_r+0x1c>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	f7f6 fc3e 	bl	8001814 <_sbrk>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_sbrk_r+0x1a>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_sbrk_r+0x1a>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	2000563c 	.word	0x2000563c

0800afa8 <_write_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4d07      	ldr	r5, [pc, #28]	@ (800afc8 <_write_r+0x20>)
 800afac:	4604      	mov	r4, r0
 800afae:	4608      	mov	r0, r1
 800afb0:	4611      	mov	r1, r2
 800afb2:	2200      	movs	r2, #0
 800afb4:	602a      	str	r2, [r5, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	f7f6 fc74 	bl	80018a4 <_write>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d102      	bne.n	800afc6 <_write_r+0x1e>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	b103      	cbz	r3, 800afc6 <_write_r+0x1e>
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	2000563c 	.word	0x2000563c

0800afcc <__errno>:
 800afcc:	4b01      	ldr	r3, [pc, #4]	@ (800afd4 <__errno+0x8>)
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20000098 	.word	0x20000098

0800afd8 <__libc_init_array>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	4d0d      	ldr	r5, [pc, #52]	@ (800b010 <__libc_init_array+0x38>)
 800afdc:	4c0d      	ldr	r4, [pc, #52]	@ (800b014 <__libc_init_array+0x3c>)
 800afde:	1b64      	subs	r4, r4, r5
 800afe0:	10a4      	asrs	r4, r4, #2
 800afe2:	2600      	movs	r6, #0
 800afe4:	42a6      	cmp	r6, r4
 800afe6:	d109      	bne.n	800affc <__libc_init_array+0x24>
 800afe8:	4d0b      	ldr	r5, [pc, #44]	@ (800b018 <__libc_init_array+0x40>)
 800afea:	4c0c      	ldr	r4, [pc, #48]	@ (800b01c <__libc_init_array+0x44>)
 800afec:	f000 fe24 	bl	800bc38 <_init>
 800aff0:	1b64      	subs	r4, r4, r5
 800aff2:	10a4      	asrs	r4, r4, #2
 800aff4:	2600      	movs	r6, #0
 800aff6:	42a6      	cmp	r6, r4
 800aff8:	d105      	bne.n	800b006 <__libc_init_array+0x2e>
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b000:	4798      	blx	r3
 800b002:	3601      	adds	r6, #1
 800b004:	e7ee      	b.n	800afe4 <__libc_init_array+0xc>
 800b006:	f855 3b04 	ldr.w	r3, [r5], #4
 800b00a:	4798      	blx	r3
 800b00c:	3601      	adds	r6, #1
 800b00e:	e7f2      	b.n	800aff6 <__libc_init_array+0x1e>
 800b010:	0800c494 	.word	0x0800c494
 800b014:	0800c494 	.word	0x0800c494
 800b018:	0800c494 	.word	0x0800c494
 800b01c:	0800c498 	.word	0x0800c498

0800b020 <__retarget_lock_init_recursive>:
 800b020:	4770      	bx	lr

0800b022 <__retarget_lock_acquire_recursive>:
 800b022:	4770      	bx	lr

0800b024 <__retarget_lock_release_recursive>:
 800b024:	4770      	bx	lr

0800b026 <strcpy>:
 800b026:	4603      	mov	r3, r0
 800b028:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b02c:	f803 2b01 	strb.w	r2, [r3], #1
 800b030:	2a00      	cmp	r2, #0
 800b032:	d1f9      	bne.n	800b028 <strcpy+0x2>
 800b034:	4770      	bx	lr

0800b036 <memcpy>:
 800b036:	440a      	add	r2, r1
 800b038:	4291      	cmp	r1, r2
 800b03a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b03e:	d100      	bne.n	800b042 <memcpy+0xc>
 800b040:	4770      	bx	lr
 800b042:	b510      	push	{r4, lr}
 800b044:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b048:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b04c:	4291      	cmp	r1, r2
 800b04e:	d1f9      	bne.n	800b044 <memcpy+0xe>
 800b050:	bd10      	pop	{r4, pc}
	...

0800b054 <_free_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4605      	mov	r5, r0
 800b058:	2900      	cmp	r1, #0
 800b05a:	d041      	beq.n	800b0e0 <_free_r+0x8c>
 800b05c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b060:	1f0c      	subs	r4, r1, #4
 800b062:	2b00      	cmp	r3, #0
 800b064:	bfb8      	it	lt
 800b066:	18e4      	addlt	r4, r4, r3
 800b068:	f7ff fc90 	bl	800a98c <__malloc_lock>
 800b06c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e4 <_free_r+0x90>)
 800b06e:	6813      	ldr	r3, [r2, #0]
 800b070:	b933      	cbnz	r3, 800b080 <_free_r+0x2c>
 800b072:	6063      	str	r3, [r4, #4]
 800b074:	6014      	str	r4, [r2, #0]
 800b076:	4628      	mov	r0, r5
 800b078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b07c:	f7ff bc8c 	b.w	800a998 <__malloc_unlock>
 800b080:	42a3      	cmp	r3, r4
 800b082:	d908      	bls.n	800b096 <_free_r+0x42>
 800b084:	6820      	ldr	r0, [r4, #0]
 800b086:	1821      	adds	r1, r4, r0
 800b088:	428b      	cmp	r3, r1
 800b08a:	bf01      	itttt	eq
 800b08c:	6819      	ldreq	r1, [r3, #0]
 800b08e:	685b      	ldreq	r3, [r3, #4]
 800b090:	1809      	addeq	r1, r1, r0
 800b092:	6021      	streq	r1, [r4, #0]
 800b094:	e7ed      	b.n	800b072 <_free_r+0x1e>
 800b096:	461a      	mov	r2, r3
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	b10b      	cbz	r3, 800b0a0 <_free_r+0x4c>
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	d9fa      	bls.n	800b096 <_free_r+0x42>
 800b0a0:	6811      	ldr	r1, [r2, #0]
 800b0a2:	1850      	adds	r0, r2, r1
 800b0a4:	42a0      	cmp	r0, r4
 800b0a6:	d10b      	bne.n	800b0c0 <_free_r+0x6c>
 800b0a8:	6820      	ldr	r0, [r4, #0]
 800b0aa:	4401      	add	r1, r0
 800b0ac:	1850      	adds	r0, r2, r1
 800b0ae:	4283      	cmp	r3, r0
 800b0b0:	6011      	str	r1, [r2, #0]
 800b0b2:	d1e0      	bne.n	800b076 <_free_r+0x22>
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	6053      	str	r3, [r2, #4]
 800b0ba:	4408      	add	r0, r1
 800b0bc:	6010      	str	r0, [r2, #0]
 800b0be:	e7da      	b.n	800b076 <_free_r+0x22>
 800b0c0:	d902      	bls.n	800b0c8 <_free_r+0x74>
 800b0c2:	230c      	movs	r3, #12
 800b0c4:	602b      	str	r3, [r5, #0]
 800b0c6:	e7d6      	b.n	800b076 <_free_r+0x22>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	1821      	adds	r1, r4, r0
 800b0cc:	428b      	cmp	r3, r1
 800b0ce:	bf04      	itt	eq
 800b0d0:	6819      	ldreq	r1, [r3, #0]
 800b0d2:	685b      	ldreq	r3, [r3, #4]
 800b0d4:	6063      	str	r3, [r4, #4]
 800b0d6:	bf04      	itt	eq
 800b0d8:	1809      	addeq	r1, r1, r0
 800b0da:	6021      	streq	r1, [r4, #0]
 800b0dc:	6054      	str	r4, [r2, #4]
 800b0de:	e7ca      	b.n	800b076 <_free_r+0x22>
 800b0e0:	bd38      	pop	{r3, r4, r5, pc}
 800b0e2:	bf00      	nop
 800b0e4:	200054fc 	.word	0x200054fc

0800b0e8 <__ssputs_r>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	688e      	ldr	r6, [r1, #8]
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	42be      	cmp	r6, r7
 800b0f2:	680b      	ldr	r3, [r1, #0]
 800b0f4:	4682      	mov	sl, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	4690      	mov	r8, r2
 800b0fa:	d82d      	bhi.n	800b158 <__ssputs_r+0x70>
 800b0fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b104:	d026      	beq.n	800b154 <__ssputs_r+0x6c>
 800b106:	6965      	ldr	r5, [r4, #20]
 800b108:	6909      	ldr	r1, [r1, #16]
 800b10a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b10e:	eba3 0901 	sub.w	r9, r3, r1
 800b112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b116:	1c7b      	adds	r3, r7, #1
 800b118:	444b      	add	r3, r9
 800b11a:	106d      	asrs	r5, r5, #1
 800b11c:	429d      	cmp	r5, r3
 800b11e:	bf38      	it	cc
 800b120:	461d      	movcc	r5, r3
 800b122:	0553      	lsls	r3, r2, #21
 800b124:	d527      	bpl.n	800b176 <__ssputs_r+0x8e>
 800b126:	4629      	mov	r1, r5
 800b128:	f7ff fbb0 	bl	800a88c <_malloc_r>
 800b12c:	4606      	mov	r6, r0
 800b12e:	b360      	cbz	r0, 800b18a <__ssputs_r+0xa2>
 800b130:	6921      	ldr	r1, [r4, #16]
 800b132:	464a      	mov	r2, r9
 800b134:	f7ff ff7f 	bl	800b036 <memcpy>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b142:	81a3      	strh	r3, [r4, #12]
 800b144:	6126      	str	r6, [r4, #16]
 800b146:	6165      	str	r5, [r4, #20]
 800b148:	444e      	add	r6, r9
 800b14a:	eba5 0509 	sub.w	r5, r5, r9
 800b14e:	6026      	str	r6, [r4, #0]
 800b150:	60a5      	str	r5, [r4, #8]
 800b152:	463e      	mov	r6, r7
 800b154:	42be      	cmp	r6, r7
 800b156:	d900      	bls.n	800b15a <__ssputs_r+0x72>
 800b158:	463e      	mov	r6, r7
 800b15a:	6820      	ldr	r0, [r4, #0]
 800b15c:	4632      	mov	r2, r6
 800b15e:	4641      	mov	r1, r8
 800b160:	f000 fcf8 	bl	800bb54 <memmove>
 800b164:	68a3      	ldr	r3, [r4, #8]
 800b166:	1b9b      	subs	r3, r3, r6
 800b168:	60a3      	str	r3, [r4, #8]
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	4433      	add	r3, r6
 800b16e:	6023      	str	r3, [r4, #0]
 800b170:	2000      	movs	r0, #0
 800b172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b176:	462a      	mov	r2, r5
 800b178:	f000 fd28 	bl	800bbcc <_realloc_r>
 800b17c:	4606      	mov	r6, r0
 800b17e:	2800      	cmp	r0, #0
 800b180:	d1e0      	bne.n	800b144 <__ssputs_r+0x5c>
 800b182:	6921      	ldr	r1, [r4, #16]
 800b184:	4650      	mov	r0, sl
 800b186:	f7ff ff65 	bl	800b054 <_free_r>
 800b18a:	230c      	movs	r3, #12
 800b18c:	f8ca 3000 	str.w	r3, [sl]
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b196:	81a3      	strh	r3, [r4, #12]
 800b198:	f04f 30ff 	mov.w	r0, #4294967295
 800b19c:	e7e9      	b.n	800b172 <__ssputs_r+0x8a>
	...

0800b1a0 <_svfiprintf_r>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4698      	mov	r8, r3
 800b1a6:	898b      	ldrh	r3, [r1, #12]
 800b1a8:	061b      	lsls	r3, r3, #24
 800b1aa:	b09d      	sub	sp, #116	@ 0x74
 800b1ac:	4607      	mov	r7, r0
 800b1ae:	460d      	mov	r5, r1
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	d510      	bpl.n	800b1d6 <_svfiprintf_r+0x36>
 800b1b4:	690b      	ldr	r3, [r1, #16]
 800b1b6:	b973      	cbnz	r3, 800b1d6 <_svfiprintf_r+0x36>
 800b1b8:	2140      	movs	r1, #64	@ 0x40
 800b1ba:	f7ff fb67 	bl	800a88c <_malloc_r>
 800b1be:	6028      	str	r0, [r5, #0]
 800b1c0:	6128      	str	r0, [r5, #16]
 800b1c2:	b930      	cbnz	r0, 800b1d2 <_svfiprintf_r+0x32>
 800b1c4:	230c      	movs	r3, #12
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	b01d      	add	sp, #116	@ 0x74
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	2340      	movs	r3, #64	@ 0x40
 800b1d4:	616b      	str	r3, [r5, #20]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1da:	2320      	movs	r3, #32
 800b1dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1e4:	2330      	movs	r3, #48	@ 0x30
 800b1e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b384 <_svfiprintf_r+0x1e4>
 800b1ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1ee:	f04f 0901 	mov.w	r9, #1
 800b1f2:	4623      	mov	r3, r4
 800b1f4:	469a      	mov	sl, r3
 800b1f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1fa:	b10a      	cbz	r2, 800b200 <_svfiprintf_r+0x60>
 800b1fc:	2a25      	cmp	r2, #37	@ 0x25
 800b1fe:	d1f9      	bne.n	800b1f4 <_svfiprintf_r+0x54>
 800b200:	ebba 0b04 	subs.w	fp, sl, r4
 800b204:	d00b      	beq.n	800b21e <_svfiprintf_r+0x7e>
 800b206:	465b      	mov	r3, fp
 800b208:	4622      	mov	r2, r4
 800b20a:	4629      	mov	r1, r5
 800b20c:	4638      	mov	r0, r7
 800b20e:	f7ff ff6b 	bl	800b0e8 <__ssputs_r>
 800b212:	3001      	adds	r0, #1
 800b214:	f000 80a7 	beq.w	800b366 <_svfiprintf_r+0x1c6>
 800b218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b21a:	445a      	add	r2, fp
 800b21c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b21e:	f89a 3000 	ldrb.w	r3, [sl]
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 809f 	beq.w	800b366 <_svfiprintf_r+0x1c6>
 800b228:	2300      	movs	r3, #0
 800b22a:	f04f 32ff 	mov.w	r2, #4294967295
 800b22e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b232:	f10a 0a01 	add.w	sl, sl, #1
 800b236:	9304      	str	r3, [sp, #16]
 800b238:	9307      	str	r3, [sp, #28]
 800b23a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b23e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b240:	4654      	mov	r4, sl
 800b242:	2205      	movs	r2, #5
 800b244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b248:	484e      	ldr	r0, [pc, #312]	@ (800b384 <_svfiprintf_r+0x1e4>)
 800b24a:	f7f4 ffc9 	bl	80001e0 <memchr>
 800b24e:	9a04      	ldr	r2, [sp, #16]
 800b250:	b9d8      	cbnz	r0, 800b28a <_svfiprintf_r+0xea>
 800b252:	06d0      	lsls	r0, r2, #27
 800b254:	bf44      	itt	mi
 800b256:	2320      	movmi	r3, #32
 800b258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b25c:	0711      	lsls	r1, r2, #28
 800b25e:	bf44      	itt	mi
 800b260:	232b      	movmi	r3, #43	@ 0x2b
 800b262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b266:	f89a 3000 	ldrb.w	r3, [sl]
 800b26a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b26c:	d015      	beq.n	800b29a <_svfiprintf_r+0xfa>
 800b26e:	9a07      	ldr	r2, [sp, #28]
 800b270:	4654      	mov	r4, sl
 800b272:	2000      	movs	r0, #0
 800b274:	f04f 0c0a 	mov.w	ip, #10
 800b278:	4621      	mov	r1, r4
 800b27a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b27e:	3b30      	subs	r3, #48	@ 0x30
 800b280:	2b09      	cmp	r3, #9
 800b282:	d94b      	bls.n	800b31c <_svfiprintf_r+0x17c>
 800b284:	b1b0      	cbz	r0, 800b2b4 <_svfiprintf_r+0x114>
 800b286:	9207      	str	r2, [sp, #28]
 800b288:	e014      	b.n	800b2b4 <_svfiprintf_r+0x114>
 800b28a:	eba0 0308 	sub.w	r3, r0, r8
 800b28e:	fa09 f303 	lsl.w	r3, r9, r3
 800b292:	4313      	orrs	r3, r2
 800b294:	9304      	str	r3, [sp, #16]
 800b296:	46a2      	mov	sl, r4
 800b298:	e7d2      	b.n	800b240 <_svfiprintf_r+0xa0>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	1d19      	adds	r1, r3, #4
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	9103      	str	r1, [sp, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bfbb      	ittet	lt
 800b2a6:	425b      	neglt	r3, r3
 800b2a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ac:	9307      	strge	r3, [sp, #28]
 800b2ae:	9307      	strlt	r3, [sp, #28]
 800b2b0:	bfb8      	it	lt
 800b2b2:	9204      	strlt	r2, [sp, #16]
 800b2b4:	7823      	ldrb	r3, [r4, #0]
 800b2b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2b8:	d10a      	bne.n	800b2d0 <_svfiprintf_r+0x130>
 800b2ba:	7863      	ldrb	r3, [r4, #1]
 800b2bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2be:	d132      	bne.n	800b326 <_svfiprintf_r+0x186>
 800b2c0:	9b03      	ldr	r3, [sp, #12]
 800b2c2:	1d1a      	adds	r2, r3, #4
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	9203      	str	r2, [sp, #12]
 800b2c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2cc:	3402      	adds	r4, #2
 800b2ce:	9305      	str	r3, [sp, #20]
 800b2d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b394 <_svfiprintf_r+0x1f4>
 800b2d4:	7821      	ldrb	r1, [r4, #0]
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	4650      	mov	r0, sl
 800b2da:	f7f4 ff81 	bl	80001e0 <memchr>
 800b2de:	b138      	cbz	r0, 800b2f0 <_svfiprintf_r+0x150>
 800b2e0:	9b04      	ldr	r3, [sp, #16]
 800b2e2:	eba0 000a 	sub.w	r0, r0, sl
 800b2e6:	2240      	movs	r2, #64	@ 0x40
 800b2e8:	4082      	lsls	r2, r0
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	3401      	adds	r4, #1
 800b2ee:	9304      	str	r3, [sp, #16]
 800b2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f4:	4824      	ldr	r0, [pc, #144]	@ (800b388 <_svfiprintf_r+0x1e8>)
 800b2f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2fa:	2206      	movs	r2, #6
 800b2fc:	f7f4 ff70 	bl	80001e0 <memchr>
 800b300:	2800      	cmp	r0, #0
 800b302:	d036      	beq.n	800b372 <_svfiprintf_r+0x1d2>
 800b304:	4b21      	ldr	r3, [pc, #132]	@ (800b38c <_svfiprintf_r+0x1ec>)
 800b306:	bb1b      	cbnz	r3, 800b350 <_svfiprintf_r+0x1b0>
 800b308:	9b03      	ldr	r3, [sp, #12]
 800b30a:	3307      	adds	r3, #7
 800b30c:	f023 0307 	bic.w	r3, r3, #7
 800b310:	3308      	adds	r3, #8
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b316:	4433      	add	r3, r6
 800b318:	9309      	str	r3, [sp, #36]	@ 0x24
 800b31a:	e76a      	b.n	800b1f2 <_svfiprintf_r+0x52>
 800b31c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b320:	460c      	mov	r4, r1
 800b322:	2001      	movs	r0, #1
 800b324:	e7a8      	b.n	800b278 <_svfiprintf_r+0xd8>
 800b326:	2300      	movs	r3, #0
 800b328:	3401      	adds	r4, #1
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	4619      	mov	r1, r3
 800b32e:	f04f 0c0a 	mov.w	ip, #10
 800b332:	4620      	mov	r0, r4
 800b334:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b338:	3a30      	subs	r2, #48	@ 0x30
 800b33a:	2a09      	cmp	r2, #9
 800b33c:	d903      	bls.n	800b346 <_svfiprintf_r+0x1a6>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0c6      	beq.n	800b2d0 <_svfiprintf_r+0x130>
 800b342:	9105      	str	r1, [sp, #20]
 800b344:	e7c4      	b.n	800b2d0 <_svfiprintf_r+0x130>
 800b346:	fb0c 2101 	mla	r1, ip, r1, r2
 800b34a:	4604      	mov	r4, r0
 800b34c:	2301      	movs	r3, #1
 800b34e:	e7f0      	b.n	800b332 <_svfiprintf_r+0x192>
 800b350:	ab03      	add	r3, sp, #12
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	462a      	mov	r2, r5
 800b356:	4b0e      	ldr	r3, [pc, #56]	@ (800b390 <_svfiprintf_r+0x1f0>)
 800b358:	a904      	add	r1, sp, #16
 800b35a:	4638      	mov	r0, r7
 800b35c:	f3af 8000 	nop.w
 800b360:	1c42      	adds	r2, r0, #1
 800b362:	4606      	mov	r6, r0
 800b364:	d1d6      	bne.n	800b314 <_svfiprintf_r+0x174>
 800b366:	89ab      	ldrh	r3, [r5, #12]
 800b368:	065b      	lsls	r3, r3, #25
 800b36a:	f53f af2d 	bmi.w	800b1c8 <_svfiprintf_r+0x28>
 800b36e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b370:	e72c      	b.n	800b1cc <_svfiprintf_r+0x2c>
 800b372:	ab03      	add	r3, sp, #12
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	462a      	mov	r2, r5
 800b378:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <_svfiprintf_r+0x1f0>)
 800b37a:	a904      	add	r1, sp, #16
 800b37c:	4638      	mov	r0, r7
 800b37e:	f000 f9bb 	bl	800b6f8 <_printf_i>
 800b382:	e7ed      	b.n	800b360 <_svfiprintf_r+0x1c0>
 800b384:	0800c458 	.word	0x0800c458
 800b388:	0800c462 	.word	0x0800c462
 800b38c:	00000000 	.word	0x00000000
 800b390:	0800b0e9 	.word	0x0800b0e9
 800b394:	0800c45e 	.word	0x0800c45e

0800b398 <__sfputc_r>:
 800b398:	6893      	ldr	r3, [r2, #8]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	b410      	push	{r4}
 800b3a0:	6093      	str	r3, [r2, #8]
 800b3a2:	da08      	bge.n	800b3b6 <__sfputc_r+0x1e>
 800b3a4:	6994      	ldr	r4, [r2, #24]
 800b3a6:	42a3      	cmp	r3, r4
 800b3a8:	db01      	blt.n	800b3ae <__sfputc_r+0x16>
 800b3aa:	290a      	cmp	r1, #10
 800b3ac:	d103      	bne.n	800b3b6 <__sfputc_r+0x1e>
 800b3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b2:	f7ff bc8c 	b.w	800acce <__swbuf_r>
 800b3b6:	6813      	ldr	r3, [r2, #0]
 800b3b8:	1c58      	adds	r0, r3, #1
 800b3ba:	6010      	str	r0, [r2, #0]
 800b3bc:	7019      	strb	r1, [r3, #0]
 800b3be:	4608      	mov	r0, r1
 800b3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <__sfputs_r>:
 800b3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	460f      	mov	r7, r1
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	18d5      	adds	r5, r2, r3
 800b3d0:	42ac      	cmp	r4, r5
 800b3d2:	d101      	bne.n	800b3d8 <__sfputs_r+0x12>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e007      	b.n	800b3e8 <__sfputs_r+0x22>
 800b3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3dc:	463a      	mov	r2, r7
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7ff ffda 	bl	800b398 <__sfputc_r>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d1f3      	bne.n	800b3d0 <__sfputs_r+0xa>
 800b3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3ec <_vfiprintf_r>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	b09d      	sub	sp, #116	@ 0x74
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	4698      	mov	r8, r3
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	b118      	cbz	r0, 800b404 <_vfiprintf_r+0x18>
 800b3fc:	6a03      	ldr	r3, [r0, #32]
 800b3fe:	b90b      	cbnz	r3, 800b404 <_vfiprintf_r+0x18>
 800b400:	f7ff fb5c 	bl	800aabc <__sinit>
 800b404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b406:	07d9      	lsls	r1, r3, #31
 800b408:	d405      	bmi.n	800b416 <_vfiprintf_r+0x2a>
 800b40a:	89ab      	ldrh	r3, [r5, #12]
 800b40c:	059a      	lsls	r2, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_vfiprintf_r+0x2a>
 800b410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b412:	f7ff fe06 	bl	800b022 <__retarget_lock_acquire_recursive>
 800b416:	89ab      	ldrh	r3, [r5, #12]
 800b418:	071b      	lsls	r3, r3, #28
 800b41a:	d501      	bpl.n	800b420 <_vfiprintf_r+0x34>
 800b41c:	692b      	ldr	r3, [r5, #16]
 800b41e:	b99b      	cbnz	r3, 800b448 <_vfiprintf_r+0x5c>
 800b420:	4629      	mov	r1, r5
 800b422:	4630      	mov	r0, r6
 800b424:	f7ff fc92 	bl	800ad4c <__swsetup_r>
 800b428:	b170      	cbz	r0, 800b448 <_vfiprintf_r+0x5c>
 800b42a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b42c:	07dc      	lsls	r4, r3, #31
 800b42e:	d504      	bpl.n	800b43a <_vfiprintf_r+0x4e>
 800b430:	f04f 30ff 	mov.w	r0, #4294967295
 800b434:	b01d      	add	sp, #116	@ 0x74
 800b436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	0598      	lsls	r0, r3, #22
 800b43e:	d4f7      	bmi.n	800b430 <_vfiprintf_r+0x44>
 800b440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b442:	f7ff fdef 	bl	800b024 <__retarget_lock_release_recursive>
 800b446:	e7f3      	b.n	800b430 <_vfiprintf_r+0x44>
 800b448:	2300      	movs	r3, #0
 800b44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b44c:	2320      	movs	r3, #32
 800b44e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b452:	f8cd 800c 	str.w	r8, [sp, #12]
 800b456:	2330      	movs	r3, #48	@ 0x30
 800b458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b608 <_vfiprintf_r+0x21c>
 800b45c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b460:	f04f 0901 	mov.w	r9, #1
 800b464:	4623      	mov	r3, r4
 800b466:	469a      	mov	sl, r3
 800b468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46c:	b10a      	cbz	r2, 800b472 <_vfiprintf_r+0x86>
 800b46e:	2a25      	cmp	r2, #37	@ 0x25
 800b470:	d1f9      	bne.n	800b466 <_vfiprintf_r+0x7a>
 800b472:	ebba 0b04 	subs.w	fp, sl, r4
 800b476:	d00b      	beq.n	800b490 <_vfiprintf_r+0xa4>
 800b478:	465b      	mov	r3, fp
 800b47a:	4622      	mov	r2, r4
 800b47c:	4629      	mov	r1, r5
 800b47e:	4630      	mov	r0, r6
 800b480:	f7ff ffa1 	bl	800b3c6 <__sfputs_r>
 800b484:	3001      	adds	r0, #1
 800b486:	f000 80a7 	beq.w	800b5d8 <_vfiprintf_r+0x1ec>
 800b48a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b48c:	445a      	add	r2, fp
 800b48e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b490:	f89a 3000 	ldrb.w	r3, [sl]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 809f 	beq.w	800b5d8 <_vfiprintf_r+0x1ec>
 800b49a:	2300      	movs	r3, #0
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a4:	f10a 0a01 	add.w	sl, sl, #1
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4b2:	4654      	mov	r4, sl
 800b4b4:	2205      	movs	r2, #5
 800b4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ba:	4853      	ldr	r0, [pc, #332]	@ (800b608 <_vfiprintf_r+0x21c>)
 800b4bc:	f7f4 fe90 	bl	80001e0 <memchr>
 800b4c0:	9a04      	ldr	r2, [sp, #16]
 800b4c2:	b9d8      	cbnz	r0, 800b4fc <_vfiprintf_r+0x110>
 800b4c4:	06d1      	lsls	r1, r2, #27
 800b4c6:	bf44      	itt	mi
 800b4c8:	2320      	movmi	r3, #32
 800b4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ce:	0713      	lsls	r3, r2, #28
 800b4d0:	bf44      	itt	mi
 800b4d2:	232b      	movmi	r3, #43	@ 0x2b
 800b4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4de:	d015      	beq.n	800b50c <_vfiprintf_r+0x120>
 800b4e0:	9a07      	ldr	r2, [sp, #28]
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f04f 0c0a 	mov.w	ip, #10
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f0:	3b30      	subs	r3, #48	@ 0x30
 800b4f2:	2b09      	cmp	r3, #9
 800b4f4:	d94b      	bls.n	800b58e <_vfiprintf_r+0x1a2>
 800b4f6:	b1b0      	cbz	r0, 800b526 <_vfiprintf_r+0x13a>
 800b4f8:	9207      	str	r2, [sp, #28]
 800b4fa:	e014      	b.n	800b526 <_vfiprintf_r+0x13a>
 800b4fc:	eba0 0308 	sub.w	r3, r0, r8
 800b500:	fa09 f303 	lsl.w	r3, r9, r3
 800b504:	4313      	orrs	r3, r2
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	46a2      	mov	sl, r4
 800b50a:	e7d2      	b.n	800b4b2 <_vfiprintf_r+0xc6>
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	1d19      	adds	r1, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	9103      	str	r1, [sp, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	bfbb      	ittet	lt
 800b518:	425b      	neglt	r3, r3
 800b51a:	f042 0202 	orrlt.w	r2, r2, #2
 800b51e:	9307      	strge	r3, [sp, #28]
 800b520:	9307      	strlt	r3, [sp, #28]
 800b522:	bfb8      	it	lt
 800b524:	9204      	strlt	r2, [sp, #16]
 800b526:	7823      	ldrb	r3, [r4, #0]
 800b528:	2b2e      	cmp	r3, #46	@ 0x2e
 800b52a:	d10a      	bne.n	800b542 <_vfiprintf_r+0x156>
 800b52c:	7863      	ldrb	r3, [r4, #1]
 800b52e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b530:	d132      	bne.n	800b598 <_vfiprintf_r+0x1ac>
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	1d1a      	adds	r2, r3, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	9203      	str	r2, [sp, #12]
 800b53a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b53e:	3402      	adds	r4, #2
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b618 <_vfiprintf_r+0x22c>
 800b546:	7821      	ldrb	r1, [r4, #0]
 800b548:	2203      	movs	r2, #3
 800b54a:	4650      	mov	r0, sl
 800b54c:	f7f4 fe48 	bl	80001e0 <memchr>
 800b550:	b138      	cbz	r0, 800b562 <_vfiprintf_r+0x176>
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	eba0 000a 	sub.w	r0, r0, sl
 800b558:	2240      	movs	r2, #64	@ 0x40
 800b55a:	4082      	lsls	r2, r0
 800b55c:	4313      	orrs	r3, r2
 800b55e:	3401      	adds	r4, #1
 800b560:	9304      	str	r3, [sp, #16]
 800b562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b566:	4829      	ldr	r0, [pc, #164]	@ (800b60c <_vfiprintf_r+0x220>)
 800b568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b56c:	2206      	movs	r2, #6
 800b56e:	f7f4 fe37 	bl	80001e0 <memchr>
 800b572:	2800      	cmp	r0, #0
 800b574:	d03f      	beq.n	800b5f6 <_vfiprintf_r+0x20a>
 800b576:	4b26      	ldr	r3, [pc, #152]	@ (800b610 <_vfiprintf_r+0x224>)
 800b578:	bb1b      	cbnz	r3, 800b5c2 <_vfiprintf_r+0x1d6>
 800b57a:	9b03      	ldr	r3, [sp, #12]
 800b57c:	3307      	adds	r3, #7
 800b57e:	f023 0307 	bic.w	r3, r3, #7
 800b582:	3308      	adds	r3, #8
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	443b      	add	r3, r7
 800b58a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b58c:	e76a      	b.n	800b464 <_vfiprintf_r+0x78>
 800b58e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b592:	460c      	mov	r4, r1
 800b594:	2001      	movs	r0, #1
 800b596:	e7a8      	b.n	800b4ea <_vfiprintf_r+0xfe>
 800b598:	2300      	movs	r3, #0
 800b59a:	3401      	adds	r4, #1
 800b59c:	9305      	str	r3, [sp, #20]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	f04f 0c0a 	mov.w	ip, #10
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5aa:	3a30      	subs	r2, #48	@ 0x30
 800b5ac:	2a09      	cmp	r2, #9
 800b5ae:	d903      	bls.n	800b5b8 <_vfiprintf_r+0x1cc>
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0c6      	beq.n	800b542 <_vfiprintf_r+0x156>
 800b5b4:	9105      	str	r1, [sp, #20]
 800b5b6:	e7c4      	b.n	800b542 <_vfiprintf_r+0x156>
 800b5b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5bc:	4604      	mov	r4, r0
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e7f0      	b.n	800b5a4 <_vfiprintf_r+0x1b8>
 800b5c2:	ab03      	add	r3, sp, #12
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <_vfiprintf_r+0x228>)
 800b5ca:	a904      	add	r1, sp, #16
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f3af 8000 	nop.w
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	1c78      	adds	r0, r7, #1
 800b5d6:	d1d6      	bne.n	800b586 <_vfiprintf_r+0x19a>
 800b5d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5da:	07d9      	lsls	r1, r3, #31
 800b5dc:	d405      	bmi.n	800b5ea <_vfiprintf_r+0x1fe>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	059a      	lsls	r2, r3, #22
 800b5e2:	d402      	bmi.n	800b5ea <_vfiprintf_r+0x1fe>
 800b5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5e6:	f7ff fd1d 	bl	800b024 <__retarget_lock_release_recursive>
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	065b      	lsls	r3, r3, #25
 800b5ee:	f53f af1f 	bmi.w	800b430 <_vfiprintf_r+0x44>
 800b5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f4:	e71e      	b.n	800b434 <_vfiprintf_r+0x48>
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <_vfiprintf_r+0x228>)
 800b5fe:	a904      	add	r1, sp, #16
 800b600:	4630      	mov	r0, r6
 800b602:	f000 f879 	bl	800b6f8 <_printf_i>
 800b606:	e7e4      	b.n	800b5d2 <_vfiprintf_r+0x1e6>
 800b608:	0800c458 	.word	0x0800c458
 800b60c:	0800c462 	.word	0x0800c462
 800b610:	00000000 	.word	0x00000000
 800b614:	0800b3c7 	.word	0x0800b3c7
 800b618:	0800c45e 	.word	0x0800c45e

0800b61c <_printf_common>:
 800b61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	4616      	mov	r6, r2
 800b622:	4698      	mov	r8, r3
 800b624:	688a      	ldr	r2, [r1, #8]
 800b626:	690b      	ldr	r3, [r1, #16]
 800b628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b62c:	4293      	cmp	r3, r2
 800b62e:	bfb8      	it	lt
 800b630:	4613      	movlt	r3, r2
 800b632:	6033      	str	r3, [r6, #0]
 800b634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b638:	4607      	mov	r7, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	b10a      	cbz	r2, 800b642 <_printf_common+0x26>
 800b63e:	3301      	adds	r3, #1
 800b640:	6033      	str	r3, [r6, #0]
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	0699      	lsls	r1, r3, #26
 800b646:	bf42      	ittt	mi
 800b648:	6833      	ldrmi	r3, [r6, #0]
 800b64a:	3302      	addmi	r3, #2
 800b64c:	6033      	strmi	r3, [r6, #0]
 800b64e:	6825      	ldr	r5, [r4, #0]
 800b650:	f015 0506 	ands.w	r5, r5, #6
 800b654:	d106      	bne.n	800b664 <_printf_common+0x48>
 800b656:	f104 0a19 	add.w	sl, r4, #25
 800b65a:	68e3      	ldr	r3, [r4, #12]
 800b65c:	6832      	ldr	r2, [r6, #0]
 800b65e:	1a9b      	subs	r3, r3, r2
 800b660:	42ab      	cmp	r3, r5
 800b662:	dc26      	bgt.n	800b6b2 <_printf_common+0x96>
 800b664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b668:	6822      	ldr	r2, [r4, #0]
 800b66a:	3b00      	subs	r3, #0
 800b66c:	bf18      	it	ne
 800b66e:	2301      	movne	r3, #1
 800b670:	0692      	lsls	r2, r2, #26
 800b672:	d42b      	bmi.n	800b6cc <_printf_common+0xb0>
 800b674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b678:	4641      	mov	r1, r8
 800b67a:	4638      	mov	r0, r7
 800b67c:	47c8      	blx	r9
 800b67e:	3001      	adds	r0, #1
 800b680:	d01e      	beq.n	800b6c0 <_printf_common+0xa4>
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	6922      	ldr	r2, [r4, #16]
 800b686:	f003 0306 	and.w	r3, r3, #6
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	bf02      	ittt	eq
 800b68e:	68e5      	ldreq	r5, [r4, #12]
 800b690:	6833      	ldreq	r3, [r6, #0]
 800b692:	1aed      	subeq	r5, r5, r3
 800b694:	68a3      	ldr	r3, [r4, #8]
 800b696:	bf0c      	ite	eq
 800b698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b69c:	2500      	movne	r5, #0
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	bfc4      	itt	gt
 800b6a2:	1a9b      	subgt	r3, r3, r2
 800b6a4:	18ed      	addgt	r5, r5, r3
 800b6a6:	2600      	movs	r6, #0
 800b6a8:	341a      	adds	r4, #26
 800b6aa:	42b5      	cmp	r5, r6
 800b6ac:	d11a      	bne.n	800b6e4 <_printf_common+0xc8>
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e008      	b.n	800b6c4 <_printf_common+0xa8>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	4652      	mov	r2, sl
 800b6b6:	4641      	mov	r1, r8
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	47c8      	blx	r9
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d103      	bne.n	800b6c8 <_printf_common+0xac>
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	e7c6      	b.n	800b65a <_printf_common+0x3e>
 800b6cc:	18e1      	adds	r1, r4, r3
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	2030      	movs	r0, #48	@ 0x30
 800b6d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6d6:	4422      	add	r2, r4
 800b6d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6e0:	3302      	adds	r3, #2
 800b6e2:	e7c7      	b.n	800b674 <_printf_common+0x58>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	47c8      	blx	r9
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	d0e6      	beq.n	800b6c0 <_printf_common+0xa4>
 800b6f2:	3601      	adds	r6, #1
 800b6f4:	e7d9      	b.n	800b6aa <_printf_common+0x8e>
	...

0800b6f8 <_printf_i>:
 800b6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	7e0f      	ldrb	r7, [r1, #24]
 800b6fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b700:	2f78      	cmp	r7, #120	@ 0x78
 800b702:	4691      	mov	r9, r2
 800b704:	4680      	mov	r8, r0
 800b706:	460c      	mov	r4, r1
 800b708:	469a      	mov	sl, r3
 800b70a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b70e:	d807      	bhi.n	800b720 <_printf_i+0x28>
 800b710:	2f62      	cmp	r7, #98	@ 0x62
 800b712:	d80a      	bhi.n	800b72a <_printf_i+0x32>
 800b714:	2f00      	cmp	r7, #0
 800b716:	f000 80d2 	beq.w	800b8be <_printf_i+0x1c6>
 800b71a:	2f58      	cmp	r7, #88	@ 0x58
 800b71c:	f000 80b9 	beq.w	800b892 <_printf_i+0x19a>
 800b720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b728:	e03a      	b.n	800b7a0 <_printf_i+0xa8>
 800b72a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b72e:	2b15      	cmp	r3, #21
 800b730:	d8f6      	bhi.n	800b720 <_printf_i+0x28>
 800b732:	a101      	add	r1, pc, #4	@ (adr r1, 800b738 <_printf_i+0x40>)
 800b734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b738:	0800b791 	.word	0x0800b791
 800b73c:	0800b7a5 	.word	0x0800b7a5
 800b740:	0800b721 	.word	0x0800b721
 800b744:	0800b721 	.word	0x0800b721
 800b748:	0800b721 	.word	0x0800b721
 800b74c:	0800b721 	.word	0x0800b721
 800b750:	0800b7a5 	.word	0x0800b7a5
 800b754:	0800b721 	.word	0x0800b721
 800b758:	0800b721 	.word	0x0800b721
 800b75c:	0800b721 	.word	0x0800b721
 800b760:	0800b721 	.word	0x0800b721
 800b764:	0800b8a5 	.word	0x0800b8a5
 800b768:	0800b7cf 	.word	0x0800b7cf
 800b76c:	0800b85f 	.word	0x0800b85f
 800b770:	0800b721 	.word	0x0800b721
 800b774:	0800b721 	.word	0x0800b721
 800b778:	0800b8c7 	.word	0x0800b8c7
 800b77c:	0800b721 	.word	0x0800b721
 800b780:	0800b7cf 	.word	0x0800b7cf
 800b784:	0800b721 	.word	0x0800b721
 800b788:	0800b721 	.word	0x0800b721
 800b78c:	0800b867 	.word	0x0800b867
 800b790:	6833      	ldr	r3, [r6, #0]
 800b792:	1d1a      	adds	r2, r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6032      	str	r2, [r6, #0]
 800b798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b79c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e09d      	b.n	800b8e0 <_printf_i+0x1e8>
 800b7a4:	6833      	ldr	r3, [r6, #0]
 800b7a6:	6820      	ldr	r0, [r4, #0]
 800b7a8:	1d19      	adds	r1, r3, #4
 800b7aa:	6031      	str	r1, [r6, #0]
 800b7ac:	0606      	lsls	r6, r0, #24
 800b7ae:	d501      	bpl.n	800b7b4 <_printf_i+0xbc>
 800b7b0:	681d      	ldr	r5, [r3, #0]
 800b7b2:	e003      	b.n	800b7bc <_printf_i+0xc4>
 800b7b4:	0645      	lsls	r5, r0, #25
 800b7b6:	d5fb      	bpl.n	800b7b0 <_printf_i+0xb8>
 800b7b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7bc:	2d00      	cmp	r5, #0
 800b7be:	da03      	bge.n	800b7c8 <_printf_i+0xd0>
 800b7c0:	232d      	movs	r3, #45	@ 0x2d
 800b7c2:	426d      	negs	r5, r5
 800b7c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c8:	4859      	ldr	r0, [pc, #356]	@ (800b930 <_printf_i+0x238>)
 800b7ca:	230a      	movs	r3, #10
 800b7cc:	e011      	b.n	800b7f2 <_printf_i+0xfa>
 800b7ce:	6821      	ldr	r1, [r4, #0]
 800b7d0:	6833      	ldr	r3, [r6, #0]
 800b7d2:	0608      	lsls	r0, r1, #24
 800b7d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7d8:	d402      	bmi.n	800b7e0 <_printf_i+0xe8>
 800b7da:	0649      	lsls	r1, r1, #25
 800b7dc:	bf48      	it	mi
 800b7de:	b2ad      	uxthmi	r5, r5
 800b7e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7e2:	4853      	ldr	r0, [pc, #332]	@ (800b930 <_printf_i+0x238>)
 800b7e4:	6033      	str	r3, [r6, #0]
 800b7e6:	bf14      	ite	ne
 800b7e8:	230a      	movne	r3, #10
 800b7ea:	2308      	moveq	r3, #8
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7f2:	6866      	ldr	r6, [r4, #4]
 800b7f4:	60a6      	str	r6, [r4, #8]
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	bfa2      	ittt	ge
 800b7fa:	6821      	ldrge	r1, [r4, #0]
 800b7fc:	f021 0104 	bicge.w	r1, r1, #4
 800b800:	6021      	strge	r1, [r4, #0]
 800b802:	b90d      	cbnz	r5, 800b808 <_printf_i+0x110>
 800b804:	2e00      	cmp	r6, #0
 800b806:	d04b      	beq.n	800b8a0 <_printf_i+0x1a8>
 800b808:	4616      	mov	r6, r2
 800b80a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b80e:	fb03 5711 	mls	r7, r3, r1, r5
 800b812:	5dc7      	ldrb	r7, [r0, r7]
 800b814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b818:	462f      	mov	r7, r5
 800b81a:	42bb      	cmp	r3, r7
 800b81c:	460d      	mov	r5, r1
 800b81e:	d9f4      	bls.n	800b80a <_printf_i+0x112>
 800b820:	2b08      	cmp	r3, #8
 800b822:	d10b      	bne.n	800b83c <_printf_i+0x144>
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	07df      	lsls	r7, r3, #31
 800b828:	d508      	bpl.n	800b83c <_printf_i+0x144>
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	6861      	ldr	r1, [r4, #4]
 800b82e:	4299      	cmp	r1, r3
 800b830:	bfde      	ittt	le
 800b832:	2330      	movle	r3, #48	@ 0x30
 800b834:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b83c:	1b92      	subs	r2, r2, r6
 800b83e:	6122      	str	r2, [r4, #16]
 800b840:	f8cd a000 	str.w	sl, [sp]
 800b844:	464b      	mov	r3, r9
 800b846:	aa03      	add	r2, sp, #12
 800b848:	4621      	mov	r1, r4
 800b84a:	4640      	mov	r0, r8
 800b84c:	f7ff fee6 	bl	800b61c <_printf_common>
 800b850:	3001      	adds	r0, #1
 800b852:	d14a      	bne.n	800b8ea <_printf_i+0x1f2>
 800b854:	f04f 30ff 	mov.w	r0, #4294967295
 800b858:	b004      	add	sp, #16
 800b85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	f043 0320 	orr.w	r3, r3, #32
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	4833      	ldr	r0, [pc, #204]	@ (800b934 <_printf_i+0x23c>)
 800b868:	2778      	movs	r7, #120	@ 0x78
 800b86a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	6831      	ldr	r1, [r6, #0]
 800b872:	061f      	lsls	r7, r3, #24
 800b874:	f851 5b04 	ldr.w	r5, [r1], #4
 800b878:	d402      	bmi.n	800b880 <_printf_i+0x188>
 800b87a:	065f      	lsls	r7, r3, #25
 800b87c:	bf48      	it	mi
 800b87e:	b2ad      	uxthmi	r5, r5
 800b880:	6031      	str	r1, [r6, #0]
 800b882:	07d9      	lsls	r1, r3, #31
 800b884:	bf44      	itt	mi
 800b886:	f043 0320 	orrmi.w	r3, r3, #32
 800b88a:	6023      	strmi	r3, [r4, #0]
 800b88c:	b11d      	cbz	r5, 800b896 <_printf_i+0x19e>
 800b88e:	2310      	movs	r3, #16
 800b890:	e7ac      	b.n	800b7ec <_printf_i+0xf4>
 800b892:	4827      	ldr	r0, [pc, #156]	@ (800b930 <_printf_i+0x238>)
 800b894:	e7e9      	b.n	800b86a <_printf_i+0x172>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	f023 0320 	bic.w	r3, r3, #32
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	e7f6      	b.n	800b88e <_printf_i+0x196>
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	e7bd      	b.n	800b820 <_printf_i+0x128>
 800b8a4:	6833      	ldr	r3, [r6, #0]
 800b8a6:	6825      	ldr	r5, [r4, #0]
 800b8a8:	6961      	ldr	r1, [r4, #20]
 800b8aa:	1d18      	adds	r0, r3, #4
 800b8ac:	6030      	str	r0, [r6, #0]
 800b8ae:	062e      	lsls	r6, r5, #24
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	d501      	bpl.n	800b8b8 <_printf_i+0x1c0>
 800b8b4:	6019      	str	r1, [r3, #0]
 800b8b6:	e002      	b.n	800b8be <_printf_i+0x1c6>
 800b8b8:	0668      	lsls	r0, r5, #25
 800b8ba:	d5fb      	bpl.n	800b8b4 <_printf_i+0x1bc>
 800b8bc:	8019      	strh	r1, [r3, #0]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	4616      	mov	r6, r2
 800b8c4:	e7bc      	b.n	800b840 <_printf_i+0x148>
 800b8c6:	6833      	ldr	r3, [r6, #0]
 800b8c8:	1d1a      	adds	r2, r3, #4
 800b8ca:	6032      	str	r2, [r6, #0]
 800b8cc:	681e      	ldr	r6, [r3, #0]
 800b8ce:	6862      	ldr	r2, [r4, #4]
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f7f4 fc84 	bl	80001e0 <memchr>
 800b8d8:	b108      	cbz	r0, 800b8de <_printf_i+0x1e6>
 800b8da:	1b80      	subs	r0, r0, r6
 800b8dc:	6060      	str	r0, [r4, #4]
 800b8de:	6863      	ldr	r3, [r4, #4]
 800b8e0:	6123      	str	r3, [r4, #16]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8e8:	e7aa      	b.n	800b840 <_printf_i+0x148>
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	47d0      	blx	sl
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d0ad      	beq.n	800b854 <_printf_i+0x15c>
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	079b      	lsls	r3, r3, #30
 800b8fc:	d413      	bmi.n	800b926 <_printf_i+0x22e>
 800b8fe:	68e0      	ldr	r0, [r4, #12]
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	4298      	cmp	r0, r3
 800b904:	bfb8      	it	lt
 800b906:	4618      	movlt	r0, r3
 800b908:	e7a6      	b.n	800b858 <_printf_i+0x160>
 800b90a:	2301      	movs	r3, #1
 800b90c:	4632      	mov	r2, r6
 800b90e:	4649      	mov	r1, r9
 800b910:	4640      	mov	r0, r8
 800b912:	47d0      	blx	sl
 800b914:	3001      	adds	r0, #1
 800b916:	d09d      	beq.n	800b854 <_printf_i+0x15c>
 800b918:	3501      	adds	r5, #1
 800b91a:	68e3      	ldr	r3, [r4, #12]
 800b91c:	9903      	ldr	r1, [sp, #12]
 800b91e:	1a5b      	subs	r3, r3, r1
 800b920:	42ab      	cmp	r3, r5
 800b922:	dcf2      	bgt.n	800b90a <_printf_i+0x212>
 800b924:	e7eb      	b.n	800b8fe <_printf_i+0x206>
 800b926:	2500      	movs	r5, #0
 800b928:	f104 0619 	add.w	r6, r4, #25
 800b92c:	e7f5      	b.n	800b91a <_printf_i+0x222>
 800b92e:	bf00      	nop
 800b930:	0800c469 	.word	0x0800c469
 800b934:	0800c47a 	.word	0x0800c47a

0800b938 <__sflush_r>:
 800b938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	0716      	lsls	r6, r2, #28
 800b942:	4605      	mov	r5, r0
 800b944:	460c      	mov	r4, r1
 800b946:	d454      	bmi.n	800b9f2 <__sflush_r+0xba>
 800b948:	684b      	ldr	r3, [r1, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	dc02      	bgt.n	800b954 <__sflush_r+0x1c>
 800b94e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b950:	2b00      	cmp	r3, #0
 800b952:	dd48      	ble.n	800b9e6 <__sflush_r+0xae>
 800b954:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b956:	2e00      	cmp	r6, #0
 800b958:	d045      	beq.n	800b9e6 <__sflush_r+0xae>
 800b95a:	2300      	movs	r3, #0
 800b95c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b960:	682f      	ldr	r7, [r5, #0]
 800b962:	6a21      	ldr	r1, [r4, #32]
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	d030      	beq.n	800b9ca <__sflush_r+0x92>
 800b968:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	0759      	lsls	r1, r3, #29
 800b96e:	d505      	bpl.n	800b97c <__sflush_r+0x44>
 800b970:	6863      	ldr	r3, [r4, #4]
 800b972:	1ad2      	subs	r2, r2, r3
 800b974:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b976:	b10b      	cbz	r3, 800b97c <__sflush_r+0x44>
 800b978:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b97a:	1ad2      	subs	r2, r2, r3
 800b97c:	2300      	movs	r3, #0
 800b97e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	4628      	mov	r0, r5
 800b984:	47b0      	blx	r6
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	d106      	bne.n	800b99a <__sflush_r+0x62>
 800b98c:	6829      	ldr	r1, [r5, #0]
 800b98e:	291d      	cmp	r1, #29
 800b990:	d82b      	bhi.n	800b9ea <__sflush_r+0xb2>
 800b992:	4a2a      	ldr	r2, [pc, #168]	@ (800ba3c <__sflush_r+0x104>)
 800b994:	410a      	asrs	r2, r1
 800b996:	07d6      	lsls	r6, r2, #31
 800b998:	d427      	bmi.n	800b9ea <__sflush_r+0xb2>
 800b99a:	2200      	movs	r2, #0
 800b99c:	6062      	str	r2, [r4, #4]
 800b99e:	04d9      	lsls	r1, r3, #19
 800b9a0:	6922      	ldr	r2, [r4, #16]
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	d504      	bpl.n	800b9b0 <__sflush_r+0x78>
 800b9a6:	1c42      	adds	r2, r0, #1
 800b9a8:	d101      	bne.n	800b9ae <__sflush_r+0x76>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b903      	cbnz	r3, 800b9b0 <__sflush_r+0x78>
 800b9ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800b9b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9b2:	602f      	str	r7, [r5, #0]
 800b9b4:	b1b9      	cbz	r1, 800b9e6 <__sflush_r+0xae>
 800b9b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9ba:	4299      	cmp	r1, r3
 800b9bc:	d002      	beq.n	800b9c4 <__sflush_r+0x8c>
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f7ff fb48 	bl	800b054 <_free_r>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9c8:	e00d      	b.n	800b9e6 <__sflush_r+0xae>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	47b0      	blx	r6
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	1c50      	adds	r0, r2, #1
 800b9d4:	d1c9      	bne.n	800b96a <__sflush_r+0x32>
 800b9d6:	682b      	ldr	r3, [r5, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d0c6      	beq.n	800b96a <__sflush_r+0x32>
 800b9dc:	2b1d      	cmp	r3, #29
 800b9de:	d001      	beq.n	800b9e4 <__sflush_r+0xac>
 800b9e0:	2b16      	cmp	r3, #22
 800b9e2:	d11e      	bne.n	800ba22 <__sflush_r+0xea>
 800b9e4:	602f      	str	r7, [r5, #0]
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	e022      	b.n	800ba30 <__sflush_r+0xf8>
 800b9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9ee:	b21b      	sxth	r3, r3
 800b9f0:	e01b      	b.n	800ba2a <__sflush_r+0xf2>
 800b9f2:	690f      	ldr	r7, [r1, #16]
 800b9f4:	2f00      	cmp	r7, #0
 800b9f6:	d0f6      	beq.n	800b9e6 <__sflush_r+0xae>
 800b9f8:	0793      	lsls	r3, r2, #30
 800b9fa:	680e      	ldr	r6, [r1, #0]
 800b9fc:	bf08      	it	eq
 800b9fe:	694b      	ldreq	r3, [r1, #20]
 800ba00:	600f      	str	r7, [r1, #0]
 800ba02:	bf18      	it	ne
 800ba04:	2300      	movne	r3, #0
 800ba06:	eba6 0807 	sub.w	r8, r6, r7
 800ba0a:	608b      	str	r3, [r1, #8]
 800ba0c:	f1b8 0f00 	cmp.w	r8, #0
 800ba10:	dde9      	ble.n	800b9e6 <__sflush_r+0xae>
 800ba12:	6a21      	ldr	r1, [r4, #32]
 800ba14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba16:	4643      	mov	r3, r8
 800ba18:	463a      	mov	r2, r7
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	47b0      	blx	r6
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	dc08      	bgt.n	800ba34 <__sflush_r+0xfc>
 800ba22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba34:	4407      	add	r7, r0
 800ba36:	eba8 0800 	sub.w	r8, r8, r0
 800ba3a:	e7e7      	b.n	800ba0c <__sflush_r+0xd4>
 800ba3c:	dfbffffe 	.word	0xdfbffffe

0800ba40 <_fflush_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	690b      	ldr	r3, [r1, #16]
 800ba44:	4605      	mov	r5, r0
 800ba46:	460c      	mov	r4, r1
 800ba48:	b913      	cbnz	r3, 800ba50 <_fflush_r+0x10>
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	b118      	cbz	r0, 800ba5a <_fflush_r+0x1a>
 800ba52:	6a03      	ldr	r3, [r0, #32]
 800ba54:	b90b      	cbnz	r3, 800ba5a <_fflush_r+0x1a>
 800ba56:	f7ff f831 	bl	800aabc <__sinit>
 800ba5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0f3      	beq.n	800ba4a <_fflush_r+0xa>
 800ba62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba64:	07d0      	lsls	r0, r2, #31
 800ba66:	d404      	bmi.n	800ba72 <_fflush_r+0x32>
 800ba68:	0599      	lsls	r1, r3, #22
 800ba6a:	d402      	bmi.n	800ba72 <_fflush_r+0x32>
 800ba6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba6e:	f7ff fad8 	bl	800b022 <__retarget_lock_acquire_recursive>
 800ba72:	4628      	mov	r0, r5
 800ba74:	4621      	mov	r1, r4
 800ba76:	f7ff ff5f 	bl	800b938 <__sflush_r>
 800ba7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba7c:	07da      	lsls	r2, r3, #31
 800ba7e:	4605      	mov	r5, r0
 800ba80:	d4e4      	bmi.n	800ba4c <_fflush_r+0xc>
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	059b      	lsls	r3, r3, #22
 800ba86:	d4e1      	bmi.n	800ba4c <_fflush_r+0xc>
 800ba88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba8a:	f7ff facb 	bl	800b024 <__retarget_lock_release_recursive>
 800ba8e:	e7dd      	b.n	800ba4c <_fflush_r+0xc>

0800ba90 <__swhatbuf_r>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	460c      	mov	r4, r1
 800ba94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba98:	2900      	cmp	r1, #0
 800ba9a:	b096      	sub	sp, #88	@ 0x58
 800ba9c:	4615      	mov	r5, r2
 800ba9e:	461e      	mov	r6, r3
 800baa0:	da0d      	bge.n	800babe <__swhatbuf_r+0x2e>
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800baa8:	f04f 0100 	mov.w	r1, #0
 800baac:	bf14      	ite	ne
 800baae:	2340      	movne	r3, #64	@ 0x40
 800bab0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bab4:	2000      	movs	r0, #0
 800bab6:	6031      	str	r1, [r6, #0]
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	b016      	add	sp, #88	@ 0x58
 800babc:	bd70      	pop	{r4, r5, r6, pc}
 800babe:	466a      	mov	r2, sp
 800bac0:	f000 f862 	bl	800bb88 <_fstat_r>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	dbec      	blt.n	800baa2 <__swhatbuf_r+0x12>
 800bac8:	9901      	ldr	r1, [sp, #4]
 800baca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bace:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bad2:	4259      	negs	r1, r3
 800bad4:	4159      	adcs	r1, r3
 800bad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bada:	e7eb      	b.n	800bab4 <__swhatbuf_r+0x24>

0800badc <__smakebuf_r>:
 800badc:	898b      	ldrh	r3, [r1, #12]
 800bade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bae0:	079d      	lsls	r5, r3, #30
 800bae2:	4606      	mov	r6, r0
 800bae4:	460c      	mov	r4, r1
 800bae6:	d507      	bpl.n	800baf8 <__smakebuf_r+0x1c>
 800bae8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	6123      	str	r3, [r4, #16]
 800baf0:	2301      	movs	r3, #1
 800baf2:	6163      	str	r3, [r4, #20]
 800baf4:	b003      	add	sp, #12
 800baf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf8:	ab01      	add	r3, sp, #4
 800bafa:	466a      	mov	r2, sp
 800bafc:	f7ff ffc8 	bl	800ba90 <__swhatbuf_r>
 800bb00:	9f00      	ldr	r7, [sp, #0]
 800bb02:	4605      	mov	r5, r0
 800bb04:	4639      	mov	r1, r7
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7fe fec0 	bl	800a88c <_malloc_r>
 800bb0c:	b948      	cbnz	r0, 800bb22 <__smakebuf_r+0x46>
 800bb0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb12:	059a      	lsls	r2, r3, #22
 800bb14:	d4ee      	bmi.n	800baf4 <__smakebuf_r+0x18>
 800bb16:	f023 0303 	bic.w	r3, r3, #3
 800bb1a:	f043 0302 	orr.w	r3, r3, #2
 800bb1e:	81a3      	strh	r3, [r4, #12]
 800bb20:	e7e2      	b.n	800bae8 <__smakebuf_r+0xc>
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	6020      	str	r0, [r4, #0]
 800bb26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb32:	b15b      	cbz	r3, 800bb4c <__smakebuf_r+0x70>
 800bb34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f000 f837 	bl	800bbac <_isatty_r>
 800bb3e:	b128      	cbz	r0, 800bb4c <__smakebuf_r+0x70>
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	f023 0303 	bic.w	r3, r3, #3
 800bb46:	f043 0301 	orr.w	r3, r3, #1
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	431d      	orrs	r5, r3
 800bb50:	81a5      	strh	r5, [r4, #12]
 800bb52:	e7cf      	b.n	800baf4 <__smakebuf_r+0x18>

0800bb54 <memmove>:
 800bb54:	4288      	cmp	r0, r1
 800bb56:	b510      	push	{r4, lr}
 800bb58:	eb01 0402 	add.w	r4, r1, r2
 800bb5c:	d902      	bls.n	800bb64 <memmove+0x10>
 800bb5e:	4284      	cmp	r4, r0
 800bb60:	4623      	mov	r3, r4
 800bb62:	d807      	bhi.n	800bb74 <memmove+0x20>
 800bb64:	1e43      	subs	r3, r0, #1
 800bb66:	42a1      	cmp	r1, r4
 800bb68:	d008      	beq.n	800bb7c <memmove+0x28>
 800bb6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb72:	e7f8      	b.n	800bb66 <memmove+0x12>
 800bb74:	4402      	add	r2, r0
 800bb76:	4601      	mov	r1, r0
 800bb78:	428a      	cmp	r2, r1
 800bb7a:	d100      	bne.n	800bb7e <memmove+0x2a>
 800bb7c:	bd10      	pop	{r4, pc}
 800bb7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb86:	e7f7      	b.n	800bb78 <memmove+0x24>

0800bb88 <_fstat_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d07      	ldr	r5, [pc, #28]	@ (800bba8 <_fstat_r+0x20>)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4608      	mov	r0, r1
 800bb92:	4611      	mov	r1, r2
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	f7f5 fe14 	bl	80017c2 <_fstat>
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	d102      	bne.n	800bba4 <_fstat_r+0x1c>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	b103      	cbz	r3, 800bba4 <_fstat_r+0x1c>
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	bd38      	pop	{r3, r4, r5, pc}
 800bba6:	bf00      	nop
 800bba8:	2000563c 	.word	0x2000563c

0800bbac <_isatty_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d06      	ldr	r5, [pc, #24]	@ (800bbc8 <_isatty_r+0x1c>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	602b      	str	r3, [r5, #0]
 800bbb8:	f7f5 fe13 	bl	80017e2 <_isatty>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_isatty_r+0x1a>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_isatty_r+0x1a>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	2000563c 	.word	0x2000563c

0800bbcc <_realloc_r>:
 800bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd0:	4680      	mov	r8, r0
 800bbd2:	4615      	mov	r5, r2
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	b921      	cbnz	r1, 800bbe2 <_realloc_r+0x16>
 800bbd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	4611      	mov	r1, r2
 800bbde:	f7fe be55 	b.w	800a88c <_malloc_r>
 800bbe2:	b92a      	cbnz	r2, 800bbf0 <_realloc_r+0x24>
 800bbe4:	f7ff fa36 	bl	800b054 <_free_r>
 800bbe8:	2400      	movs	r4, #0
 800bbea:	4620      	mov	r0, r4
 800bbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf0:	f000 f81a 	bl	800bc28 <_malloc_usable_size_r>
 800bbf4:	4285      	cmp	r5, r0
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	d802      	bhi.n	800bc00 <_realloc_r+0x34>
 800bbfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bbfe:	d8f4      	bhi.n	800bbea <_realloc_r+0x1e>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4640      	mov	r0, r8
 800bc04:	f7fe fe42 	bl	800a88c <_malloc_r>
 800bc08:	4607      	mov	r7, r0
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d0ec      	beq.n	800bbe8 <_realloc_r+0x1c>
 800bc0e:	42b5      	cmp	r5, r6
 800bc10:	462a      	mov	r2, r5
 800bc12:	4621      	mov	r1, r4
 800bc14:	bf28      	it	cs
 800bc16:	4632      	movcs	r2, r6
 800bc18:	f7ff fa0d 	bl	800b036 <memcpy>
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f7ff fa18 	bl	800b054 <_free_r>
 800bc24:	463c      	mov	r4, r7
 800bc26:	e7e0      	b.n	800bbea <_realloc_r+0x1e>

0800bc28 <_malloc_usable_size_r>:
 800bc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2c:	1f18      	subs	r0, r3, #4
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	bfbc      	itt	lt
 800bc32:	580b      	ldrlt	r3, [r1, r0]
 800bc34:	18c0      	addlt	r0, r0, r3
 800bc36:	4770      	bx	lr

0800bc38 <_init>:
 800bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3a:	bf00      	nop
 800bc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3e:	bc08      	pop	{r3}
 800bc40:	469e      	mov	lr, r3
 800bc42:	4770      	bx	lr

0800bc44 <_fini>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr
