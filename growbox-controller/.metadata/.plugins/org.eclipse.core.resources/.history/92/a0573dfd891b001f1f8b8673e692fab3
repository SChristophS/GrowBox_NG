#include "mqtt_client.h"
#include <stdio.h>
#include <string.h>
#include "wizchip_conf.h"
#include "mqtt_interface.h"
#include "uart_redirect.h"
#include "network.h"  // Importieren der Netzwerk-Header-Datei

// MQTT Broker Einstellungen
char* mqtt_server = "91.121.93.94"; // MQTT Broker Adresse
int mqtt_port = 1883;               // MQTT Port
char* mqtt_username = "christoph";  // MQTT Benutzername
char* mqtt_password = "Aprikose99"; // MQTT Passwort

unsigned char mqtt_sendbuf[100];
unsigned char mqtt_readbuf[100];

// Externes Netzwerk-Handle deklarieren
extern wiz_NetInfo defaultNetInfo;

void messageArrived(MessageData* data) {
    printf("Message arrived: %.*s\n", data->message->payloadlen, (char*)data->message->payload);
}

void initialize_mqtt(void) {
    Network mqtt_network;
    MQTTClient mqtt_client;

    // Initialisieren des Netzwerk-Handles
    NewNetwork(&mqtt_network, TCP_SOCKET);
    printf("Connecting to network...\r\n");

    // Verbindungsaufbau zum MQTT-Server
    int connect_result = ConnectNetwork(&mqtt_network, (uint8_t*)mqtt_server, mqtt_port);
    if (connect_result != 0) {
        printf("Network connect failed with error code: %d\r\n", connect_result);
    } else {
        printf("Network connected, connect result:%d\r\n", connect_result);
    }

    // Initialisierung des MQTT-Clients mit dem Netzwerk-Handle
    MQTTClientInit(&mqtt_client, &mqtt_network, 1000, mqtt_sendbuf, sizeof(mqtt_sendbuf), mqtt_readbuf, sizeof(mqtt_readbuf));
    printf("MQTTClientInit done\r\n:");

    MQTTPacket_connectData mqtt_connectData = MQTTPacket_connectData_initializer;
    mqtt_connectData.MQTTVersion = 3;
    mqtt_connectData.clientID.cstring = "STM32Client";
    mqtt_connectData.keepAliveInterval = 60;
    mqtt_connectData.cleansession = 1;
    mqtt_connectData.username.cstring = mqtt_username;
    mqtt_connectData.password.cstring = mqtt_password;

    // Verbindungsaufbau zum MQTT-Broker
    int rc = MQTTConnect(&mqtt_client, &mqtt_connectData);
    printf("MQTT value rc: %d\n", rc);  // Fehlercode ausgeben

    if (rc != 0) {
        printf("MQTT connect failed with error code %d\n", rc);  // Fehlercode ausgeben
    } else {
        printf("MQTT connected\n");
    }

    printf(" - Subscribing to topic - \r\n");
    rc = MQTTSubscribe(&mqtt_client, "test/topic", QOS1, messageArrived);
    if (rc != 0) {
        printf("MQTT subscribe failed with error code %d\n", rc);  // Fehlercode ausgeben
    } else {
        printf("MQTT subscribed\n");
    }

    printf(" - Publishing message - \r\n");
    MQTTMessage message;
    message.qos = QOS1;
    message.retained = 0;
    message.payload = (void*)"Hello, MQTT!";
    message.payloadlen = strlen("Hello, MQTT!");
    rc = MQTTPublish(&mqtt_client, "test/topic", &message);
    if (rc != 0) {
        printf("MQTT publish failed with error code %d\n", rc);  // Fehlercode ausgeben
    } else {
        printf("MQTT publish successful\n");
    }

    // MQTT-Client-Schleife
    while (1) {
        if (MQTTYield(&mqtt_client, 1000) != 0) {
            printf("MQTT yield failed\n");
        }
    }
}
