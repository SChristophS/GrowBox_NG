/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "w5500.h"
#include "wizchip_conf.h"
#include "MQTTClient.h"
#include <string.h>
#include <stdio.h>
#include "DHCP/dhcp.h"
#include "wizchip_init.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define DATA_BUF_SIZE 2048 //Receive Buffer Size define
#define TCP_SOCKET	0 //Socket number defines

#define SOCK_DHCP               3
#define SOCK_DNS                4
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
char* mqtt_server = "192.168.178.25"; // MQTT Broker Adresse
int mqtt_port = 49154;                // MQTT Port
char* mqtt_username = "christoph";    // MQTT Benutzername
char* mqtt_password = "Aprikose99";   // MQTT Passwort
unsigned char mqtt_sendbuf[100];
unsigned char mqtt_readbuf[100];
wiz_NetInfo defaultNetInfo = { .mac = {0x00,0x08,0xdc,0xff,0xee,0xdd},
							.ip = {192,168,178,100},
							.sn = {255,255,255,0},
							.gw = {192,168,178,1},
							.dns = {8, 8, 8, 8},
							.dhcp = NETINFO_STATIC};

typedef enum
{
  OFF = 0,
  ON  = 1
} OnOff_State_Type;
uint8_t flag_process_dhcp_success = OFF;
uint8_t flag_process_dns_success = OFF;
uint8_t dns_server[4] = {168, 126, 63, 1}; // Secondary DNS server IP

uint8_t Domain_IP[4] = {0}; // Translated IP address by DNS Server
uint8_t Domain_name[] = "www.google.com";

uint8_t g_send_buf[DATA_BUF_SIZE];
uint8_t g_recv_buf[DATA_BUF_SIZE];

uint8_t data_buf[DATA_BUF_SIZE]; // TX Buffer for applications

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);
void NetworkInit(Network* network);
int8_t process_dhcp(void);
int8_t process_dns(void);
int _write(int fd, char *str, int len)
{
	for(int i = 0; i < len; i++)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
	}
	return len;
}

void NetworkInit(Network* network) {
    printf("NetworkInit start\n");

    // Initialisierung des W5500-Chips
    printf("Calling wizchip_init\n");
    wizchip_init(0, 0);
    printf("wizchip_init done\n");

    wiz_NetInfo netInfo = {
        .mac = {0x00, 0x08, 0xDC, 0x00, 0x00, 0x00},
        .ip = {192, 168, 178, 100},
        .sn = {255, 255, 255, 0},
        .gw = {192, 168, 178, 1},
        .dns = {8, 8, 8, 8},
        .dhcp = NETINFO_STATIC
    };

    printf("Before wizchip_setnetinfo\n");
    wizchip_setnetinfo(&netInfo);
    printf("wizchip_setnetinfo done\n");

    // Überprüfen Sie die Netzwerkinformationen
    wizchip_getnetinfo(&netInfo);
    printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3], netInfo.mac[4], netInfo.mac[5]);
    printf("IP Address: %d.%d.%d.%d\n", netInfo.ip[0], netInfo.ip[1], netInfo.ip[2], netInfo.ip[3]);
    printf("Subnet Mask: %d.%d.%d.%d\n", netInfo.sn[0], netInfo.sn[1], netInfo.sn[2], netInfo.sn[3]);
    printf("Gateway: %d.%d.%d.%d\n", netInfo.gw[0], netInfo.gw[1], netInfo.gw[2], netInfo.gw[3]);
    printf("DNS: %d.%d.%d.%d\n", netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3]);

    printf("NetworkInit done\n");
}


int NetworkConnect(Network* network, const char* address, int port) {
    int32_t ret;
    uint8_t sock_status;
    uint8_t sock = 0; // Verwenden Sie den ersten Socket

    // Socket öffnen
    if ((ret = socket(sock, Sn_MR_TCP, port, 0)) < 0) {
        printf("Failed to create socket.\n");
        return -1;
    }

    // Verbindung zum angegebenen Host herstellen
    if ((ret = connect(sock, (uint8_t*)address, port)) < 0) {
        printf("Failed to connect to %s:%d.\n", address, port);
        close(sock);
        return -1;
    }

    // Verbindung überprüfen
    while (1) {
        sock_status = getSn_SR(sock);
        if (sock_status == SOCK_ESTABLISHED) {
            break;
        } else if (sock_status == SOCK_CLOSED) {
            printf("Connection closed by remote host.\n");
            close(sock);
            return -1;
        }
    }

    network->my_socket = sock;
    return 0; // Erfolgreich verbunden
}



void messageArrived(MessageData* md)
{
    MQTTMessage* message = md->message;
    printf("Message arrived: %.*s\n", (int)message->payloadlen, (char*)message->payload);
}

int netConnect(void)
{
    uint8_t tmp;
    uint8_t phyLinkStatus = wizphy_getphylink();

    if (phyLinkStatus == PHY_LINK_OFF) {
        printf("PHY link is down.\n");
        return -1;
    }

    while (phyLinkStatus == PHY_LINK_OFF) {
        phyLinkStatus = wizphy_getphylink();
        HAL_Delay(500);
    }

    return 0;
}





/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// @brief messageArrived callback function



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */


  printf("\t - W5x00 Project - \r\n");
    resetAssert();
    HAL_Delay(300);
    resetDeassert();
    HAL_Delay(300);
    printf("\t - WizChip Init - \r\n");

    Network network;
	MQTTClient client;
	int rc = 0;
	unsigned char sendbuf[100], readbuf[100];
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;

	printf("vor NetworkInit \r\n");
	NetworkInit(&network);

	printf("vor NetworkConnect \r\n");
	if (NetworkConnect(&network, "mqtt.eclipse.org", 1883) != 0) {
		printf("Network connect failed.\n");
		return -1;
	}

	MQTTClientInit(&client, &network, 30000, sendbuf, sizeof(sendbuf), readbuf, sizeof(readbuf));

	connectData.MQTTVersion = 3;
	connectData.clientID.cstring = "STM32";

	if ((rc = MQTTConnect(&client, &connectData)) != 0) {
		printf("MQTT connect failed: %d\n", rc);
		return -1;
	}

	if ((rc = MQTTSubscribe(&client, "stm32/test", QOS0, messageArrived)) != 0) {
		printf("MQTT subscribe failed: %d\n", rc);
		return -1;
	}

    /*
    WIZCHIPInitialize();

    printf("version:%.2x\r\n", getVERSIONR());

    wizchip_setnetinfo(&defaultNetInfo);
    print_network_information();

    if(process_dhcp() == DHCP_IP_LEASED) // DHCP success
      {
        flag_process_dhcp_success = ON;
      }
      else // DHCP failed
      {
        ctlnetwork(CN_SET_NETINFO, &defaultNetInfo); // Set default static IP settings
      }

    printf("Register value after W5x00 initialize!\r\n");
    print_network_information();

    if(flag_process_dhcp_success == ENABLE)
      {
    	  printf(" # DHCP IP Leased time : %lu seconds\r\n", getDHCPLeasetime());
      }
      else
      {
        printf(" # DHCP Failed\r\n");
      }


    // Connect to network
     if (netConnect() < 0) {
       printf("Network connection failed.\n");
       return -1;
     } else {
    	 printf("Network connection etabslised.\n");
     }

    // MQTT
    Network mqtt_network;
    MQTTClient mqtt_client;

    int rc2 = 0;
     unsigned char sendbuf[100], readbuf[100];
     MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;

     //NetworkInit(&mqtt_network);
     NetworkConnect(&mqtt_network, "mqtt.eclipse.org", 1883);
     MQTTClientInit(&mqtt_client, &mqtt_network, 30000, sendbuf, sizeof(sendbuf), readbuf, sizeof(readbuf));

     connectData.MQTTVersion = 3;
     connectData.clientID.cstring = "STM32";

     if ((rc2 = MQTTConnect(&mqtt_client, &connectData)) != 0) {
       printf("MQTT connect failed: %d\n", rc2);
       return -1;
     }

     if ((rc2 = MQTTSubscribe(&mqtt_client, "stm32/test", QOS0, messageArrived)) != 0) {
       printf("MQTT subscribe failed: %d\n", rc2);
       return -1;
     }


    NewNetwork(&mqtt_network, TCP_SOCKET);
    printf("Connecting to network...\n");

    int connect_result = ConnectNetwork(&mqtt_network, (uint8_t*)mqtt_server, mqtt_port);
    if (connect_result != 0) {
        printf("Network connect failed with error code: %d\n", connect_result);
    } else {
        printf("Network connected, connect result:%d\n", connect_result);
    }

     MQTTClientInit(&mqtt_client, &mqtt_network, 1000, mqtt_sendbuf, sizeof(mqtt_sendbuf), mqtt_readbuf, sizeof(mqtt_readbuf));
     printf("MQTTClientInit done\r\n:");


     MQTTPacket_connectData mqtt_connectData = MQTTPacket_connectData_initializer;
     printf("MQTTPacket_connectData done\r\n:");

     mqtt_connectData.MQTTVersion = 3;
     mqtt_connectData.clientID.cstring = "STM32Client";
     mqtt_connectData.keepAliveInterval = 60;  // Keep-Alive Intervall auf 60 Sekunden setzen
     mqtt_connectData.cleansession = 1;  // Clean-Session auf true setzen
     mqtt_connectData.username.cstring = mqtt_username;
     mqtt_connectData.password.cstring = mqtt_password;
     mqtt_connectData.keepAliveInterval = 60;
     mqtt_connectData.cleansession = 1;

     printf("call MQTTConnect\r\n:");
     int rc = MQTTConnect(&mqtt_client, &mqtt_connectData);
     printf("MQTT value rc: %d\n", rc);  // Fehlercode ausgeben

     if (rc != 0) {
         printf("MQTT connect failed with error code %d\n", rc);  // Fehlercode ausgeben
     } else {
         printf("MQTT connected\n");
     }


     printf(" - Subscribing to topic - \r\n");
     rc = MQTTSubscribe(&mqtt_client, "test/topic", QOS1, messageArrived);
     if (rc != 0) {
         printf("MQTT subscribe failed with error code %d\n", rc);  // Fehlercode ausgeben
     } else {
         printf("MQTT subscribed\n");
     }


     printf(" - Publishing message - \r\n");
     MQTTMessage message;
     message.qos = QOS1;
     message.retained = 0;
     message.payload = (void*)"Hello, MQTT!";
     message.payloadlen = strlen("Hello, MQTT!");
     rc = MQTTPublish(&mqtt_client, "test/topic", &message);
     if (rc != 0) {
         printf("MQTT publish failed with error code %d\n", rc);  // Fehlercode ausgeben
     } else {
         printf("MQTT publish successful\n");
     }
     */


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ChipSelect_for_W5500_Pin|ResetPin_for_W5500_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ChipSelect_for_W5500_Pin ResetPin_for_W5500_Pin */
  GPIO_InitStruct.Pin = ChipSelect_for_W5500_Pin|ResetPin_for_W5500_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
  wizchip_getnetinfo(&defaultNetInfo);
  printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", defaultNetInfo.mac[0], defaultNetInfo.mac[1], defaultNetInfo.mac[2], defaultNetInfo.mac[3], defaultNetInfo.mac[4], defaultNetInfo.mac[5]);
  printf("IP address : %d.%d.%d.%d\n\r", defaultNetInfo.ip[0], defaultNetInfo.ip[1], defaultNetInfo.ip[2], defaultNetInfo.ip[3]);
  printf("SM Mask    : %d.%d.%d.%d\n\r", defaultNetInfo.sn[0], defaultNetInfo.sn[1], defaultNetInfo.sn[2], defaultNetInfo.sn[3]);
  printf("Gate way   : %d.%d.%d.%d\n\r", defaultNetInfo.gw[0], defaultNetInfo.gw[1], defaultNetInfo.gw[2], defaultNetInfo.gw[3]);
  printf("DNS Server : %d.%d.%d.%d\n\r", defaultNetInfo.dns[0], defaultNetInfo.dns[1], defaultNetInfo.dns[2], defaultNetInfo.dns[3]);
}

int8_t process_dhcp(void)
{
  uint8_t ret = 0;
  uint8_t dhcp_retry = 0;

  printf(" - DHCP Client running\r\n");

  DHCP_init(SOCK_DHCP, data_buf);
  while (1)
  {
    ret = DHCP_run();

    if (ret == DHCP_IP_LEASED)
    {
      printf(" - DHCP Success\r\n");
      break;
    }
    else if (ret == DHCP_FAILED)
    {
      dhcp_retry++;
      if (dhcp_retry <= 3) printf(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
    }

    if (dhcp_retry > 3)
    {
      printf(" - DHCP Failed\r\n\r\n");
      DHCP_stop();
      break;
    }
  }

  return ret;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
