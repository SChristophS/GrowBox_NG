/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "w5500.h"
#include "wizchip_conf.h"
#include "MQTTClient.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
uint8_t gDATABUF[2048];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void messageArrived(MessageData* md);
int netConnect(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  // Network initialization
  wizchip_init(0, 0);
  wizchip_setnetinfo(&gWIZNETINFO);

  // Connect to network
  if (netConnect() < 0) {
    printf("Network connection failed.\n");
    return -1;
  }

  // MQTT setup
  Network network;
  MQTTClient client;
  int rc = 0;
  unsigned char sendbuf[100], readbuf[100];
  MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;

  NetworkInit(&network);
  NetworkConnect(&network, "mqtt.eclipse.org", 1883);
  MQTTClientInit(&client, &network, 30000, sendbuf, sizeof(sendbuf), readbuf, sizeof(readbuf));

  connectData.MQTTVersion = 3;
  connectData.clientID.cstring = "STM32";

  if ((rc = MQTTConnect(&client, &connectData)) != 0) {
    printf("MQTT connect failed: %d\n", rc);
    return -1;
  }

  if ((rc = MQTTSubscribe(&client, "stm32/test", QOS0, messageArrived)) != 0) {
    printf("MQTT subscribe failed: %d\n", rc);
    return -1;
  }

  while (1) {
    MQTTYield(&client, 1000);
  }

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void messageArrived(MessageData* md)
{
  MQTTMessage* message = md->message;
  printf("Message arrived: %.*s\n", (int)message->payloadlen, (char*)message->payload);
}

int netConnect(void)
{
  uint8_t tmp;
  uint8_t phyLinkStatus = wizphy_getphylink();

  if (phyLinkStatus == PHY_LINK_OFF) {
    printf("PHY link is down.\n");
    return -1;
  }

  /* Wait for link up */
  while (phyLinkStatus == PHY_LINK_OFF) {
    phyLinkStatus = wizphy_getphylink();
    HAL_Delay(500);
  }

  return 0;
}

/* USER CODE END 4 */

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 4 */

  /* USER CODE END 4 */
}
