#include "mqtt_client.h"
#include "MQTTClient.h"
#include <stdio.h>

// Buffer size definition
#define BUFFER_SIZE 2048

// Buffer for receiving data
unsigned char tempBuffer[BUFFER_SIZE] = {};

// MQTT Client options
struct opts_struct opts = {
    (char*)"stdout-subscriber", 0, (char*)"\n", QOS0, NULL, NULL, NULL, 0, 0
};

// Message arrived callback function
void messageArrived(MessageData* md)
{
    unsigned char testbuffer[100];
    MQTTMessage* message = md->message;

    if (opts.showtopics)
    {
        memcpy(testbuffer, (char*)message->payload, (int)message->payloadlen);
        *(testbuffer + (int)message->payloadlen + 1) = "\n";
        printf("%s\r\n", testbuffer);
    }

    if (opts.nodelimiter)
        printf("%.*s", (int)message->payloadlen, (char*)message->payload);
    else
        printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
}

int mqtt_client_init(Network* n, MQTTClient* c, unsigned char* targetIP, unsigned int targetPort)
{
    unsigned char buf[100];
    int rc;

    opts.host = (char*)targetIP;
    opts.port = targetPort;

    NewNetwork(n, TCP_SOCKET);
    ConnectNetwork(n, targetIP, targetPort);
    MQTTClientInit(c, n, 1000, buf, 100, tempBuffer, BUFFER_SIZE);

    MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    data.willFlag = 0;
    data.MQTTVersion = 3;
    data.clientID.cstring = opts.clientid;
    data.username.cstring = opts.username;
    data.password.cstring = opts.password;

    data.keepAliveInterval = 60;
    data.cleansession = 1;

    rc = MQTTConnect(c, &data);
    printf("Connected %d\r\n", rc);
    opts.showtopics = 1;

    printf("Subscribing to %s\r\n", "hello/wiznet");
    rc = MQTTSubscribe(c, "hello/wiznet", opts.qos, messageArrived);
    printf("Subscribed %d\r\n", rc);

    return rc;
}

void mqtt_client_yield(MQTTClient* c, int interval)
{
    MQTTYield(c, interval);
}
