#include "mqtt_client.h"
#include "MQTTClient.h"
#include <stdio.h>
#include <string.h> // Für memcpy
#include "uart_redirect.h"

// Puffergröße Definition
#define BUFFER_SIZE 2048

// Puffer zum Empfangen von Daten
unsigned char tempBuffer[BUFFER_SIZE] = {};

// Globale Variable für Optionen
mqtt_opts_t *opts;

// Callback-Funktion für eingehende Nachrichten
void messageArrived(MessageData* md)
{
    unsigned char testbuffer[100];
    MQTTMessage* message = md->message;

    if (opts->showtopics)
    {
        memcpy(testbuffer, (char*)message->payload, (int)message->payloadlen);
        *(testbuffer + (int)message->payloadlen) = '\n'; // Zeichen als Char zuweisen
        printf("%s\r\n", testbuffer);
    }

    if (opts->nodelimiter)
        printf("%.*s", (int)message->payloadlen, (char*)message->payload);
    else
        printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts->delimiter);
}

int mqtt_client_init(Network* n, MQTTClient* c, mqtt_opts_t* options, unsigned char* targetIP, unsigned int targetPort)
{
    unsigned char buf[100];
    int rc;

    opts = options;
    opts->host = (char*)targetIP;
    opts->port = targetPort;

    NewNetwork(n, TCP_SOCKET);
    ConnectNetwork(n, targetIP, targetPort);
    MQTTClientInit(c, n, 1000, buf, 100, tempBuffer, BUFFER_SIZE);

    MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    data.willFlag = 0;
    data.MQTTVersion = 3;
    data.clientID.cstring = opts->clientid;
    data.username.cstring = opts->username;
    data.password.cstring = opts->password;

    data.keepAliveInterval = 60;
    data.cleansession = 1;

    rc = MQTTConnect(c, &data);
    printf("Connected with return code %d\r\n", rc);

    switch (rc)
    {
        case MQTT_SUCCESS:
            printf("Connection successful.\n");
            break;
        case MQTT_UNNACCEPTABLE_PROTOCOL_VERSION:
            printf("Connection refused: Unacceptable protocol version.\n");
            break;
        case MQTT_IDENTIFIER_REJECTED:
            printf("Connection refused: Identifier rejected.\n");
            break;
        case MQTT_SERVER_UNAVAILABLE:
            printf("Connection refused: Server unavailable.\n");
            break;
        case MQTT_BAD_USER_NAME_OR_PASSWORD:
            printf("Connection refused: Bad user name or password.\n");
            break;
        case MQTT_NOT_AUTHORIZED:
            printf("Connection refused: Not authorized.\n");
            break;
        default:
            printf("Connection refused: Unknown reason.\n");
            break;
    }

    if (rc != MQTT_SUCCESS) {
        return rc;
    }

    opts->showtopics = 1;

    printf("Subscribing to %s\r\n", "hello/wiznet");
    rc = MQTTSubscribe(c, "hello/wiznet", opts->qos, messageArrived);
    printf("Subscribed with return code %d\r\n", rc);

    return rc;
}

void mqtt_client_yield(MQTTClient* c, int interval)
{
    MQTTYield(c, interval);
}
