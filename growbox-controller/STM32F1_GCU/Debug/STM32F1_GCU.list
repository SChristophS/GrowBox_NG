
STM32F1_GCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08009018  08009018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a0  080094a0  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  080094a0  080094a0  0000a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094a8  080094a8  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a8  080094a8  0000a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094ac  080094ac  0000a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  080094b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  2000010c  080095bc  0000b10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  080095bc  0000b398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102e5  00000000  00000000  0000b135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396a  00000000  00000000  0001b41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001ed88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf9  00000000  00000000  0001fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2d3  00000000  00000000  000208f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140ad  00000000  00000000  0003abc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afbd  00000000  00000000  0004ec71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9c2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  000d9c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000de27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009000 	.word	0x08009000

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	08009000 	.word	0x08009000

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b09f      	sub	sp, #124	@ 0x7c
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f006 f999 	bl	8006498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f835 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8d5 	bl	8000318 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016e:	f000 f8a9 	bl	80002c4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000172:	f000 f871 	bl	8000258 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("\t - W5x00 Project - \r\n");
 8000176:	4812      	ldr	r0, [pc, #72]	@ (80001c0 <main+0x64>)
 8000178:	f007 fec4 	bl	8007f04 <puts>
  resetAssert();
 800017c:	f000 fd90 	bl	8000ca0 <resetAssert>
  HAL_Delay(300);
 8000180:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000184:	f006 f9ea 	bl	800655c <HAL_Delay>
  resetDeassert();
 8000188:	f000 fd96 	bl	8000cb8 <resetDeassert>
  HAL_Delay(300);
 800018c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000190:	f006 f9e4 	bl	800655c <HAL_Delay>

  initialize_network();
 8000194:	f000 fb32 	bl	80007fc <initialize_network>

   Network n;
   MQTTClient c;

   mqtt_client_init(&n, &c, targetIP, targetPort, MQTT_USERNAME, MQTT_PASSWORD);
 8000198:	4b0a      	ldr	r3, [pc, #40]	@ (80001c4 <main+0x68>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0a      	ldr	r2, [pc, #40]	@ (80001c8 <main+0x6c>)
 800019e:	4c0b      	ldr	r4, [pc, #44]	@ (80001cc <main+0x70>)
 80001a0:	1d39      	adds	r1, r7, #4
 80001a2:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80001a6:	9401      	str	r4, [sp, #4]
 80001a8:	9200      	str	r2, [sp, #0]
 80001aa:	4a09      	ldr	r2, [pc, #36]	@ (80001d0 <main+0x74>)
 80001ac:	f000 f9a6 	bl	80004fc <mqtt_client_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //mqtt_client_yield(&c, 1000);
	  MQTTYield(&c, 1000);
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80001b6:	4618      	mov	r0, r3
 80001b8:	f003 f8ec 	bl	8003394 <MQTTYield>
 80001bc:	e7f8      	b.n	80001b0 <main+0x54>
 80001be:	bf00      	nop
 80001c0:	08009030 	.word	0x08009030
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08009018 	.word	0x08009018
 80001cc:	08009024 	.word	0x08009024
 80001d0:	20000000 	.word	0x20000000

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	@ 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	@ 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f007 ff8e 	bl	8008104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fe:	2310      	movs	r3, #16
 8000200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000202:	2302      	movs	r3, #2
 8000204:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000206:	2300      	movs	r3, #0
 8000208:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800020a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800020e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4618      	mov	r0, r3
 8000216:	f006 fc91 	bl	8006b3c <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000220:	f000 f8fe 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f006 fefe 	bl	8007040 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800024a:	f000 f8e9 	bl	8000420 <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	@ 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration */
  hspi2.Instance = SPI2;
 800025c:	4b17      	ldr	r3, [pc, #92]	@ (80002bc <MX_SPI2_Init+0x64>)
 800025e:	4a18      	ldr	r2, [pc, #96]	@ (80002c0 <MX_SPI2_Init+0x68>)
 8000260:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000262:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <MX_SPI2_Init+0x64>)
 8000264:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000268:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800026a:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <MX_SPI2_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000270:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <MX_SPI2_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000276:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <MX_SPI2_Init+0x64>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800027c:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <MX_SPI2_Init+0x64>)
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000282:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <MX_SPI2_Init+0x64>)
 8000284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000288:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800028a:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <MX_SPI2_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000290:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <MX_SPI2_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <MX_SPI2_Init+0x64>)
 8000298:	2200      	movs	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800029c:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <MX_SPI2_Init+0x64>)
 800029e:	2200      	movs	r2, #0
 80002a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002a2:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <MX_SPI2_Init+0x64>)
 80002a4:	220a      	movs	r2, #10
 80002a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002a8:	4804      	ldr	r0, [pc, #16]	@ (80002bc <MX_SPI2_Init+0x64>)
 80002aa:	f007 f857 	bl	800735c <HAL_SPI_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002b4:	f000 f8b4 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000128 	.word	0x20000128
 80002c0:	40003800 	.word	0x40003800

080002c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c8:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002ca:	4a12      	ldr	r2, [pc, #72]	@ (8000314 <MX_USART2_UART_Init+0x50>)
 80002cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002ce:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002ea:	220c      	movs	r2, #12
 80002ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ee:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	@ (8000310 <MX_USART2_UART_Init+0x4c>)
 80002fc:	f007 fb08 	bl	8007910 <HAL_UART_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000306:	f000 f88b 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000180 	.word	0x20000180
 8000314:	40004400 	.word	0x40004400

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032c:	4b37      	ldr	r3, [pc, #220]	@ (800040c <MX_GPIO_Init+0xf4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a36      	ldr	r2, [pc, #216]	@ (800040c <MX_GPIO_Init+0xf4>)
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b34      	ldr	r3, [pc, #208]	@ (800040c <MX_GPIO_Init+0xf4>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0310 	and.w	r3, r3, #16
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000344:	4b31      	ldr	r3, [pc, #196]	@ (800040c <MX_GPIO_Init+0xf4>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a30      	ldr	r2, [pc, #192]	@ (800040c <MX_GPIO_Init+0xf4>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b2e      	ldr	r3, [pc, #184]	@ (800040c <MX_GPIO_Init+0xf4>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b2b      	ldr	r3, [pc, #172]	@ (800040c <MX_GPIO_Init+0xf4>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a2a      	ldr	r2, [pc, #168]	@ (800040c <MX_GPIO_Init+0xf4>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b28      	ldr	r3, [pc, #160]	@ (800040c <MX_GPIO_Init+0xf4>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b25      	ldr	r3, [pc, #148]	@ (800040c <MX_GPIO_Init+0xf4>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a24      	ldr	r2, [pc, #144]	@ (800040c <MX_GPIO_Init+0xf4>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_GPIO_Init+0xf4>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2120      	movs	r1, #32
 8000390:	481f      	ldr	r0, [pc, #124]	@ (8000410 <MX_GPIO_Init+0xf8>)
 8000392:	f006 fb99 	bl	8006ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ChipSelect_for_W5500_Pin | ResetPin_for_W5500_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2106      	movs	r1, #6
 800039a:	481e      	ldr	r0, [pc, #120]	@ (8000414 <MX_GPIO_Init+0xfc>)
 800039c:	f006 fb94 	bl	8006ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000418 <MX_GPIO_Init+0x100>)
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	4819      	ldr	r0, [pc, #100]	@ (800041c <MX_GPIO_Init+0x104>)
 80003b6:	f006 fa03 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003ba:	2320      	movs	r3, #32
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	480f      	ldr	r0, [pc, #60]	@ (8000410 <MX_GPIO_Init+0xf8>)
 80003d2:	f006 f9f5 	bl	80067c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ChipSelect_for_W5500_Pin ResetPin_for_W5500_Pin */
  GPIO_InitStruct.Pin = ChipSelect_for_W5500_Pin | ResetPin_for_W5500_Pin;
 80003d6:	2306      	movs	r3, #6
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4809      	ldr	r0, [pc, #36]	@ (8000414 <MX_GPIO_Init+0xfc>)
 80003ee:	f006 f9e7 	bl	80067c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	2028      	movs	r0, #40	@ 0x28
 80003f8:	f006 f9ab 	bl	8006752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003fc:	2028      	movs	r0, #40	@ 0x28
 80003fe:	f006 f9c4 	bl	800678a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000402:	bf00      	nop
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00
 8000418:	10110000 	.word	0x10110000
 800041c:	40011000 	.word	0x40011000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <GetSTM32UID>:
    .port = 0,
    .showtopics = 0
};


void GetSTM32UID(char *uidStr) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af02      	add	r7, sp, #8
 8000432:	6078      	str	r0, [r7, #4]
    uint32_t uid[3];
    uid[0] = *(uint32_t *)0x1FFFF7E8;
 8000434:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <GetSTM32UID+0x34>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60fb      	str	r3, [r7, #12]
    uid[1] = *(uint32_t *)0x1FFFF7EC;
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <GetSTM32UID+0x38>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	613b      	str	r3, [r7, #16]
    uid[2] = *(uint32_t *)0x1FFFF7F0;
 8000440:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <GetSTM32UID+0x3c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	617b      	str	r3, [r7, #20]

    sprintf(uidStr, "%08lX%08lX%08lX", uid[0], uid[1], uid[2]);
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	6939      	ldr	r1, [r7, #16]
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	460b      	mov	r3, r1
 8000450:	4906      	ldr	r1, [pc, #24]	@ (800046c <GetSTM32UID+0x40>)
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f007 fd5e 	bl	8007f14 <siprintf>
}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	1ffff7e8 	.word	0x1ffff7e8
 8000464:	1ffff7ec 	.word	0x1ffff7ec
 8000468:	1ffff7f0 	.word	0x1ffff7f0
 800046c:	08009060 	.word	0x08009060

08000470 <messageArrived>:

// Callback-Funktion für eingehende Nachrichten
void messageArrived(MessageData* md)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b09c      	sub	sp, #112	@ 0x70
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    unsigned char testbuffer[100];
    MQTTMessage* message = md->message;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (opts.showtopics)
 800047e:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <messageArrived+0x7c>)
 8000480:	6a1b      	ldr	r3, [r3, #32]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d015      	beq.n	80004b2 <messageArrived+0x42>
    {
        memcpy(testbuffer, (char*)message->payload, (int)message->payloadlen);
 8000486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000488:	6899      	ldr	r1, [r3, #8]
 800048a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800048c:	68da      	ldr	r2, [r3, #12]
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	4618      	mov	r0, r3
 8000494:	f007 feeb 	bl	800826e <memcpy>
        *(testbuffer + (int)message->payloadlen) = '\n'; // Zeichen als Char zuweisen
 8000498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	f107 0208 	add.w	r2, r7, #8
 80004a0:	4413      	add	r3, r2
 80004a2:	220a      	movs	r2, #10
 80004a4:	701a      	strb	r2, [r3, #0]
        printf("%s\r\n", testbuffer);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	4810      	ldr	r0, [pc, #64]	@ (80004f0 <messageArrived+0x80>)
 80004ae:	f007 fcc1 	bl	8007e34 <iprintf>
    }

    if (opts.nodelimiter)
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <messageArrived+0x7c>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d009      	beq.n	80004ce <messageArrived+0x5e>
        printf("%.*s", (int)message->payloadlen, (char*)message->payload);
 80004ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	4619      	mov	r1, r3
 80004c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	461a      	mov	r2, r3
 80004c6:	480b      	ldr	r0, [pc, #44]	@ (80004f4 <messageArrived+0x84>)
 80004c8:	f007 fcb4 	bl	8007e34 <iprintf>
    else
        printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
}
 80004cc:	e009      	b.n	80004e2 <messageArrived+0x72>
        printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 80004ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	4619      	mov	r1, r3
 80004d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004d6:	689a      	ldr	r2, [r3, #8]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <messageArrived+0x7c>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	4806      	ldr	r0, [pc, #24]	@ (80004f8 <messageArrived+0x88>)
 80004de:	f007 fca9 	bl	8007e34 <iprintf>
}
 80004e2:	bf00      	nop
 80004e4:	3770      	adds	r7, #112	@ 0x70
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000008 	.word	0x20000008
 80004f0:	08009070 	.word	0x08009070
 80004f4:	08009078 	.word	0x08009078
 80004f8:	08009080 	.word	0x08009080

080004fc <mqtt_client_init>:

int mqtt_client_init(Network* n, MQTTClient* c, unsigned char* targetIP, unsigned int targetPort, const char* MQTT_USERNAME, const char* MQTT_PASSWORD)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0c0      	sub	sp, #256	@ 0x100
 8000500:	af04      	add	r7, sp, #16
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	603b      	str	r3, [r7, #0]
    char uidStr[25];
    GetSTM32UID(uidStr);
 800050a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff8c 	bl	800042c <GetSTM32UID>

    printf("STM32 UID: %s\n", uidStr);
 8000514:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000518:	4619      	mov	r1, r3
 800051a:	4832      	ldr	r0, [pc, #200]	@ (80005e4 <mqtt_client_init+0xe8>)
 800051c:	f007 fc8a 	bl	8007e34 <iprintf>

    unsigned char buf[100];
    int rc;

    opts.host = (char*)targetIP;
 8000520:	4a31      	ldr	r2, [pc, #196]	@ (80005e8 <mqtt_client_init+0xec>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6193      	str	r3, [r2, #24]
    opts.port = targetPort;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	4a2f      	ldr	r2, [pc, #188]	@ (80005e8 <mqtt_client_init+0xec>)
 800052a:	61d3      	str	r3, [r2, #28]

    NewNetwork(n, TCP_SOCKET);
 800052c:	2100      	movs	r1, #0
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f003 f900 	bl	8003734 <NewNetwork>
    ConnectNetwork(n, targetIP, targetPort); // Korrigierter Aufruf von ConnectNetwork
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b29b      	uxth	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	68f8      	ldr	r0, [r7, #12]
 800053e:	f003 f974 	bl	800382a <ConnectNetwork>
    MQTTClientInit(c, n, 1000, buf, 100, tempBuffer, BUFFER_SIZE);
 8000542:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800054a:	9202      	str	r2, [sp, #8]
 800054c:	4a27      	ldr	r2, [pc, #156]	@ (80005ec <mqtt_client_init+0xf0>)
 800054e:	9201      	str	r2, [sp, #4]
 8000550:	2264      	movs	r2, #100	@ 0x64
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000558:	68f9      	ldr	r1, [r7, #12]
 800055a:	68b8      	ldr	r0, [r7, #8]
 800055c:	f002 fc36 	bl	8002dcc <MQTTClientInit>

    MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8000560:	4a23      	ldr	r2, [pc, #140]	@ (80005f0 <mqtt_client_init+0xf4>)
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4611      	mov	r1, r2
 8000568:	2258      	movs	r2, #88	@ 0x58
 800056a:	4618      	mov	r0, r3
 800056c:	f007 fe7f 	bl	800826e <memcpy>
    data.willFlag = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    data.MQTTVersion = 3;
 8000576:	2303      	movs	r3, #3
 8000578:	773b      	strb	r3, [r7, #28]
    data.clientID.cstring = "Client2000";
 800057a:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <mqtt_client_init+0xf8>)
 800057c:	623b      	str	r3, [r7, #32]
    data.username.cstring = (char*)MQTT_USERNAME;
 800057e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000582:	657b      	str	r3, [r7, #84]	@ 0x54
    data.password.cstring = (char*)MQTT_PASSWORD;
 8000584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000588:	663b      	str	r3, [r7, #96]	@ 0x60

    data.keepAliveInterval = 60;
 800058a:	233c      	movs	r3, #60	@ 0x3c
 800058c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    data.cleansession = 1;
 800058e:	2301      	movs	r3, #1
 8000590:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    rc = MQTTConnect(c, &data);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	68b8      	ldr	r0, [r7, #8]
 800059c:	f002 ff3e 	bl	800341c <MQTTConnect>
 80005a0:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    printf("Connected %d\r\n", rc);
 80005a4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80005a8:	4813      	ldr	r0, [pc, #76]	@ (80005f8 <mqtt_client_init+0xfc>)
 80005aa:	f007 fc43 	bl	8007e34 <iprintf>
    opts.showtopics = 1;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <mqtt_client_init+0xec>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	621a      	str	r2, [r3, #32]

    printf("Subscribing to %s\r\n", "hello/wiznet");
 80005b4:	4911      	ldr	r1, [pc, #68]	@ (80005fc <mqtt_client_init+0x100>)
 80005b6:	4812      	ldr	r0, [pc, #72]	@ (8000600 <mqtt_client_init+0x104>)
 80005b8:	f007 fc3c 	bl	8007e34 <iprintf>
    rc = MQTTSubscribe(c, "hello/wiznet", opts.qos, messageArrived);
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <mqtt_client_init+0xec>)
 80005be:	7b1a      	ldrb	r2, [r3, #12]
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <mqtt_client_init+0x108>)
 80005c2:	490e      	ldr	r1, [pc, #56]	@ (80005fc <mqtt_client_init+0x100>)
 80005c4:	68b8      	ldr	r0, [r7, #8]
 80005c6:	f002 ffaf 	bl	8003528 <MQTTSubscribe>
 80005ca:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    printf("Subscribed %d\r\n", rc);
 80005ce:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80005d2:	480d      	ldr	r0, [pc, #52]	@ (8000608 <mqtt_client_init+0x10c>)
 80005d4:	f007 fc2e 	bl	8007e34 <iprintf>

    return rc;
 80005d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
}
 80005dc:	4618      	mov	r0, r3
 80005de:	37f0      	adds	r7, #240	@ 0xf0
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08009088 	.word	0x08009088
 80005e8:	20000008 	.word	0x20000008
 80005ec:	200001c8 	.word	0x200001c8
 80005f0:	080090e8 	.word	0x080090e8
 80005f4:	08009098 	.word	0x08009098
 80005f8:	080090a4 	.word	0x080090a4
 80005fc:	080090b4 	.word	0x080090b4
 8000600:	080090c4 	.word	0x080090c4
 8000604:	08000471 	.word	0x08000471
 8000608:	080090d8 	.word	0x080090d8

0800060c <print_network_information>:
uint8_t Domain_IP[4] = {0}; // Translated IP address by DNS Server
uint8_t Domain_name[] = "www.google.com";
uint8_t flag_process_dhcp_success = OFF;
uint8_t flag_process_dns_success = OFF;

void print_network_information(void) {
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(&defaultNetInfo);
 8000612:	4830      	ldr	r0, [pc, #192]	@ (80006d4 <print_network_information+0xc8>)
 8000614:	f005 fe6e 	bl	80062f4 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", defaultNetInfo.mac[0], defaultNetInfo.mac[1], defaultNetInfo.mac[2], defaultNetInfo.mac[3], defaultNetInfo.mac[4], defaultNetInfo.mac[5]);
 8000618:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <print_network_information+0xc8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <print_network_information+0xc8>)
 8000620:	785b      	ldrb	r3, [r3, #1]
 8000622:	461c      	mov	r4, r3
 8000624:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <print_network_information+0xc8>)
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	461d      	mov	r5, r3
 800062a:	4b2a      	ldr	r3, [pc, #168]	@ (80006d4 <print_network_information+0xc8>)
 800062c:	78db      	ldrb	r3, [r3, #3]
 800062e:	461a      	mov	r2, r3
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <print_network_information+0xc8>)
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	4619      	mov	r1, r3
 8000636:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <print_network_information+0xc8>)
 8000638:	795b      	ldrb	r3, [r3, #5]
 800063a:	9302      	str	r3, [sp, #8]
 800063c:	9101      	str	r1, [sp, #4]
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	462b      	mov	r3, r5
 8000642:	4622      	mov	r2, r4
 8000644:	4601      	mov	r1, r0
 8000646:	4824      	ldr	r0, [pc, #144]	@ (80006d8 <print_network_information+0xcc>)
 8000648:	f007 fbf4 	bl	8007e34 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r", defaultNetInfo.ip[0], defaultNetInfo.ip[1], defaultNetInfo.ip[2], defaultNetInfo.ip[3]);
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <print_network_information+0xc8>)
 800064e:	799b      	ldrb	r3, [r3, #6]
 8000650:	4619      	mov	r1, r3
 8000652:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <print_network_information+0xc8>)
 8000654:	79db      	ldrb	r3, [r3, #7]
 8000656:	461a      	mov	r2, r3
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <print_network_information+0xc8>)
 800065a:	7a1b      	ldrb	r3, [r3, #8]
 800065c:	4618      	mov	r0, r3
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <print_network_information+0xc8>)
 8000660:	7a5b      	ldrb	r3, [r3, #9]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4603      	mov	r3, r0
 8000666:	481d      	ldr	r0, [pc, #116]	@ (80006dc <print_network_information+0xd0>)
 8000668:	f007 fbe4 	bl	8007e34 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r", defaultNetInfo.sn[0], defaultNetInfo.sn[1], defaultNetInfo.sn[2], defaultNetInfo.sn[3]);
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <print_network_information+0xc8>)
 800066e:	7a9b      	ldrb	r3, [r3, #10]
 8000670:	4619      	mov	r1, r3
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <print_network_information+0xc8>)
 8000674:	7adb      	ldrb	r3, [r3, #11]
 8000676:	461a      	mov	r2, r3
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <print_network_information+0xc8>)
 800067a:	7b1b      	ldrb	r3, [r3, #12]
 800067c:	4618      	mov	r0, r3
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <print_network_information+0xc8>)
 8000680:	7b5b      	ldrb	r3, [r3, #13]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4603      	mov	r3, r0
 8000686:	4816      	ldr	r0, [pc, #88]	@ (80006e0 <print_network_information+0xd4>)
 8000688:	f007 fbd4 	bl	8007e34 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r", defaultNetInfo.gw[0], defaultNetInfo.gw[1], defaultNetInfo.gw[2], defaultNetInfo.gw[3]);
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <print_network_information+0xc8>)
 800068e:	7b9b      	ldrb	r3, [r3, #14]
 8000690:	4619      	mov	r1, r3
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <print_network_information+0xc8>)
 8000694:	7bdb      	ldrb	r3, [r3, #15]
 8000696:	461a      	mov	r2, r3
 8000698:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <print_network_information+0xc8>)
 800069a:	7c1b      	ldrb	r3, [r3, #16]
 800069c:	4618      	mov	r0, r3
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <print_network_information+0xc8>)
 80006a0:	7c5b      	ldrb	r3, [r3, #17]
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	4603      	mov	r3, r0
 80006a6:	480f      	ldr	r0, [pc, #60]	@ (80006e4 <print_network_information+0xd8>)
 80006a8:	f007 fbc4 	bl	8007e34 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r", defaultNetInfo.dns[0], defaultNetInfo.dns[1], defaultNetInfo.dns[2], defaultNetInfo.dns[3]);
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <print_network_information+0xc8>)
 80006ae:	7c9b      	ldrb	r3, [r3, #18]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <print_network_information+0xc8>)
 80006b4:	7cdb      	ldrb	r3, [r3, #19]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <print_network_information+0xc8>)
 80006ba:	7d1b      	ldrb	r3, [r3, #20]
 80006bc:	4618      	mov	r0, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <print_network_information+0xc8>)
 80006c0:	7d5b      	ldrb	r3, [r3, #21]
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	4808      	ldr	r0, [pc, #32]	@ (80006e8 <print_network_information+0xdc>)
 80006c8:	f007 fbb4 	bl	8007e34 <iprintf>
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bdb0      	pop	{r4, r5, r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000002c 	.word	0x2000002c
 80006d8:	08009140 	.word	0x08009140
 80006dc:	08009170 	.word	0x08009170
 80006e0:	0800918c 	.word	0x0800918c
 80006e4:	080091a8 	.word	0x080091a8
 80006e8:	080091c4 	.word	0x080091c4

080006ec <process_dhcp>:

int8_t process_dhcp(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
    uint8_t ret = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71bb      	strb	r3, [r7, #6]
    uint8_t dhcp_retry = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	71fb      	strb	r3, [r7, #7]

    printf(" - DHCP Client running\r\n");
 80006fa:	4818      	ldr	r0, [pc, #96]	@ (800075c <process_dhcp+0x70>)
 80006fc:	f007 fc02 	bl	8007f04 <puts>
    DHCP_init(SOCK_DHCP, data_buf);
 8000700:	4917      	ldr	r1, [pc, #92]	@ (8000760 <process_dhcp+0x74>)
 8000702:	2003      	movs	r0, #3
 8000704:	f001 fdea 	bl	80022dc <DHCP_init>

    printf(" - DHCP Init done\r\n");
 8000708:	4816      	ldr	r0, [pc, #88]	@ (8000764 <process_dhcp+0x78>)
 800070a:	f007 fbfb 	bl	8007f04 <puts>
    while (1) {
        ret = DHCP_run();
 800070e:	f001 fc1d 	bl	8001f4c <DHCP_run>
 8000712:	4603      	mov	r3, r0
 8000714:	71bb      	strb	r3, [r7, #6]
        if (ret == DHCP_IP_LEASED) {
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	2b04      	cmp	r3, #4
 800071a:	d103      	bne.n	8000724 <process_dhcp+0x38>
            printf(" - DHCP Success\r\n");
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <process_dhcp+0x7c>)
 800071e:	f007 fbf1 	bl	8007f04 <puts>
            break;
 8000722:	e015      	b.n	8000750 <process_dhcp+0x64>
        } else if (ret == DHCP_FAILED) {
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10a      	bne.n	8000740 <process_dhcp+0x54>
            dhcp_retry++;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	3301      	adds	r3, #1
 800072e:	71fb      	strb	r3, [r7, #7]
            if (dhcp_retry <= 3) printf(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d804      	bhi.n	8000740 <process_dhcp+0x54>
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4619      	mov	r1, r3
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <process_dhcp+0x80>)
 800073c:	f007 fb7a 	bl	8007e34 <iprintf>
        }
        if (dhcp_retry > 3) {
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d9e3      	bls.n	800070e <process_dhcp+0x22>
            printf(" - DHCP Failed\r\n\r\n");
 8000746:	480a      	ldr	r0, [pc, #40]	@ (8000770 <process_dhcp+0x84>)
 8000748:	f007 fbdc 	bl	8007f04 <puts>
            DHCP_stop();
 800074c:	f001 fd18 	bl	8002180 <DHCP_stop>
            break;
        }
    }
    return ret;
 8000750:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	080091e0 	.word	0x080091e0
 8000760:	200009c8 	.word	0x200009c8
 8000764:	080091f8 	.word	0x080091f8
 8000768:	0800920c 	.word	0x0800920c
 800076c:	08009220 	.word	0x08009220
 8000770:	0800924c 	.word	0x0800924c

08000774 <process_dns>:

int8_t process_dns(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
    int8_t ret = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	71bb      	strb	r3, [r7, #6]
    uint8_t dns_retry = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]

    printf(" - DNS Client running\r\n");
 8000782:	4816      	ldr	r0, [pc, #88]	@ (80007dc <process_dns+0x68>)
 8000784:	f007 fbbe 	bl	8007f04 <puts>
    DNS_init(SOCK_DNS, data_buf);
 8000788:	4915      	ldr	r1, [pc, #84]	@ (80007e0 <process_dns+0x6c>)
 800078a:	2004      	movs	r0, #4
 800078c:	f002 fa0a 	bl	8002ba4 <DNS_init>
    while (1) {
        if ((ret = DNS_run(dns_server, (uint8_t *)Domain_name, Domain_IP)) == 1) {
 8000790:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <process_dns+0x70>)
 8000792:	4915      	ldr	r1, [pc, #84]	@ (80007e8 <process_dns+0x74>)
 8000794:	4815      	ldr	r0, [pc, #84]	@ (80007ec <process_dns+0x78>)
 8000796:	f002 fa21 	bl	8002bdc <DNS_run>
 800079a:	4603      	mov	r3, r0
 800079c:	71bb      	strb	r3, [r7, #6]
 800079e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d103      	bne.n	80007ae <process_dns+0x3a>
            printf(" - DNS Success\r\n");
 80007a6:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <process_dns+0x7c>)
 80007a8:	f007 fbac 	bl	8007f04 <puts>
            break;
 80007ac:	e010      	b.n	80007d0 <process_dns+0x5c>
        } else {
            dns_retry++;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3301      	adds	r3, #1
 80007b2:	71fb      	strb	r3, [r7, #7]
            if (dns_retry <= 2) printf(" - DNS Timeout occurred and retry [%d]\r\n", dns_retry);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d804      	bhi.n	80007c4 <process_dns+0x50>
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4619      	mov	r1, r3
 80007be:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <process_dns+0x80>)
 80007c0:	f007 fb38 	bl	8007e34 <iprintf>
        }
        if (dns_retry > 2) {
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d9e2      	bls.n	8000790 <process_dns+0x1c>
            printf(" - DNS Failed\r\n\r\n");
 80007ca:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <process_dns+0x84>)
 80007cc:	f007 fb9a 	bl	8007f04 <puts>
            break;
        }
    }
    return ret;
 80007d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08009260 	.word	0x08009260
 80007e0:	200009c8 	.word	0x200009c8
 80007e4:	200011c8 	.word	0x200011c8
 80007e8:	20000048 	.word	0x20000048
 80007ec:	20000044 	.word	0x20000044
 80007f0:	08009278 	.word	0x08009278
 80007f4:	08009288 	.word	0x08009288
 80007f8:	080092b4 	.word	0x080092b4

080007fc <initialize_network>:

void initialize_network(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af02      	add	r7, sp, #8
    printf("\t - WizChip Init - \r\n");
 8000802:	482d      	ldr	r0, [pc, #180]	@ (80008b8 <initialize_network+0xbc>)
 8000804:	f007 fb7e 	bl	8007f04 <puts>
    WIZCHIPInitialize();
 8000808:	f000 fa08 	bl	8000c1c <WIZCHIPInitialize>
    printf("version:%.2x\r\n", getVERSIONR());
 800080c:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 8000810:	f003 fe3c 	bl	800448c <WIZCHIP_READ>
 8000814:	4603      	mov	r3, r0
 8000816:	4619      	mov	r1, r3
 8000818:	4828      	ldr	r0, [pc, #160]	@ (80008bc <initialize_network+0xc0>)
 800081a:	f007 fb0b 	bl	8007e34 <iprintf>

    wizchip_setnetinfo(&defaultNetInfo);
 800081e:	4828      	ldr	r0, [pc, #160]	@ (80008c0 <initialize_network+0xc4>)
 8000820:	f005 fd28 	bl	8006274 <wizchip_setnetinfo>
    print_network_information();
 8000824:	f7ff fef2 	bl	800060c <print_network_information>

    if (process_dhcp() == DHCP_IP_LEASED) {
 8000828:	f7ff ff60 	bl	80006ec <process_dhcp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b04      	cmp	r3, #4
 8000830:	d103      	bne.n	800083a <initialize_network+0x3e>
        flag_process_dhcp_success = ON;
 8000832:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <initialize_network+0xc8>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e003      	b.n	8000842 <initialize_network+0x46>
    } else {
        ctlnetwork(CN_SET_NETINFO, &defaultNetInfo); // Set default static IP settings
 800083a:	4921      	ldr	r1, [pc, #132]	@ (80008c0 <initialize_network+0xc4>)
 800083c:	2000      	movs	r0, #0
 800083e:	f005 fa1f 	bl	8005c80 <ctlnetwork>
    }


    printf("Register value after W5x00 initialize!\r\n");
 8000842:	4821      	ldr	r0, [pc, #132]	@ (80008c8 <initialize_network+0xcc>)
 8000844:	f007 fb5e 	bl	8007f04 <puts>
    print_network_information();
 8000848:	f7ff fee0 	bl	800060c <print_network_information>

    if (process_dns()) {
 800084c:	f7ff ff92 	bl	8000774 <process_dns>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <initialize_network+0x60>
        flag_process_dns_success = ON;
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <initialize_network+0xd0>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
    }

    if (flag_process_dhcp_success == ENABLE) {
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <initialize_network+0xc8>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d107      	bne.n	8000874 <initialize_network+0x78>
        printf(" # DHCP IP Leased time : %lu seconds\r\n", getDHCPLeasetime());
 8000864:	f001 fde4 	bl	8002430 <getDHCPLeasetime>
 8000868:	4603      	mov	r3, r0
 800086a:	4619      	mov	r1, r3
 800086c:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <initialize_network+0xd4>)
 800086e:	f007 fae1 	bl	8007e34 <iprintf>
 8000872:	e002      	b.n	800087a <initialize_network+0x7e>
    } else {
        printf(" # DHCP Failed\r\n");
 8000874:	4817      	ldr	r0, [pc, #92]	@ (80008d4 <initialize_network+0xd8>)
 8000876:	f007 fb45 	bl	8007f04 <puts>
    }

    if (flag_process_dns_success == ENABLE) {
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <initialize_network+0xd0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d113      	bne.n	80008aa <initialize_network+0xae>
        printf(" # DNS: %s => %d.%d.%d.%d\r\n", Domain_name, Domain_IP[0], Domain_IP[1], Domain_IP[2], Domain_IP[3]);
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <initialize_network+0xdc>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <initialize_network+0xdc>)
 800088a:	785b      	ldrb	r3, [r3, #1]
 800088c:	4618      	mov	r0, r3
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <initialize_network+0xdc>)
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	461a      	mov	r2, r3
 8000894:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <initialize_network+0xdc>)
 8000896:	78db      	ldrb	r3, [r3, #3]
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	4603      	mov	r3, r0
 800089e:	460a      	mov	r2, r1
 80008a0:	490e      	ldr	r1, [pc, #56]	@ (80008dc <initialize_network+0xe0>)
 80008a2:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <initialize_network+0xe4>)
 80008a4:	f007 fac6 	bl	8007e34 <iprintf>
    } else {
        printf(" # DNS Failed\r\n");
    }
}
 80008a8:	e002      	b.n	80008b0 <initialize_network+0xb4>
        printf(" # DNS Failed\r\n");
 80008aa:	480e      	ldr	r0, [pc, #56]	@ (80008e4 <initialize_network+0xe8>)
 80008ac:	f007 fb2a 	bl	8007f04 <puts>
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	080092c8 	.word	0x080092c8
 80008bc:	080092e0 	.word	0x080092e0
 80008c0:	2000002c 	.word	0x2000002c
 80008c4:	200011cc 	.word	0x200011cc
 80008c8:	080092f0 	.word	0x080092f0
 80008cc:	200011cd 	.word	0x200011cd
 80008d0:	08009318 	.word	0x08009318
 80008d4:	08009340 	.word	0x08009340
 80008d8:	200011c8 	.word	0x200011c8
 80008dc:	20000048 	.word	0x20000048
 80008e0:	08009350 	.word	0x08009350
 80008e4:	0800936c 	.word	0x0800936c

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <HAL_MspInit+0x5c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_MspInit+0x5c>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_MspInit+0x5c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_MspInit+0x5c>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_MspInit+0x60>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <HAL_MspInit+0x60>)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000
 8000948:	40010000 	.word	0x40010000

0800094c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <HAL_SPI_MspInit+0x8c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d131      	bne.n	80009d0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <HAL_SPI_MspInit+0x90>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a1a      	ldr	r2, [pc, #104]	@ (80009dc <HAL_SPI_MspInit+0x90>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000976:	61d3      	str	r3, [r2, #28]
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <HAL_SPI_MspInit+0x90>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <HAL_SPI_MspInit+0x90>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <HAL_SPI_MspInit+0x90>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_SPI_MspInit+0x90>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800099c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80009a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 80009b2:	f005 ff05 	bl	80067c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <HAL_SPI_MspInit+0x94>)
 80009cc:	f005 fef8 	bl	80067c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <HAL_UART_MspInit+0x70>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d123      	bne.n	8000a4c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_UART_MspInit+0x74>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <HAL_UART_MspInit+0x74>)
 8000a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0e:	61d3      	str	r3, [r2, #28]
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <HAL_UART_MspInit+0x74>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_UART_MspInit+0x74>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <HAL_UART_MspInit+0x74>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_UART_MspInit+0x74>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a34:	230c      	movs	r3, #12
 8000a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <HAL_UART_MspInit+0x78>)
 8000a48:	f005 feba 	bl	80067c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f005 fd38 	bl	8006524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000abc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ac0:	f006 f81a 	bl	8006af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
  }

  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b28:	605a      	str	r2, [r3, #4]
  return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <_isatty>:

int _isatty(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f007 fb36 	bl	8008204 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20005000 	.word	0x20005000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200011d0 	.word	0x200011d0
 8000bcc:	20001398 	.word	0x20001398

08000bd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <_write>:
#include "uart_redirect.h"
#include "stm32f1xx_hal.h" // oder die entsprechende HAL Header-Datei

extern UART_HandleTypeDef huart2;

int _write(int fd, char *str, int len) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00b      	b.n	8000c06 <_write+0x2a>
    HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	18d1      	adds	r1, r2, r3
 8000bf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <_write+0x3c>)
 8000bfc:	f006 fed8 	bl	80079b0 <HAL_UART_Transmit>
  for (int i = 0; i < len; i++) {
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3301      	adds	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dbef      	blt.n	8000bee <_write+0x12>
  }
  return len;
 8000c0e:	687b      	ldr	r3, [r7, #4]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000180 	.word	0x20000180

08000c1c <WIZCHIPInitialize>:

#include "wizchip_init.h"
#include <stdio.h>


void WIZCHIPInitialize(){
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0

	csDisable();
 8000c22:	f000 f861 	bl	8000ce8 <csDisable>
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 8000c26:	4917      	ldr	r1, [pc, #92]	@ (8000c84 <WIZCHIPInitialize+0x68>)
 8000c28:	4817      	ldr	r0, [pc, #92]	@ (8000c88 <WIZCHIPInitialize+0x6c>)
 8000c2a:	f004 ff1d 	bl	8005a68 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 8000c2e:	4917      	ldr	r1, [pc, #92]	@ (8000c8c <WIZCHIPInitialize+0x70>)
 8000c30:	4817      	ldr	r0, [pc, #92]	@ (8000c90 <WIZCHIPInitialize+0x74>)
 8000c32:	f004 fef5 	bl	8005a20 <reg_wizchip_cs_cbfunc>


	uint8_t tmp;
	//w5500, w5200
#if _WIZCHIP_ >= W5200
	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <WIZCHIPInitialize+0x78>)
 8000c38:	1d3c      	adds	r4, r7, #4
 8000c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
	uint8_t memsize[2][4] = { {2,2,2,2},{2,2,2,2}};
#endif
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	f004 ff3b 	bl	8005ac0 <ctlwizchip>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d103      	bne.n	8000c5a <WIZCHIPInitialize+0x3e>
	{
		//myprintf("WIZCHIP Initialized fail.\r\n");
		printf("WIZCHIP Initialized fail.\r\n");
 8000c52:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <WIZCHIPInitialize+0x7c>)
 8000c54:	f007 f956 	bl	8007f04 <puts>
	  return;
 8000c58:	e010      	b.n	8000c7c <WIZCHIPInitialize+0x60>
	}
	/* PHY link status check */
	do {
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8000c5a:	f107 0317 	add.w	r3, r7, #23
 8000c5e:	4619      	mov	r1, r3
 8000c60:	200f      	movs	r0, #15
 8000c62:	f004 ff2d 	bl	8005ac0 <ctlwizchip>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d103      	bne.n	8000c76 <WIZCHIPInitialize+0x5a>
		{
			printf("Unknown PHY Link status.\r\n");
 8000c6e:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <WIZCHIPInitialize+0x80>)
 8000c70:	f007 f948 	bl	8007f04 <puts>
		  return;
 8000c74:	e002      	b.n	8000c7c <WIZCHIPInitialize+0x60>
		}
	} while (tmp == PHY_LINK_OFF);
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0ee      	beq.n	8000c5a <WIZCHIPInitialize+0x3e>



}
 8000c7c:	371c      	adds	r7, #28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08000d01 	.word	0x08000d01
 8000c88:	08000d29 	.word	0x08000d29
 8000c8c:	08000ce9 	.word	0x08000ce9
 8000c90:	08000cd1 	.word	0x08000cd1
 8000c94:	080093b4 	.word	0x080093b4
 8000c98:	0800937c 	.word	0x0800937c
 8000c9c:	08009398 	.word	0x08009398

08000ca0 <resetAssert>:


void resetAssert(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <resetAssert+0x14>)
 8000caa:	f005 ff0d 	bl	8006ac8 <HAL_GPIO_WritePin>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <resetDeassert>:

void resetDeassert(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <resetDeassert+0x14>)
 8000cc2:	f005 ff01 	bl	8006ac8 <HAL_GPIO_WritePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <csEnable>:

void csEnable(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <csEnable+0x14>)
 8000cda:	f005 fef5 	bl	8006ac8 <HAL_GPIO_WritePin>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <csDisable>:

void csDisable(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <csDisable+0x14>)
 8000cf2:	f005 fee9 	bl	8006ac8 <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40010c00 	.word	0x40010c00

08000d00 <spiWriteByte>:

void spiWriteByte(uint8_t tx)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 8000d0a:	f107 020f 	add.w	r2, r7, #15
 8000d0e:	1df9      	adds	r1, r7, #7
 8000d10:	230a      	movs	r3, #10
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <spiWriteByte+0x24>)
 8000d18:	f006 fba4 	bl	8007464 <HAL_SPI_TransmitReceive>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000128 	.word	0x20000128

08000d28 <spiReadByte>:

uint8_t spiReadByte(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af02      	add	r7, sp, #8
	uint8_t rx = 0, tx = 0xFF;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	23ff      	movs	r3, #255	@ 0xff
 8000d34:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 8000d36:	1dfa      	adds	r2, r7, #7
 8000d38:	1db9      	adds	r1, r7, #6
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <spiReadByte+0x28>)
 8000d42:	f006 fb8f 	bl	8007464 <HAL_SPI_TransmitReceive>
	return rx;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000128 	.word	0x20000128

08000d54 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4909      	ldr	r1, [pc, #36]	@ (8000d80 <default_ip_assign+0x2c>)
 8000d5c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000d60:	f003 fc8e 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000d64:	2204      	movs	r2, #4
 8000d66:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <default_ip_assign+0x30>)
 8000d68:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8000d6c:	f003 fc88 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000d70:	2204      	movs	r2, #4
 8000d72:	4905      	ldr	r1, [pc, #20]	@ (8000d88 <default_ip_assign+0x34>)
 8000d74:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d78:	f003 fc82 	bl	8004680 <WIZCHIP_WRITE_BUF>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200011e4 	.word	0x200011e4
 8000d84:	200011ec 	.word	0x200011ec
 8000d88:	200011e8 	.word	0x200011e8

08000d8c <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	2000      	movs	r0, #0
 8000d94:	f003 fbc6 	bl	8004524 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f003 fb77 	bl	800448c <WIZCHIP_READ>
   default_ip_assign();
 8000d9e:	f7ff ffd9 	bl	8000d54 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000da2:	2206      	movs	r2, #6
 8000da4:	4903      	ldr	r1, [pc, #12]	@ (8000db4 <default_ip_update+0x28>)
 8000da6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000daa:	f003 fc69 	bl	8004680 <WIZCHIP_WRITE_BUF>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20001204 	.word	0x20001204

08000db8 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000dbc:	2180      	movs	r1, #128	@ 0x80
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f003 fbb0 	bl	8004524 <WIZCHIP_WRITE>
	getMR(); // for delay
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f003 fb61 	bl	800448c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000dca:	2206      	movs	r2, #6
 8000dcc:	4903      	ldr	r1, [pc, #12]	@ (8000ddc <default_ip_conflict+0x24>)
 8000dce:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000dd2:	f003 fc55 	bl	8004680 <WIZCHIP_WRITE_BUF>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001204 	.word	0x20001204

08000de0 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8000de6:	463b      	mov	r3, r7
 8000de8:	2206      	movs	r2, #6
 8000dea:	4619      	mov	r1, r3
 8000dec:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000df0:	f003 fbe6 	bl	80045c0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000df4:	4b72      	ldr	r3, [pc, #456]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8000dfc:	4b70      	ldr	r3, [pc, #448]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2201      	movs	r2, #1
 8000e02:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8000e04:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2206      	movs	r2, #6
 8000e0a:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8000e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2200      	movs	r2, #0
 8000e12:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8000e14:	4b6a      	ldr	r3, [pc, #424]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000e1c:	4b69      	ldr	r3, [pc, #420]	@ (8000fc4 <makeDHCPMSG+0x1e4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	0e1b      	lsrs	r3, r3, #24
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8000e28:	4b66      	ldr	r3, [pc, #408]	@ (8000fc4 <makeDHCPMSG+0x1e4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	0c1a      	lsrs	r2, r3, #16
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000e36:	4b63      	ldr	r3, [pc, #396]	@ (8000fc4 <makeDHCPMSG+0x1e4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	0a1a      	lsrs	r2, r3, #8
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8000e44:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <makeDHCPMSG+0x1e4>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8000e50:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8000e58:	4b59      	ldr	r3, [pc, #356]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	330a      	adds	r3, #10
 8000e5e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8000e6e:	4b54      	ldr	r3, [pc, #336]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8000e76:	4b52      	ldr	r3, [pc, #328]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8000e7e:	4b50      	ldr	r3, [pc, #320]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8000e86:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8000e9e:	4b48      	ldr	r3, [pc, #288]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8000ea6:	4b46      	ldr	r3, [pc, #280]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8000eae:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8000eb6:	4b42      	ldr	r3, [pc, #264]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8000ebe:	4b40      	ldr	r3, [pc, #256]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8000ece:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8000ede:	4b38      	ldr	r3, [pc, #224]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8000ee6:	4b36      	ldr	r3, [pc, #216]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a35      	ldr	r2, [pc, #212]	@ (8000fc8 <makeDHCPMSG+0x1e8>)
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000ef8:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a32      	ldr	r2, [pc, #200]	@ (8000fc8 <makeDHCPMSG+0x1e8>)
 8000efe:	7852      	ldrb	r2, [r2, #1]
 8000f00:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8000f02:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a30      	ldr	r2, [pc, #192]	@ (8000fc8 <makeDHCPMSG+0x1e8>)
 8000f08:	7892      	ldrb	r2, [r2, #2]
 8000f0a:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc8 <makeDHCPMSG+0x1e8>)
 8000f12:	78d2      	ldrb	r2, [r2, #3]
 8000f14:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8000f16:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc8 <makeDHCPMSG+0x1e8>)
 8000f1c:	7912      	ldrb	r2, [r2, #4]
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8000f22:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a28      	ldr	r2, [pc, #160]	@ (8000fc8 <makeDHCPMSG+0x1e8>)
 8000f28:	7952      	ldrb	r2, [r2, #5]
 8000f2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e008      	b.n	8000f46 <makeDHCPMSG+0x166>
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	771a      	strb	r2, [r3, #28]
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d9f3      	bls.n	8000f34 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e009      	b.n	8000f66 <makeDHCPMSG+0x186>
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	4413      	add	r3, r2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f6a:	d9f2      	bls.n	8000f52 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e009      	b.n	8000f86 <makeDHCPMSG+0x1a6>
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	3301      	adds	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	daf1      	bge.n	8000f72 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2263      	movs	r2, #99	@ 0x63
 8000f94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8000f98:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2282      	movs	r2, #130	@ 0x82
 8000f9e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2253      	movs	r2, #83	@ 0x53
 8000fa8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <makeDHCPMSG+0x1e0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2263      	movs	r2, #99	@ 0x63
 8000fb2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20001200 	.word	0x20001200
 8000fc4:	200011fc 	.word	0x200011fc
 8000fc8:	20001204 	.word	0x20001204

08000fcc <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8000fd6:	f7ff ff03 	bl	8000de0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8000fda:	4b56      	ldr	r3, [pc, #344]	@ (8001134 <send_DHCP_DISCOVER+0x168>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8000fe0:	4b54      	ldr	r3, [pc, #336]	@ (8001134 <send_DHCP_DISCOVER+0x168>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8000fe6:	4b53      	ldr	r3, [pc, #332]	@ (8001134 <send_DHCP_DISCOVER+0x168>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8000fec:	4b51      	ldr	r3, [pc, #324]	@ (8001134 <send_DHCP_DISCOVER+0x168>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8000ff2:	4b51      	ldr	r3, [pc, #324]	@ (8001138 <send_DHCP_DISCOVER+0x16c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8000ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8001138 <send_DHCP_DISCOVER+0x16c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8001138 <send_DHCP_DISCOVER+0x16c>)
 8001000:	2200      	movs	r2, #0
 8001002:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001004:	4b4c      	ldr	r3, [pc, #304]	@ (8001138 <send_DHCP_DISCOVER+0x16c>)
 8001006:	2200      	movs	r2, #0
 8001008:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800100a:	2304      	movs	r3, #4
 800100c:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800100e:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	1c59      	adds	r1, r3, #1
 8001016:	80b9      	strh	r1, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	2235      	movs	r2, #53	@ 0x35
 800101c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001020:	4b46      	ldr	r3, [pc, #280]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	1c59      	adds	r1, r3, #1
 8001028:	80b9      	strh	r1, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	2201      	movs	r2, #1
 800102e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8001032:	4b42      	ldr	r3, [pc, #264]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	1c59      	adds	r1, r3, #1
 800103a:	80b9      	strh	r1, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	2201      	movs	r2, #1
 8001040:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001044:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	1c59      	adds	r1, r3, #1
 800104c:	80b9      	strh	r1, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	223d      	movs	r2, #61	@ 0x3d
 8001052:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001056:	4b39      	ldr	r3, [pc, #228]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	1c59      	adds	r1, r3, #1
 800105e:	80b9      	strh	r1, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	2207      	movs	r2, #7
 8001064:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001068:	4b34      	ldr	r3, [pc, #208]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	1c59      	adds	r1, r3, #1
 8001070:	80b9      	strh	r1, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	2201      	movs	r2, #1
 8001076:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	1c59      	adds	r1, r3, #1
 8001082:	80b9      	strh	r1, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <send_DHCP_DISCOVER+0x174>)
 8001088:	7819      	ldrb	r1, [r3, #0]
 800108a:	1813      	adds	r3, r2, r0
 800108c:	460a      	mov	r2, r1
 800108e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001092:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	1c59      	adds	r1, r3, #1
 800109a:	80b9      	strh	r1, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <send_DHCP_DISCOVER+0x174>)
 80010a0:	7859      	ldrb	r1, [r3, #1]
 80010a2:	1813      	adds	r3, r2, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	1c59      	adds	r1, r3, #1
 80010b2:	80b9      	strh	r1, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <send_DHCP_DISCOVER+0x174>)
 80010b8:	7899      	ldrb	r1, [r3, #2]
 80010ba:	1813      	adds	r3, r2, r0
 80010bc:	460a      	mov	r2, r1
 80010be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	88bb      	ldrh	r3, [r7, #4]
 80010c8:	1c59      	adds	r1, r3, #1
 80010ca:	80b9      	strh	r1, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <send_DHCP_DISCOVER+0x174>)
 80010d0:	78d9      	ldrb	r1, [r3, #3]
 80010d2:	1813      	adds	r3, r2, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	1c59      	adds	r1, r3, #1
 80010e2:	80b9      	strh	r1, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <send_DHCP_DISCOVER+0x174>)
 80010e8:	7919      	ldrb	r1, [r3, #4]
 80010ea:	1813      	adds	r3, r2, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	1c59      	adds	r1, r3, #1
 80010fa:	80b9      	strh	r1, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <send_DHCP_DISCOVER+0x174>)
 8001100:	7959      	ldrb	r1, [r3, #5]
 8001102:	1813      	adds	r3, r2, r0
 8001104:	460a      	mov	r2, r1
 8001106:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	1c59      	adds	r1, r3, #1
 8001112:	80b9      	strh	r1, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	220c      	movs	r2, #12
 8001118:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <send_DHCP_DISCOVER+0x170>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	1c59      	adds	r1, r3, #1
 8001124:	80b9      	strh	r1, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	2200      	movs	r2, #0
 800112a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	e017      	b.n	8001164 <send_DHCP_DISCOVER+0x198>
 8001134:	200011d8 	.word	0x200011d8
 8001138:	200011dc 	.word	0x200011dc
 800113c:	20001200 	.word	0x20001200
 8001140:	20001204 	.word	0x20001204
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001144:	88f9      	ldrh	r1, [r7, #6]
 8001146:	4b80      	ldr	r3, [pc, #512]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	1c58      	adds	r0, r3, #1
 800114e:	80b8      	strh	r0, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	4b7e      	ldr	r3, [pc, #504]	@ (800134c <send_DHCP_DISCOVER+0x380>)
 8001154:	5c59      	ldrb	r1, [r3, r1]
 8001156:	1813      	adds	r3, r2, r0
 8001158:	460a      	mov	r2, r1
 800115a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	3301      	adds	r3, #1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4a79      	ldr	r2, [pc, #484]	@ (800134c <send_DHCP_DISCOVER+0x380>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1ea      	bne.n	8001144 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800116e:	4b78      	ldr	r3, [pc, #480]	@ (8001350 <send_DHCP_DISCOVER+0x384>)
 8001170:	78db      	ldrb	r3, [r3, #3]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b74      	ldr	r3, [pc, #464]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001178:	681c      	ldr	r4, [r3, #0]
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	1c59      	adds	r1, r3, #1
 800117e:	80b9      	strh	r1, [r7, #4]
 8001180:	461d      	mov	r5, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f001 f95e 	bl	8002444 <NibbleToHex>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	1963      	adds	r3, r4, r5
 800118e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001192:	4b6f      	ldr	r3, [pc, #444]	@ (8001350 <send_DHCP_DISCOVER+0x384>)
 8001194:	78da      	ldrb	r2, [r3, #3]
 8001196:	4b6c      	ldr	r3, [pc, #432]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001198:	681c      	ldr	r4, [r3, #0]
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	1c59      	adds	r1, r3, #1
 800119e:	80b9      	strh	r1, [r7, #4]
 80011a0:	461d      	mov	r5, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f001 f94e 	bl	8002444 <NibbleToHex>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	1963      	adds	r3, r4, r5
 80011ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80011b2:	4b67      	ldr	r3, [pc, #412]	@ (8001350 <send_DHCP_DISCOVER+0x384>)
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b63      	ldr	r3, [pc, #396]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 80011bc:	681c      	ldr	r4, [r3, #0]
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	1c59      	adds	r1, r3, #1
 80011c2:	80b9      	strh	r1, [r7, #4]
 80011c4:	461d      	mov	r5, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f001 f93c 	bl	8002444 <NibbleToHex>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	1963      	adds	r3, r4, r5
 80011d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80011d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001350 <send_DHCP_DISCOVER+0x384>)
 80011d8:	791a      	ldrb	r2, [r3, #4]
 80011da:	4b5b      	ldr	r3, [pc, #364]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 80011dc:	681c      	ldr	r4, [r3, #0]
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	1c59      	adds	r1, r3, #1
 80011e2:	80b9      	strh	r1, [r7, #4]
 80011e4:	461d      	mov	r5, r3
 80011e6:	4610      	mov	r0, r2
 80011e8:	f001 f92c 	bl	8002444 <NibbleToHex>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	1963      	adds	r3, r4, r5
 80011f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80011f6:	4b56      	ldr	r3, [pc, #344]	@ (8001350 <send_DHCP_DISCOVER+0x384>)
 80011f8:	795b      	ldrb	r3, [r3, #5]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b52      	ldr	r3, [pc, #328]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001200:	681c      	ldr	r4, [r3, #0]
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	1c59      	adds	r1, r3, #1
 8001206:	80b9      	strh	r1, [r7, #4]
 8001208:	461d      	mov	r5, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f001 f91a 	bl	8002444 <NibbleToHex>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	1963      	adds	r3, r4, r5
 8001216:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800121a:	4b4d      	ldr	r3, [pc, #308]	@ (8001350 <send_DHCP_DISCOVER+0x384>)
 800121c:	795a      	ldrb	r2, [r3, #5]
 800121e:	4b4a      	ldr	r3, [pc, #296]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001220:	681c      	ldr	r4, [r3, #0]
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	1c59      	adds	r1, r3, #1
 8001226:	80b9      	strh	r1, [r7, #4]
 8001228:	461d      	mov	r5, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f001 f90a 	bl	8002444 <NibbleToHex>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	1963      	adds	r3, r4, r5
 8001236:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	b2d9      	uxtb	r1, r3
 800123e:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	88b8      	ldrh	r0, [r7, #4]
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	3307      	adds	r3, #7
 8001248:	1ac3      	subs	r3, r0, r3
 800124a:	3106      	adds	r1, #6
 800124c:	b2c9      	uxtb	r1, r1
 800124e:	4413      	add	r3, r2
 8001250:	460a      	mov	r2, r1
 8001252:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001256:	4b3c      	ldr	r3, [pc, #240]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	1c59      	adds	r1, r3, #1
 800125e:	80b9      	strh	r1, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	2237      	movs	r2, #55	@ 0x37
 8001264:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001268:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	1c59      	adds	r1, r3, #1
 8001270:	80b9      	strh	r1, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	2206      	movs	r2, #6
 8001276:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	1c59      	adds	r1, r3, #1
 8001282:	80b9      	strh	r1, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	2201      	movs	r2, #1
 8001288:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800128c:	4b2e      	ldr	r3, [pc, #184]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	1c59      	adds	r1, r3, #1
 8001294:	80b9      	strh	r1, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	2203      	movs	r2, #3
 800129a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	80b9      	strh	r1, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	2206      	movs	r2, #6
 80012ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	1c59      	adds	r1, r3, #1
 80012b8:	80b9      	strh	r1, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	220f      	movs	r2, #15
 80012be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	1c59      	adds	r1, r3, #1
 80012ca:	80b9      	strh	r1, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	223a      	movs	r2, #58	@ 0x3a
 80012d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	1c59      	adds	r1, r3, #1
 80012dc:	80b9      	strh	r1, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	223b      	movs	r2, #59	@ 0x3b
 80012e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	1c59      	adds	r1, r3, #1
 80012ee:	80b9      	strh	r1, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	e009      	b.n	8001312 <send_DHCP_DISCOVER+0x346>
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4413      	add	r3, r2
 8001306:	2200      	movs	r2, #0
 8001308:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	3301      	adds	r3, #1
 8001310:	80fb      	strh	r3, [r7, #6]
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001318:	d3f1      	bcc.n	80012fe <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800131a:	23ff      	movs	r3, #255	@ 0xff
 800131c:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800131e:	23ff      	movs	r3, #255	@ 0xff
 8001320:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001322:	23ff      	movs	r3, #255	@ 0xff
 8001324:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8001326:	23ff      	movs	r3, #255	@ 0xff
 8001328:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <send_DHCP_DISCOVER+0x388>)
 800132c:	7818      	ldrb	r0, [r3, #0]
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <send_DHCP_DISCOVER+0x37c>)
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	463b      	mov	r3, r7
 8001334:	2243      	movs	r2, #67	@ 0x43
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800133c:	f004 f80c 	bl	8005358 <sendto>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bdb0      	pop	{r4, r5, r7, pc}
 8001348:	20001200 	.word	0x20001200
 800134c:	20000064 	.word	0x20000064
 8001350:	20001204 	.word	0x20001204
 8001354:	200011d4 	.word	0x200011d4

08001358 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001362:	f7ff fd3d 	bl	8000de0 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <send_DHCP_REQUEST+0x7c>)
 8001368:	f993 3000 	ldrsb.w	r3, [r3]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d004      	beq.n	800137a <send_DHCP_REQUEST+0x22>
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <send_DHCP_REQUEST+0x7c>)
 8001372:	f993 3000 	ldrsb.w	r3, [r3]
 8001376:	2b04      	cmp	r3, #4
 8001378:	d134      	bne.n	80013e4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <send_DHCP_REQUEST+0x80>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	330a      	adds	r3, #10
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <send_DHCP_REQUEST+0x80>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	330a      	adds	r3, #10
 800138a:	3301      	adds	r3, #1
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <send_DHCP_REQUEST+0x80>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <send_DHCP_REQUEST+0x84>)
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <send_DHCP_REQUEST+0x80>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <send_DHCP_REQUEST+0x84>)
 80013a0:	7852      	ldrb	r2, [r2, #1]
 80013a2:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <send_DHCP_REQUEST+0x80>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <send_DHCP_REQUEST+0x84>)
 80013aa:	7892      	ldrb	r2, [r2, #2]
 80013ac:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <send_DHCP_REQUEST+0x80>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <send_DHCP_REQUEST+0x84>)
 80013b4:	78d2      	ldrb	r2, [r2, #3]
 80013b6:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <send_DHCP_REQUEST+0x88>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <send_DHCP_REQUEST+0x88>)
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <send_DHCP_REQUEST+0x88>)
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80013ca:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <send_DHCP_REQUEST+0x88>)
 80013cc:	78db      	ldrb	r3, [r3, #3]
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e010      	b.n	80013f4 <send_DHCP_REQUEST+0x9c>
 80013d2:	bf00      	nop
 80013d4:	200011f4 	.word	0x200011f4
 80013d8:	20001200 	.word	0x20001200
 80013dc:	200011e4 	.word	0x200011e4
 80013e0:	200011d8 	.word	0x200011d8
   }
   else
   {
   	ip[0] = 255;
 80013e4:	23ff      	movs	r3, #255	@ 0xff
 80013e6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80013e8:	23ff      	movs	r3, #255	@ 0xff
 80013ea:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80013ec:	23ff      	movs	r3, #255	@ 0xff
 80013ee:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80013f0:	23ff      	movs	r3, #255	@ 0xff
 80013f2:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80013f4:	2304      	movs	r3, #4
 80013f6:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80013f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	897b      	ldrh	r3, [r7, #10]
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	8179      	strh	r1, [r7, #10]
 8001402:	4413      	add	r3, r2
 8001404:	2235      	movs	r2, #53	@ 0x35
 8001406:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800140a:	4b89      	ldr	r3, [pc, #548]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	897b      	ldrh	r3, [r7, #10]
 8001410:	1c59      	adds	r1, r3, #1
 8001412:	8179      	strh	r1, [r7, #10]
 8001414:	4413      	add	r3, r2
 8001416:	2201      	movs	r2, #1
 8001418:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 800141c:	4b84      	ldr	r3, [pc, #528]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	897b      	ldrh	r3, [r7, #10]
 8001422:	1c59      	adds	r1, r3, #1
 8001424:	8179      	strh	r1, [r7, #10]
 8001426:	4413      	add	r3, r2
 8001428:	2203      	movs	r2, #3
 800142a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800142e:	4b80      	ldr	r3, [pc, #512]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	897b      	ldrh	r3, [r7, #10]
 8001434:	1c59      	adds	r1, r3, #1
 8001436:	8179      	strh	r1, [r7, #10]
 8001438:	4413      	add	r3, r2
 800143a:	223d      	movs	r2, #61	@ 0x3d
 800143c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001440:	4b7b      	ldr	r3, [pc, #492]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	897b      	ldrh	r3, [r7, #10]
 8001446:	1c59      	adds	r1, r3, #1
 8001448:	8179      	strh	r1, [r7, #10]
 800144a:	4413      	add	r3, r2
 800144c:	2207      	movs	r2, #7
 800144e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001452:	4b77      	ldr	r3, [pc, #476]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	1c59      	adds	r1, r3, #1
 800145a:	8179      	strh	r1, [r7, #10]
 800145c:	4413      	add	r3, r2
 800145e:	2201      	movs	r2, #1
 8001460:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001464:	4b72      	ldr	r3, [pc, #456]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	897b      	ldrh	r3, [r7, #10]
 800146a:	1c59      	adds	r1, r3, #1
 800146c:	8179      	strh	r1, [r7, #10]
 800146e:	4618      	mov	r0, r3
 8001470:	4b70      	ldr	r3, [pc, #448]	@ (8001634 <send_DHCP_REQUEST+0x2dc>)
 8001472:	7819      	ldrb	r1, [r3, #0]
 8001474:	1813      	adds	r3, r2, r0
 8001476:	460a      	mov	r2, r1
 8001478:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800147c:	4b6c      	ldr	r3, [pc, #432]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	897b      	ldrh	r3, [r7, #10]
 8001482:	1c59      	adds	r1, r3, #1
 8001484:	8179      	strh	r1, [r7, #10]
 8001486:	4618      	mov	r0, r3
 8001488:	4b6a      	ldr	r3, [pc, #424]	@ (8001634 <send_DHCP_REQUEST+0x2dc>)
 800148a:	7859      	ldrb	r1, [r3, #1]
 800148c:	1813      	adds	r3, r2, r0
 800148e:	460a      	mov	r2, r1
 8001490:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001494:	4b66      	ldr	r3, [pc, #408]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	897b      	ldrh	r3, [r7, #10]
 800149a:	1c59      	adds	r1, r3, #1
 800149c:	8179      	strh	r1, [r7, #10]
 800149e:	4618      	mov	r0, r3
 80014a0:	4b64      	ldr	r3, [pc, #400]	@ (8001634 <send_DHCP_REQUEST+0x2dc>)
 80014a2:	7899      	ldrb	r1, [r3, #2]
 80014a4:	1813      	adds	r3, r2, r0
 80014a6:	460a      	mov	r2, r1
 80014a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80014ac:	4b60      	ldr	r3, [pc, #384]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	1c59      	adds	r1, r3, #1
 80014b4:	8179      	strh	r1, [r7, #10]
 80014b6:	4618      	mov	r0, r3
 80014b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001634 <send_DHCP_REQUEST+0x2dc>)
 80014ba:	78d9      	ldrb	r1, [r3, #3]
 80014bc:	1813      	adds	r3, r2, r0
 80014be:	460a      	mov	r2, r1
 80014c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80014c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	897b      	ldrh	r3, [r7, #10]
 80014ca:	1c59      	adds	r1, r3, #1
 80014cc:	8179      	strh	r1, [r7, #10]
 80014ce:	4618      	mov	r0, r3
 80014d0:	4b58      	ldr	r3, [pc, #352]	@ (8001634 <send_DHCP_REQUEST+0x2dc>)
 80014d2:	7919      	ldrb	r1, [r3, #4]
 80014d4:	1813      	adds	r3, r2, r0
 80014d6:	460a      	mov	r2, r1
 80014d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80014dc:	4b54      	ldr	r3, [pc, #336]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	897b      	ldrh	r3, [r7, #10]
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	8179      	strh	r1, [r7, #10]
 80014e6:	4618      	mov	r0, r3
 80014e8:	4b52      	ldr	r3, [pc, #328]	@ (8001634 <send_DHCP_REQUEST+0x2dc>)
 80014ea:	7959      	ldrb	r1, [r3, #5]
 80014ec:	1813      	adds	r3, r2, r0
 80014ee:	460a      	mov	r2, r1
 80014f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	f040 8084 	bne.w	8001604 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80014fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	1c59      	adds	r1, r3, #1
 8001504:	8179      	strh	r1, [r7, #10]
 8001506:	4413      	add	r3, r2
 8001508:	2232      	movs	r2, #50	@ 0x32
 800150a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800150e:	4b48      	ldr	r3, [pc, #288]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	1c59      	adds	r1, r3, #1
 8001516:	8179      	strh	r1, [r7, #10]
 8001518:	4413      	add	r3, r2
 800151a:	2204      	movs	r2, #4
 800151c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001520:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	897b      	ldrh	r3, [r7, #10]
 8001526:	1c59      	adds	r1, r3, #1
 8001528:	8179      	strh	r1, [r7, #10]
 800152a:	4618      	mov	r0, r3
 800152c:	4b42      	ldr	r3, [pc, #264]	@ (8001638 <send_DHCP_REQUEST+0x2e0>)
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	1813      	adds	r3, r2, r0
 8001532:	460a      	mov	r2, r1
 8001534:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001538:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	897b      	ldrh	r3, [r7, #10]
 800153e:	1c59      	adds	r1, r3, #1
 8001540:	8179      	strh	r1, [r7, #10]
 8001542:	4618      	mov	r0, r3
 8001544:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <send_DHCP_REQUEST+0x2e0>)
 8001546:	7859      	ldrb	r1, [r3, #1]
 8001548:	1813      	adds	r3, r2, r0
 800154a:	460a      	mov	r2, r1
 800154c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001550:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	1c59      	adds	r1, r3, #1
 8001558:	8179      	strh	r1, [r7, #10]
 800155a:	4618      	mov	r0, r3
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <send_DHCP_REQUEST+0x2e0>)
 800155e:	7899      	ldrb	r1, [r3, #2]
 8001560:	1813      	adds	r3, r2, r0
 8001562:	460a      	mov	r2, r1
 8001564:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001568:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	1c59      	adds	r1, r3, #1
 8001570:	8179      	strh	r1, [r7, #10]
 8001572:	4618      	mov	r0, r3
 8001574:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <send_DHCP_REQUEST+0x2e0>)
 8001576:	78d9      	ldrb	r1, [r3, #3]
 8001578:	1813      	adds	r3, r2, r0
 800157a:	460a      	mov	r2, r1
 800157c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001580:	4b2b      	ldr	r3, [pc, #172]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	897b      	ldrh	r3, [r7, #10]
 8001586:	1c59      	adds	r1, r3, #1
 8001588:	8179      	strh	r1, [r7, #10]
 800158a:	4413      	add	r3, r2
 800158c:	2236      	movs	r2, #54	@ 0x36
 800158e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001592:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	8179      	strh	r1, [r7, #10]
 800159c:	4413      	add	r3, r2
 800159e:	2204      	movs	r2, #4
 80015a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80015a4:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	8179      	strh	r1, [r7, #10]
 80015ae:	4618      	mov	r0, r3
 80015b0:	4b22      	ldr	r3, [pc, #136]	@ (800163c <send_DHCP_REQUEST+0x2e4>)
 80015b2:	7819      	ldrb	r1, [r3, #0]
 80015b4:	1813      	adds	r3, r2, r0
 80015b6:	460a      	mov	r2, r1
 80015b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80015bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	897b      	ldrh	r3, [r7, #10]
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	8179      	strh	r1, [r7, #10]
 80015c6:	4618      	mov	r0, r3
 80015c8:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <send_DHCP_REQUEST+0x2e4>)
 80015ca:	7859      	ldrb	r1, [r3, #1]
 80015cc:	1813      	adds	r3, r2, r0
 80015ce:	460a      	mov	r2, r1
 80015d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	897b      	ldrh	r3, [r7, #10]
 80015da:	1c59      	adds	r1, r3, #1
 80015dc:	8179      	strh	r1, [r7, #10]
 80015de:	4618      	mov	r0, r3
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <send_DHCP_REQUEST+0x2e4>)
 80015e2:	7899      	ldrb	r1, [r3, #2]
 80015e4:	1813      	adds	r3, r2, r0
 80015e6:	460a      	mov	r2, r1
 80015e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	897b      	ldrh	r3, [r7, #10]
 80015f2:	1c59      	adds	r1, r3, #1
 80015f4:	8179      	strh	r1, [r7, #10]
 80015f6:	4618      	mov	r0, r3
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <send_DHCP_REQUEST+0x2e4>)
 80015fa:	78d9      	ldrb	r1, [r3, #3]
 80015fc:	1813      	adds	r3, r2, r0
 80015fe:	460a      	mov	r2, r1
 8001600:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	897b      	ldrh	r3, [r7, #10]
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	8179      	strh	r1, [r7, #10]
 800160e:	4413      	add	r3, r2
 8001610:	220c      	movs	r2, #12
 8001612:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <send_DHCP_REQUEST+0x2d8>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	897b      	ldrh	r3, [r7, #10]
 800161c:	1c59      	adds	r1, r3, #1
 800161e:	8179      	strh	r1, [r7, #10]
 8001620:	4413      	add	r3, r2
 8001622:	2200      	movs	r2, #0
 8001624:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e019      	b.n	8001662 <send_DHCP_REQUEST+0x30a>
 800162e:	bf00      	nop
 8001630:	20001200 	.word	0x20001200
 8001634:	20001204 	.word	0x20001204
 8001638:	200011e4 	.word	0x200011e4
 800163c:	200011d8 	.word	0x200011d8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001640:	4b86      	ldr	r3, [pc, #536]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	897b      	ldrh	r3, [r7, #10]
 8001646:	1c59      	adds	r1, r3, #1
 8001648:	8179      	strh	r1, [r7, #10]
 800164a:	4618      	mov	r0, r3
 800164c:	4984      	ldr	r1, [pc, #528]	@ (8001860 <send_DHCP_REQUEST+0x508>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	440b      	add	r3, r1
 8001652:	7819      	ldrb	r1, [r3, #0]
 8001654:	1813      	adds	r3, r2, r0
 8001656:	460a      	mov	r2, r1
 8001658:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4a7f      	ldr	r2, [pc, #508]	@ (8001860 <send_DHCP_REQUEST+0x508>)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1e8      	bne.n	8001640 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800166e:	4b7d      	ldr	r3, [pc, #500]	@ (8001864 <send_DHCP_REQUEST+0x50c>)
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b79      	ldr	r3, [pc, #484]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001678:	681c      	ldr	r4, [r3, #0]
 800167a:	897b      	ldrh	r3, [r7, #10]
 800167c:	1c59      	adds	r1, r3, #1
 800167e:	8179      	strh	r1, [r7, #10]
 8001680:	461d      	mov	r5, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f000 fede 	bl	8002444 <NibbleToHex>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	1963      	adds	r3, r4, r5
 800168e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001692:	4b74      	ldr	r3, [pc, #464]	@ (8001864 <send_DHCP_REQUEST+0x50c>)
 8001694:	78da      	ldrb	r2, [r3, #3]
 8001696:	4b71      	ldr	r3, [pc, #452]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001698:	681c      	ldr	r4, [r3, #0]
 800169a:	897b      	ldrh	r3, [r7, #10]
 800169c:	1c59      	adds	r1, r3, #1
 800169e:	8179      	strh	r1, [r7, #10]
 80016a0:	461d      	mov	r5, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f000 fece 	bl	8002444 <NibbleToHex>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	1963      	adds	r3, r4, r5
 80016ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80016b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <send_DHCP_REQUEST+0x50c>)
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b68      	ldr	r3, [pc, #416]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80016bc:	681c      	ldr	r4, [r3, #0]
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	1c59      	adds	r1, r3, #1
 80016c2:	8179      	strh	r1, [r7, #10]
 80016c4:	461d      	mov	r5, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f000 febc 	bl	8002444 <NibbleToHex>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	1963      	adds	r3, r4, r5
 80016d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80016d6:	4b63      	ldr	r3, [pc, #396]	@ (8001864 <send_DHCP_REQUEST+0x50c>)
 80016d8:	791a      	ldrb	r2, [r3, #4]
 80016da:	4b60      	ldr	r3, [pc, #384]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80016dc:	681c      	ldr	r4, [r3, #0]
 80016de:	897b      	ldrh	r3, [r7, #10]
 80016e0:	1c59      	adds	r1, r3, #1
 80016e2:	8179      	strh	r1, [r7, #10]
 80016e4:	461d      	mov	r5, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f000 feac 	bl	8002444 <NibbleToHex>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	1963      	adds	r3, r4, r5
 80016f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80016f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001864 <send_DHCP_REQUEST+0x50c>)
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b57      	ldr	r3, [pc, #348]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001700:	681c      	ldr	r4, [r3, #0]
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	8179      	strh	r1, [r7, #10]
 8001708:	461d      	mov	r5, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f000 fe9a 	bl	8002444 <NibbleToHex>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	1963      	adds	r3, r4, r5
 8001716:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800171a:	4b52      	ldr	r3, [pc, #328]	@ (8001864 <send_DHCP_REQUEST+0x50c>)
 800171c:	795a      	ldrb	r2, [r3, #5]
 800171e:	4b4f      	ldr	r3, [pc, #316]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001720:	681c      	ldr	r4, [r3, #0]
 8001722:	897b      	ldrh	r3, [r7, #10]
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	8179      	strh	r1, [r7, #10]
 8001728:	461d      	mov	r5, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f000 fe8a 	bl	8002444 <NibbleToHex>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	1963      	adds	r3, r4, r5
 8001736:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b2d9      	uxtb	r1, r3
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	8978      	ldrh	r0, [r7, #10]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3307      	adds	r3, #7
 8001748:	1ac3      	subs	r3, r0, r3
 800174a:	3106      	adds	r1, #6
 800174c:	b2c9      	uxtb	r1, r1
 800174e:	4413      	add	r3, r2
 8001750:	460a      	mov	r2, r1
 8001752:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001756:	4b41      	ldr	r3, [pc, #260]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	897b      	ldrh	r3, [r7, #10]
 800175c:	1c59      	adds	r1, r3, #1
 800175e:	8179      	strh	r1, [r7, #10]
 8001760:	4413      	add	r3, r2
 8001762:	2237      	movs	r2, #55	@ 0x37
 8001764:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001768:	4b3c      	ldr	r3, [pc, #240]	@ (800185c <send_DHCP_REQUEST+0x504>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	897b      	ldrh	r3, [r7, #10]
 800176e:	1c59      	adds	r1, r3, #1
 8001770:	8179      	strh	r1, [r7, #10]
 8001772:	4413      	add	r3, r2
 8001774:	2208      	movs	r2, #8
 8001776:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800177a:	4b38      	ldr	r3, [pc, #224]	@ (800185c <send_DHCP_REQUEST+0x504>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	897b      	ldrh	r3, [r7, #10]
 8001780:	1c59      	adds	r1, r3, #1
 8001782:	8179      	strh	r1, [r7, #10]
 8001784:	4413      	add	r3, r2
 8001786:	2201      	movs	r2, #1
 8001788:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800178c:	4b33      	ldr	r3, [pc, #204]	@ (800185c <send_DHCP_REQUEST+0x504>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	897b      	ldrh	r3, [r7, #10]
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	8179      	strh	r1, [r7, #10]
 8001796:	4413      	add	r3, r2
 8001798:	2203      	movs	r2, #3
 800179a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 800179e:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	1c59      	adds	r1, r3, #1
 80017a6:	8179      	strh	r1, [r7, #10]
 80017a8:	4413      	add	r3, r2
 80017aa:	2206      	movs	r2, #6
 80017ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	897b      	ldrh	r3, [r7, #10]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	8179      	strh	r1, [r7, #10]
 80017ba:	4413      	add	r3, r2
 80017bc:	220f      	movs	r2, #15
 80017be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	897b      	ldrh	r3, [r7, #10]
 80017c8:	1c59      	adds	r1, r3, #1
 80017ca:	8179      	strh	r1, [r7, #10]
 80017cc:	4413      	add	r3, r2
 80017ce:	223a      	movs	r2, #58	@ 0x3a
 80017d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	1c59      	adds	r1, r3, #1
 80017dc:	8179      	strh	r1, [r7, #10]
 80017de:	4413      	add	r3, r2
 80017e0:	223b      	movs	r2, #59	@ 0x3b
 80017e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	1c59      	adds	r1, r3, #1
 80017ee:	8179      	strh	r1, [r7, #10]
 80017f0:	4413      	add	r3, r2
 80017f2:	221f      	movs	r2, #31
 80017f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <send_DHCP_REQUEST+0x504>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	897b      	ldrh	r3, [r7, #10]
 80017fe:	1c59      	adds	r1, r3, #1
 8001800:	8179      	strh	r1, [r7, #10]
 8001802:	4413      	add	r3, r2
 8001804:	2221      	movs	r2, #33	@ 0x21
 8001806:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <send_DHCP_REQUEST+0x504>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	897b      	ldrh	r3, [r7, #10]
 8001810:	1c59      	adds	r1, r3, #1
 8001812:	8179      	strh	r1, [r7, #10]
 8001814:	4413      	add	r3, r2
 8001816:	22ff      	movs	r2, #255	@ 0xff
 8001818:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800181c:	897b      	ldrh	r3, [r7, #10]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e009      	b.n	8001836 <send_DHCP_REQUEST+0x4de>
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4413      	add	r3, r2
 800182a:	33ec      	adds	r3, #236	@ 0xec
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800183c:	dbf1      	blt.n	8001822 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <send_DHCP_REQUEST+0x510>)
 8001840:	7818      	ldrb	r0, [r3, #0]
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <send_DHCP_REQUEST+0x504>)
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2243      	movs	r2, #67	@ 0x43
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001850:	f003 fd82 	bl	8005358 <sendto>

}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	20001200 	.word	0x20001200
 8001860:	20000064 	.word	0x20000064
 8001864:	20001204 	.word	0x20001204
 8001868:	200011d4 	.word	0x200011d4

0800186c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001876:	f7ff fab3 	bl	8000de0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800187a:	2304      	movs	r3, #4
 800187c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800187e:	4b9f      	ldr	r3, [pc, #636]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	330a      	adds	r3, #10
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001888:	4b9c      	ldr	r3, [pc, #624]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	330a      	adds	r3, #10
 800188e:	3301      	adds	r3, #1
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001894:	4b99      	ldr	r3, [pc, #612]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	897b      	ldrh	r3, [r7, #10]
 800189a:	1c59      	adds	r1, r3, #1
 800189c:	8179      	strh	r1, [r7, #10]
 800189e:	4413      	add	r3, r2
 80018a0:	2235      	movs	r2, #53	@ 0x35
 80018a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80018a6:	4b95      	ldr	r3, [pc, #596]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	897b      	ldrh	r3, [r7, #10]
 80018ac:	1c59      	adds	r1, r3, #1
 80018ae:	8179      	strh	r1, [r7, #10]
 80018b0:	4413      	add	r3, r2
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80018b8:	4b90      	ldr	r3, [pc, #576]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	897b      	ldrh	r3, [r7, #10]
 80018be:	1c59      	adds	r1, r3, #1
 80018c0:	8179      	strh	r1, [r7, #10]
 80018c2:	4413      	add	r3, r2
 80018c4:	2204      	movs	r2, #4
 80018c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80018ca:	4b8c      	ldr	r3, [pc, #560]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	897b      	ldrh	r3, [r7, #10]
 80018d0:	1c59      	adds	r1, r3, #1
 80018d2:	8179      	strh	r1, [r7, #10]
 80018d4:	4413      	add	r3, r2
 80018d6:	223d      	movs	r2, #61	@ 0x3d
 80018d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80018dc:	4b87      	ldr	r3, [pc, #540]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	897b      	ldrh	r3, [r7, #10]
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	8179      	strh	r1, [r7, #10]
 80018e6:	4413      	add	r3, r2
 80018e8:	2207      	movs	r2, #7
 80018ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80018ee:	4b83      	ldr	r3, [pc, #524]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	1c59      	adds	r1, r3, #1
 80018f6:	8179      	strh	r1, [r7, #10]
 80018f8:	4413      	add	r3, r2
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001900:	4b7e      	ldr	r3, [pc, #504]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	897b      	ldrh	r3, [r7, #10]
 8001906:	1c59      	adds	r1, r3, #1
 8001908:	8179      	strh	r1, [r7, #10]
 800190a:	4618      	mov	r0, r3
 800190c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b00 <send_DHCP_DECLINE+0x294>)
 800190e:	7819      	ldrb	r1, [r3, #0]
 8001910:	1813      	adds	r3, r2, r0
 8001912:	460a      	mov	r2, r1
 8001914:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001918:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	897b      	ldrh	r3, [r7, #10]
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	8179      	strh	r1, [r7, #10]
 8001922:	4618      	mov	r0, r3
 8001924:	4b76      	ldr	r3, [pc, #472]	@ (8001b00 <send_DHCP_DECLINE+0x294>)
 8001926:	7859      	ldrb	r1, [r3, #1]
 8001928:	1813      	adds	r3, r2, r0
 800192a:	460a      	mov	r2, r1
 800192c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001930:	4b72      	ldr	r3, [pc, #456]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	897b      	ldrh	r3, [r7, #10]
 8001936:	1c59      	adds	r1, r3, #1
 8001938:	8179      	strh	r1, [r7, #10]
 800193a:	4618      	mov	r0, r3
 800193c:	4b70      	ldr	r3, [pc, #448]	@ (8001b00 <send_DHCP_DECLINE+0x294>)
 800193e:	7899      	ldrb	r1, [r3, #2]
 8001940:	1813      	adds	r3, r2, r0
 8001942:	460a      	mov	r2, r1
 8001944:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001948:	4b6c      	ldr	r3, [pc, #432]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	8179      	strh	r1, [r7, #10]
 8001952:	4618      	mov	r0, r3
 8001954:	4b6a      	ldr	r3, [pc, #424]	@ (8001b00 <send_DHCP_DECLINE+0x294>)
 8001956:	78d9      	ldrb	r1, [r3, #3]
 8001958:	1813      	adds	r3, r2, r0
 800195a:	460a      	mov	r2, r1
 800195c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001960:	4b66      	ldr	r3, [pc, #408]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	897b      	ldrh	r3, [r7, #10]
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	8179      	strh	r1, [r7, #10]
 800196a:	4618      	mov	r0, r3
 800196c:	4b64      	ldr	r3, [pc, #400]	@ (8001b00 <send_DHCP_DECLINE+0x294>)
 800196e:	7919      	ldrb	r1, [r3, #4]
 8001970:	1813      	adds	r3, r2, r0
 8001972:	460a      	mov	r2, r1
 8001974:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001978:	4b60      	ldr	r3, [pc, #384]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	897b      	ldrh	r3, [r7, #10]
 800197e:	1c59      	adds	r1, r3, #1
 8001980:	8179      	strh	r1, [r7, #10]
 8001982:	4618      	mov	r0, r3
 8001984:	4b5e      	ldr	r3, [pc, #376]	@ (8001b00 <send_DHCP_DECLINE+0x294>)
 8001986:	7959      	ldrb	r1, [r3, #5]
 8001988:	1813      	adds	r3, r2, r0
 800198a:	460a      	mov	r2, r1
 800198c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001990:	4b5a      	ldr	r3, [pc, #360]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	1c59      	adds	r1, r3, #1
 8001998:	8179      	strh	r1, [r7, #10]
 800199a:	4413      	add	r3, r2
 800199c:	2232      	movs	r2, #50	@ 0x32
 800199e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80019a2:	4b56      	ldr	r3, [pc, #344]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	897b      	ldrh	r3, [r7, #10]
 80019a8:	1c59      	adds	r1, r3, #1
 80019aa:	8179      	strh	r1, [r7, #10]
 80019ac:	4413      	add	r3, r2
 80019ae:	2204      	movs	r2, #4
 80019b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80019b4:	4b51      	ldr	r3, [pc, #324]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	897b      	ldrh	r3, [r7, #10]
 80019ba:	1c59      	adds	r1, r3, #1
 80019bc:	8179      	strh	r1, [r7, #10]
 80019be:	4618      	mov	r0, r3
 80019c0:	4b50      	ldr	r3, [pc, #320]	@ (8001b04 <send_DHCP_DECLINE+0x298>)
 80019c2:	7819      	ldrb	r1, [r3, #0]
 80019c4:	1813      	adds	r3, r2, r0
 80019c6:	460a      	mov	r2, r1
 80019c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80019cc:	4b4b      	ldr	r3, [pc, #300]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	1c59      	adds	r1, r3, #1
 80019d4:	8179      	strh	r1, [r7, #10]
 80019d6:	4618      	mov	r0, r3
 80019d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001b04 <send_DHCP_DECLINE+0x298>)
 80019da:	7859      	ldrb	r1, [r3, #1]
 80019dc:	1813      	adds	r3, r2, r0
 80019de:	460a      	mov	r2, r1
 80019e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80019e4:	4b45      	ldr	r3, [pc, #276]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	897b      	ldrh	r3, [r7, #10]
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	8179      	strh	r1, [r7, #10]
 80019ee:	4618      	mov	r0, r3
 80019f0:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <send_DHCP_DECLINE+0x298>)
 80019f2:	7899      	ldrb	r1, [r3, #2]
 80019f4:	1813      	adds	r3, r2, r0
 80019f6:	460a      	mov	r2, r1
 80019f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80019fc:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	897b      	ldrh	r3, [r7, #10]
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	8179      	strh	r1, [r7, #10]
 8001a06:	4618      	mov	r0, r3
 8001a08:	4b3e      	ldr	r3, [pc, #248]	@ (8001b04 <send_DHCP_DECLINE+0x298>)
 8001a0a:	78d9      	ldrb	r1, [r3, #3]
 8001a0c:	1813      	adds	r3, r2, r0
 8001a0e:	460a      	mov	r2, r1
 8001a10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001a14:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	897b      	ldrh	r3, [r7, #10]
 8001a1a:	1c59      	adds	r1, r3, #1
 8001a1c:	8179      	strh	r1, [r7, #10]
 8001a1e:	4413      	add	r3, r2
 8001a20:	2236      	movs	r2, #54	@ 0x36
 8001a22:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001a26:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	897b      	ldrh	r3, [r7, #10]
 8001a2c:	1c59      	adds	r1, r3, #1
 8001a2e:	8179      	strh	r1, [r7, #10]
 8001a30:	4413      	add	r3, r2
 8001a32:	2204      	movs	r2, #4
 8001a34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001a38:	4b30      	ldr	r3, [pc, #192]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	897b      	ldrh	r3, [r7, #10]
 8001a3e:	1c59      	adds	r1, r3, #1
 8001a40:	8179      	strh	r1, [r7, #10]
 8001a42:	4618      	mov	r0, r3
 8001a44:	4b30      	ldr	r3, [pc, #192]	@ (8001b08 <send_DHCP_DECLINE+0x29c>)
 8001a46:	7819      	ldrb	r1, [r3, #0]
 8001a48:	1813      	adds	r3, r2, r0
 8001a4a:	460a      	mov	r2, r1
 8001a4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	8179      	strh	r1, [r7, #10]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <send_DHCP_DECLINE+0x29c>)
 8001a5e:	7859      	ldrb	r1, [r3, #1]
 8001a60:	1813      	adds	r3, r2, r0
 8001a62:	460a      	mov	r2, r1
 8001a64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	897b      	ldrh	r3, [r7, #10]
 8001a6e:	1c59      	adds	r1, r3, #1
 8001a70:	8179      	strh	r1, [r7, #10]
 8001a72:	4618      	mov	r0, r3
 8001a74:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <send_DHCP_DECLINE+0x29c>)
 8001a76:	7899      	ldrb	r1, [r3, #2]
 8001a78:	1813      	adds	r3, r2, r0
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	897b      	ldrh	r3, [r7, #10]
 8001a86:	1c59      	adds	r1, r3, #1
 8001a88:	8179      	strh	r1, [r7, #10]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <send_DHCP_DECLINE+0x29c>)
 8001a8e:	78d9      	ldrb	r1, [r3, #3]
 8001a90:	1813      	adds	r3, r2, r0
 8001a92:	460a      	mov	r2, r1
 8001a94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001a98:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	897b      	ldrh	r3, [r7, #10]
 8001a9e:	1c59      	adds	r1, r3, #1
 8001aa0:	8179      	strh	r1, [r7, #10]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	22ff      	movs	r2, #255	@ 0xff
 8001aa6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001aaa:	897b      	ldrh	r3, [r7, #10]
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e009      	b.n	8001ac4 <send_DHCP_DECLINE+0x258>
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	33ec      	adds	r3, #236	@ 0xec
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001aca:	dbf1      	blt.n	8001ab0 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001acc:	23ff      	movs	r3, #255	@ 0xff
 8001ace:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001ad0:	23ff      	movs	r3, #255	@ 0xff
 8001ad2:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001ad4:	23ff      	movs	r3, #255	@ 0xff
 8001ad6:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001ad8:	23ff      	movs	r3, #255	@ 0xff
 8001ada:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <send_DHCP_DECLINE+0x2a0>)
 8001ade:	7818      	ldrb	r0, [r3, #0]
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <send_DHCP_DECLINE+0x290>)
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2243      	movs	r2, #67	@ 0x43
 8001ae8:	9200      	str	r2, [sp, #0]
 8001aea:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001aee:	f003 fc33 	bl	8005358 <sendto>
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20001200 	.word	0x20001200
 8001b00:	20001204 	.word	0x20001204
 8001b04:	200011e4 	.word	0x200011e4
 8001b08:	200011d8 	.word	0x200011d8
 8001b0c:	200011d4 	.word	0x200011d4

08001b10 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001b1a:	4ba1      	ldr	r3, [pc, #644]	@ (8001da0 <parseDHCPMSG+0x290>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fe57 	bl	80047d2 <getSn_RX_RSR>
 8001b24:	4603      	mov	r3, r0
 8001b26:	823b      	strh	r3, [r7, #16]
 8001b28:	8a3b      	ldrh	r3, [r7, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d011      	beq.n	8001b52 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8001da0 <parseDHCPMSG+0x290>)
 8001b30:	7818      	ldrb	r0, [r3, #0]
 8001b32:	4b9c      	ldr	r3, [pc, #624]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	1d3c      	adds	r4, r7, #4
 8001b38:	8a3a      	ldrh	r2, [r7, #16]
 8001b3a:	1cbb      	adds	r3, r7, #2
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	4623      	mov	r3, r4
 8001b40:	f003 fd3e 	bl	80055c0 <recvfrom>
 8001b44:	4603      	mov	r3, r0
 8001b46:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	2b43      	cmp	r3, #67	@ 0x43
 8001b4c:	f040 81ed 	bne.w	8001f2a <parseDHCPMSG+0x41a>
 8001b50:	e001      	b.n	8001b56 <parseDHCPMSG+0x46>
   else return 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e1eb      	b.n	8001f2e <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001b56:	4b93      	ldr	r3, [pc, #588]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	7f1a      	ldrb	r2, [r3, #28]
 8001b5c:	4b92      	ldr	r3, [pc, #584]	@ (8001da8 <parseDHCPMSG+0x298>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d124      	bne.n	8001bae <parseDHCPMSG+0x9e>
 8001b64:	4b8f      	ldr	r3, [pc, #572]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	7f5a      	ldrb	r2, [r3, #29]
 8001b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8001da8 <parseDHCPMSG+0x298>)
 8001b6c:	785b      	ldrb	r3, [r3, #1]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d11d      	bne.n	8001bae <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001b72:	4b8c      	ldr	r3, [pc, #560]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	7f9a      	ldrb	r2, [r3, #30]
 8001b78:	4b8b      	ldr	r3, [pc, #556]	@ (8001da8 <parseDHCPMSG+0x298>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d116      	bne.n	8001bae <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001b80:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	7fda      	ldrb	r2, [r3, #31]
 8001b86:	4b88      	ldr	r3, [pc, #544]	@ (8001da8 <parseDHCPMSG+0x298>)
 8001b88:	78db      	ldrb	r3, [r3, #3]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d10f      	bne.n	8001bae <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001b8e:	4b85      	ldr	r3, [pc, #532]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001b96:	4b84      	ldr	r3, [pc, #528]	@ (8001da8 <parseDHCPMSG+0x298>)
 8001b98:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d107      	bne.n	8001bae <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001b9e:	4b81      	ldr	r3, [pc, #516]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001ba6:	4b80      	ldr	r3, [pc, #512]	@ (8001da8 <parseDHCPMSG+0x298>)
 8001ba8:	795b      	ldrb	r3, [r3, #5]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e1bd      	b.n	8001f2e <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001bb2:	4b7e      	ldr	r3, [pc, #504]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10b      	bne.n	8001bd2 <parseDHCPMSG+0xc2>
 8001bba:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d107      	bne.n	8001bd2 <parseDHCPMSG+0xc2>
 8001bc2:	4b7a      	ldr	r3, [pc, #488]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001bc4:	789b      	ldrb	r3, [r3, #2]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <parseDHCPMSG+0xc2>
 8001bca:	4b78      	ldr	r3, [pc, #480]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001bcc:	78db      	ldrb	r3, [r3, #3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d029      	beq.n	8001c26 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001bd2:	793a      	ldrb	r2, [r7, #4]
 8001bd4:	4b75      	ldr	r3, [pc, #468]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d10e      	bne.n	8001bfa <parseDHCPMSG+0xea>
 8001bdc:	797a      	ldrb	r2, [r7, #5]
 8001bde:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d109      	bne.n	8001bfa <parseDHCPMSG+0xea>
 8001be6:	79ba      	ldrb	r2, [r7, #6]
 8001be8:	4b70      	ldr	r3, [pc, #448]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001bea:	789b      	ldrb	r3, [r3, #2]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d104      	bne.n	8001bfa <parseDHCPMSG+0xea>
 8001bf0:	79fa      	ldrb	r2, [r7, #7]
 8001bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8001dac <parseDHCPMSG+0x29c>)
 8001bf4:	78db      	ldrb	r3, [r3, #3]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d015      	beq.n	8001c26 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001bfa:	793a      	ldrb	r2, [r7, #4]
 8001bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8001db0 <parseDHCPMSG+0x2a0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10e      	bne.n	8001c22 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001c04:	797a      	ldrb	r2, [r7, #5]
 8001c06:	4b6a      	ldr	r3, [pc, #424]	@ (8001db0 <parseDHCPMSG+0x2a0>)
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d109      	bne.n	8001c22 <parseDHCPMSG+0x112>
 8001c0e:	79ba      	ldrb	r2, [r7, #6]
 8001c10:	4b67      	ldr	r3, [pc, #412]	@ (8001db0 <parseDHCPMSG+0x2a0>)
 8001c12:	789b      	ldrb	r3, [r3, #2]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d104      	bne.n	8001c22 <parseDHCPMSG+0x112>
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	4b65      	ldr	r3, [pc, #404]	@ (8001db0 <parseDHCPMSG+0x2a0>)
 8001c1c:	78db      	ldrb	r3, [r3, #3]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e183      	b.n	8001f2e <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001c26:	4b5f      	ldr	r3, [pc, #380]	@ (8001da4 <parseDHCPMSG+0x294>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	33f0      	adds	r3, #240	@ 0xf0
 8001c30:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001c32:	8a3b      	ldrh	r3, [r7, #16]
 8001c34:	3bf0      	subs	r3, #240	@ 0xf0
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4413      	add	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001c3c:	e170      	b.n	8001f20 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b36      	cmp	r3, #54	@ 0x36
 8001c44:	dc76      	bgt.n	8001d34 <parseDHCPMSG+0x224>
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f2c0 815d 	blt.w	8001f06 <parseDHCPMSG+0x3f6>
 8001c4c:	2b36      	cmp	r3, #54	@ 0x36
 8001c4e:	f200 815a 	bhi.w	8001f06 <parseDHCPMSG+0x3f6>
 8001c52:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <parseDHCPMSG+0x148>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001d41 	.word	0x08001d41
 8001c5c:	08001d61 	.word	0x08001d61
 8001c60:	08001f07 	.word	0x08001f07
 8001c64:	08001db9 	.word	0x08001db9
 8001c68:	08001f07 	.word	0x08001f07
 8001c6c:	08001f07 	.word	0x08001f07
 8001c70:	08001e05 	.word	0x08001e05
 8001c74:	08001f07 	.word	0x08001f07
 8001c78:	08001f07 	.word	0x08001f07
 8001c7c:	08001f07 	.word	0x08001f07
 8001c80:	08001f07 	.word	0x08001f07
 8001c84:	08001f07 	.word	0x08001f07
 8001c88:	08001f07 	.word	0x08001f07
 8001c8c:	08001f07 	.word	0x08001f07
 8001c90:	08001f07 	.word	0x08001f07
 8001c94:	08001f07 	.word	0x08001f07
 8001c98:	08001f07 	.word	0x08001f07
 8001c9c:	08001f07 	.word	0x08001f07
 8001ca0:	08001f07 	.word	0x08001f07
 8001ca4:	08001f07 	.word	0x08001f07
 8001ca8:	08001f07 	.word	0x08001f07
 8001cac:	08001f07 	.word	0x08001f07
 8001cb0:	08001f07 	.word	0x08001f07
 8001cb4:	08001f07 	.word	0x08001f07
 8001cb8:	08001f07 	.word	0x08001f07
 8001cbc:	08001f07 	.word	0x08001f07
 8001cc0:	08001f07 	.word	0x08001f07
 8001cc4:	08001f07 	.word	0x08001f07
 8001cc8:	08001f07 	.word	0x08001f07
 8001ccc:	08001f07 	.word	0x08001f07
 8001cd0:	08001f07 	.word	0x08001f07
 8001cd4:	08001f07 	.word	0x08001f07
 8001cd8:	08001f07 	.word	0x08001f07
 8001cdc:	08001f07 	.word	0x08001f07
 8001ce0:	08001f07 	.word	0x08001f07
 8001ce4:	08001f07 	.word	0x08001f07
 8001ce8:	08001f07 	.word	0x08001f07
 8001cec:	08001f07 	.word	0x08001f07
 8001cf0:	08001f07 	.word	0x08001f07
 8001cf4:	08001f07 	.word	0x08001f07
 8001cf8:	08001f07 	.word	0x08001f07
 8001cfc:	08001f07 	.word	0x08001f07
 8001d00:	08001f07 	.word	0x08001f07
 8001d04:	08001f07 	.word	0x08001f07
 8001d08:	08001f07 	.word	0x08001f07
 8001d0c:	08001f07 	.word	0x08001f07
 8001d10:	08001f07 	.word	0x08001f07
 8001d14:	08001f07 	.word	0x08001f07
 8001d18:	08001f07 	.word	0x08001f07
 8001d1c:	08001f07 	.word	0x08001f07
 8001d20:	08001f07 	.word	0x08001f07
 8001d24:	08001e51 	.word	0x08001e51
 8001d28:	08001f07 	.word	0x08001f07
 8001d2c:	08001d49 	.word	0x08001d49
 8001d30:	08001ead 	.word	0x08001ead
 8001d34:	2bff      	cmp	r3, #255	@ 0xff
 8001d36:	f040 80e6 	bne.w	8001f06 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	617b      	str	r3, [r7, #20]
   				break;
 8001d3e:	e0ef      	b.n	8001f20 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
   				break;
 8001d46:	e0eb      	b.n	8001f20 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
   				p++;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	617a      	str	r2, [r7, #20]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	74fb      	strb	r3, [r7, #19]
   				break;
 8001d5e:	e0df      	b.n	8001f20 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
   				p++;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	617a      	str	r2, [r7, #20]
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <parseDHCPMSG+0x2a4>)
 8001d76:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	617a      	str	r2, [r7, #20]
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <parseDHCPMSG+0x2a4>)
 8001d82:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	617a      	str	r2, [r7, #20]
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <parseDHCPMSG+0x2a4>)
 8001d8e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	617a      	str	r2, [r7, #20]
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <parseDHCPMSG+0x2a4>)
 8001d9a:	70da      	strb	r2, [r3, #3]
   				break;
 8001d9c:	e0c0      	b.n	8001f20 <parseDHCPMSG+0x410>
 8001d9e:	bf00      	nop
 8001da0:	200011d4 	.word	0x200011d4
 8001da4:	20001200 	.word	0x20001200
 8001da8:	20001204 	.word	0x20001204
 8001dac:	200011d8 	.word	0x200011d8
 8001db0:	200011dc 	.word	0x200011dc
 8001db4:	200011ec 	.word	0x200011ec
   			case routersOnSubnet :
   				p++;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	617a      	str	r2, [r7, #20]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	617a      	str	r2, [r7, #20]
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	4b59      	ldr	r3, [pc, #356]	@ (8001f38 <parseDHCPMSG+0x428>)
 8001dd2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	617a      	str	r2, [r7, #20]
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	4b56      	ldr	r3, [pc, #344]	@ (8001f38 <parseDHCPMSG+0x428>)
 8001dde:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	617a      	str	r2, [r7, #20]
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	4b53      	ldr	r3, [pc, #332]	@ (8001f38 <parseDHCPMSG+0x428>)
 8001dea:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	617a      	str	r2, [r7, #20]
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b50      	ldr	r3, [pc, #320]	@ (8001f38 <parseDHCPMSG+0x428>)
 8001df6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4413      	add	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
   				break;
 8001e02:	e08d      	b.n	8001f20 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	617a      	str	r2, [r7, #20]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	617a      	str	r2, [r7, #20]
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b47      	ldr	r3, [pc, #284]	@ (8001f3c <parseDHCPMSG+0x42c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	617a      	str	r2, [r7, #20]
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b44      	ldr	r3, [pc, #272]	@ (8001f3c <parseDHCPMSG+0x42c>)
 8001e2a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	617a      	str	r2, [r7, #20]
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b41      	ldr	r3, [pc, #260]	@ (8001f3c <parseDHCPMSG+0x42c>)
 8001e36:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	617a      	str	r2, [r7, #20]
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b3e      	ldr	r3, [pc, #248]	@ (8001f3c <parseDHCPMSG+0x42c>)
 8001e42:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	3b04      	subs	r3, #4
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
   				break;
 8001e4e:	e067      	b.n	8001f20 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	617a      	str	r2, [r7, #20]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	617a      	str	r2, [r7, #20]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <parseDHCPMSG+0x430>)
 8001e6c:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001e6e:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <parseDHCPMSG+0x430>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	021a      	lsls	r2, r3, #8
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	6179      	str	r1, [r7, #20]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a30      	ldr	r2, [pc, #192]	@ (8001f40 <parseDHCPMSG+0x430>)
 8001e80:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001e82:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <parseDHCPMSG+0x430>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	021a      	lsls	r2, r3, #8
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	6179      	str	r1, [r7, #20]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <parseDHCPMSG+0x430>)
 8001e94:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001e96:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <parseDHCPMSG+0x430>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	021a      	lsls	r2, r3, #8
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1c59      	adds	r1, r3, #1
 8001ea0:	6179      	str	r1, [r7, #20]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a26      	ldr	r2, [pc, #152]	@ (8001f40 <parseDHCPMSG+0x430>)
 8001ea8:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001eaa:	e039      	b.n	8001f20 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	617a      	str	r2, [r7, #20]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	617a      	str	r2, [r7, #20]
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <parseDHCPMSG+0x434>)
 8001ec6:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	617a      	str	r2, [r7, #20]
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <parseDHCPMSG+0x434>)
 8001ed2:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	617a      	str	r2, [r7, #20]
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <parseDHCPMSG+0x434>)
 8001ede:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	617a      	str	r2, [r7, #20]
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <parseDHCPMSG+0x434>)
 8001eea:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8001eec:	793a      	ldrb	r2, [r7, #4]
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <parseDHCPMSG+0x438>)
 8001ef0:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8001ef2:	797a      	ldrb	r2, [r7, #5]
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <parseDHCPMSG+0x438>)
 8001ef6:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8001ef8:	79ba      	ldrb	r2, [r7, #6]
 8001efa:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <parseDHCPMSG+0x438>)
 8001efc:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8001efe:	79fa      	ldrb	r2, [r7, #7]
 8001f00:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <parseDHCPMSG+0x438>)
 8001f02:	70da      	strb	r2, [r3, #3]
   				break;
 8001f04:	e00c      	b.n	8001f20 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	617a      	str	r2, [r7, #20]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
   				break;
 8001f1e:	bf00      	nop
		while ( p < e ) {
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f4ff ae8a 	bcc.w	8001c3e <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8001f2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200011e8 	.word	0x200011e8
 8001f3c:	200011f0 	.word	0x200011f0
 8001f40:	2000005c 	.word	0x2000005c
 8001f44:	200011d8 	.word	0x200011d8
 8001f48:	200011dc 	.word	0x200011dc

08001f4c <DHCP_run>:

uint8_t DHCP_run(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001f52:	4b7f      	ldr	r3, [pc, #508]	@ (8002150 <DHCP_run+0x204>)
 8001f54:	f993 3000 	ldrsb.w	r3, [r3]
 8001f58:	2b06      	cmp	r3, #6
 8001f5a:	d101      	bne.n	8001f60 <DHCP_run+0x14>
 8001f5c:	2305      	movs	r3, #5
 8001f5e:	e0f3      	b.n	8002148 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001f60:	4b7c      	ldr	r3, [pc, #496]	@ (8002154 <DHCP_run+0x208>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3301      	adds	r3, #1
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fa8c 	bl	800448c <WIZCHIP_READ>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b22      	cmp	r3, #34	@ 0x22
 8001f78:	d006      	beq.n	8001f88 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8001f7a:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <DHCP_run+0x208>)
 8001f7c:	7818      	ldrb	r0, [r3, #0]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2244      	movs	r2, #68	@ 0x44
 8001f82:	2102      	movs	r1, #2
 8001f84:	f002 fd68 	bl	8004a58 <socket>

	ret = DHCP_RUNNING;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8001f8c:	f7ff fdc0 	bl	8001b10 <parseDHCPMSG>
 8001f90:	4603      	mov	r3, r0
 8001f92:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8001f94:	4b6e      	ldr	r3, [pc, #440]	@ (8002150 <DHCP_run+0x204>)
 8001f96:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	f200 80d0 	bhi.w	8002140 <DHCP_run+0x1f4>
 8001fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <DHCP_run+0x5c>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fbd 	.word	0x08001fbd
 8001fac:	08001fe1 	.word	0x08001fe1
 8001fb0:	08002025 	.word	0x08002025
 8001fb4:	08002075 	.word	0x08002075
 8001fb8:	080020cf 	.word	0x080020cf
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8001fbc:	4b66      	ldr	r3, [pc, #408]	@ (8002158 <DHCP_run+0x20c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8001fc2:	4b65      	ldr	r3, [pc, #404]	@ (8002158 <DHCP_run+0x20c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8001fc8:	4b63      	ldr	r3, [pc, #396]	@ (8002158 <DHCP_run+0x20c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8001fce:	4b62      	ldr	r3, [pc, #392]	@ (8002158 <DHCP_run+0x20c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8001fd4:	f7fe fffa 	bl	8000fcc <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8001fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8002150 <DHCP_run+0x204>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
   		break;
 8001fde:	e0b2      	b.n	8002146 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d119      	bne.n	800201a <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800215c <DHCP_run+0x210>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	7c1a      	ldrb	r2, [r3, #16]
 8001fec:	4b5a      	ldr	r3, [pc, #360]	@ (8002158 <DHCP_run+0x20c>)
 8001fee:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8001ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800215c <DHCP_run+0x210>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	7c5a      	ldrb	r2, [r3, #17]
 8001ff6:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <DHCP_run+0x20c>)
 8001ff8:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8001ffa:	4b58      	ldr	r3, [pc, #352]	@ (800215c <DHCP_run+0x210>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	7c9a      	ldrb	r2, [r3, #18]
 8002000:	4b55      	ldr	r3, [pc, #340]	@ (8002158 <DHCP_run+0x20c>)
 8002002:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002004:	4b55      	ldr	r3, [pc, #340]	@ (800215c <DHCP_run+0x210>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	7cda      	ldrb	r2, [r3, #19]
 800200a:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <DHCP_run+0x20c>)
 800200c:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800200e:	f7ff f9a3 	bl	8001358 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8002012:	4b4f      	ldr	r3, [pc, #316]	@ (8002150 <DHCP_run+0x204>)
 8002014:	2202      	movs	r2, #2
 8002016:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002018:	e095      	b.n	8002146 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800201a:	f000 f8c1 	bl	80021a0 <check_DHCP_timeout>
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
         break;
 8002022:	e090      	b.n	8002146 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8002024:	79bb      	ldrb	r3, [r7, #6]
 8002026:	2b05      	cmp	r3, #5
 8002028:	d116      	bne.n	8002058 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800202a:	f000 f919 	bl	8002260 <check_DHCP_leasedIP>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8002034:	4b4a      	ldr	r3, [pc, #296]	@ (8002160 <DHCP_run+0x214>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4798      	blx	r3
					reset_DHCP_timeout();
 800203a:	f000 f9e3 	bl	8002404 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800203e:	4b44      	ldr	r3, [pc, #272]	@ (8002150 <DHCP_run+0x204>)
 8002040:	2203      	movs	r2, #3
 8002042:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8002044:	e07f      	b.n	8002146 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8002046:	f000 f9dd 	bl	8002404 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800204a:	4b46      	ldr	r3, [pc, #280]	@ (8002164 <DHCP_run+0x218>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002050:	4b3f      	ldr	r3, [pc, #252]	@ (8002150 <DHCP_run+0x204>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
		break;
 8002056:	e076      	b.n	8002146 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002058:	79bb      	ldrb	r3, [r7, #6]
 800205a:	2b06      	cmp	r3, #6
 800205c:	d105      	bne.n	800206a <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800205e:	f000 f9d1 	bl	8002404 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002062:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <DHCP_run+0x204>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
		break;
 8002068:	e06d      	b.n	8002146 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800206a:	f000 f899 	bl	80021a0 <check_DHCP_timeout>
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
		break;
 8002072:	e068      	b.n	8002146 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8002074:	2304      	movs	r3, #4
 8002076:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002078:	4b3b      	ldr	r3, [pc, #236]	@ (8002168 <DHCP_run+0x21c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d060      	beq.n	8002144 <DHCP_run+0x1f8>
 8002082:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <DHCP_run+0x21c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	085a      	lsrs	r2, r3, #1
 8002088:	4b38      	ldr	r3, [pc, #224]	@ (800216c <DHCP_run+0x220>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d259      	bcs.n	8002144 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8002094:	4b30      	ldr	r3, [pc, #192]	@ (8002158 <DHCP_run+0x20c>)
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <DHCP_run+0x224>)
 800209a:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 800209c:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <DHCP_run+0x20c>)
 800209e:	785a      	ldrb	r2, [r3, #1]
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <DHCP_run+0x224>)
 80020a2:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80020a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <DHCP_run+0x20c>)
 80020a6:	789a      	ldrb	r2, [r3, #2]
 80020a8:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <DHCP_run+0x224>)
 80020aa:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <DHCP_run+0x20c>)
 80020ae:	78da      	ldrb	r2, [r3, #3]
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <DHCP_run+0x224>)
 80020b2:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80020b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <DHCP_run+0x228>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002174 <DHCP_run+0x228>)
 80020bc:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80020be:	f7ff f94b 	bl	8001358 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80020c2:	f000 f99f 	bl	8002404 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80020c6:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <DHCP_run+0x204>)
 80020c8:	2204      	movs	r2, #4
 80020ca:	701a      	strb	r2, [r3, #0]
			}
		break;
 80020cc:	e03a      	b.n	8002144 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80020ce:	2304      	movs	r3, #4
 80020d0:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d125      	bne.n	8002124 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <DHCP_run+0x22c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <DHCP_run+0x224>)
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <DHCP_run+0x20c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d111      	bne.n	800210e <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <DHCP_run+0x224>)
 80020ec:	785a      	ldrb	r2, [r3, #1]
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <DHCP_run+0x20c>)
 80020f0:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10b      	bne.n	800210e <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <DHCP_run+0x224>)
 80020f8:	789a      	ldrb	r2, [r3, #2]
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <DHCP_run+0x20c>)
 80020fc:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d105      	bne.n	800210e <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <DHCP_run+0x224>)
 8002104:	78da      	ldrb	r2, [r3, #3]
 8002106:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <DHCP_run+0x20c>)
 8002108:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d004      	beq.n	8002118 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800210e:	2303      	movs	r3, #3
 8002110:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8002112:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <DHCP_run+0x230>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002118:	f000 f974 	bl	8002404 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <DHCP_run+0x204>)
 800211e:	2203      	movs	r2, #3
 8002120:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8002122:	e010      	b.n	8002146 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002124:	79bb      	ldrb	r3, [r7, #6]
 8002126:	2b06      	cmp	r3, #6
 8002128:	d105      	bne.n	8002136 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800212a:	f000 f96b 	bl	8002404 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800212e:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <DHCP_run+0x204>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
	   	break;
 8002134:	e007      	b.n	8002146 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002136:	f000 f833 	bl	80021a0 <check_DHCP_timeout>
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
	   	break;
 800213e:	e002      	b.n	8002146 <DHCP_run+0x1fa>
		default :
   		break;
 8002140:	bf00      	nop
 8002142:	e000      	b.n	8002146 <DHCP_run+0x1fa>
		break;
 8002144:	bf00      	nop
	}

	return ret;
 8002146:	79fb      	ldrb	r3, [r7, #7]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200011f4 	.word	0x200011f4
 8002154:	200011d4 	.word	0x200011d4
 8002158:	200011e4 	.word	0x200011e4
 800215c:	20001200 	.word	0x20001200
 8002160:	2000006c 	.word	0x2000006c
 8002164:	20000074 	.word	0x20000074
 8002168:	2000005c 	.word	0x2000005c
 800216c:	200011f8 	.word	0x200011f8
 8002170:	200011e0 	.word	0x200011e0
 8002174:	200011fc 	.word	0x200011fc
 8002178:	200011f5 	.word	0x200011f5
 800217c:	20000070 	.word	0x20000070

08002180 <DHCP_stop>:

void    DHCP_stop(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <DHCP_stop+0x18>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fd79 	bl	8004c80 <close>
   dhcp_state = STATE_DHCP_STOP;
 800218e:	4b03      	ldr	r3, [pc, #12]	@ (800219c <DHCP_stop+0x1c>)
 8002190:	2206      	movs	r2, #6
 8002192:	701a      	strb	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200011d4 	.word	0x200011d4
 800219c:	200011f4 	.word	0x200011f4

080021a0 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80021a6:	2301      	movs	r3, #1
 80021a8:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80021aa:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <check_DHCP_timeout+0xb0>)
 80021ac:	f993 3000 	ldrsb.w	r3, [r3]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	dc2d      	bgt.n	8002210 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80021b4:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <check_DHCP_timeout+0xb4>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <check_DHCP_timeout+0xb8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d242      	bcs.n	8002246 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80021c0:	4b26      	ldr	r3, [pc, #152]	@ (800225c <check_DHCP_timeout+0xbc>)
 80021c2:	f993 3000 	ldrsb.w	r3, [r3]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d00c      	beq.n	80021e4 <check_DHCP_timeout+0x44>
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	dc0d      	bgt.n	80021ea <check_DHCP_timeout+0x4a>
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d002      	beq.n	80021d8 <check_DHCP_timeout+0x38>
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d003      	beq.n	80021de <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80021d6:	e008      	b.n	80021ea <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80021d8:	f7fe fef8 	bl	8000fcc <send_DHCP_DISCOVER>
				break;
 80021dc:	e006      	b.n	80021ec <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80021de:	f7ff f8bb 	bl	8001358 <send_DHCP_REQUEST>
				break;
 80021e2:	e003      	b.n	80021ec <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80021e4:	f7ff f8b8 	bl	8001358 <send_DHCP_REQUEST>
				break;
 80021e8:	e000      	b.n	80021ec <check_DHCP_timeout+0x4c>
				break;
 80021ea:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <check_DHCP_timeout+0xb8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <check_DHCP_timeout+0xb8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330a      	adds	r3, #10
 80021f8:	4a16      	ldr	r2, [pc, #88]	@ (8002254 <check_DHCP_timeout+0xb4>)
 80021fa:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <check_DHCP_timeout+0xb0>)
 80021fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3301      	adds	r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	b25a      	sxtb	r2, r3
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <check_DHCP_timeout+0xb0>)
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e01a      	b.n	8002246 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <check_DHCP_timeout+0xbc>)
 8002212:	f993 3000 	ldrsb.w	r3, [r3]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00c      	beq.n	8002234 <check_DHCP_timeout+0x94>
 800221a:	2b04      	cmp	r3, #4
 800221c:	dc10      	bgt.n	8002240 <check_DHCP_timeout+0xa0>
 800221e:	2b01      	cmp	r3, #1
 8002220:	d002      	beq.n	8002228 <check_DHCP_timeout+0x88>
 8002222:	2b02      	cmp	r3, #2
 8002224:	d006      	beq.n	8002234 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002226:	e00b      	b.n	8002240 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <check_DHCP_timeout+0xbc>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800222e:	2300      	movs	r3, #0
 8002230:	71fb      	strb	r3, [r7, #7]
				break;
 8002232:	e006      	b.n	8002242 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002234:	f7fe feca 	bl	8000fcc <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <check_DHCP_timeout+0xbc>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
				break;
 800223e:	e000      	b.n	8002242 <check_DHCP_timeout+0xa2>
				break;
 8002240:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002242:	f000 f8df 	bl	8002404 <reset_DHCP_timeout>
	}
	return ret;
 8002246:	79fb      	ldrb	r3, [r7, #7]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200011f5 	.word	0x200011f5
 8002254:	20000060 	.word	0x20000060
 8002258:	200011f8 	.word	0x200011f8
 800225c:	200011f4 	.word	0x200011f4

08002260 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8002266:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800226a:	f002 f90f 	bl	800448c <WIZCHIP_READ>
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002272:	2103      	movs	r1, #3
 8002274:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002278:	f002 f954 	bl	8004524 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <check_DHCP_leasedIP+0x6c>)
 800227e:	7818      	ldrb	r0, [r3, #0]
 8002280:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <check_DHCP_leasedIP+0x70>)
 8002288:	2211      	movs	r2, #17
 800228a:	4912      	ldr	r1, [pc, #72]	@ (80022d4 <check_DHCP_leasedIP+0x74>)
 800228c:	f003 f864 	bl	8005358 <sendto>
 8002290:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800229a:	f002 f943 	bl	8004524 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f113 0f0d 	cmn.w	r3, #13
 80022a4:	d101      	bne.n	80022aa <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00c      	b.n	80022c4 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80022aa:	f7ff fadf 	bl	800186c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <check_DHCP_leasedIP+0x78>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80022b4:	bf00      	nop
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <check_DHCP_leasedIP+0x78>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d9f9      	bls.n	80022b6 <check_DHCP_leasedIP+0x56>

		return 0;
 80022c2:	2300      	movs	r3, #0
	}
}	
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200011d4 	.word	0x200011d4
 80022d0:	200011e4 	.word	0x200011e4
 80022d4:	080093c4 	.word	0x080093c4
 80022d8:	200011f8 	.word	0x200011f8

080022dc <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80022ec:	2206      	movs	r2, #6
 80022ee:	493f      	ldr	r1, [pc, #252]	@ (80023ec <DHCP_init+0x110>)
 80022f0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80022f4:	f002 f964 	bl	80045c0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80022f8:	4b3c      	ldr	r3, [pc, #240]	@ (80023ec <DHCP_init+0x110>)
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <DHCP_init+0x110>)
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	4313      	orrs	r3, r2
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b39      	ldr	r3, [pc, #228]	@ (80023ec <DHCP_init+0x110>)
 8002306:	789b      	ldrb	r3, [r3, #2]
 8002308:	4313      	orrs	r3, r2
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <DHCP_init+0x110>)
 800230e:	78db      	ldrb	r3, [r3, #3]
 8002310:	4313      	orrs	r3, r2
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b35      	ldr	r3, [pc, #212]	@ (80023ec <DHCP_init+0x110>)
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b33      	ldr	r3, [pc, #204]	@ (80023ec <DHCP_init+0x110>)
 800231e:	795b      	ldrb	r3, [r3, #5]
 8002320:	4313      	orrs	r3, r2
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d117      	bne.n	8002358 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002328:	4b30      	ldr	r3, [pc, #192]	@ (80023ec <DHCP_init+0x110>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800232e:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <DHCP_init+0x110>)
 8002330:	2208      	movs	r2, #8
 8002332:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002334:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <DHCP_init+0x110>)
 8002336:	22dc      	movs	r2, #220	@ 0xdc
 8002338:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800233a:	4b2c      	ldr	r3, [pc, #176]	@ (80023ec <DHCP_init+0x110>)
 800233c:	2200      	movs	r2, #0
 800233e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002340:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <DHCP_init+0x110>)
 8002342:	2200      	movs	r2, #0
 8002344:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002346:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <DHCP_init+0x110>)
 8002348:	2200      	movs	r2, #0
 800234a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800234c:	2206      	movs	r2, #6
 800234e:	4927      	ldr	r1, [pc, #156]	@ (80023ec <DHCP_init+0x110>)
 8002350:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002354:	f002 f994 	bl	8004680 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002358:	4a25      	ldr	r2, [pc, #148]	@ (80023f0 <DHCP_init+0x114>)
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800235e:	4a25      	ldr	r2, [pc, #148]	@ (80023f4 <DHCP_init+0x118>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002364:	4b24      	ldr	r3, [pc, #144]	@ (80023f8 <DHCP_init+0x11c>)
 8002366:	4a25      	ldr	r2, [pc, #148]	@ (80023fc <DHCP_init+0x120>)
 8002368:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800236a:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <DHCP_init+0x110>)
 800236c:	78db      	ldrb	r3, [r3, #3]
 800236e:	461a      	mov	r2, r3
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <DHCP_init+0x11c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4413      	add	r3, r2
 8002376:	4a20      	ldr	r2, [pc, #128]	@ (80023f8 <DHCP_init+0x11c>)
 8002378:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800237a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <DHCP_init+0x110>)
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <DHCP_init+0x11c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4413      	add	r3, r2
 8002386:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <DHCP_init+0x11c>)
 8002388:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800238a:	4b18      	ldr	r3, [pc, #96]	@ (80023ec <DHCP_init+0x110>)
 800238c:	795b      	ldrb	r3, [r3, #5]
 800238e:	461a      	mov	r2, r3
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <DHCP_init+0x11c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4413      	add	r3, r2
 8002396:	4a18      	ldr	r2, [pc, #96]	@ (80023f8 <DHCP_init+0x11c>)
 8002398:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <DHCP_init+0x110>)
 800239c:	78da      	ldrb	r2, [r3, #3]
 800239e:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <DHCP_init+0x110>)
 80023a0:	791b      	ldrb	r3, [r3, #4]
 80023a2:	4053      	eors	r3, r2
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <DHCP_init+0x110>)
 80023a8:	795b      	ldrb	r3, [r3, #5]
 80023aa:	4053      	eors	r3, r2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <DHCP_init+0x11c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a10      	ldr	r2, [pc, #64]	@ (80023f8 <DHCP_init+0x11c>)
 80023b8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	2204      	movs	r2, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80023c6:	f002 f95b 	bl	8004680 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	2204      	movs	r2, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80023d6:	f002 f953 	bl	8004680 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80023da:	f000 f813 	bl	8002404 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <DHCP_init+0x124>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20001204 	.word	0x20001204
 80023f0:	200011d4 	.word	0x200011d4
 80023f4:	20001200 	.word	0x20001200
 80023f8:	200011fc 	.word	0x200011fc
 80023fc:	12345678 	.word	0x12345678
 8002400:	200011f4 	.word	0x200011f4

08002404 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <reset_DHCP_timeout+0x20>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <reset_DHCP_timeout+0x24>)
 8002410:	220a      	movs	r2, #10
 8002412:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <reset_DHCP_timeout+0x28>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	200011f8 	.word	0x200011f8
 8002428:	20000060 	.word	0x20000060
 800242c:	200011f5 	.word	0x200011f5

08002430 <getDHCPLeasetime>:
   ip[2] = DHCP_allocated_dns[2];
   ip[3] = DHCP_allocated_dns[3];         
}

uint32_t getDHCPLeasetime(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 8002434:	4b02      	ldr	r3, [pc, #8]	@ (8002440 <getDHCPLeasetime+0x10>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	2000005c 	.word	0x2000005c

08002444 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b09      	cmp	r3, #9
 800245a:	d803      	bhi.n	8002464 <NibbleToHex+0x20>
    return nibble + '0';
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	3330      	adds	r3, #48	@ 0x30
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e002      	b.n	800246a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	3337      	adds	r3, #55	@ 0x37
 8002468:	b2db      	uxtb	r3, r3
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	4413      	add	r3, r2
 8002492:	81fb      	strh	r3, [r7, #14]
	return i;
 8002494:	89fb      	ldrh	r3, [r7, #14]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	b299      	uxth	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	b2ca      	uxtb	r2, r1
 80024ba:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]
	return s;
 80024c8:	687b      	ldr	r3, [r7, #4]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b08b      	sub	sp, #44	@ 0x2c
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	623a      	str	r2, [r7, #32]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <parse_name+0x34>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8002508:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800250a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800250e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002510:	d117      	bne.n	8002542 <parse_name+0x6e>
		{
			if (!indirect)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <parse_name+0x4a>
				clen++;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800251e:	2301      	movs	r3, #1
 8002520:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8002522:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	4413      	add	r3, r2
 8002530:	461a      	mov	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	623a      	str	r2, [r7, #32]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8002542:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02b      	beq.n	80025a0 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8002548:	887a      	ldrh	r2, [r7, #2]
 800254a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8002556:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800255a:	2b00      	cmp	r3, #0
 800255c:	da02      	bge.n	8002564 <parse_name+0x90>
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	e038      	b.n	80025d6 <parse_name+0x102>

		if (!indirect) clen += slen;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <parse_name+0xb0>
 800256a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8002572:	e007      	b.n	8002584 <parse_name+0xb0>
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	1c53      	adds	r3, r2, #1
 8002578:	623b      	str	r3, [r7, #32]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	1c59      	adds	r1, r3, #1
 800257e:	6079      	str	r1, [r7, #4]
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002586:	1e5a      	subs	r2, r3, #1
 8002588:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f2      	bne.n	8002574 <parse_name+0xa0>
		*buf++ = '.';
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	222e      	movs	r2, #46	@ 0x2e
 8002596:	701a      	strb	r2, [r3, #0]
		nseg++;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800259e:	e7a8      	b.n	80024f2 <parse_name+0x1e>
			break;
 80025a0:	bf00      	nop
	}

	if (nseg == 0)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	222e      	movs	r2, #46	@ 0x2e
 80025b0:	701a      	strb	r2, [r3, #0]
		len--;
 80025b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
	len--;
 80025c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80025d4:	69fb      	ldr	r3, [r7, #28]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	372c      	adds	r7, #44	@ 0x2c
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0b4      	sub	sp, #208	@ 0xd0
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80025ea:	f107 020c 	add.w	r2, r7, #12
 80025ee:	23c0      	movs	r3, #192	@ 0xc0
 80025f0:	6839      	ldr	r1, [r7, #0]
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ff6e 	bl	80024d4 <parse_name>
 80025f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 80025fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d101      	bne.n	800260a <dns_question+0x2a>
 8002606:	2300      	movs	r3, #0
 8002608:	e00b      	b.n	8002622 <dns_question+0x42>

	cp += len;
 800260a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3302      	adds	r3, #2
 8002618:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3302      	adds	r3, #2
 800261e:	603b      	str	r3, [r7, #0]

	return cp;
 8002620:	683b      	ldr	r3, [r7, #0]
}
 8002622:	4618      	mov	r0, r3
 8002624:	37d0      	adds	r7, #208	@ 0xd0
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b0b6      	sub	sp, #216	@ 0xd8
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002636:	f107 0210 	add.w	r2, r7, #16
 800263a:	23c0      	movs	r3, #192	@ 0xc0
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff ff48 	bl	80024d4 <parse_name>
 8002644:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8002648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d101      	bne.n	8002656 <dns_answer+0x2c>
 8002652:	2300      	movs	r3, #0
 8002654:	e0f9      	b.n	800284a <dns_answer+0x220>

	cp += len;
 8002656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	4413      	add	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8002660:	68b8      	ldr	r0, [r7, #8]
 8002662:	f7ff ff07 	bl	8002474 <get16>
 8002666:	4603      	mov	r3, r0
 8002668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	3302      	adds	r3, #2
 8002670:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3302      	adds	r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	3304      	adds	r3, #4
 800267c:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3302      	adds	r3, #2
 8002682:	60bb      	str	r3, [r7, #8]


	switch (type)
 8002684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002688:	2b10      	cmp	r3, #16
 800268a:	f000 80da 	beq.w	8002842 <dns_answer+0x218>
 800268e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002692:	2b10      	cmp	r3, #16
 8002694:	f300 80d7 	bgt.w	8002846 <dns_answer+0x21c>
 8002698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d07d      	beq.n	800279c <dns_answer+0x172>
 80026a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	f300 80ce 	bgt.w	8002846 <dns_answer+0x21c>
 80026aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	dc26      	bgt.n	8002700 <dns_answer+0xd6>
 80026b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f340 80c5 	ble.w	8002846 <dns_answer+0x21c>
 80026bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026c0:	2201      	movs	r2, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 80026ca:	401a      	ands	r2, r3
 80026cc:	2a00      	cmp	r2, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2201      	movne	r2, #1
 80026d2:	2200      	moveq	r2, #0
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	d133      	bne.n	8002742 <dns_answer+0x118>
 80026da:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80026de:	2a00      	cmp	r2, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2201      	movne	r2, #1
 80026e4:	2200      	moveq	r2, #0
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d170      	bne.n	80027ce <dns_answer+0x1a4>
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80026fe:	e0a2      	b.n	8002846 <dns_answer+0x21c>
	switch (type)
 8002700:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002704:	2b0d      	cmp	r3, #13
 8002706:	d032      	beq.n	800276e <dns_answer+0x144>
		break;
 8002708:	e09d      	b.n	8002846 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	60ba      	str	r2, [r7, #8]
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	60ba      	str	r2, [r7, #8]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	3201      	adds	r2, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	60ba      	str	r2, [r7, #8]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	3202      	adds	r2, #2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	60ba      	str	r2, [r7, #8]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	3203      	adds	r2, #3
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	7013      	strb	r3, [r2, #0]
		break;
 8002740:	e082      	b.n	8002848 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8002742:	f107 0210 	add.w	r2, r7, #16
 8002746:	23c0      	movs	r3, #192	@ 0xc0
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff fec2 	bl	80024d4 <parse_name>
 8002750:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8002754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d101      	bne.n	8002762 <dns_answer+0x138>
 800275e:	2300      	movs	r3, #0
 8002760:	e073      	b.n	800284a <dns_answer+0x220>
		cp += len;
 8002762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4413      	add	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
		break;
 800276c:	e06c      	b.n	8002848 <dns_answer+0x21e>
		len = *cp++;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	60ba      	str	r2, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 800277a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4413      	add	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8002790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	4413      	add	r3, r2
 8002798:	60bb      	str	r3, [r7, #8]
		break;
 800279a:	e055      	b.n	8002848 <dns_answer+0x21e>
		cp += 2;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3302      	adds	r3, #2
 80027a0:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80027a2:	f107 0210 	add.w	r2, r7, #16
 80027a6:	23c0      	movs	r3, #192	@ 0xc0
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff fe92 	bl	80024d4 <parse_name>
 80027b0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80027b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d101      	bne.n	80027c2 <dns_answer+0x198>
 80027be:	2300      	movs	r3, #0
 80027c0:	e043      	b.n	800284a <dns_answer+0x220>
		cp += len;
 80027c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4413      	add	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
		break;
 80027cc:	e03c      	b.n	8002848 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80027ce:	f107 0210 	add.w	r2, r7, #16
 80027d2:	23c0      	movs	r3, #192	@ 0xc0
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fe7c 	bl	80024d4 <parse_name>
 80027dc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80027e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d101      	bne.n	80027ee <dns_answer+0x1c4>
 80027ea:	2300      	movs	r3, #0
 80027ec:	e02d      	b.n	800284a <dns_answer+0x220>
		cp += len;
 80027ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4413      	add	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80027f8:	f107 0210 	add.w	r2, r7, #16
 80027fc:	23c0      	movs	r3, #192	@ 0xc0
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff fe67 	bl	80024d4 <parse_name>
 8002806:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800280a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d101      	bne.n	8002818 <dns_answer+0x1ee>
 8002814:	2300      	movs	r3, #0
 8002816:	e018      	b.n	800284a <dns_answer+0x220>
		cp += len;
 8002818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	4413      	add	r3, r2
 8002820:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3304      	adds	r3, #4
 8002826:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3304      	adds	r3, #4
 800282c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	3304      	adds	r3, #4
 8002832:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3304      	adds	r3, #4
 8002838:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3304      	adds	r3, #4
 800283e:	60bb      	str	r3, [r7, #8]
		break;
 8002840:	e002      	b.n	8002848 <dns_answer+0x21e>
		break;
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <dns_answer+0x21e>
		break;
 8002846:	bf00      	nop
	}

	return cp;
 8002848:	68bb      	ldr	r3, [r7, #8]
}
 800284a:	4618      	mov	r0, r3
 800284c:	37d8      	adds	r7, #216	@ 0xd8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b088      	sub	sp, #32
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8002862:	2212      	movs	r2, #18
 8002864:	2100      	movs	r1, #0
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f005 fc4c 	bl	8008104 <memset>

	pdhdr->id = get16(&msg[0]);
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f7ff fe01 	bl	8002474 <get16>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3302      	adds	r3, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fdf8 	bl	8002474 <get16>
 8002884:	4603      	mov	r3, r0
 8002886:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8002888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da02      	bge.n	8002896 <parseDNSMSG+0x44>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8002896:	8a7b      	ldrh	r3, [r7, #18]
 8002898:	0adb      	lsrs	r3, r3, #11
 800289a:	b29b      	uxth	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 80028a8:	8a7b      	ldrh	r3, [r7, #18]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <parseDNSMSG+0x66>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 80028b8:	8a7b      	ldrh	r3, [r7, #18]
 80028ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <parseDNSMSG+0x76>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80028c8:	8a7b      	ldrh	r3, [r7, #18]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <parseDNSMSG+0x86>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80028d8:	8a7b      	ldrh	r3, [r7, #18]
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <parseDNSMSG+0x96>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80028e8:	8a7b      	ldrh	r3, [r7, #18]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3304      	adds	r3, #4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fdba 	bl	8002474 <get16>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3306      	adds	r3, #6
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fdb1 	bl	8002474 <get16>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3308      	adds	r3, #8
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fda8 	bl	8002474 <get16>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	330a      	adds	r3, #10
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fd9f 	bl	8002474 <get16>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	330c      	adds	r3, #12
 8002942:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	83fb      	strh	r3, [r7, #30]
 8002948:	e00d      	b.n	8002966 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	6978      	ldr	r0, [r7, #20]
 800294e:	f7ff fe47 	bl	80025e0 <dns_question>
 8002952:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <parseDNSMSG+0x10e>
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	e03b      	b.n	80029d8 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8002960:	8bfb      	ldrh	r3, [r7, #30]
 8002962:	3301      	adds	r3, #1
 8002964:	83fb      	strh	r3, [r7, #30]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	895b      	ldrh	r3, [r3, #10]
 800296a:	8bfa      	ldrh	r2, [r7, #30]
 800296c:	429a      	cmp	r2, r3
 800296e:	d3ec      	bcc.n	800294a <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8002970:	2300      	movs	r3, #0
 8002972:	83fb      	strh	r3, [r7, #30]
 8002974:	e00e      	b.n	8002994 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	69b9      	ldr	r1, [r7, #24]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff fe55 	bl	800262a <dns_answer>
 8002980:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <parseDNSMSG+0x13c>
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	e024      	b.n	80029d8 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 800298e:	8bfb      	ldrh	r3, [r7, #30]
 8002990:	3301      	adds	r3, #1
 8002992:	83fb      	strh	r3, [r7, #30]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	899b      	ldrh	r3, [r3, #12]
 8002998:	8bfa      	ldrh	r2, [r7, #30]
 800299a:	429a      	cmp	r2, r3
 800299c:	d3eb      	bcc.n	8002976 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 800299e:	2300      	movs	r3, #0
 80029a0:	83fb      	strh	r3, [r7, #30]
 80029a2:	e002      	b.n	80029aa <parseDNSMSG+0x158>
 80029a4:	8bfb      	ldrh	r3, [r7, #30]
 80029a6:	3301      	adds	r3, #1
 80029a8:	83fb      	strh	r3, [r7, #30]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	89db      	ldrh	r3, [r3, #14]
 80029ae:	8bfa      	ldrh	r2, [r7, #30]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3f7      	bcc.n	80029a4 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	83fb      	strh	r3, [r7, #30]
 80029b8:	e002      	b.n	80029c0 <parseDNSMSG+0x16e>
 80029ba:	8bfb      	ldrh	r3, [r7, #30]
 80029bc:	3301      	adds	r3, #1
 80029be:	83fb      	strh	r3, [r7, #30]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8a1b      	ldrh	r3, [r3, #16]
 80029c4:	8bfa      	ldrh	r2, [r7, #30]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3f7      	bcc.n	80029ba <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	7a1b      	ldrb	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <parseDNSMSG+0x184>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <parseDNSMSG+0x186>
	else return 0;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0b8      	sub	sp, #224	@ 0xe0
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4603      	mov	r3, r0
 80029ee:	81fb      	strh	r3, [r7, #14]
 80029f0:	4613      	mov	r3, r2
 80029f2:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 80029fa:	4b57      	ldr	r3, [pc, #348]	@ (8002b58 <dns_makequery+0x178>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b55      	ldr	r3, [pc, #340]	@ (8002b58 <dns_makequery+0x178>)
 8002a04:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8002a06:	4b54      	ldr	r3, [pc, #336]	@ (8002b58 <dns_makequery+0x178>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002a10:	f7ff fd46 	bl	80024a0 <put16>
 8002a14:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	02db      	lsls	r3, r3, #11
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a22:	b21b      	sxth	r3, r3
 8002a24:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8002a28:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002a32:	f7ff fd35 	bl	80024a0 <put16>
 8002a36:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002a40:	f7ff fd2e 	bl	80024a0 <put16>
 8002a44:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002a4e:	f7ff fd27 	bl	80024a0 <put16>
 8002a52:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8002a56:	2100      	movs	r1, #0
 8002a58:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002a5c:	f7ff fd20 	bl	80024a0 <put16>
 8002a60:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8002a64:	2100      	movs	r1, #0
 8002a66:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002a6a:	f7ff fd19 	bl	80024a0 <put16>
 8002a6e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fbf0 	bl	800825e <strcpy>
	dname = sname;
 8002a7e:	f107 0310 	add.w	r3, r7, #16
 8002a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 8002a86:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8002a8a:	f7fd fb5f 	bl	800014c <strlen>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8002a94:	212e      	movs	r1, #46	@ 0x2e
 8002a96:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8002a9a:	f005 fb3b 	bl	8008114 <strchr>
 8002a9e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8002aa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <dns_makequery+0xd8>
 8002aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	81bb      	strh	r3, [r7, #12]
 8002ab6:	e002      	b.n	8002abe <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8002ab8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8002abc:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8002abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ac8:	89ba      	ldrh	r2, [r7, #12]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8002ace:	89bb      	ldrh	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d029      	beq.n	8002b28 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8002ad4:	89bb      	ldrh	r3, [r7, #12]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8002adc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002ae0:	f005 fb37 	bl	8008152 <strncpy>
		cp += len;
 8002ae4:	89bb      	ldrh	r3, [r7, #12]
 8002ae6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002aea:	4413      	add	r3, r2
 8002aec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 8002af0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8002af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
			break;
 8002b06:	e010      	b.n	8002b2a <dns_makequery+0x14a>
		}
		dname += len+1;
 8002b08:	89bb      	ldrh	r3, [r7, #12]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8002b10:	4413      	add	r3, r2
 8002b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 8002b16:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8002b1a:	89bb      	ldrh	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 8002b26:	e7b5      	b.n	8002a94 <dns_makequery+0xb4>
		if (len == 0) break;
 8002b28:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002b30:	f7ff fcb6 	bl	80024a0 <put16>
 8002b34:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8002b38:	2101      	movs	r1, #1
 8002b3a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002b3e:	f7ff fcaf 	bl	80024a0 <put16>
 8002b42:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8002b46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	b21b      	sxth	r3, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	37e0      	adds	r7, #224	@ 0xe0
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20001212 	.word	0x20001212

08002b5c <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <check_DNS_timeout+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d914      	bls.n	8002b92 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <check_DNS_timeout+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <check_DNS_timeout+0x44>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d905      	bls.n	8002b82 <check_DNS_timeout+0x26>
			retry_count = 0;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <check_DNS_timeout+0x44>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	e008      	b.n	8002b94 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8002b82:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <check_DNS_timeout+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <check_DNS_timeout+0x44>)
 8002b8c:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	20001214 	.word	0x20001214
 8002ba0:	20001218 	.word	0x20001218

08002ba4 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8002bb0:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <DNS_init+0x2c>)
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8002bb6:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <DNS_init+0x30>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <DNS_init+0x34>)
 8002bbe:	f241 1222 	movw	r2, #4386	@ 0x1122
 8002bc2:	801a      	strh	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20001210 	.word	0x20001210
 8002bd4:	2000120c 	.word	0x2000120c
 8002bd8:	20001212 	.word	0x20001212

08002bdc <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08f      	sub	sp, #60	@ 0x3c
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <DNS_run+0xfc>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8002bee:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <DNS_run+0x100>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <DNS_run+0x104>)
 8002bf6:	7818      	ldrb	r0, [r3, #0]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	f001 ff2b 	bl	8004a58 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8002c02:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <DNS_run+0x108>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff fee7 	bl	80029e0 <dns_makequery>
 8002c12:	4603      	mov	r3, r0
 8002c14:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002c16:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <DNS_run+0x104>)
 8002c18:	7818      	ldrb	r0, [r3, #0]
 8002c1a:	4b32      	ldr	r3, [pc, #200]	@ (8002ce4 <DNS_run+0x108>)
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002c20:	2335      	movs	r3, #53	@ 0x35
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f002 fb97 	bl	8005358 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce0 <DNS_run+0x104>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 fdcf 	bl	80047d2 <getSn_RX_RSR>
 8002c34:	4603      	mov	r3, r0
 8002c36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002c38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d029      	beq.n	8002c92 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8002c3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c44:	d902      	bls.n	8002c4c <DNS_run+0x70>
 8002c46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8002c4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <DNS_run+0x104>)
 8002c4e:	7818      	ldrb	r0, [r3, #0]
 8002c50:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <DNS_run+0x108>)
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	f107 0414 	add.w	r4, r7, #20
 8002c58:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002c5a:	f107 0312 	add.w	r3, r7, #18
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4623      	mov	r3, r4
 8002c62:	f002 fcad 	bl	80055c0 <recvfrom>
 8002c66:	4603      	mov	r3, r0
 8002c68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <DNS_run+0x108>)
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	f107 0318 	add.w	r3, r7, #24
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fdec 	bl	8002852 <parseDNSMSG>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8002c80:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8002c82:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <DNS_run+0x104>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 fffa 	bl	8004c80 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8002c8c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8002c90:	e01e      	b.n	8002cd0 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8002c92:	f7ff ff63 	bl	8002b5c <check_DNS_timeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 8002c9c:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da06      	bge.n	8002cb2 <DNS_run+0xd6>
			close(DNS_SOCKET);
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <DNS_run+0x104>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 ffe9 	bl	8004c80 <close>
			return 0; // timeout occurred
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e00e      	b.n	8002cd0 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8002cb2:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1b7      	bne.n	8002c2a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <DNS_run+0x104>)
 8002cbc:	7818      	ldrb	r0, [r3, #0]
 8002cbe:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <DNS_run+0x108>)
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002cc4:	2335      	movs	r3, #53	@ 0x35
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f002 fb45 	bl	8005358 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002cce:	e7ac      	b.n	8002c2a <DNS_run+0x4e>
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3734      	adds	r7, #52	@ 0x34
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}
 8002cd8:	20001218 	.word	0x20001218
 8002cdc:	20001214 	.word	0x20001214
 8002ce0:	20001210 	.word	0x20001210
 8002ce4:	2000120c 	.word	0x2000120c

08002ce8 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <getNextPacketId+0x1c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	e000      	b.n	8002d28 <getNextPacketId+0x1e>
 8002d26:	2301      	movs	r3, #1
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8002d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3c:	b087      	sub	sp, #28
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	617b      	str	r3, [r7, #20]
        sent = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8002d50:	e018      	b.n	8002d84 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d56:	689c      	ldr	r4, [r3, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	18d6      	adds	r6, r2, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fcd1 	bl	800370c <TimerLeftMS>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	4631      	mov	r1, r6
 8002d70:	4628      	mov	r0, r5
 8002d72:	47a0      	blx	r4
 8002d74:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0e      	blt.n	8002d9a <sendPacket+0x60>
            break;
        sent += rc;
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	4413      	add	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	da07      	bge.n	8002d9c <sendPacket+0x62>
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fc81 	bl	8003694 <TimerIsExpired>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0dc      	beq.n	8002d52 <sendPacket+0x18>
 8002d98:	e000      	b.n	8002d9c <sendPacket+0x62>
            break;
 8002d9a:	bf00      	nop
    }
    if (sent == length)
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10b      	bne.n	8002dbc <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f000 fc95 	bl	80036e0 <TimerCountdown>
        rc = SUCCESSS;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e002      	b.n	8002dc2 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc0:	617b      	str	r3, [r7, #20]
    return rc;
 8002dc2:	697b      	ldr	r3, [r7, #20]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dcc <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	651a      	str	r2, [r3, #80]	@ 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e009      	b.n	8002dfa <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3304      	adds	r3, #4
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	ddf2      	ble.n	8002de6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a3a      	ldr	r2, [r7, #32]
 8002e10:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e1c:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
	c->next_packetid = 1;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3354      	adds	r3, #84	@ 0x54
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fc1d 	bl	800367a <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b08b      	sub	sp, #44	@ 0x2c
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dd03      	ble.n	8002e82 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	61bb      	str	r3, [r7, #24]
            goto exit;
 8002e80:	e021      	b.n	8002ec6 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e86:	685c      	ldr	r4, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002e8c:	f107 0117 	add.w	r1, r7, #23
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	47a0      	blx	r4
 8002e96:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d112      	bne.n	8002ec4 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	441a      	add	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	01db      	lsls	r3, r3, #7
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	dbd1      	blt.n	8002e66 <decodePacket+0x1e>
exit:
 8002ec2:	e000      	b.n	8002ec6 <decodePacket+0x7e>
            goto exit;
 8002ec4:	bf00      	nop
    return len;
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	372c      	adds	r7, #44	@ 0x2c
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	b089      	sub	sp, #36	@ 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
    int len = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef0:	685c      	ldr	r4, [r3, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	695e      	ldr	r6, [r3, #20]
 8002efa:	68b8      	ldr	r0, [r7, #8]
 8002efc:	f000 fc06 	bl	800370c <TimerLeftMS>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2201      	movs	r2, #1
 8002f04:	4631      	mov	r1, r6
 8002f06:	4628      	mov	r0, r5
 8002f08:	47a0      	blx	r4
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d13b      	bne.n	8002f88 <readPacket+0xb8>
        goto exit;

    len = 1;
 8002f10:	2301      	movs	r3, #1
 8002f12:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8002f14:	68b8      	ldr	r0, [r7, #8]
 8002f16:	f000 fbf9 	bl	800370c <TimerLeftMS>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	4619      	mov	r1, r3
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff ff90 	bl	8002e48 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ff4b 	bl	8003dce <MQTTPacket_encode>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	dd16      	ble.n	8002f74 <readPacket+0xa4>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4a:	685c      	ldr	r4, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	18d6      	adds	r6, r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f000 fbd5 	bl	800370c <TimerLeftMS>
 8002f62:	4603      	mov	r3, r0
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4631      	mov	r1, r6
 8002f68:	4628      	mov	r0, r5
 8002f6a:	47a0      	blx	r4
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10b      	bne.n	8002f8c <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8002f7c:	7d3b      	ldrb	r3, [r7, #20]
 8002f7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e002      	b.n	8002f8e <readPacket+0xbe>
        goto exit;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <readPacket+0xbe>
        goto exit;
 8002f8c:	bf00      	nop
exit:
    return rc;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3724      	adds	r7, #36	@ 0x24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f98 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8002fb8:	e039      	b.n	800302e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8002fc0:	d103      	bne.n	8002fca <isTopicMatched+0x32>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8002fc8:	d13a      	bne.n	8003040 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b2b      	cmp	r3, #43	@ 0x2b
 8002fd0:	d009      	beq.n	8002fe6 <isTopicMatched+0x4e>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b23      	cmp	r3, #35	@ 0x23
 8002fd8:	d005      	beq.n	8002fe6 <isTopicMatched+0x4e>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d12e      	bne.n	8003044 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b2b      	cmp	r3, #43	@ 0x2b
 8002fec:	d112      	bne.n	8003014 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8002ff4:	e005      	b.n	8003002 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	429a      	cmp	r2, r3
 8003008:	d20b      	bcs.n	8003022 <isTopicMatched+0x8a>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003010:	d1f1      	bne.n	8002ff6 <isTopicMatched+0x5e>
 8003012:	e006      	b.n	8003022 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b23      	cmp	r3, #35	@ 0x23
 800301a:	d102      	bne.n	8003022 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3b01      	subs	r3, #1
 8003020:	613b      	str	r3, [r7, #16]
        curf++;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3301      	adds	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
        curn++;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3301      	adds	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <isTopicMatched+0xae>
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3bd      	bcc.n	8002fba <isTopicMatched+0x22>
 800303e:	e002      	b.n	8003046 <isTopicMatched+0xae>
            break;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <isTopicMatched+0xae>
            break;
 8003044:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d105      	bne.n	800305a <isTopicMatched+0xc2>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <isTopicMatched+0xc2>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <isTopicMatched+0xc4>
 800305a:	2300      	movs	r3, #0
 800305c:	b2db      	uxtb	r3, r3
}
 800305e:	4618      	mov	r0, r3
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	@ 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
 8003078:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	e03f      	b.n	8003100 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	3304      	adds	r3, #4
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d034      	beq.n	80030fa <deliverMessage+0x92>
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	3304      	adds	r3, #4
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4619      	mov	r1, r3
 800309e:	68b8      	ldr	r0, [r7, #8]
 80030a0:	f001 f860 	bl	8004164 <MQTTPacket_equals>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	3304      	adds	r3, #4
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff6d 	bl	8002f98 <isTopicMatched>
 80030be:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01a      	beq.n	80030fa <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	3304      	adds	r3, #4
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80030d4:	f107 0318 	add.w	r3, r7, #24
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe03 	bl	8002ce8 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	3304      	adds	r3, #4
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f107 0218 	add.w	r2, r7, #24
 80030f2:	4610      	mov	r0, r2
 80030f4:	4798      	blx	r3
                rc = SUCCESSS;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	3301      	adds	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	2b04      	cmp	r3, #4
 8003104:	ddbc      	ble.n	8003080 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d112      	bne.n	8003134 <deliverMessage+0xcc>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fde2 	bl	8002ce8 <NewMessageData>
        c->defaultMessageHandler(&md);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003128:	f107 0210 	add.w	r2, r7, #16
 800312c:	4610      	mov	r0, r2
 800312e:	4798      	blx	r3
        rc = SUCCESSS;
 8003130:	2300      	movs	r3, #0
 8003132:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8003134:	6a3b      	ldr	r3, [r7, #32]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3728      	adds	r7, #40	@ 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <keepalive>:


int keepalive(MQTTClient* c)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
        goto exit;
 8003158:	e033      	b.n	80031c2 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3354      	adds	r3, #84	@ 0x54
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa98 	bl	8003694 <TimerIsExpired>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d02a      	beq.n	80031c0 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7f1b      	ldrb	r3, [r3, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d126      	bne.n	80031c0 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa7f 	bl	800367a <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fa99 	bl	80036bc <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f000 fd4e 	bl	8003c36 <MQTTSerialize_pingreq>
 800319a:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dd0f      	ble.n	80031c2 <keepalive+0x84>
 80031a2:	f107 0308 	add.w	r3, r7, #8
 80031a6:	461a      	mov	r2, r3
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fdc5 	bl	8002d3a <sendPacket>
 80031b0:	6178      	str	r0, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <keepalive+0x84>
                c->ping_outstanding = 1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	771a      	strb	r2, [r3, #28]
 80031be:	e000      	b.n	80031c2 <keepalive+0x84>
        }
    }

exit:
 80031c0:	bf00      	nop
    return rc;
 80031c2:	697b      	ldr	r3, [r7, #20]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80031cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ce:	b095      	sub	sp, #84	@ 0x54
 80031d0:	af06      	add	r7, sp, #24
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff fe79 	bl	8002ed0 <readPacket>
 80031de:	4603      	mov	r3, r0
 80031e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    int len = 0,
 80031e2:	2300      	movs	r3, #0
 80031e4:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = SUCCESSS;
 80031e6:	2300      	movs	r3, #0
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (packet_type)
 80031ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80031ec:	3b02      	subs	r3, #2
 80031ee:	2b0b      	cmp	r3, #11
 80031f0:	f200 80c0 	bhi.w	8003374 <cycle+0x1a8>
 80031f4:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <cycle+0x30>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003375 	.word	0x08003375
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003375 	.word	0x08003375
 8003208:	080032f5 	.word	0x080032f5
 800320c:	08003375 	.word	0x08003375
 8003210:	08003375 	.word	0x08003375
 8003214:	08003375 	.word	0x08003375
 8003218:	08003375 	.word	0x08003375
 800321c:	08003375 	.word	0x08003375
 8003220:	08003375 	.word	0x08003375
 8003224:	08003375 	.word	0x08003375
 8003228:	08003367 	.word	0x08003367
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8003234:	4616      	mov	r6, r2
 8003236:	f107 0210 	add.w	r2, r7, #16
 800323a:	1d15      	adds	r5, r2, #4
 800323c:	f107 0210 	add.w	r2, r7, #16
 8003240:	1c54      	adds	r4, r2, #1
 8003242:	f107 010c 	add.w	r1, r7, #12
 8003246:	f107 0210 	add.w	r2, r7, #16
 800324a:	1c90      	adds	r0, r2, #2
 800324c:	9604      	str	r6, [sp, #16]
 800324e:	9303      	str	r3, [sp, #12]
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	330c      	adds	r3, #12
 8003256:	9302      	str	r3, [sp, #8]
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	3308      	adds	r3, #8
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	f107 0320 	add.w	r3, r7, #32
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	462b      	mov	r3, r5
 8003268:	4622      	mov	r2, r4
 800326a:	f000 fcf3 	bl	8003c54 <MQTTDeserialize_publish>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 8083 	bne.w	800337c <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800327c:	f107 0210 	add.w	r2, r7, #16
 8003280:	f107 0320 	add.w	r3, r7, #32
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff feee 	bl	8003068 <deliverMessage>
            if (msg.qos != QOS0)
 800328c:	7c3b      	ldrb	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d06d      	beq.n	800336e <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8003292:	7c3b      	ldrb	r3, [r7, #16]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10c      	bne.n	80032b2 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6918      	ldr	r0, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4619      	mov	r1, r3
 80032a2:	8abb      	ldrh	r3, [r7, #20]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	2204      	movs	r2, #4
 80032aa:	f000 ff92 	bl	80041d2 <MQTTSerialize_ack>
 80032ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80032b0:	e00e      	b.n	80032d0 <cycle+0x104>
                else if (msg.qos == QOS2)
 80032b2:	7c3b      	ldrb	r3, [r7, #16]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d10b      	bne.n	80032d0 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6918      	ldr	r0, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4619      	mov	r1, r3
 80032c2:	8abb      	ldrh	r3, [r7, #20]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	2205      	movs	r2, #5
 80032ca:	f000 ff82 	bl	80041d2 <MQTTSerialize_ack>
 80032ce:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 80032d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	dc03      	bgt.n	80032de <cycle+0x112>
                    rc = FAILURE;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
 80032dc:	e005      	b.n	80032ea <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fd29 	bl	8002d3a <sendPacket>
 80032e8:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 80032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d13d      	bne.n	800336e <cycle+0x1a2>
                    goto exit; // there was a problem
 80032f2:	e044      	b.n	800337e <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695c      	ldr	r4, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f107 020a 	add.w	r2, r7, #10
 8003300:	f107 0109 	add.w	r1, r7, #9
 8003304:	f107 0008 	add.w	r0, r7, #8
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	4623      	mov	r3, r4
 800330c:	f000 fd14 	bl	8003d38 <MQTTDeserialize_ack>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d003      	beq.n	800331e <cycle+0x152>
                rc = FAILURE;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	633b      	str	r3, [r7, #48]	@ 0x30
 800331c:	e01e      	b.n	800335c <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6918      	ldr	r0, [r3, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4619      	mov	r1, r3
 8003328:	897b      	ldrh	r3, [r7, #10]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2300      	movs	r3, #0
 800332e:	2206      	movs	r2, #6
 8003330:	f000 ff4f 	bl	80041d2 <MQTTSerialize_ack>
 8003334:	6378      	str	r0, [r7, #52]	@ 0x34
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	dc03      	bgt.n	8003344 <cycle+0x178>
                rc = FAILURE;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
 8003342:	e00b      	b.n	800335c <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff fcf6 	bl	8002d3a <sendPacket>
 800334e:	6338      	str	r0, [r7, #48]	@ 0x30
 8003350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <cycle+0x190>
                rc = FAILURE; // there was a problem
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 800335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d106      	bne.n	8003372 <cycle+0x1a6>
                goto exit; // there was a problem
 8003364:	e00b      	b.n	800337e <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
            break;
 800336c:	e002      	b.n	8003374 <cycle+0x1a8>
            break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <cycle+0x1a8>
            break;
 8003372:	bf00      	nop
    }
    keepalive(c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fee2 	bl	800313e <keepalive>
 800337a:	e000      	b.n	800337e <cycle+0x1b2>
                goto exit;
 800337c:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <cycle+0x1bc>
        rc = packet_type;
 8003384:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003386:	633b      	str	r3, [r7, #48]	@ 0x30
    return rc;
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800338a:	4618      	mov	r0, r3
 800338c:	373c      	adds	r7, #60	@ 0x3c
 800338e:	46bd      	mov	sp, r7
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003392:	bf00      	nop

08003394 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f967 	bl	800367a <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	f107 030c 	add.w	r3, r7, #12
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f981 	bl	80036bc <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff03 	bl	80031cc <cycle>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d102      	bne.n	80033d4 <MQTTYield+0x40>
    {
        rc = FAILURE;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	617b      	str	r3, [r7, #20]
    }

    return rc;
 80033d4:	697b      	ldr	r3, [r7, #20]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
 80033ee:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f94f 	bl	8003694 <TimerIsExpired>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fee4 	bl	80031cc <cycle>
 8003404:	6178      	str	r0, [r7, #20]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	d1f0      	bne.n	80033f0 <waitfor+0x12>
 800340e:	e000      	b.n	8003412 <waitfor+0x34>
            break; // we timed out
 8003410:	bf00      	nop

    return rc;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b09e      	sub	sp, #120	@ 0x78
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800342c:	4a3d      	ldr	r2, [pc, #244]	@ (8003524 <MQTTConnect+0x108>)
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	4611      	mov	r1, r2
 8003434:	2258      	movs	r2, #88	@ 0x58
 8003436:	4618      	mov	r0, r3
 8003438:	f004 ff19 	bl	800826e <memcpy>
    int len = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d15d      	bne.n	8003504 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8003448:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f914 	bl	800367a <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f92d 	bl	80036bc <TimerCountdownMS>

    if (options == 0)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	8b1b      	ldrh	r3, [r3, #24]
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f000 f92b 	bl	80036e0 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6918      	ldr	r0, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	f000 fa55 	bl	8003944 <MQTTSerialize_connect>
 800349a:	6738      	str	r0, [r7, #112]	@ 0x70
 800349c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800349e:	2b00      	cmp	r3, #0
 80034a0:	dd32      	ble.n	8003508 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 80034a2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034a6:	461a      	mov	r2, r3
 80034a8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fc45 	bl	8002d3a <sendPacket>
 80034b0:	6778      	str	r0, [r7, #116]	@ 0x74
 80034b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d129      	bne.n	800350c <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 80034b8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034bc:	461a      	mov	r2, r3
 80034be:	2102      	movs	r1, #2
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff8c 	bl	80033de <waitfor>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d117      	bne.n	80034fc <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 80034cc:	23ff      	movs	r3, #255	@ 0xff
 80034ce:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f107 010f 	add.w	r1, r7, #15
 80034e0:	f107 000e 	add.w	r0, r7, #14
 80034e4:	f000 fb1a 	bl	8003b1c <MQTTDeserialize_connack>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d102      	bne.n	80034f4 <MQTTConnect+0xd8>
            rc = connack_rc;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80034f2:	e00c      	b.n	800350e <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
 80034f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80034fa:	e008      	b.n	800350e <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	677b      	str	r3, [r7, #116]	@ 0x74
 8003502:	e004      	b.n	800350e <MQTTConnect+0xf2>
		goto exit;
 8003504:	bf00      	nop
 8003506:	e002      	b.n	800350e <MQTTConnect+0xf2>
        goto exit;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800350c:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800350e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <MQTTConnect+0xfe>
        c->isconnected = 1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800351a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 800351c:	4618      	mov	r0, r3
 800351e:	3778      	adds	r7, #120	@ 0x78
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	080093d8 	.word	0x080093d8

08003528 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8003528:	b5b0      	push	{r4, r5, r7, lr}
 800352a:	b094      	sub	sp, #80	@ 0x50
 800352c:	af04      	add	r7, sp, #16
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Timer timer;
    int len = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
    MQTTString topic = MQTTString_initializer;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
 800354a:	2300      	movs	r3, #0
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
    topic.cstring = (char *)topicFilter;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8083 	beq.w	8003666 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8003560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f888 	bl	800367a <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f8a1 	bl	80036bc <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	691c      	ldr	r4, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	461d      	mov	r5, r3
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff fbc0 	bl	8002d0a <getNextPacketId>
 800358a:	4603      	mov	r3, r0
 800358c:	b29a      	uxth	r2, r3
 800358e:	f107 031f 	add.w	r3, r7, #31
 8003592:	9302      	str	r3, [sp, #8]
 8003594:	f107 0320 	add.w	r3, r7, #32
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	2301      	movs	r3, #1
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	2200      	movs	r2, #0
 80035a2:	4629      	mov	r1, r5
 80035a4:	4620      	mov	r0, r4
 80035a6:	f000 fe90 	bl	80042ca <MQTTSerialize_subscribe>
 80035aa:	6378      	str	r0, [r7, #52]	@ 0x34
    if (len <= 0)
 80035ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dd5b      	ble.n	800366a <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 80035b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035b6:	461a      	mov	r2, r3
 80035b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff fbbd 	bl	8002d3a <sendPacket>
 80035c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80035c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d152      	bne.n	800366e <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80035c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035cc:	461a      	mov	r2, r3
 80035ce:	2109      	movs	r1, #9
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff ff04 	bl	80033de <waitfor>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d140      	bne.n	800365e <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	68d2      	ldr	r2, [r2, #12]
 80035ee:	4614      	mov	r4, r2
 80035f0:	f107 0114 	add.w	r1, r7, #20
 80035f4:	f107 0218 	add.w	r2, r7, #24
 80035f8:	f107 0012 	add.w	r0, r7, #18
 80035fc:	9401      	str	r4, [sp, #4]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	460b      	mov	r3, r1
 8003602:	2101      	movs	r1, #1
 8003604:	f000 fedb 	bl	80043be <MQTTDeserialize_suback>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (rc != 0x80)
 8003612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003614:	2b80      	cmp	r3, #128	@ 0x80
 8003616:	d02b      	beq.n	8003670 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003618:	2300      	movs	r3, #0
 800361a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800361c:	e01b      	b.n	8003656 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003622:	3304      	adds	r3, #4
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d110      	bne.n	8003650 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003632:	3304      	adds	r3, #4
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003640:	3304      	adds	r3, #4
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	609a      	str	r2, [r3, #8]
                    rc = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800364e:	e00f      	b.n	8003670 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003652:	3301      	adds	r3, #1
 8003654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	2b04      	cmp	r3, #4
 800365a:	dde0      	ble.n	800361e <MQTTSubscribe+0xf6>
 800365c:	e008      	b.n	8003670 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003664:	e004      	b.n	8003670 <MQTTSubscribe+0x148>
		goto exit;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <MQTTSubscribe+0x148>
        goto exit;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 800366e:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8003670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003672:	4618      	mov	r0, r3
 8003674:	3740      	adds	r7, #64	@ 0x40
 8003676:	46bd      	mov	sp, r7
 8003678:	bdb0      	pop	{r4, r5, r7, pc}

0800367a <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	605a      	str	r2, [r3, #4]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <TimerIsExpired+0x24>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	0fdb      	lsrs	r3, r3, #31
 80036ac:	b2db      	uxtb	r3, r3
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	2000121c 	.word	0x2000121c

080036bc <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80036c6:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <TimerCountdownMS+0x20>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	605a      	str	r2, [r3, #4]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	2000121c 	.word	0x2000121c

080036e0 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036f0:	fb03 f202 	mul.w	r2, r3, r2
 80036f4:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <TimerCountdown+0x28>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	605a      	str	r2, [r3, #4]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	2000121c 	.word	0x2000121c

0800370c <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <TimerLeftMS+0x24>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	2000121c 	.word	0x2000121c

08003734 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a06      	ldr	r2, [pc, #24]	@ (8003760 <NewNetwork+0x2c>)
 8003748:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <NewNetwork+0x30>)
 800374e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a05      	ldr	r2, [pc, #20]	@ (8003768 <NewNetwork+0x34>)
 8003754:	60da      	str	r2, [r3, #12]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	0800376d 	.word	0x0800376d
 8003764:	080037c7 	.word	0x080037c7
 8003768:	0800380f 	.word	0x0800380f

0800376c <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	3301      	adds	r3, #1
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fe7f 	bl	800448c <WIZCHIP_READ>
 800378e:	4603      	mov	r3, r0
 8003790:	2b17      	cmp	r3, #23
 8003792:	d113      	bne.n	80037bc <w5x00_read+0x50>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f819 	bl	80047d2 <getSn_RX_RSR>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	b292      	uxth	r2, r2
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 fd1c 	bl	80051f0 <recv>
 80037b8:	4603      	mov	r3, r0
 80037ba:	e000      	b.n	80037be <w5x00_read+0x52>

	return SOCK_ERROR;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	3301      	adds	r3, #1
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fe52 	bl	800448c <WIZCHIP_READ>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b17      	cmp	r3, #23
 80037ec:	d10a      	bne.n	8003804 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	b292      	uxth	r2, r2
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fc00 	bl	8005000 <send>
 8003800:	4603      	mov	r3, r0
 8003802:	e000      	b.n	8003806 <w5x00_write+0x40>

	return SOCK_ERROR;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fb79 	bl	8004f14 <disconnect>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8003838:	f243 0339 	movw	r3, #12345	@ 0x3039
 800383c:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	b2d8      	uxtb	r0, r3
 8003844:	8afa      	ldrh	r2, [r7, #22]
 8003846:	2300      	movs	r3, #0
 8003848:	2101      	movs	r1, #1
 800384a:	f001 f905 	bl	8004a58 <socket>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800385a:	2300      	movs	r3, #0
 800385c:	e00d      	b.n	800387a <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	88fa      	ldrh	r2, [r7, #6]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fa77 	bl	8004d5c <connect>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <ConnectNetwork+0x50>

	return SOCK_OK;
 8003878:	2301      	movs	r3, #1
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8003882:	b590      	push	{r4, r7, lr}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	int len = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7a1b      	ldrb	r3, [r3, #8]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d102      	bne.n	800389c <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8003896:	230c      	movs	r3, #12
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e005      	b.n	80038a8 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	7a1b      	ldrb	r3, [r3, #8]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d101      	bne.n	80038a8 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80038a4:	230a      	movs	r3, #10
 80038a6:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	330c      	adds	r3, #12
 80038ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038b0:	f000 fc3f 	bl	8004132 <MQTTstrlen>
 80038b4:	4603      	mov	r3, r0
 80038b6:	3302      	adds	r3, #2
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7edb      	ldrb	r3, [r3, #27]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d013      	beq.n	80038ee <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3324      	adds	r3, #36	@ 0x24
 80038ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038ce:	f000 fc30 	bl	8004132 <MQTTstrlen>
 80038d2:	4603      	mov	r3, r0
 80038d4:	1c9c      	adds	r4, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3330      	adds	r3, #48	@ 0x30
 80038da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038de:	f000 fc28 	bl	8004132 <MQTTstrlen>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4423      	add	r3, r4
 80038e6:	3302      	adds	r3, #2
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <MQTTSerialize_connectLength+0x7c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3340      	adds	r3, #64	@ 0x40
 8003902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003906:	f000 fc14 	bl	8004132 <MQTTstrlen>
 800390a:	4603      	mov	r3, r0
 800390c:	3302      	adds	r3, #2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <MQTTSerialize_connectLength+0xa2>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	334c      	adds	r3, #76	@ 0x4c
 8003928:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800392c:	f000 fc01 	bl	8004132 <MQTTstrlen>
 8003930:	4603      	mov	r3, r0
 8003932:	3302      	adds	r3, #2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}

08003944 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff8b 	bl	8003882 <MQTTSerialize_connectLength>
 800396c:	6238      	str	r0, [r7, #32]
 800396e:	6a38      	ldr	r0, [r7, #32]
 8003970:	f000 fa98 	bl	8003ea4 <MQTTPacket_len>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4293      	cmp	r3, r2
 800397a:	da03      	bge.n	8003984 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800397c:	f06f 0301 	mvn.w	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8003982:	e0c2      	b.n	8003b0a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8003988:	7e3b      	ldrb	r3, [r7, #24]
 800398a:	2201      	movs	r2, #1
 800398c:	f362 1307 	bfi	r3, r2, #4, #4
 8003990:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8003992:	7e3a      	ldrb	r2, [r7, #24]
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fb0f 	bl	8003fbe <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	6a39      	ldr	r1, [r7, #32]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa12 	bl	8003dce <MQTTPacket_encode>
 80039aa:	4602      	mov	r2, r0
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7a1b      	ldrb	r3, [r3, #8]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d10c      	bne.n	80039d4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80039ba:	f107 031c 	add.w	r3, r7, #28
 80039be:	4955      	ldr	r1, [pc, #340]	@ (8003b14 <MQTTSerialize_connect+0x1d0>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fb38 	bl	8004036 <writeCString>
		writeChar(&ptr, (char) 4);
 80039c6:	f107 031c 	add.w	r3, r7, #28
 80039ca:	2104      	movs	r1, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 faf6 	bl	8003fbe <writeChar>
 80039d2:	e00b      	b.n	80039ec <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80039d4:	f107 031c 	add.w	r3, r7, #28
 80039d8:	494f      	ldr	r1, [pc, #316]	@ (8003b18 <MQTTSerialize_connect+0x1d4>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fb2b 	bl	8004036 <writeCString>
		writeChar(&ptr, (char) 3);
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	2103      	movs	r1, #3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fae9 	bl	8003fbe <writeChar>
	}

	flags.all = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7e9b      	ldrb	r3, [r3, #26]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	7d3b      	ldrb	r3, [r7, #20]
 80039fc:	f362 0341 	bfi	r3, r2, #1, #1
 8003a00:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7edb      	ldrb	r3, [r3, #27]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf14      	ite	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	2300      	moveq	r3, #0
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	7d3b      	ldrb	r3, [r7, #20]
 8003a12:	f362 0382 	bfi	r3, r2, #2, #1
 8003a16:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8003a18:	7d3b      	ldrb	r3, [r7, #20]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	7d3b      	ldrb	r3, [r7, #20]
 8003a32:	f362 03c4 	bfi	r3, r2, #3, #2
 8003a36:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	7d3b      	ldrb	r3, [r7, #20]
 8003a46:	f362 1345 	bfi	r3, r2, #5, #1
 8003a4a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <MQTTSerialize_connect+0x118>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8003a5c:	7d3b      	ldrb	r3, [r7, #20]
 8003a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a62:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <MQTTSerialize_connect+0x130>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8003a74:	7d3b      	ldrb	r3, [r7, #20]
 8003a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a7a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8003a7c:	7d3a      	ldrb	r2, [r7, #20]
 8003a7e:	f107 031c 	add.w	r3, r7, #28
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fa9a 	bl	8003fbe <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8b1b      	ldrh	r3, [r3, #24]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 faa5 	bl	8003fe6 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f107 001c 	add.w	r0, r7, #28
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aa6:	f000 fae5 	bl	8004074 <writeMQTTString>
	if (options->willFlag)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	7edb      	ldrb	r3, [r3, #27]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f107 001c 	add.w	r0, r7, #28
 8003ab8:	3324      	adds	r3, #36	@ 0x24
 8003aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003abc:	f000 fada 	bl	8004074 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f107 001c 	add.w	r0, r7, #28
 8003ac6:	3330      	adds	r3, #48	@ 0x30
 8003ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aca:	f000 fad3 	bl	8004074 <writeMQTTString>
	}
	if (flags.bits.username)
 8003ace:	7d3b      	ldrb	r3, [r7, #20]
 8003ad0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f107 001c 	add.w	r0, r7, #28
 8003ae0:	3340      	adds	r3, #64	@ 0x40
 8003ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae4:	f000 fac6 	bl	8004074 <writeMQTTString>
	if (flags.bits.password)
 8003ae8:	7d3b      	ldrb	r3, [r7, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f107 001c 	add.w	r0, r7, #28
 8003afa:	334c      	adds	r3, #76	@ 0x4c
 8003afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afe:	f000 fab9 	bl	8004074 <writeMQTTString>

	rc = ptr - buf;
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3728      	adds	r7, #40	@ 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08009430 	.word	0x08009430
 8003b18:	08009438 	.word	0x08009438

08003b1c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8003b3e:	f107 0318 	add.w	r3, r7, #24
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fa28 	bl	8003f98 <readChar>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8003b4c:	7f3b      	ldrb	r3, [r7, #28]
 8003b4e:	f023 030f 	bic.w	r3, r3, #15
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d12e      	bne.n	8003bb6 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f107 0214 	add.w	r2, r7, #20
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f9e9 	bl	8003f38 <MQTTPacket_decodeBuf>
 8003b66:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4413      	add	r3, r2
 8003b76:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	6a3a      	ldr	r2, [r7, #32]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	dd1b      	ble.n	8003bba <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8003b82:	f107 0318 	add.w	r3, r7, #24
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fa06 	bl	8003f98 <readChar>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8003b90:	7c3b      	ldrb	r3, [r7, #16]
 8003b92:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8003b9e:	f107 0318 	add.w	r3, r7, #24
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f9f8 	bl	8003f98 <readChar>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb4:	e002      	b.n	8003bbc <MQTTDeserialize_connack+0xa0>
		goto exit;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <MQTTDeserialize_connack+0xa0>
		goto exit;
 8003bba:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3728      	adds	r7, #40	@ 0x28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b088      	sub	sp, #32
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bdc:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	dc03      	bgt.n	8003bf0 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8003be8:	f06f 0301 	mvn.w	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
		goto exit;
 8003bee:	e01d      	b.n	8003c2c <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	7e3b      	ldrb	r3, [r7, #24]
 8003bfe:	f362 1307 	bfi	r3, r2, #4, #4
 8003c02:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8003c04:	7e3a      	ldrb	r2, [r7, #24]
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f9d6 	bl	8003fbe <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f8d9 	bl	8003dce <MQTTPacket_encode>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8003c40:	220c      	movs	r2, #12
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ffbe 	bl	8003bc6 <MQTTSerialize_zero>
 8003c4a:	4603      	mov	r3, r0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	@ 0x28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8003c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c68:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8003c76:	f107 0318 	add.w	r3, r7, #24
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f98c 	bl	8003f98 <readChar>
 8003c80:	4603      	mov	r3, r0
 8003c82:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8003c84:	7f3b      	ldrb	r3, [r7, #28]
 8003c86:	f023 030f 	bic.w	r3, r3, #15
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b30      	cmp	r3, #48	@ 0x30
 8003c8e:	d14b      	bne.n	8003d28 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8003c90:	7f3b      	ldrb	r3, [r7, #28]
 8003c92:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8003c9e:	7f3b      	ldrb	r3, [r7, #28]
 8003ca0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8003cac:	7f3b      	ldrb	r3, [r7, #28]
 8003cae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f107 0214 	add.w	r2, r7, #20
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f938 	bl	8003f38 <MQTTPacket_decodeBuf>
 8003cc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	4413      	add	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8003cda:	f107 0318 	add.w	r3, r7, #24
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ce4:	f000 f9f4 	bl	80040d0 <readMQTTLenString>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01e      	beq.n	8003d2c <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db19      	blt.n	8003d2c <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	dd08      	ble.n	8003d12 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8003d00:	f107 0318 	add.w	r3, r7, #24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f92d 	bl	8003f64 <readInt>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	1ad2      	subs	r2, r2, r3
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d20:	601a      	str	r2, [r3, #0]
	rc = 1;
 8003d22:	2301      	movs	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d26:	e002      	b.n	8003d2e <MQTTDeserialize_publish+0xda>
		goto exit;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <MQTTDeserialize_publish+0xda>
		goto exit;
 8003d2c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3728      	adds	r7, #40	@ 0x28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	@ 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8003d56:	f107 0318 	add.w	r3, r7, #24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f91c 	bl	8003f98 <readChar>
 8003d60:	4603      	mov	r3, r0
 8003d62:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8003d64:	7f3b      	ldrb	r3, [r7, #28]
 8003d66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8003d72:	7f3b      	ldrb	r3, [r7, #28]
 8003d74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f107 0214 	add.w	r2, r7, #20
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f8d5 	bl	8003f38 <MQTTPacket_decodeBuf>
 8003d8e:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4413      	add	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	6a3a      	ldr	r2, [r7, #32]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	dd0b      	ble.n	8003dc2 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8003daa:	f107 0318 	add.w	r3, r7, #24
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f8d8 	bl	8003f64 <readInt>
 8003db4:	4603      	mov	r3, r0
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc0:	e000      	b.n	8003dc4 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8003dc2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3728      	adds	r7, #40	@ 0x28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	425a      	negs	r2, r3
 8003de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003de8:	bf58      	it	pl
 8003dea:	4253      	negpl	r3, r2
 8003dec:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	da00      	bge.n	8003df6 <MQTTPacket_encode+0x28>
 8003df4:	337f      	adds	r3, #127	@ 0x7f
 8003df6:	11db      	asrs	r3, r3, #7
 8003df8:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	dd03      	ble.n	8003e08 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8003e00:	7afb      	ldrb	r3, [r7, #11]
 8003e02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e06:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	60fa      	str	r2, [r7, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	7afa      	ldrb	r2, [r7, #11]
 8003e16:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dcde      	bgt.n	8003ddc <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
	int len = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	dd03      	ble.n	8003e5c <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	60fb      	str	r3, [r7, #12]
			goto exit;
 8003e5a:	e01d      	b.n	8003e98 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8003e5c:	f107 020b 	add.w	r2, r7, #11
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2101      	movs	r1, #1
 8003e64:	4610      	mov	r0, r2
 8003e66:	4798      	blx	r3
 8003e68:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d112      	bne.n	8003e96 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	7afb      	ldrb	r3, [r7, #11]
 8003e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	441a      	add	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	01db      	lsls	r3, r3, #7
 8003e8a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8003e8c:	7afb      	ldrb	r3, [r7, #11]
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dbd6      	blt.n	8003e42 <MQTTPacket_decode+0x18>
exit:
 8003e94:	e000      	b.n	8003e98 <MQTTPacket_decode+0x6e>
			goto exit;
 8003e96:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8003e98:	693b      	ldr	r3, [r7, #16]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eb6:	dc03      	bgt.n	8003ec0 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	e012      	b.n	8003ee6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec6:	da03      	bge.n	8003ed0 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3302      	adds	r3, #2
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	e00a      	b.n	8003ee6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a08      	ldr	r2, [pc, #32]	@ (8003ef4 <MQTTPacket_len+0x50>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	dc03      	bgt.n	8003ee0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3303      	adds	r3, #3
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	e002      	b.n	8003ee6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	607b      	str	r3, [r7, #4]
	return rem_len;
 8003ee6:	687b      	ldr	r3, [r7, #4]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	001ffffe 	.word	0x001ffffe

08003ef8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e00a      	b.n	8003f1e <bufchar+0x26>
		*c = *bufptr++;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <bufchar+0x3c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	4909      	ldr	r1, [pc, #36]	@ (8003f34 <bufchar+0x3c>)
 8003f10:	600a      	str	r2, [r1, #0]
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	dbf0      	blt.n	8003f08 <bufchar+0x10>
	return count;
 8003f26:	683b      	ldr	r3, [r7, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20001220 	.word	0x20001220

08003f38 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8003f42:	4a06      	ldr	r2, [pc, #24]	@ (8003f5c <MQTTPacket_decodeBuf+0x24>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	4805      	ldr	r0, [pc, #20]	@ (8003f60 <MQTTPacket_decodeBuf+0x28>)
 8003f4c:	f7ff ff6d 	bl	8003e2a <MQTTPacket_decode>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20001220 	.word	0x20001220
 8003f60:	08003ef9 	.word	0x08003ef9

08003f64 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	3201      	adds	r2, #1
 8003f7c:	7812      	ldrb	r2, [r2, #0]
 8003f7e:	4413      	add	r3, r2
 8003f80:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]
	return len;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
	return c;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da00      	bge.n	8003ff8 <writeInt+0x12>
 8003ff6:	33ff      	adds	r3, #255	@ 0xff
 8003ff8:	121b      	asrs	r3, r3, #8
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	425a      	negs	r2, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	bf58      	it	pl
 8004018:	4253      	negpl	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8004040:	6838      	ldr	r0, [r7, #0]
 8004042:	f7fc f883 	bl	800014c <strlen>
 8004046:	4603      	mov	r3, r0
 8004048:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800404a:	68f9      	ldr	r1, [r7, #12]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ffca 	bl	8003fe6 <writeInt>
	memcpy(*pptr, string, len);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	6839      	ldr	r1, [r7, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f004 f907 	bl	800826e <memcpy>
	*pptr += len;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	4638      	mov	r0, r7
 800407e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	dd12      	ble.n	80040ae <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4619      	mov	r1, r3
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff ffaa 	bl	8003fe6 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 f8e7 	bl	800826e <memcpy>
		*pptr += mqttstring.lenstring.len;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	441a      	add	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80040ac:	e00c      	b.n	80040c8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff ffbc 	bl	8004036 <writeCString>
}
 80040be:	e003      	b.n	80040c8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80040c0:	2100      	movs	r1, #0
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff ff8f 	bl	8003fe6 <writeInt>
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	dd1a      	ble.n	8004122 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80040ec:	68b8      	ldr	r0, [r7, #8]
 80040ee:	f7ff ff39 	bl	8003f64 <readInt>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6852      	ldr	r2, [r2, #4]
 8004100:	4413      	add	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d30c      	bcc.n	8004122 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	6852      	ldr	r2, [r2, #4]
 8004118:	441a      	add	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8004128:	697b      	ldr	r3, [r7, #20]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fb fffe 	bl	800014c <strlen>
 8004150:	4603      	mov	r3, r0
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e001      	b.n	800415a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	617b      	str	r3, [r7, #20]
	return rc;
 800415a:	697b      	ldr	r3, [r7, #20]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
		blen = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7fb ffdf 	bl	800014c <strlen>
 800418e:	4603      	mov	r3, r0
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e005      	b.n	80041a0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 80041a0:	6838      	ldr	r0, [r7, #0]
 80041a2:	f7fb ffd3 	bl	800014c <strlen>
 80041a6:	4603      	mov	r3, r0
 80041a8:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d10a      	bne.n	80041c8 <MQTTPacket_equals+0x64>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	461a      	mov	r2, r3
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	6938      	ldr	r0, [r7, #16]
 80041ba:	f003 ffb8 	bl	800812e <strncmp>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <MQTTPacket_equals+0x64>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <MQTTPacket_equals+0x66>
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b088      	sub	sp, #32
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	4611      	mov	r1, r2
 80041de:	461a      	mov	r2, r3
 80041e0:	460b      	mov	r3, r1
 80041e2:	71fb      	strb	r3, [r7, #7]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	dc03      	bgt.n	8004202 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80041fa:	f06f 0301 	mvn.w	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
		goto exit;
 8004200:	e037      	b.n	8004272 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	b2da      	uxtb	r2, r3
 800420a:	7e3b      	ldrb	r3, [r7, #24]
 800420c:	f362 1307 	bfi	r3, r2, #4, #4
 8004210:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8004212:	79bb      	ldrb	r3, [r7, #6]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	b2da      	uxtb	r2, r3
 800421a:	7e3b      	ldrb	r3, [r7, #24]
 800421c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004220:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b06      	cmp	r3, #6
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	7e3b      	ldrb	r3, [r7, #24]
 8004236:	f362 0342 	bfi	r3, r2, #1, #2
 800423a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800423c:	7e3a      	ldrb	r2, [r7, #24]
 800423e:	f107 0314 	add.w	r3, r7, #20
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff feba 	bl	8003fbe <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fdbd 	bl	8003dce <MQTTPacket_encode>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	4413      	add	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800425c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff febe 	bl	8003fe6 <writeInt>
	rc = ptr - buf;
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004272:	69fb      	ldr	r3, [r7, #28]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8004286:	2302      	movs	r3, #2
 8004288:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	e013      	b.n	80042b8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	461a      	mov	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4413      	add	r3, r2
 80042a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042a4:	f7ff ff45 	bl	8004132 <MQTTstrlen>
 80042a8:	4603      	mov	r3, r0
 80042aa:	3303      	adds	r3, #3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4413      	add	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	dbe7      	blt.n	8004290 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80042c0:	68bb      	ldr	r3, [r7, #8]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	@ 0x28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	4611      	mov	r1, r2
 80042d6:	461a      	mov	r2, r3
 80042d8:	460b      	mov	r3, r1
 80042da:	71fb      	strb	r3, [r7, #7]
 80042dc:	4613      	mov	r3, r2
 80042de:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80042f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042f8:	f7ff ffc0 	bl	800427c <MQTTSerialize_subscribeLength>
 80042fc:	61f8      	str	r0, [r7, #28]
 80042fe:	69f8      	ldr	r0, [r7, #28]
 8004300:	f7ff fdd0 	bl	8003ea4 <MQTTPacket_len>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4293      	cmp	r3, r2
 800430a:	da03      	bge.n	8004314 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800430c:	f06f 0301 	mvn.w	r3, #1
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8004312:	e04f      	b.n	80043b4 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8004318:	7d3b      	ldrb	r3, [r7, #20]
 800431a:	2208      	movs	r2, #8
 800431c:	f362 1307 	bfi	r3, r2, #4, #4
 8004320:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	7d3b      	ldrb	r3, [r7, #20]
 800432c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004330:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8004332:	7d3b      	ldrb	r3, [r7, #20]
 8004334:	2201      	movs	r2, #1
 8004336:	f362 0342 	bfi	r3, r2, #1, #2
 800433a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800433c:	7d3a      	ldrb	r2, [r7, #20]
 800433e:	f107 0318 	add.w	r3, r7, #24
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fe3a 	bl	8003fbe <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	69f9      	ldr	r1, [r7, #28]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fd3d 	bl	8003dce <MQTTPacket_encode>
 8004354:	4602      	mov	r2, r0
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4413      	add	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800435c:	88ba      	ldrh	r2, [r7, #4]
 800435e:	f107 0318 	add.w	r3, r7, #24
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fe3e 	bl	8003fe6 <writeInt>

	for (i = 0; i < count; ++i)
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	e019      	b.n	80043a4 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8004370:	6a3a      	ldr	r2, [r7, #32]
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	461a      	mov	r2, r3
 800437c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437e:	4413      	add	r3, r2
 8004380:	f107 0018 	add.w	r0, r7, #24
 8004384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004386:	f7ff fe75 	bl	8004074 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800438e:	4413      	add	r3, r2
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	f107 0318 	add.w	r3, r7, #24
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fe10 	bl	8003fbe <writeChar>
	for (i = 0; i < count; ++i)
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	3301      	adds	r3, #1
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	429a      	cmp	r2, r3
 80043aa:	dbe1      	blt.n	8004370 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3728      	adds	r7, #40	@ 0x28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08a      	sub	sp, #40	@ 0x28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80043cc:	2300      	movs	r3, #0
 80043ce:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80043dc:	f107 0318 	add.w	r3, r7, #24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fdd9 	bl	8003f98 <readChar>
 80043e6:	4603      	mov	r3, r0
 80043e8:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80043ea:	7f3b      	ldrb	r3, [r7, #28]
 80043ec:	f023 030f 	bic.w	r3, r3, #15
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b90      	cmp	r3, #144	@ 0x90
 80043f4:	d142      	bne.n	800447c <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f107 0214 	add.w	r2, r7, #20
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fd9a 	bl	8003f38 <MQTTPacket_decodeBuf>
 8004404:	6278      	str	r0, [r7, #36]	@ 0x24
 8004406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4413      	add	r3, r2
 8004414:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6a3a      	ldr	r2, [r7, #32]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	dd2f      	ble.n	8004480 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8004420:	f107 0318 	add.w	r3, r7, #24
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fd9d 	bl	8003f64 <readInt>
 800442a:	4603      	mov	r3, r0
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8004438:	e019      	b.n	800446e <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	da03      	bge.n	800444c <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
			goto exit;
 800444a:	e01a      	b.n	8004482 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800444c:	f107 0318 	add.w	r3, r7, #24
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fda1 	bl	8003f98 <readChar>
 8004456:	4603      	mov	r3, r0
 8004458:	4618      	mov	r0, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6011      	str	r1, [r2, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	4602      	mov	r2, r0
 800446c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	429a      	cmp	r2, r3
 8004474:	d8e1      	bhi.n	800443a <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
 800447a:	e002      	b.n	8004482 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8004480:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004484:	4618      	mov	r0, r3
 8004486:	3728      	adds	r7, #40	@ 0x28
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004494:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <WIZCHIP_READ+0x94>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4798      	blx	r3
   WIZCHIP.CS._select();
 800449a:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <WIZCHIP_READ+0x94>)
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80044a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <WIZCHIP_READ+0x94>)
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <WIZCHIP_READ+0x24>
 80044a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <WIZCHIP_READ+0x94>)
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d114      	bne.n	80044da <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80044b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <WIZCHIP_READ+0x94>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	0c12      	lsrs	r2, r2, #16
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	4610      	mov	r0, r2
 80044bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80044be:	4b18      	ldr	r3, [pc, #96]	@ (8004520 <WIZCHIP_READ+0x94>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	0a12      	lsrs	r2, r2, #8
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	4610      	mov	r0, r2
 80044ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <WIZCHIP_READ+0x94>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
 80044d8:	e011      	b.n	80044fe <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80044f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <WIZCHIP_READ+0x94>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	f107 020c 	add.w	r2, r7, #12
 80044f8:	2103      	movs	r1, #3
 80044fa:	4610      	mov	r0, r2
 80044fc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80044fe:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <WIZCHIP_READ+0x94>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4798      	blx	r3
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004508:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <WIZCHIP_READ+0x94>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800450e:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <WIZCHIP_READ+0x94>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	4798      	blx	r3
   return ret;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000007c 	.word	0x2000007c

08004524 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004530:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004536:	4b21      	ldr	r3, [pc, #132]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004544:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d119      	bne.n	8004580 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800454c:	4b1b      	ldr	r3, [pc, #108]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	0c12      	lsrs	r2, r2, #16
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	4610      	mov	r0, r2
 8004558:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800455a:	4b18      	ldr	r3, [pc, #96]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	0a12      	lsrs	r2, r2, #8
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004568:	4b14      	ldr	r3, [pc, #80]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	4610      	mov	r0, r2
 8004572:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004574:	4b11      	ldr	r3, [pc, #68]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	4610      	mov	r0, r2
 800457c:	4798      	blx	r3
 800457e:	e013      	b.n	80045a8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	b2db      	uxtb	r3, r3
 8004586:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	b2db      	uxtb	r3, r3
 800458e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800459a:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	f107 020c 	add.w	r2, r7, #12
 80045a2:	2104      	movs	r1, #4
 80045a4:	4610      	mov	r0, r2
 80045a6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80045a8:	4b04      	ldr	r3, [pc, #16]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80045ae:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <WIZCHIP_WRITE+0x98>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4798      	blx	r3
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	2000007c 	.word	0x2000007c

080045c0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80045ce:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80045d4:	4b29      	ldr	r3, [pc, #164]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80045da:	4b28      	ldr	r3, [pc, #160]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <WIZCHIP_READ_BUF+0x2a>
 80045e2:	4b26      	ldr	r3, [pc, #152]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d126      	bne.n	8004638 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80045ea:	4b24      	ldr	r3, [pc, #144]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	0c12      	lsrs	r2, r2, #16
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	4610      	mov	r0, r2
 80045f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80045f8:	4b20      	ldr	r3, [pc, #128]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	0a12      	lsrs	r2, r2, #8
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	4610      	mov	r0, r2
 8004604:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004606:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	4610      	mov	r0, r2
 8004610:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004612:	2300      	movs	r3, #0
 8004614:	82fb      	strh	r3, [r7, #22]
 8004616:	e00a      	b.n	800462e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004618:	4b18      	ldr	r3, [pc, #96]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	8afa      	ldrh	r2, [r7, #22]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	188c      	adds	r4, r1, r2
 8004622:	4798      	blx	r3
 8004624:	4603      	mov	r3, r0
 8004626:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004628:	8afb      	ldrh	r3, [r7, #22]
 800462a:	3301      	adds	r3, #1
 800462c:	82fb      	strh	r3, [r7, #22]
 800462e:	8afa      	ldrh	r2, [r7, #22]
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3f0      	bcc.n	8004618 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004636:	e017      	b.n	8004668 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	b2db      	uxtb	r3, r3
 800463e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	b2db      	uxtb	r3, r3
 8004646:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	f107 0210 	add.w	r2, r7, #16
 8004656:	2103      	movs	r1, #3
 8004658:	4610      	mov	r0, r2
 800465a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800465c:	4b07      	ldr	r3, [pc, #28]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	4611      	mov	r1, r2
 8004664:	68b8      	ldr	r0, [r7, #8]
 8004666:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800466e:	4b03      	ldr	r3, [pc, #12]	@ (800467c <WIZCHIP_READ_BUF+0xbc>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	4798      	blx	r3
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	2000007c 	.word	0x2000007c

08004680 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800468e:	4b2b      	ldr	r3, [pc, #172]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004694:	4b29      	ldr	r3, [pc, #164]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80046a2:	4b26      	ldr	r3, [pc, #152]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d126      	bne.n	80046f8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80046aa:	4b24      	ldr	r3, [pc, #144]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	0c12      	lsrs	r2, r2, #16
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	4610      	mov	r0, r2
 80046b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80046b8:	4b20      	ldr	r3, [pc, #128]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	0a12      	lsrs	r2, r2, #8
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	4610      	mov	r0, r2
 80046c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80046c6:	4b1d      	ldr	r3, [pc, #116]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	4610      	mov	r0, r2
 80046d0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	82fb      	strh	r3, [r7, #22]
 80046d6:	e00a      	b.n	80046ee <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80046d8:	4b18      	ldr	r3, [pc, #96]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	8afa      	ldrh	r2, [r7, #22]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	440a      	add	r2, r1
 80046e2:	7812      	ldrb	r2, [r2, #0]
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80046e8:	8afb      	ldrh	r3, [r7, #22]
 80046ea:	3301      	adds	r3, #1
 80046ec:	82fb      	strh	r3, [r7, #22]
 80046ee:	8afa      	ldrh	r2, [r7, #22]
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d3f0      	bcc.n	80046d8 <WIZCHIP_WRITE_BUF+0x58>
 80046f6:	e017      	b.n	8004728 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0c1b      	lsrs	r3, r3, #16
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	b2db      	uxtb	r3, r3
 8004706:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	f107 0210 	add.w	r2, r7, #16
 8004716:	2103      	movs	r1, #3
 8004718:	4610      	mov	r0, r2
 800471a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800471c:	4b07      	ldr	r3, [pc, #28]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	4611      	mov	r1, r2
 8004724:	68b8      	ldr	r0, [r7, #8]
 8004726:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004728:	4b04      	ldr	r3, [pc, #16]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800472e:	4b03      	ldr	r3, [pc, #12]	@ (800473c <WIZCHIP_WRITE_BUF+0xbc>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	4798      	blx	r3
}
 8004734:	bf00      	nop
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	2000007c 	.word	0x2000007c

08004740 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800474a:	2300      	movs	r3, #0
 800474c:	81fb      	strh	r3, [r7, #14]
 800474e:	2300      	movs	r3, #0
 8004750:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	3301      	adds	r3, #1
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fe94 	bl	800448c <WIZCHIP_READ>
 8004764:	4603      	mov	r3, r0
 8004766:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004768:	89bb      	ldrh	r3, [r7, #12]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	b29c      	uxth	r4, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	3301      	adds	r3, #1
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fe86 	bl	800448c <WIZCHIP_READ>
 8004780:	4603      	mov	r3, r0
 8004782:	4423      	add	r3, r4
 8004784:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004786:	89bb      	ldrh	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	3301      	adds	r3, #1
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fe77 	bl	800448c <WIZCHIP_READ>
 800479e:	4603      	mov	r3, r0
 80047a0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	b29c      	uxth	r4, r3
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	3301      	adds	r3, #1
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fe69 	bl	800448c <WIZCHIP_READ>
 80047ba:	4603      	mov	r3, r0
 80047bc:	4423      	add	r3, r4
 80047be:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80047c0:	89fa      	ldrh	r2, [r7, #14]
 80047c2:	89bb      	ldrh	r3, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d1c4      	bne.n	8004752 <getSn_TX_FSR+0x12>
   return val;
 80047c8:	89fb      	ldrh	r3, [r7, #14]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}

080047d2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80047d2:	b590      	push	{r4, r7, lr}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80047dc:	2300      	movs	r3, #0
 80047de:	81fb      	strh	r3, [r7, #14]
 80047e0:	2300      	movs	r3, #0
 80047e2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	3301      	adds	r3, #1
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fe4b 	bl	800448c <WIZCHIP_READ>
 80047f6:	4603      	mov	r3, r0
 80047f8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80047fa:	89bb      	ldrh	r3, [r7, #12]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	b29c      	uxth	r4, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	3301      	adds	r3, #1
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fe3d 	bl	800448c <WIZCHIP_READ>
 8004812:	4603      	mov	r3, r0
 8004814:	4423      	add	r3, r4
 8004816:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004818:	89bb      	ldrh	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d019      	beq.n	8004852 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	3301      	adds	r3, #1
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fe2e 	bl	800448c <WIZCHIP_READ>
 8004830:	4603      	mov	r3, r0
 8004832:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004834:	89fb      	ldrh	r3, [r7, #14]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	b29c      	uxth	r4, r3
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	3301      	adds	r3, #1
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fe20 	bl	800448c <WIZCHIP_READ>
 800484c:	4603      	mov	r3, r0
 800484e:	4423      	add	r3, r4
 8004850:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004852:	89fa      	ldrh	r2, [r7, #14]
 8004854:	89bb      	ldrh	r3, [r7, #12]
 8004856:	429a      	cmp	r2, r3
 8004858:	d1c4      	bne.n	80047e4 <getSn_RX_RSR+0x12>
   return val;
 800485a:	89fb      	ldrh	r3, [r7, #14]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}

08004864 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	71fb      	strb	r3, [r7, #7]
 8004870:	4613      	mov	r3, r2
 8004872:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800487c:	88bb      	ldrh	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d046      	beq.n	8004910 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	3301      	adds	r3, #1
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fdfc 	bl	800448c <WIZCHIP_READ>
 8004894:	4603      	mov	r3, r0
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	b29c      	uxth	r4, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	3301      	adds	r3, #1
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fdf0 	bl	800448c <WIZCHIP_READ>
 80048ac:	4603      	mov	r3, r0
 80048ae:	4423      	add	r3, r4
 80048b0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80048b2:	89fb      	ldrh	r3, [r7, #14]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	79fa      	ldrb	r2, [r7, #7]
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	3202      	adds	r2, #2
 80048bc:	00d2      	lsls	r2, r2, #3
 80048be:	4413      	add	r3, r2
 80048c0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80048c2:	88bb      	ldrh	r3, [r7, #4]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	68b8      	ldr	r0, [r7, #8]
 80048ca:	f7ff fed9 	bl	8004680 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80048ce:	89fa      	ldrh	r2, [r7, #14]
 80048d0:	88bb      	ldrh	r3, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	3301      	adds	r3, #1
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80048e2:	461a      	mov	r2, r3
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7ff fe18 	bl	8004524 <WIZCHIP_WRITE>
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	3301      	adds	r3, #1
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8004900:	461a      	mov	r2, r3
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7ff fe0b 	bl	8004524 <WIZCHIP_WRITE>
 800490e:	e000      	b.n	8004912 <wiz_send_data+0xae>
   if(len == 0)  return;
 8004910:	bf00      	nop
}
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bd90      	pop	{r4, r7, pc}

08004918 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
 8004924:	4613      	mov	r3, r2
 8004926:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004930:	88bb      	ldrh	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d046      	beq.n	80049c4 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	3301      	adds	r3, #1
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fda2 	bl	800448c <WIZCHIP_READ>
 8004948:	4603      	mov	r3, r0
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	b29c      	uxth	r4, r3
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	3301      	adds	r3, #1
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fd96 	bl	800448c <WIZCHIP_READ>
 8004960:	4603      	mov	r3, r0
 8004962:	4423      	add	r3, r4
 8004964:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004966:	89fb      	ldrh	r3, [r7, #14]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	79fa      	ldrb	r2, [r7, #7]
 800496c:	0092      	lsls	r2, r2, #2
 800496e:	3203      	adds	r2, #3
 8004970:	00d2      	lsls	r2, r2, #3
 8004972:	4413      	add	r3, r2
 8004974:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004976:	88bb      	ldrh	r3, [r7, #4]
 8004978:	461a      	mov	r2, r3
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	68b8      	ldr	r0, [r7, #8]
 800497e:	f7ff fe1f 	bl	80045c0 <WIZCHIP_READ_BUF>
   ptr += len;
 8004982:	89fa      	ldrh	r2, [r7, #14]
 8004984:	88bb      	ldrh	r3, [r7, #4]
 8004986:	4413      	add	r3, r2
 8004988:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3301      	adds	r3, #1
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004996:	461a      	mov	r2, r3
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	b29b      	uxth	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f7ff fdbe 	bl	8004524 <WIZCHIP_WRITE>
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	3301      	adds	r3, #1
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80049b4:	461a      	mov	r2, r3
 80049b6:	89fb      	ldrh	r3, [r7, #14]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7ff fdb1 	bl	8004524 <WIZCHIP_WRITE>
 80049c2:	e000      	b.n	80049c6 <wiz_recv_data+0xae>
   if(len == 0) return;
 80049c4:	bf00      	nop
}
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}

080049cc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	460a      	mov	r2, r1
 80049d6:	71fb      	strb	r3, [r7, #7]
 80049d8:	4613      	mov	r3, r2
 80049da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3301      	adds	r3, #1
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fd4d 	bl	800448c <WIZCHIP_READ>
 80049f2:	4603      	mov	r3, r0
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	b29c      	uxth	r4, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	3301      	adds	r3, #1
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fd41 	bl	800448c <WIZCHIP_READ>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4423      	add	r3, r4
 8004a0e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004a10:	89fa      	ldrh	r2, [r7, #14]
 8004a12:	88bb      	ldrh	r3, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8004a24:	461a      	mov	r2, r3
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7ff fd77 	bl	8004524 <WIZCHIP_WRITE>
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004a42:	461a      	mov	r2, r3
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f7ff fd6a 	bl	8004524 <WIZCHIP_WRITE>
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd90      	pop	{r4, r7, pc}

08004a58 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	71fb      	strb	r3, [r7, #7]
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71bb      	strb	r3, [r7, #6]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	80bb      	strh	r3, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d902      	bls.n	8004a82 <socket+0x2a>
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	e0f0      	b.n	8004c64 <socket+0x20c>
	switch(protocol)
 8004a82:	79bb      	ldrb	r3, [r7, #6]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d005      	beq.n	8004a94 <socket+0x3c>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dd11      	ble.n	8004ab0 <socket+0x58>
 8004a8c:	3b02      	subs	r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d80e      	bhi.n	8004ab0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004a92:	e011      	b.n	8004ab8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8004a94:	f107 030c 	add.w	r3, r7, #12
 8004a98:	2204      	movs	r2, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004aa0:	f7ff fd8e 	bl	80045c0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <socket+0x5e>
 8004aaa:	f06f 0302 	mvn.w	r3, #2
 8004aae:	e0d9      	b.n	8004c64 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004ab0:	f06f 0304 	mvn.w	r3, #4
 8004ab4:	e0d6      	b.n	8004c64 <socket+0x20c>
	    break;
 8004ab6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <socket+0x70>
 8004ac2:	f06f 0305 	mvn.w	r3, #5
 8004ac6:	e0cd      	b.n	8004c64 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d028      	beq.n	8004b20 <socket+0xc8>
	{
   	switch(protocol)
 8004ace:	79bb      	ldrb	r3, [r7, #6]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d002      	beq.n	8004ada <socket+0x82>
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d008      	beq.n	8004aea <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004ad8:	e022      	b.n	8004b20 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11a      	bne.n	8004b1a <socket+0xc2>
 8004ae4:	f06f 0305 	mvn.w	r3, #5
 8004ae8:	e0bc      	b.n	8004c64 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d006      	beq.n	8004b02 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	db02      	blt.n	8004b02 <socket+0xaa>
 8004afc:	f06f 0305 	mvn.w	r3, #5
 8004b00:	e0b0      	b.n	8004c64 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db04      	blt.n	8004b1e <socket+0xc6>
 8004b14:	f06f 0305 	mvn.w	r3, #5
 8004b18:	e0a4      	b.n	8004c64 <socket+0x20c>
   	      break;
 8004b1a:	bf00      	nop
 8004b1c:	e000      	b.n	8004b20 <socket+0xc8>
   	      break;
 8004b1e:	bf00      	nop
   	}
   }
	close(sn);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f8ac 	bl	8004c80 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4618      	mov	r0, r3
 8004b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b36:	f023 030f 	bic.w	r3, r3, #15
 8004b3a:	b25a      	sxtb	r2, r3
 8004b3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	f7ff fcec 	bl	8004524 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004b4c:	88bb      	ldrh	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d110      	bne.n	8004b74 <socket+0x11c>
	{
	   port = sock_any_port++;
 8004b52:	4b46      	ldr	r3, [pc, #280]	@ (8004c6c <socket+0x214>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	b291      	uxth	r1, r2
 8004b5a:	4a44      	ldr	r2, [pc, #272]	@ (8004c6c <socket+0x214>)
 8004b5c:	8011      	strh	r1, [r2, #0]
 8004b5e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004b60:	4b42      	ldr	r3, [pc, #264]	@ (8004c6c <socket+0x214>)
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <socket+0x11c>
 8004b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c6c <socket+0x214>)
 8004b6e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8004b72:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3301      	adds	r3, #1
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b80:	461a      	mov	r2, r3
 8004b82:	88bb      	ldrh	r3, [r7, #4]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7ff fcc9 	bl	8004524 <WIZCHIP_WRITE>
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	3301      	adds	r3, #1
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	88bb      	ldrh	r3, [r7, #4]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7ff fcbc 	bl	8004524 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fcb2 	bl	8004524 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004bc0:	bf00      	nop
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fc5c 	bl	800448c <WIZCHIP_READ>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f3      	bne.n	8004bc2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	b21a      	sxth	r2, r3
 8004be8:	4b21      	ldr	r3, [pc, #132]	@ (8004c70 <socket+0x218>)
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c70 <socket+0x218>)
 8004bf6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	f003 0201 	and.w	r2, r3, #1
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	b21a      	sxth	r2, r3
 8004c06:	4b1a      	ldr	r3, [pc, #104]	@ (8004c70 <socket+0x218>)
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b21b      	sxth	r3, r3
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b21b      	sxth	r3, r3
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	4b17      	ldr	r3, [pc, #92]	@ (8004c70 <socket+0x218>)
 8004c14:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	b21b      	sxth	r3, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	b21a      	sxth	r2, r3
 8004c24:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <socket+0x21c>)
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b21b      	sxth	r3, r3
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b21b      	sxth	r3, r3
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <socket+0x21c>)
 8004c32:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	4a10      	ldr	r2, [pc, #64]	@ (8004c78 <socket+0x220>)
 8004c38:	2100      	movs	r1, #0
 8004c3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	4a0e      	ldr	r2, [pc, #56]	@ (8004c7c <socket+0x224>)
 8004c42:	2100      	movs	r1, #0
 8004c44:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004c46:	bf00      	nop
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fc19 	bl	800448c <WIZCHIP_READ>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f3      	beq.n	8004c48 <socket+0x1f0>
   return (int8_t)sn;
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd90      	pop	{r4, r7, pc}
 8004c6c:	20000078 	.word	0x20000078
 8004c70:	20001224 	.word	0x20001224
 8004c74:	20001226 	.word	0x20001226
 8004c78:	20001228 	.word	0x20001228
 8004c7c:	20001238 	.word	0x20001238

08004c80 <close>:

int8_t close(uint8_t sn)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d902      	bls.n	8004c96 <close+0x16>
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e055      	b.n	8004d42 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fc3d 	bl	8004524 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004caa:	bf00      	nop
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fbe7 	bl	800448c <WIZCHIP_READ>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f3      	bne.n	8004cac <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	3301      	adds	r3, #1
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004cd0:	211f      	movs	r1, #31
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fc26 	bl	8004524 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	4b19      	ldr	r3, [pc, #100]	@ (8004d4c <close+0xcc>)
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4013      	ands	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	4b16      	ldr	r3, [pc, #88]	@ (8004d4c <close+0xcc>)
 8004cf4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	b21a      	sxth	r2, r3
 8004d04:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <close+0xd0>)
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b21b      	sxth	r3, r3
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b21b      	sxth	r3, r3
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	4b0f      	ldr	r3, [pc, #60]	@ (8004d50 <close+0xd0>)
 8004d12:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	4a0f      	ldr	r2, [pc, #60]	@ (8004d54 <close+0xd4>)
 8004d18:	2100      	movs	r1, #0
 8004d1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	4a0d      	ldr	r2, [pc, #52]	@ (8004d58 <close+0xd8>)
 8004d22:	2100      	movs	r1, #0
 8004d24:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004d26:	bf00      	nop
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fba9 	bl	800448c <WIZCHIP_READ>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f3      	bne.n	8004d28 <close+0xa8>
	return SOCK_OK;
 8004d40:	2301      	movs	r3, #1
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20001224 	.word	0x20001224
 8004d50:	20001226 	.word	0x20001226
 8004d54:	20001228 	.word	0x20001228
 8004d58:	20001238 	.word	0x20001238

08004d5c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	6039      	str	r1, [r7, #0]
 8004d66:	71fb      	strb	r3, [r7, #7]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d902      	bls.n	8004d78 <connect+0x1c>
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
 8004d76:	e0c6      	b.n	8004f06 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fb83 	bl	800448c <WIZCHIP_READ>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d002      	beq.n	8004d96 <connect+0x3a>
 8004d90:	f06f 0304 	mvn.w	r3, #4
 8004d94:	e0b7      	b.n	8004f06 <connect+0x1aa>
   CHECK_SOCKINIT();
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fb72 	bl	800448c <WIZCHIP_READ>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b13      	cmp	r3, #19
 8004dac:	d002      	beq.n	8004db4 <connect+0x58>
 8004dae:	f06f 0302 	mvn.w	r3, #2
 8004db2:	e0a8      	b.n	8004f06 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	3201      	adds	r2, #1
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	3202      	adds	r2, #2
 8004dd0:	7812      	ldrb	r2, [r2, #0]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	3203      	adds	r2, #3
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	4413      	add	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d002      	beq.n	8004df2 <connect+0x96>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <connect+0x9c>
 8004df2:	f06f 030b 	mvn.w	r3, #11
 8004df6:	e086      	b.n	8004f06 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004df8:	88bb      	ldrh	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <connect+0xa8>
 8004dfe:	f06f 030a 	mvn.w	r3, #10
 8004e02:	e080      	b.n	8004f06 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	3301      	adds	r3, #1
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004e10:	2204      	movs	r2, #4
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fc33 	bl	8004680 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	3301      	adds	r3, #1
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e26:	461a      	mov	r2, r3
 8004e28:	88bb      	ldrh	r3, [r7, #4]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7ff fb76 	bl	8004524 <WIZCHIP_WRITE>
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004e44:	461a      	mov	r2, r3
 8004e46:	88bb      	ldrh	r3, [r7, #4]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7ff fb69 	bl	8004524 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	3301      	adds	r3, #1
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004e5e:	2104      	movs	r1, #4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fb5f 	bl	8004524 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004e66:	bf00      	nop
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fb09 	bl	800448c <WIZCHIP_READ>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f3      	bne.n	8004e68 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004e80:	4b23      	ldr	r3, [pc, #140]	@ (8004f10 <connect+0x1b4>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	fa42 f303 	asr.w	r3, r2, r3
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02b      	beq.n	8004eec <connect+0x190>
 8004e94:	2300      	movs	r3, #0
 8004e96:	e036      	b.n	8004f06 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff faf1 	bl	800448c <WIZCHIP_READ>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	3301      	adds	r3, #1
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004ec0:	2108      	movs	r1, #8
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fb2e 	bl	8004524 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004ec8:	f06f 030c 	mvn.w	r3, #12
 8004ecc:	e01b      	b.n	8004f06 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fad6 	bl	800448c <WIZCHIP_READ>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8004ee6:	f06f 0303 	mvn.w	r3, #3
 8004eea:	e00c      	b.n	8004f06 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fac7 	bl	800448c <WIZCHIP_READ>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b17      	cmp	r3, #23
 8004f02:	d1c9      	bne.n	8004e98 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004f04:	2301      	movs	r3, #1
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20001224 	.word	0x20001224

08004f14 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d902      	bls.n	8004f2a <disconnect+0x16>
 8004f24:	f04f 33ff 	mov.w	r3, #4294967295
 8004f28:	e062      	b.n	8004ff0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3301      	adds	r3, #1
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff faaa 	bl	800448c <WIZCHIP_READ>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d002      	beq.n	8004f48 <disconnect+0x34>
 8004f42:	f06f 0304 	mvn.w	r3, #4
 8004f46:	e053      	b.n	8004ff0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f54:	2108      	movs	r1, #8
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fae4 	bl	8004524 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004f5c:	bf00      	nop
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3301      	adds	r3, #1
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fa8e 	bl	800448c <WIZCHIP_READ>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f3      	bne.n	8004f5e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	b21a      	sxth	r2, r3
 8004f84:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff8 <disconnect+0xe4>)
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <disconnect+0xe4>)
 8004f92:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004f94:	4b19      	ldr	r3, [pc, #100]	@ (8004ffc <disconnect+0xe8>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	fa42 f303 	asr.w	r3, r2, r3
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d016      	beq.n	8004fd6 <disconnect+0xc2>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e021      	b.n	8004ff0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fa67 	bl	800448c <WIZCHIP_READ>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <disconnect+0xc2>
	   {
	      close(sn);
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fe58 	bl	8004c80 <close>
	      return SOCKERR_TIMEOUT;
 8004fd0:	f06f 030c 	mvn.w	r3, #12
 8004fd4:	e00c      	b.n	8004ff0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	3301      	adds	r3, #1
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fa52 	bl	800448c <WIZCHIP_READ>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1de      	bne.n	8004fac <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004fee:	2301      	movs	r3, #1
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20001226 	.word	0x20001226
 8004ffc:	20001224 	.word	0x20001224

08005000 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	71fb      	strb	r3, [r7, #7]
 800500c:	4613      	mov	r3, r2
 800500e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005014:	2300      	movs	r3, #0
 8005016:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d902      	bls.n	8005024 <send+0x24>
 800501e:	f04f 33ff 	mov.w	r3, #4294967295
 8005022:	e0dd      	b.n	80051e0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3301      	adds	r3, #1
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fa2d 	bl	800448c <WIZCHIP_READ>
 8005032:	4603      	mov	r3, r0
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	2b01      	cmp	r3, #1
 800503a:	d002      	beq.n	8005042 <send+0x42>
 800503c:	f06f 0304 	mvn.w	r3, #4
 8005040:	e0ce      	b.n	80051e0 <send+0x1e0>
   CHECK_SOCKDATA();
 8005042:	88bb      	ldrh	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <send+0x4e>
 8005048:	f06f 030d 	mvn.w	r3, #13
 800504c:	e0c8      	b.n	80051e0 <send+0x1e0>
   tmp = getSn_SR(sn);
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	3301      	adds	r3, #1
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fa16 	bl	800448c <WIZCHIP_READ>
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b17      	cmp	r3, #23
 8005068:	d005      	beq.n	8005076 <send+0x76>
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b1c      	cmp	r3, #28
 800506e:	d002      	beq.n	8005076 <send+0x76>
 8005070:	f06f 0306 	mvn.w	r3, #6
 8005074:	e0b4      	b.n	80051e0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8005076:	4b5c      	ldr	r3, [pc, #368]	@ (80051e8 <send+0x1e8>)
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	fa42 f303 	asr.w	r3, r2, r3
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d039      	beq.n	80050fe <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	3301      	adds	r3, #1
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff f9f8 	bl	800448c <WIZCHIP_READ>
 800509c:	4603      	mov	r3, r0
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d019      	beq.n	80050e2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	3301      	adds	r3, #1
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80050ba:	2110      	movs	r1, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fa31 	bl	8004524 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	2201      	movs	r2, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	b21b      	sxth	r3, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	b21a      	sxth	r2, r3
 80050d0:	4b45      	ldr	r3, [pc, #276]	@ (80051e8 <send+0x1e8>)
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b21b      	sxth	r3, r3
 80050d6:	4013      	ands	r3, r2
 80050d8:	b21b      	sxth	r3, r3
 80050da:	b29a      	uxth	r2, r3
 80050dc:	4b42      	ldr	r3, [pc, #264]	@ (80051e8 <send+0x1e8>)
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	e00d      	b.n	80050fe <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d006      	beq.n	80050fa <send+0xfa>
      {
         close(sn);
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fdc6 	bl	8004c80 <close>
         return SOCKERR_TIMEOUT;
 80050f4:	f06f 030c 	mvn.w	r3, #12
 80050f8:	e072      	b.n	80051e0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e070      	b.n	80051e0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	3301      	adds	r3, #1
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f9be 	bl	800448c <WIZCHIP_READ>
 8005110:	4603      	mov	r3, r0
 8005112:	029b      	lsls	r3, r3, #10
 8005114:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005116:	88ba      	ldrh	r2, [r7, #4]
 8005118:	89bb      	ldrh	r3, [r7, #12]
 800511a:	429a      	cmp	r2, r3
 800511c:	d901      	bls.n	8005122 <send+0x122>
 800511e:	89bb      	ldrh	r3, [r7, #12]
 8005120:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fb0b 	bl	8004740 <getSn_TX_FSR>
 800512a:	4603      	mov	r3, r0
 800512c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	3301      	adds	r3, #1
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff f9a6 	bl	800448c <WIZCHIP_READ>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b17      	cmp	r3, #23
 8005148:	d009      	beq.n	800515e <send+0x15e>
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	2b1c      	cmp	r3, #28
 800514e:	d006      	beq.n	800515e <send+0x15e>
      {
         close(sn);
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fd94 	bl	8004c80 <close>
         return SOCKERR_SOCKSTATUS;
 8005158:	f06f 0306 	mvn.w	r3, #6
 800515c:	e040      	b.n	80051e0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800515e:	4b23      	ldr	r3, [pc, #140]	@ (80051ec <send+0x1ec>)
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	fa42 f303 	asr.w	r3, r2, r3
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <send+0x17e>
 8005172:	88ba      	ldrh	r2, [r7, #4]
 8005174:	89bb      	ldrh	r3, [r7, #12]
 8005176:	429a      	cmp	r2, r3
 8005178:	d901      	bls.n	800517e <send+0x17e>
 800517a:	2300      	movs	r3, #0
 800517c:	e030      	b.n	80051e0 <send+0x1e0>
      if(len <= freesize) break;
 800517e:	88ba      	ldrh	r2, [r7, #4]
 8005180:	89bb      	ldrh	r3, [r7, #12]
 8005182:	429a      	cmp	r2, r3
 8005184:	d900      	bls.n	8005188 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8005186:	e7cc      	b.n	8005122 <send+0x122>
      if(len <= freesize) break;
 8005188:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800518a:	88ba      	ldrh	r2, [r7, #4]
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fb67 	bl	8004864 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	3301      	adds	r3, #1
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051a2:	2120      	movs	r1, #32
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff f9bd 	bl	8004524 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80051aa:	bf00      	nop
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	3301      	adds	r3, #1
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f967 	bl	800448c <WIZCHIP_READ>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f3      	bne.n	80051ac <send+0x1ac>
   sock_is_sending |= (1 << sn);
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2201      	movs	r2, #1
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	b21a      	sxth	r2, r3
 80051ce:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <send+0x1e8>)
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b21b      	sxth	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b21b      	sxth	r3, r3
 80051d8:	b29a      	uxth	r2, r3
 80051da:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <send+0x1e8>)
 80051dc:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80051de:	88bb      	ldrh	r3, [r7, #4]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20001226 	.word	0x20001226
 80051ec:	20001224 	.word	0x20001224

080051f0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	6039      	str	r1, [r7, #0]
 80051fa:	71fb      	strb	r3, [r7, #7]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	2b08      	cmp	r3, #8
 800520c:	d902      	bls.n	8005214 <recv+0x24>
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	e09b      	b.n	800534c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	3301      	adds	r3, #1
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff f935 	bl	800448c <WIZCHIP_READ>
 8005222:	4603      	mov	r3, r0
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	2b01      	cmp	r3, #1
 800522a:	d002      	beq.n	8005232 <recv+0x42>
 800522c:	f06f 0304 	mvn.w	r3, #4
 8005230:	e08c      	b.n	800534c <recv+0x15c>
   CHECK_SOCKDATA();
 8005232:	88bb      	ldrh	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <recv+0x4e>
 8005238:	f06f 030d 	mvn.w	r3, #13
 800523c:	e086      	b.n	800534c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	3301      	adds	r3, #1
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff f91e 	bl	800448c <WIZCHIP_READ>
 8005250:	4603      	mov	r3, r0
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005256:	89ba      	ldrh	r2, [r7, #12]
 8005258:	88bb      	ldrh	r3, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d201      	bcs.n	8005262 <recv+0x72>
 800525e:	89bb      	ldrh	r3, [r7, #12]
 8005260:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fab4 	bl	80047d2 <getSn_RX_RSR>
 800526a:	4603      	mov	r3, r0
 800526c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	3301      	adds	r3, #1
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff f906 	bl	800448c <WIZCHIP_READ>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b17      	cmp	r3, #23
 8005288:	d026      	beq.n	80052d8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b1c      	cmp	r3, #28
 800528e:	d11c      	bne.n	80052ca <recv+0xda>
            {
               if(recvsize != 0) break;
 8005290:	89bb      	ldrh	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d133      	bne.n	80052fe <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fa51 	bl	8004740 <getSn_TX_FSR>
 800529e:	4603      	mov	r3, r0
 80052a0:	461c      	mov	r4, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	3301      	adds	r3, #1
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f8ec 	bl	800448c <WIZCHIP_READ>
 80052b4:	4603      	mov	r3, r0
 80052b6:	029b      	lsls	r3, r3, #10
 80052b8:	429c      	cmp	r4, r3
 80052ba:	d10d      	bne.n	80052d8 <recv+0xe8>
               {
                  close(sn);
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fcde 	bl	8004c80 <close>
                  return SOCKERR_SOCKSTATUS;
 80052c4:	f06f 0306 	mvn.w	r3, #6
 80052c8:	e040      	b.n	800534c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fcd7 	bl	8004c80 <close>
               return SOCKERR_SOCKSTATUS;
 80052d2:	f06f 0306 	mvn.w	r3, #6
 80052d6:	e039      	b.n	800534c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80052d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <recv+0x164>)
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	fa42 f303 	asr.w	r3, r2, r3
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <recv+0x106>
 80052ec:	89bb      	ldrh	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <recv+0x106>
 80052f2:	2300      	movs	r3, #0
 80052f4:	e02a      	b.n	800534c <recv+0x15c>
         if(recvsize != 0) break;
 80052f6:	89bb      	ldrh	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 80052fc:	e7b1      	b.n	8005262 <recv+0x72>
               if(recvsize != 0) break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <recv+0x114>
         if(recvsize != 0) break;
 8005302:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005304:	89ba      	ldrh	r2, [r7, #12]
 8005306:	88bb      	ldrh	r3, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d201      	bcs.n	8005310 <recv+0x120>
 800530c:	89bb      	ldrh	r3, [r7, #12]
 800530e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005310:	88ba      	ldrh	r2, [r7, #4]
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fafe 	bl	8004918 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	3301      	adds	r3, #1
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005328:	2140      	movs	r1, #64	@ 0x40
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff f8fa 	bl	8004524 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005330:	bf00      	nop
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	3301      	adds	r3, #1
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff f8a4 	bl	800448c <WIZCHIP_READ>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f3      	bne.n	8005332 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800534a:	88bb      	ldrh	r3, [r7, #4]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	bd90      	pop	{r4, r7, pc}
 8005354:	20001224 	.word	0x20001224

08005358 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607b      	str	r3, [r7, #4]
 8005362:	4603      	mov	r3, r0
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	4613      	mov	r3, r2
 8005368:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d902      	bls.n	800537e <sendto+0x26>
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	e11a      	b.n	80055b4 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	3301      	adds	r3, #1
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff f880 	bl	800448c <WIZCHIP_READ>
 800538c:	4603      	mov	r3, r0
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	3b02      	subs	r3, #2
 8005394:	2b02      	cmp	r3, #2
 8005396:	d902      	bls.n	800539e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005398:	f06f 0304 	mvn.w	r3, #4
 800539c:	e10a      	b.n	80055b4 <sendto+0x25c>
         break;
 800539e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80053a0:	89bb      	ldrh	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <sendto+0x54>
 80053a6:	f06f 030d 	mvn.w	r3, #13
 80053aa:	e103      	b.n	80055b4 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	3201      	adds	r2, #1
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	3202      	adds	r2, #2
 80053c8:	7812      	ldrb	r2, [r2, #0]
 80053ca:	4413      	add	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	3203      	adds	r2, #3
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10e      	bne.n	8005400 <sendto+0xa8>
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	3301      	adds	r3, #1
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f84e 	bl	800448c <WIZCHIP_READ>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d002      	beq.n	8005400 <sendto+0xa8>
 80053fa:	f06f 030b 	mvn.w	r3, #11
 80053fe:	e0d9      	b.n	80055b4 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005400:	8c3b      	ldrh	r3, [r7, #32]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10e      	bne.n	8005424 <sendto+0xcc>
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	3301      	adds	r3, #1
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff f83c 	bl	800448c <WIZCHIP_READ>
 8005414:	4603      	mov	r3, r0
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b04      	cmp	r3, #4
 800541c:	d002      	beq.n	8005424 <sendto+0xcc>
 800541e:	f06f 030a 	mvn.w	r3, #10
 8005422:	e0c7      	b.n	80055b4 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	3301      	adds	r3, #1
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff f82b 	bl	800448c <WIZCHIP_READ>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b42      	cmp	r3, #66	@ 0x42
 800543e:	d008      	beq.n	8005452 <sendto+0xfa>
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	2b22      	cmp	r3, #34	@ 0x22
 8005444:	d005      	beq.n	8005452 <sendto+0xfa>
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b32      	cmp	r3, #50	@ 0x32
 800544a:	d002      	beq.n	8005452 <sendto+0xfa>
 800544c:	f06f 0306 	mvn.w	r3, #6
 8005450:	e0b0      	b.n	80055b4 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	3301      	adds	r3, #1
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800545e:	2204      	movs	r2, #4
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff f90c 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	3301      	adds	r3, #1
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005474:	461a      	mov	r2, r3
 8005476:	8c3b      	ldrh	r3, [r7, #32]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	b29b      	uxth	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7ff f84f 	bl	8004524 <WIZCHIP_WRITE>
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	3301      	adds	r3, #1
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8005492:	461a      	mov	r2, r3
 8005494:	8c3b      	ldrh	r3, [r7, #32]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f7ff f842 	bl	8004524 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3301      	adds	r3, #1
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fe ffed 	bl	800448c <WIZCHIP_READ>
 80054b2:	4603      	mov	r3, r0
 80054b4:	029b      	lsls	r3, r3, #10
 80054b6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80054b8:	89ba      	ldrh	r2, [r7, #12]
 80054ba:	8abb      	ldrh	r3, [r7, #20]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d901      	bls.n	80054c4 <sendto+0x16c>
 80054c0:	8abb      	ldrh	r3, [r7, #20]
 80054c2:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff f93a 	bl	8004740 <getSn_TX_FSR>
 80054cc:	4603      	mov	r3, r0
 80054ce:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	3301      	adds	r3, #1
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe ffd5 	bl	800448c <WIZCHIP_READ>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <sendto+0x196>
 80054e8:	f06f 0303 	mvn.w	r3, #3
 80054ec:	e062      	b.n	80055b4 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80054ee:	4b33      	ldr	r3, [pc, #204]	@ (80055bc <sendto+0x264>)
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	fa42 f303 	asr.w	r3, r2, r3
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <sendto+0x1b6>
 8005502:	89ba      	ldrh	r2, [r7, #12]
 8005504:	8abb      	ldrh	r3, [r7, #20]
 8005506:	429a      	cmp	r2, r3
 8005508:	d901      	bls.n	800550e <sendto+0x1b6>
 800550a:	2300      	movs	r3, #0
 800550c:	e052      	b.n	80055b4 <sendto+0x25c>
      if(len <= freesize) break;
 800550e:	89ba      	ldrh	r2, [r7, #12]
 8005510:	8abb      	ldrh	r3, [r7, #20]
 8005512:	429a      	cmp	r2, r3
 8005514:	d900      	bls.n	8005518 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8005516:	e7d5      	b.n	80054c4 <sendto+0x16c>
      if(len <= freesize) break;
 8005518:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800551a:	89ba      	ldrh	r2, [r7, #12]
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff f99f 	bl	8004864 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	3301      	adds	r3, #1
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005532:	2120      	movs	r1, #32
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe fff5 	bl	8004524 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800553a:	bf00      	nop
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	3301      	adds	r3, #1
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe ff9f 	bl	800448c <WIZCHIP_READ>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f3      	bne.n	800553c <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	3301      	adds	r3, #1
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe ff93 	bl	800448c <WIZCHIP_READ>
 8005566:	4603      	mov	r3, r0
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00c      	beq.n	8005592 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	3301      	adds	r3, #1
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005584:	2110      	movs	r1, #16
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe ffcc 	bl	8004524 <WIZCHIP_WRITE>
         break;
 800558c:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800558e:	89bb      	ldrh	r3, [r7, #12]
 8005590:	e010      	b.n	80055b4 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0db      	beq.n	8005554 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	3301      	adds	r3, #1
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80055a8:	2108      	movs	r1, #8
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe ffba 	bl	8004524 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80055b0:	f06f 030c 	mvn.w	r3, #12
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20001224 	.word	0x20001224

080055c0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	4603      	mov	r3, r0
 80055cc:	73fb      	strb	r3, [r7, #15]
 80055ce:	4613      	mov	r3, r2
 80055d0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d902      	bls.n	80055e2 <recvfrom+0x22>
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295
 80055e0:	e1d2      	b.n	8005988 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	3301      	adds	r3, #1
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe ff4e 	bl	800448c <WIZCHIP_READ>
 80055f0:	4603      	mov	r3, r0
 80055f2:	777b      	strb	r3, [r7, #29]
 80055f4:	7f7b      	ldrb	r3, [r7, #29]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	3b02      	subs	r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d902      	bls.n	8005606 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005600:	f06f 0304 	mvn.w	r3, #4
 8005604:	e1c0      	b.n	8005988 <recvfrom+0x3c8>
         break;
 8005606:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005608:	89bb      	ldrh	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <recvfrom+0x54>
 800560e:	f06f 030d 	mvn.w	r3, #13
 8005612:	e1b9      	b.n	8005988 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	4a87      	ldr	r2, [pc, #540]	@ (8005834 <recvfrom+0x274>)
 8005618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d128      	bne.n	8005672 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff f8d5 	bl	80047d2 <getSn_RX_RSR>
 8005628:	4603      	mov	r3, r0
 800562a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	3301      	adds	r3, #1
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe ff27 	bl	800448c <WIZCHIP_READ>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <recvfrom+0x8a>
 8005644:	f06f 0303 	mvn.w	r3, #3
 8005648:	e19e      	b.n	8005988 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800564a:	4b7b      	ldr	r3, [pc, #492]	@ (8005838 <recvfrom+0x278>)
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	fa42 f303 	asr.w	r3, r2, r3
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <recvfrom+0xa8>
 800565e:	8bfb      	ldrh	r3, [r7, #30]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <recvfrom+0xa8>
 8005664:	2300      	movs	r3, #0
 8005666:	e18f      	b.n	8005988 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8005668:	8bfb      	ldrh	r3, [r7, #30]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d100      	bne.n	8005670 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800566e:	e7d7      	b.n	8005620 <recvfrom+0x60>
         if(pack_len != 0) break;
 8005670:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8005672:	7f7b      	ldrb	r3, [r7, #29]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	2b04      	cmp	r3, #4
 800567a:	d078      	beq.n	800576e <recvfrom+0x1ae>
 800567c:	2b04      	cmp	r3, #4
 800567e:	f300 8140 	bgt.w	8005902 <recvfrom+0x342>
 8005682:	2b02      	cmp	r3, #2
 8005684:	d003      	beq.n	800568e <recvfrom+0xce>
 8005686:	2b03      	cmp	r3, #3
 8005688:	f000 80da 	beq.w	8005840 <recvfrom+0x280>
 800568c:	e139      	b.n	8005902 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	4a68      	ldr	r2, [pc, #416]	@ (8005834 <recvfrom+0x274>)
 8005692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d151      	bne.n	800573e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 800569a:	f107 0114 	add.w	r1, r7, #20
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	2208      	movs	r2, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff f938 	bl	8004918 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	3301      	adds	r3, #1
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056b4:	2140      	movs	r1, #64	@ 0x40
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe ff34 	bl	8004524 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80056bc:	bf00      	nop
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	3301      	adds	r3, #1
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe fede 	bl	800448c <WIZCHIP_READ>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f3      	bne.n	80056be <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80056d6:	7d3a      	ldrb	r2, [r7, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3301      	adds	r3, #1
 80056e0:	7d7a      	ldrb	r2, [r7, #21]
 80056e2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3302      	adds	r3, #2
 80056e8:	7dba      	ldrb	r2, [r7, #22]
 80056ea:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3303      	adds	r3, #3
 80056f0:	7dfa      	ldrb	r2, [r7, #23]
 80056f2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80056f4:	7e3b      	ldrb	r3, [r7, #24]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	b29b      	uxth	r3, r3
 8005704:	7e7a      	ldrb	r2, [r7, #25]
 8005706:	4413      	add	r3, r2
 8005708:	b29a      	uxth	r2, r3
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800570e:	7eba      	ldrb	r2, [r7, #26]
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	4611      	mov	r1, r2
 8005714:	4a47      	ldr	r2, [pc, #284]	@ (8005834 <recvfrom+0x274>)
 8005716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	4a45      	ldr	r2, [pc, #276]	@ (8005834 <recvfrom+0x274>)
 800571e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	b29a      	uxth	r2, r3
 8005726:	7efb      	ldrb	r3, [r7, #27]
 8005728:	4619      	mov	r1, r3
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	440a      	add	r2, r1
 800572e:	b291      	uxth	r1, r2
 8005730:	4a40      	ldr	r2, [pc, #256]	@ (8005834 <recvfrom+0x274>)
 8005732:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	4a40      	ldr	r2, [pc, #256]	@ (800583c <recvfrom+0x27c>)
 800573a:	2180      	movs	r1, #128	@ 0x80
 800573c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	4a3c      	ldr	r2, [pc, #240]	@ (8005834 <recvfrom+0x274>)
 8005742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005746:	89ba      	ldrh	r2, [r7, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d202      	bcs.n	8005752 <recvfrom+0x192>
 800574c:	89bb      	ldrh	r3, [r7, #12]
 800574e:	83fb      	strh	r3, [r7, #30]
 8005750:	e004      	b.n	800575c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	4a37      	ldr	r2, [pc, #220]	@ (8005834 <recvfrom+0x274>)
 8005756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800575c:	8bfb      	ldrh	r3, [r7, #30]
 800575e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005760:	8bfa      	ldrh	r2, [r7, #30]
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff f8d6 	bl	8004918 <wiz_recv_data>
			break;
 800576c:	e0d5      	b.n	800591a <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	4a30      	ldr	r2, [pc, #192]	@ (8005834 <recvfrom+0x274>)
 8005772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d145      	bne.n	8005806 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 800577a:	f107 0114 	add.w	r1, r7, #20
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2202      	movs	r2, #2
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff f8c8 	bl	8004918 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	3301      	adds	r3, #1
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005794:	2140      	movs	r1, #64	@ 0x40
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fec4 	bl	8004524 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800579c:	bf00      	nop
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	3301      	adds	r3, #1
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fe6e 	bl	800448c <WIZCHIP_READ>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f3      	bne.n	800579e <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80057b6:	7d3a      	ldrb	r2, [r7, #20]
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	4611      	mov	r1, r2
 80057bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005834 <recvfrom+0x274>)
 80057be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005834 <recvfrom+0x274>)
 80057c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	7d7a      	ldrb	r2, [r7, #21]
 80057d0:	4413      	add	r3, r2
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	3a02      	subs	r2, #2
 80057d8:	b291      	uxth	r1, r2
 80057da:	4a16      	ldr	r2, [pc, #88]	@ (8005834 <recvfrom+0x274>)
 80057dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	4a14      	ldr	r2, [pc, #80]	@ (8005834 <recvfrom+0x274>)
 80057e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e8:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d906      	bls.n	80057fe <recvfrom+0x23e>
   			{
   			   close(sn);
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fa44 	bl	8004c80 <close>
   			   return SOCKFATAL_PACKLEN;
 80057f8:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 80057fc:	e0c4      	b.n	8005988 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	4a0e      	ldr	r2, [pc, #56]	@ (800583c <recvfrom+0x27c>)
 8005802:	2180      	movs	r1, #128	@ 0x80
 8005804:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	4a0a      	ldr	r2, [pc, #40]	@ (8005834 <recvfrom+0x274>)
 800580a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800580e:	89ba      	ldrh	r2, [r7, #12]
 8005810:	429a      	cmp	r2, r3
 8005812:	d202      	bcs.n	800581a <recvfrom+0x25a>
 8005814:	89bb      	ldrh	r3, [r7, #12]
 8005816:	83fb      	strh	r3, [r7, #30]
 8005818:	e004      	b.n	8005824 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	4a05      	ldr	r2, [pc, #20]	@ (8005834 <recvfrom+0x274>)
 800581e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005822:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8005824:	8bfa      	ldrh	r2, [r7, #30]
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff f874 	bl	8004918 <wiz_recv_data>
		   break;
 8005830:	e073      	b.n	800591a <recvfrom+0x35a>
 8005832:	bf00      	nop
 8005834:	20001228 	.word	0x20001228
 8005838:	20001224 	.word	0x20001224
 800583c:	20001238 	.word	0x20001238
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	4a53      	ldr	r2, [pc, #332]	@ (8005990 <recvfrom+0x3d0>)
 8005844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d144      	bne.n	80058d6 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 800584c:	f107 0114 	add.w	r1, r7, #20
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2206      	movs	r2, #6
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff f85f 	bl	8004918 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	3301      	adds	r3, #1
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005866:	2140      	movs	r1, #64	@ 0x40
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fe5b 	bl	8004524 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800586e:	bf00      	nop
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	3301      	adds	r3, #1
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fe05 	bl	800448c <WIZCHIP_READ>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f3      	bne.n	8005870 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8005888:	7d3a      	ldrb	r2, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3301      	adds	r3, #1
 8005892:	7d7a      	ldrb	r2, [r7, #21]
 8005894:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3302      	adds	r3, #2
 800589a:	7dba      	ldrb	r2, [r7, #22]
 800589c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3303      	adds	r3, #3
 80058a2:	7dfa      	ldrb	r2, [r7, #23]
 80058a4:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80058a6:	7e3a      	ldrb	r2, [r7, #24]
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	4611      	mov	r1, r2
 80058ac:	4a38      	ldr	r2, [pc, #224]	@ (8005990 <recvfrom+0x3d0>)
 80058ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	4a36      	ldr	r2, [pc, #216]	@ (8005990 <recvfrom+0x3d0>)
 80058b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	b29a      	uxth	r2, r3
 80058be:	7e7b      	ldrb	r3, [r7, #25]
 80058c0:	4619      	mov	r1, r3
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	440a      	add	r2, r1
 80058c6:	b291      	uxth	r1, r2
 80058c8:	4a31      	ldr	r2, [pc, #196]	@ (8005990 <recvfrom+0x3d0>)
 80058ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <recvfrom+0x3d4>)
 80058d2:	2180      	movs	r1, #128	@ 0x80
 80058d4:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <recvfrom+0x3d0>)
 80058da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058de:	89ba      	ldrh	r2, [r7, #12]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d202      	bcs.n	80058ea <recvfrom+0x32a>
 80058e4:	89bb      	ldrh	r3, [r7, #12]
 80058e6:	83fb      	strh	r3, [r7, #30]
 80058e8:	e004      	b.n	80058f4 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	4a28      	ldr	r2, [pc, #160]	@ (8005990 <recvfrom+0x3d0>)
 80058ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058f2:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80058f4:	8bfa      	ldrh	r2, [r7, #30]
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff f80c 	bl	8004918 <wiz_recv_data>
			break;
 8005900:	e00b      	b.n	800591a <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8005902:	8bfa      	ldrh	r2, [r7, #30]
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff f85f 	bl	80049cc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	491f      	ldr	r1, [pc, #124]	@ (8005990 <recvfrom+0x3d0>)
 8005912:	8bfa      	ldrh	r2, [r7, #30]
 8005914:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8005918:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	3301      	adds	r3, #1
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005926:	2140      	movs	r1, #64	@ 0x40
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fdfb 	bl	8004524 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800592e:	bf00      	nop
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	3301      	adds	r3, #1
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fda5 	bl	800448c <WIZCHIP_READ>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f3      	bne.n	8005930 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	4a11      	ldr	r2, [pc, #68]	@ (8005990 <recvfrom+0x3d0>)
 800594c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	8bfa      	ldrh	r2, [r7, #30]
 8005954:	1a8a      	subs	r2, r1, r2
 8005956:	b291      	uxth	r1, r2
 8005958:	4a0d      	ldr	r2, [pc, #52]	@ (8005990 <recvfrom+0x3d0>)
 800595a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	4a0b      	ldr	r2, [pc, #44]	@ (8005990 <recvfrom+0x3d0>)
 8005962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	4a09      	ldr	r2, [pc, #36]	@ (8005994 <recvfrom+0x3d4>)
 800596e:	5cd2      	ldrb	r2, [r2, r3]
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	b2d1      	uxtb	r1, r2
 8005978:	4a06      	ldr	r2, [pc, #24]	@ (8005994 <recvfrom+0x3d4>)
 800597a:	54d1      	strb	r1, [r2, r3]
 800597c:	e003      	b.n	8005986 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <recvfrom+0x3d4>)
 8005982:	2100      	movs	r1, #0
 8005984:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8005986:	8bfb      	ldrh	r3, [r7, #30]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20001228 	.word	0x20001228
 8005994:	20001238 	.word	0x20001238

08005998 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	2300      	movs	r3, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	4603      	mov	r3, r0
 8005a12:	71fb      	strb	r3, [r7, #7]
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr
	...

08005a20 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <reg_wizchip_cs_cbfunc+0x16>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005a36:	4b09      	ldr	r3, [pc, #36]	@ (8005a5c <reg_wizchip_cs_cbfunc+0x3c>)
 8005a38:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <reg_wizchip_cs_cbfunc+0x40>)
 8005a3a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005a3c:	4b07      	ldr	r3, [pc, #28]	@ (8005a5c <reg_wizchip_cs_cbfunc+0x3c>)
 8005a3e:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <reg_wizchip_cs_cbfunc+0x44>)
 8005a40:	619a      	str	r2, [r3, #24]
 8005a42:	e006      	b.n	8005a52 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005a44:	4a05      	ldr	r2, [pc, #20]	@ (8005a5c <reg_wizchip_cs_cbfunc+0x3c>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005a4a:	4a04      	ldr	r2, [pc, #16]	@ (8005a5c <reg_wizchip_cs_cbfunc+0x3c>)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6193      	str	r3, [r2, #24]
   }
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	2000007c 	.word	0x2000007c
 8005a60:	080059b1 	.word	0x080059b1
 8005a64:	080059bd 	.word	0x080059bd

08005a68 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005a72:	bf00      	nop
 8005a74:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab4 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0f9      	beq.n	8005a74 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <reg_wizchip_spi_cbfunc+0x24>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005a8c:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <reg_wizchip_spi_cbfunc+0x50>)
 8005a90:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005a92:	4b08      	ldr	r3, [pc, #32]	@ (8005ab4 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a94:	4a09      	ldr	r2, [pc, #36]	@ (8005abc <reg_wizchip_spi_cbfunc+0x54>)
 8005a96:	621a      	str	r2, [r3, #32]
 8005a98:	e006      	b.n	8005aa8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005a9a:	4a06      	ldr	r2, [pc, #24]	@ (8005ab4 <reg_wizchip_spi_cbfunc+0x4c>)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005aa0:	4a04      	ldr	r2, [pc, #16]	@ (8005ab4 <reg_wizchip_spi_cbfunc+0x4c>)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6213      	str	r3, [r2, #32]
   }
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000007c 	.word	0x2000007c
 8005ab8:	080059fd 	.word	0x080059fd
 8005abc:	08005a0b 	.word	0x08005a0b

08005ac0 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	2b0f      	cmp	r3, #15
 8005adc:	f200 80c5 	bhi.w	8005c6a <ctlwizchip+0x1aa>
 8005ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <ctlwizchip+0x28>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b29 	.word	0x08005b29
 8005aec:	08005b2f 	.word	0x08005b2f
 8005af0:	08005b5b 	.word	0x08005b5b
 8005af4:	08005b4f 	.word	0x08005b4f
 8005af8:	08005b69 	.word	0x08005b69
 8005afc:	08005b75 	.word	0x08005b75
 8005b00:	08005b83 	.word	0x08005b83
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005bcb 	.word	0x08005bcb
 8005b0c:	08005c0f 	.word	0x08005c0f
 8005b10:	08005c15 	.word	0x08005c15
 8005b14:	08005c1d 	.word	0x08005c1d
 8005b18:	08005c71 	.word	0x08005c71
 8005b1c:	08005c25 	.word	0x08005c25
 8005b20:	08005c33 	.word	0x08005c33
 8005b24:	08005c4f 	.word	0x08005c4f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005b28:	f000 f8e8 	bl	8005cfc <wizchip_sw_reset>
         break;
 8005b2c:	e0a1      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4611      	mov	r1, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f925 	bl	8005d94 <wizchip_init>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	e092      	b.n	8005c74 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f9aa 	bl	8005eac <wizchip_clrinterrupt>
         break;
 8005b58:	e08b      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005b5a:	f000 f9db 	bl	8005f14 <wizchip_getinterrupt>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	801a      	strh	r2, [r3, #0]
         break;
 8005b66:	e084      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 f9f6 	bl	8005f5e <wizchip_setinterruptmask>
         break;         
 8005b72:	e07e      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005b74:	f000 fa0e 	bl	8005f94 <wizchip_getinterruptmask>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	801a      	strh	r2, [r3, #0]
         break;
 8005b80:	e077      	b.n	8005c72 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005b92:	f7fe fcc7 	bl	8004524 <WIZCHIP_WRITE>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005ba2:	f7fe fcbf 	bl	8004524 <WIZCHIP_WRITE>
         break;
 8005ba6:	e064      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005ba8:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005bac:	f7fe fc6e 	bl	800448c <WIZCHIP_READ>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	b29c      	uxth	r4, r3
 8005bb6:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005bba:	f7fe fc67 	bl	800448c <WIZCHIP_READ>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4423      	add	r3, r4
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	801a      	strh	r2, [r3, #0]
         break;
 8005bc8:	e053      	b.n	8005c72 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005bca:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <ctlwizchip+0x1bc>)
 8005bcc:	789a      	ldrb	r2, [r3, #2]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	4a29      	ldr	r2, [pc, #164]	@ (8005c7c <ctlwizchip+0x1bc>)
 8005bd8:	78d2      	ldrb	r2, [r2, #3]
 8005bda:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	3302      	adds	r3, #2
 8005be0:	4a26      	ldr	r2, [pc, #152]	@ (8005c7c <ctlwizchip+0x1bc>)
 8005be2:	7912      	ldrb	r2, [r2, #4]
 8005be4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	3303      	adds	r3, #3
 8005bea:	4a24      	ldr	r2, [pc, #144]	@ (8005c7c <ctlwizchip+0x1bc>)
 8005bec:	7952      	ldrb	r2, [r2, #5]
 8005bee:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4a21      	ldr	r2, [pc, #132]	@ (8005c7c <ctlwizchip+0x1bc>)
 8005bf6:	7992      	ldrb	r2, [r2, #6]
 8005bf8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	3305      	adds	r3, #5
 8005bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005c7c <ctlwizchip+0x1bc>)
 8005c00:	79d2      	ldrb	r2, [r2, #7]
 8005c02:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	3306      	adds	r3, #6
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
         break;
 8005c0c:	e031      	b.n	8005c72 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005c0e:	f000 fa13 	bl	8006038 <wizphy_reset>
         break;
 8005c12:	e02e      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005c14:	6838      	ldr	r0, [r7, #0]
 8005c16:	f000 fa36 	bl	8006086 <wizphy_setphyconf>
         break;
 8005c1a:	e02a      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005c1c:	6838      	ldr	r0, [r7, #0]
 8005c1e:	f000 fa75 	bl	800610c <wizphy_getphyconf>
         break;
 8005c22:	e026      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fad9 	bl	80061e0 <wizphy_setphypmode>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	e020      	b.n	8005c74 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005c32:	f000 f9e8 	bl	8006006 <wizphy_getphypmode>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	2bff      	cmp	r3, #255	@ 0xff
 8005c3e:	d102      	bne.n	8005c46 <ctlwizchip+0x186>
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	e016      	b.n	8005c74 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	7dfa      	ldrb	r2, [r7, #23]
 8005c4a:	701a      	strb	r2, [r3, #0]
         break;
 8005c4c:	e011      	b.n	8005c72 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005c4e:	f000 f9c4 	bl	8005fda <wizphy_getphylink>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2bff      	cmp	r3, #255	@ 0xff
 8005c5a:	d102      	bne.n	8005c62 <ctlwizchip+0x1a2>
 8005c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c60:	e008      	b.n	8005c74 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	7dfa      	ldrb	r2, [r7, #23]
 8005c66:	701a      	strb	r2, [r3, #0]
         break;
 8005c68:	e003      	b.n	8005c72 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6e:	e001      	b.n	8005c74 <ctlwizchip+0x1b4>
         break;
 8005c70:	bf00      	nop
   }
   return 0;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd90      	pop	{r4, r7, pc}
 8005c7c:	2000007c 	.word	0x2000007c

08005c80 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	6039      	str	r1, [r7, #0]
 8005c8a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d82c      	bhi.n	8005cec <ctlnetwork+0x6c>
 8005c92:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <ctlnetwork+0x18>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005cc1 	.word	0x08005cc1
 8005ca4:	08005ccf 	.word	0x08005ccf
 8005ca8:	08005cdd 	.word	0x08005cdd
 8005cac:	08005ce5 	.word	0x08005ce5
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005cb0:	6838      	ldr	r0, [r7, #0]
 8005cb2:	f000 fadf 	bl	8006274 <wizchip_setnetinfo>
         break;
 8005cb6:	e01c      	b.n	8005cf2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005cb8:	6838      	ldr	r0, [r7, #0]
 8005cba:	f000 fb1b 	bl	80062f4 <wizchip_getnetinfo>
         break;
 8005cbe:	e018      	b.n	8005cf2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fb55 	bl	8006374 <wizchip_setnetmode>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	e012      	b.n	8005cf4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005cce:	f000 fb73 	bl	80063b8 <wizchip_getnetmode>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	701a      	strb	r2, [r3, #0]
         break;
 8005cda:	e00a      	b.n	8005cf2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005cdc:	6838      	ldr	r0, [r7, #0]
 8005cde:	f000 fb73 	bl	80063c8 <wizchip_settimeout>
         break;
 8005ce2:	e006      	b.n	8005cf2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005ce4:	6838      	ldr	r0, [r7, #0]
 8005ce6:	f000 fb90 	bl	800640a <wizchip_gettimeout>
         break;
 8005cea:	e002      	b.n	8005cf2 <ctlnetwork+0x72>
      default:
         return -1;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf0:	e000      	b.n	8005cf4 <ctlnetwork+0x74>
   }
   return 0;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	2206      	movs	r2, #6
 8005d06:	4619      	mov	r1, r3
 8005d08:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005d0c:	f7fe fc58 	bl	80045c0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005d10:	f107 0314 	add.w	r3, r7, #20
 8005d14:	2204      	movs	r2, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d1c:	f7fe fc50 	bl	80045c0 <WIZCHIP_READ_BUF>
 8005d20:	f107 0310 	add.w	r3, r7, #16
 8005d24:	2204      	movs	r2, #4
 8005d26:	4619      	mov	r1, r3
 8005d28:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005d2c:	f7fe fc48 	bl	80045c0 <WIZCHIP_READ_BUF>
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	2204      	movs	r2, #4
 8005d36:	4619      	mov	r1, r3
 8005d38:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005d3c:	f7fe fc40 	bl	80045c0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005d40:	2180      	movs	r1, #128	@ 0x80
 8005d42:	2000      	movs	r0, #0
 8005d44:	f7fe fbee 	bl	8004524 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005d48:	2000      	movs	r0, #0
 8005d4a:	f7fe fb9f 	bl	800448c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005d4e:	1d3b      	adds	r3, r7, #4
 8005d50:	2206      	movs	r2, #6
 8005d52:	4619      	mov	r1, r3
 8005d54:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005d58:	f7fe fc92 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005d5c:	f107 0314 	add.w	r3, r7, #20
 8005d60:	2204      	movs	r2, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d68:	f7fe fc8a 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005d6c:	f107 0310 	add.w	r3, r7, #16
 8005d70:	2204      	movs	r2, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005d78:	f7fe fc82 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	2204      	movs	r2, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005d88:	f7fe fc7a 	bl	8004680 <WIZCHIP_WRITE_BUF>
}
 8005d8c:	bf00      	nop
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005da2:	f7ff ffab 	bl	8005cfc <wizchip_sw_reset>
   if(txsize)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d03b      	beq.n	8005e24 <wizchip_init+0x90>
   {
      tmp = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e015      	b.n	8005de2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	781a      	ldrb	r2, [r3, #0]
 8005dc0:	7bbb      	ldrb	r3, [r7, #14]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	dd02      	ble.n	8005dd6 <wizchip_init+0x42>
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	e066      	b.n	8005ea4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	73fb      	strb	r3, [r7, #15]
 8005de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de6:	2b07      	cmp	r3, #7
 8005de8:	dde5      	ble.n	8005db6 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]
 8005dee:	e015      	b.n	8005e1c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	3301      	adds	r3, #1
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f7fe fb8a 	bl	8004524 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	3301      	adds	r3, #1
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	73fb      	strb	r3, [r7, #15]
 8005e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e20:	2b07      	cmp	r3, #7
 8005e22:	dde5      	ble.n	8005df0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03b      	beq.n	8005ea2 <wizchip_init+0x10e>
   {
      tmp = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e015      	b.n	8005e60 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
 8005e40:	4413      	add	r3, r2
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	dd02      	ble.n	8005e54 <wizchip_init+0xc0>
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	e027      	b.n	8005ea4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	73fb      	strb	r3, [r7, #15]
 8005e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e64:	2b07      	cmp	r3, #7
 8005e66:	dde5      	ble.n	8005e34 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e015      	b.n	8005e9a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	3301      	adds	r3, #1
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	f7fe fb4b 	bl	8004524 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	3301      	adds	r3, #1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	2b07      	cmp	r3, #7
 8005ea0:	dde5      	ble.n	8005e6e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	f023 030f 	bic.w	r3, r3, #15
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8005ed0:	f7fe fb28 	bl	8004524 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	73fb      	strb	r3, [r7, #15]
 8005ed8:	e014      	b.n	8005f04 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8005eda:	7bba      	ldrb	r2, [r7, #14]
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	fa42 f303 	asr.w	r3, r2, r3
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <wizchip_clrinterrupt+0x52>
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	3301      	adds	r3, #1
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005ef6:	211f      	movs	r1, #31
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fb13 	bl	8004524 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	3301      	adds	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b07      	cmp	r3, #7
 8005f08:	d9e7      	bls.n	8005eda <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8005f26:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8005f2a:	f7fe faaf 	bl	800448c <WIZCHIP_READ>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f023 030f 	bic.w	r3, r3, #15
 8005f34:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8005f36:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8005f3a:	f7fe faa7 	bl	800448c <WIZCHIP_READ>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8005f42:	79bb      	ldrb	r3, [r7, #6]
 8005f44:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8005f46:	88bb      	ldrh	r3, [r7, #4]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4413      	add	r3, r2
 8005f52:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005f54:	88bb      	ldrh	r3, [r7, #4]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	4603      	mov	r3, r0
 8005f66:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8005f6c:	88fb      	ldrh	r3, [r7, #6]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005f7c:	f7fe fad2 	bl	8004524 <WIZCHIP_WRITE>
   setSIMR(simr);
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005f88:	f7fe facc 	bl	8004524 <WIZCHIP_WRITE>
#endif   
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8005fa6:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005faa:	f7fe fa6f 	bl	800448c <WIZCHIP_READ>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8005fb2:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8005fb6:	f7fe fa69 	bl	800448c <WIZCHIP_READ>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8005fbe:	79bb      	ldrb	r3, [r7, #6]
 8005fc0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8005fc2:	88bb      	ldrh	r3, [r7, #4]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4413      	add	r3, r2
 8005fce:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005fd0:	88bb      	ldrh	r3, [r7, #4]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8005fe4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005fe8:	f7fe fa50 	bl	800448c <WIZCHIP_READ>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8005ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006010:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006014:	f7fe fa3a 	bl	800448c <WIZCHIP_READ>
 8006018:	4603      	mov	r3, r0
 800601a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800601e:	2b30      	cmp	r3, #48	@ 0x30
 8006020:	d102      	bne.n	8006028 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8006022:	2301      	movs	r3, #1
 8006024:	71fb      	strb	r3, [r7, #7]
 8006026:	e001      	b.n	800602c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8006028:	2300      	movs	r3, #0
 800602a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800602c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800603e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006042:	f7fe fa23 	bl	800448c <WIZCHIP_READ>
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006050:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	4619      	mov	r1, r3
 8006056:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800605a:	f7fe fa63 	bl	8004524 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800605e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006062:	f7fe fa13 	bl	800448c <WIZCHIP_READ>
 8006066:	4603      	mov	r3, r0
 8006068:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006070:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	4619      	mov	r1, r3
 8006076:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800607a:	f7fe fa53 	bl	8004524 <WIZCHIP_WRITE>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d104      	bne.n	80060a4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060a0:	73fb      	strb	r3, [r7, #15]
 80060a2:	e003      	b.n	80060ac <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060aa:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d104      	bne.n	80060be <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	e019      	b.n	80060f2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	78db      	ldrb	r3, [r3, #3]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	789b      	ldrb	r3, [r3, #2]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d104      	bne.n	80060d8 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	f043 0318 	orr.w	r3, r3, #24
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	e00c      	b.n	80060f2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	f043 0308 	orr.w	r3, r3, #8
 80060de:	73fb      	strb	r3, [r7, #15]
 80060e0:	e007      	b.n	80060f2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	789b      	ldrb	r3, [r3, #2]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d103      	bne.n	80060f2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	f043 0310 	orr.w	r3, r3, #16
 80060f0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	4619      	mov	r1, r3
 80060f6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80060fa:	f7fe fa13 	bl	8004524 <WIZCHIP_WRITE>
   wizphy_reset();
 80060fe:	f7ff ff9b 	bl	8006038 <wizphy_reset>
}
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006118:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800611c:	f7fe f9b6 	bl	800448c <WIZCHIP_READ>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	119b      	asrs	r3, r3, #6
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800613a:	2b20      	cmp	r3, #32
 800613c:	d001      	beq.n	8006142 <wizphy_getphyconf+0x36>
 800613e:	2b38      	cmp	r3, #56	@ 0x38
 8006140:	d103      	bne.n	800614a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	705a      	strb	r2, [r3, #1]
         break;
 8006148:	e003      	b.n	8006152 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	705a      	strb	r2, [r3, #1]
         break;
 8006150:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006158:	3b10      	subs	r3, #16
 800615a:	2b10      	cmp	r3, #16
 800615c:	bf8c      	ite	hi
 800615e:	2201      	movhi	r2, #1
 8006160:	2200      	movls	r2, #0
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	2a00      	cmp	r2, #0
 8006166:	d10f      	bne.n	8006188 <wizphy_getphyconf+0x7c>
 8006168:	4a1b      	ldr	r2, [pc, #108]	@ (80061d8 <wizphy_getphyconf+0xcc>)
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	709a      	strb	r2, [r3, #2]
         break;
 8006186:	e003      	b.n	8006190 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	709a      	strb	r2, [r3, #2]
         break;
 800618e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006196:	3b08      	subs	r3, #8
 8006198:	2b18      	cmp	r3, #24
 800619a:	bf8c      	ite	hi
 800619c:	2201      	movhi	r2, #1
 800619e:	2200      	movls	r2, #0
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	d10f      	bne.n	80061c6 <wizphy_getphyconf+0xba>
 80061a6:	4a0d      	ldr	r2, [pc, #52]	@ (80061dc <wizphy_getphyconf+0xd0>)
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	70da      	strb	r2, [r3, #3]
         break;
 80061c4:	e003      	b.n	80061ce <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	70da      	strb	r2, [r3, #3]
         break;
 80061cc:	bf00      	nop
   }
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	00010101 	.word	0x00010101
 80061dc:	01010001 	.word	0x01010001

080061e0 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80061ee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80061f2:	f7fe f94b 	bl	800448c <WIZCHIP_READ>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <wizphy_setphypmode+0x2a>
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	e030      	b.n	800626c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006210:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d104      	bne.n	8006222 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800621e:	73fb      	strb	r3, [r7, #15]
 8006220:	e003      	b.n	800622a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8006228:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	4619      	mov	r1, r3
 800622e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006232:	f7fe f977 	bl	8004524 <WIZCHIP_WRITE>
   wizphy_reset();
 8006236:	f7ff feff 	bl	8006038 <wizphy_reset>
   tmp = getPHYCFGR();
 800623a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800623e:	f7fe f925 	bl	800448c <WIZCHIP_READ>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <wizphy_setphypmode+0x88>
 8006256:	2300      	movs	r3, #0
 8006258:	e008      	b.n	800626c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <wizphy_setphypmode+0x88>
 8006264:	2300      	movs	r3, #0
 8006266:	e001      	b.n	800626c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2206      	movs	r2, #6
 8006280:	4619      	mov	r1, r3
 8006282:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006286:	f7fe f9fb 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	330e      	adds	r3, #14
 800628e:	2204      	movs	r2, #4
 8006290:	4619      	mov	r1, r3
 8006292:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006296:	f7fe f9f3 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	330a      	adds	r3, #10
 800629e:	2204      	movs	r2, #4
 80062a0:	4619      	mov	r1, r3
 80062a2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80062a6:	f7fe f9eb 	bl	8004680 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3306      	adds	r3, #6
 80062ae:	2204      	movs	r2, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80062b6:	f7fe f9e3 	bl	8004680 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7c9a      	ldrb	r2, [r3, #18]
 80062be:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <wizchip_setnetinfo+0x78>)
 80062c0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	7cda      	ldrb	r2, [r3, #19]
 80062c6:	4b09      	ldr	r3, [pc, #36]	@ (80062ec <wizchip_setnetinfo+0x78>)
 80062c8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7d1a      	ldrb	r2, [r3, #20]
 80062ce:	4b07      	ldr	r3, [pc, #28]	@ (80062ec <wizchip_setnetinfo+0x78>)
 80062d0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7d5a      	ldrb	r2, [r3, #21]
 80062d6:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <wizchip_setnetinfo+0x78>)
 80062d8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7d9a      	ldrb	r2, [r3, #22]
 80062de:	4b04      	ldr	r3, [pc, #16]	@ (80062f0 <wizchip_setnetinfo+0x7c>)
 80062e0:	701a      	strb	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20001240 	.word	0x20001240
 80062f0:	20001244 	.word	0x20001244

080062f4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2206      	movs	r2, #6
 8006300:	4619      	mov	r1, r3
 8006302:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006306:	f7fe f95b 	bl	80045c0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	330e      	adds	r3, #14
 800630e:	2204      	movs	r2, #4
 8006310:	4619      	mov	r1, r3
 8006312:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006316:	f7fe f953 	bl	80045c0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	330a      	adds	r3, #10
 800631e:	2204      	movs	r2, #4
 8006320:	4619      	mov	r1, r3
 8006322:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006326:	f7fe f94b 	bl	80045c0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3306      	adds	r3, #6
 800632e:	2204      	movs	r2, #4
 8006330:	4619      	mov	r1, r3
 8006332:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006336:	f7fe f943 	bl	80045c0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800633a:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <wizchip_getnetinfo+0x78>)
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <wizchip_getnetinfo+0x78>)
 8006344:	785a      	ldrb	r2, [r3, #1]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800634a:	4b08      	ldr	r3, [pc, #32]	@ (800636c <wizchip_getnetinfo+0x78>)
 800634c:	789a      	ldrb	r2, [r3, #2]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006352:	4b06      	ldr	r3, [pc, #24]	@ (800636c <wizchip_getnetinfo+0x78>)
 8006354:	78da      	ldrb	r2, [r3, #3]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800635a:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <wizchip_getnetinfo+0x7c>)
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	759a      	strb	r2, [r3, #22]
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20001240 	.word	0x20001240
 8006370:	20001244 	.word	0x20001244

08006374 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <wizchip_setnetmode+0x1e>
 800638c:	f04f 33ff 	mov.w	r3, #4294967295
 8006390:	e00e      	b.n	80063b0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8006392:	2000      	movs	r0, #0
 8006394:	f7fe f87a 	bl	800448c <WIZCHIP_READ>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800639c:	7bfa      	ldrb	r2, [r7, #15]
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	4619      	mov	r1, r3
 80063a8:	2000      	movs	r0, #0
 80063aa:	f7fe f8bb 	bl	8004524 <WIZCHIP_WRITE>
   return 0;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80063bc:	2000      	movs	r0, #0
 80063be:	f7fe f865 	bl	800448c <WIZCHIP_READ>
 80063c2:	4603      	mov	r3, r0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	4619      	mov	r1, r3
 80063d6:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80063da:	f7fe f8a3 	bl	8004524 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	885b      	ldrh	r3, [r3, #2]
 80063e2:	0a1b      	lsrs	r3, r3, #8
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	4619      	mov	r1, r3
 80063ea:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80063ee:	f7fe f899 	bl	8004524 <WIZCHIP_WRITE>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	4619      	mov	r1, r3
 80063fa:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80063fe:	f7fe f891 	bl	8004524 <WIZCHIP_WRITE>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800640a:	b590      	push	{r4, r7, lr}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006412:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8006416:	f7fe f839 	bl	800448c <WIZCHIP_READ>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8006422:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8006426:	f7fe f831 	bl	800448c <WIZCHIP_READ>
 800642a:	4603      	mov	r3, r0
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	b29c      	uxth	r4, r3
 8006430:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8006434:	f7fe f82a 	bl	800448c <WIZCHIP_READ>
 8006438:	4603      	mov	r3, r0
 800643a:	4423      	add	r3, r4
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	805a      	strh	r2, [r3, #2]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	bd90      	pop	{r4, r7, pc}
	...

0800644c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800644c:	f7fa fbc0 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006450:	480b      	ldr	r0, [pc, #44]	@ (8006480 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006452:	490c      	ldr	r1, [pc, #48]	@ (8006484 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006454:	4a0c      	ldr	r2, [pc, #48]	@ (8006488 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006458:	e002      	b.n	8006460 <LoopCopyDataInit>

0800645a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800645a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800645c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800645e:	3304      	adds	r3, #4

08006460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006464:	d3f9      	bcc.n	800645a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006466:	4a09      	ldr	r2, [pc, #36]	@ (800648c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006468:	4c09      	ldr	r4, [pc, #36]	@ (8006490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800646a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800646c:	e001      	b.n	8006472 <LoopFillZerobss>

0800646e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800646e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006470:	3204      	adds	r2, #4

08006472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006474:	d3fb      	bcc.n	800646e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006476:	f001 fecb 	bl	8008210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800647a:	f7f9 fe6f 	bl	800015c <main>
  bx lr
 800647e:	4770      	bx	lr
  ldr r0, =_sdata
 8006480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006484:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8006488:	080094b0 	.word	0x080094b0
  ldr r2, =_sbss
 800648c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8006490:	20001398 	.word	0x20001398

08006494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006494:	e7fe      	b.n	8006494 <ADC1_2_IRQHandler>
	...

08006498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800649c:	4b08      	ldr	r3, [pc, #32]	@ (80064c0 <HAL_Init+0x28>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a07      	ldr	r2, [pc, #28]	@ (80064c0 <HAL_Init+0x28>)
 80064a2:	f043 0310 	orr.w	r3, r3, #16
 80064a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064a8:	2003      	movs	r0, #3
 80064aa:	f000 f947 	bl	800673c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064ae:	2000      	movs	r0, #0
 80064b0:	f000 f808 	bl	80064c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064b4:	f7fa fa18 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40022000 	.word	0x40022000

080064c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064cc:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <HAL_InitTick+0x54>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4b12      	ldr	r3, [pc, #72]	@ (800651c <HAL_InitTick+0x58>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80064da:	fbb3 f3f1 	udiv	r3, r3, r1
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f95f 	bl	80067a6 <HAL_SYSTICK_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e00e      	b.n	8006510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	d80a      	bhi.n	800650e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064f8:	2200      	movs	r2, #0
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	f000 f927 	bl	8006752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006504:	4a06      	ldr	r2, [pc, #24]	@ (8006520 <HAL_InitTick+0x5c>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e000      	b.n	8006510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000058 	.word	0x20000058
 800651c:	200000ac 	.word	0x200000ac
 8006520:	200000a8 	.word	0x200000a8

08006524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006528:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_IncTick+0x1c>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <HAL_IncTick+0x20>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4413      	add	r3, r2
 8006534:	4a03      	ldr	r2, [pc, #12]	@ (8006544 <HAL_IncTick+0x20>)
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr
 8006540:	200000ac 	.word	0x200000ac
 8006544:	20001248 	.word	0x20001248

08006548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return uwTick;
 800654c:	4b02      	ldr	r3, [pc, #8]	@ (8006558 <HAL_GetTick+0x10>)
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr
 8006558:	20001248 	.word	0x20001248

0800655c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006564:	f7ff fff0 	bl	8006548 <HAL_GetTick>
 8006568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d005      	beq.n	8006582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006576:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <HAL_Delay+0x44>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006582:	bf00      	nop
 8006584:	f7ff ffe0 	bl	8006548 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	429a      	cmp	r2, r3
 8006592:	d8f7      	bhi.n	8006584 <HAL_Delay+0x28>
  {
  }
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200000ac 	.word	0x200000ac

080065a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065b4:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <__NVIC_SetPriorityGrouping+0x44>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80065c0:	4013      	ands	r3, r2
 80065c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80065d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065d6:	4a04      	ldr	r2, [pc, #16]	@ (80065e8 <__NVIC_SetPriorityGrouping+0x44>)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	60d3      	str	r3, [r2, #12]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	e000ed00 	.word	0xe000ed00

080065ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065f0:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <__NVIC_GetPriorityGrouping+0x18>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	0a1b      	lsrs	r3, r3, #8
 80065f6:	f003 0307 	and.w	r3, r3, #7
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	e000ed00 	.word	0xe000ed00

08006608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006616:	2b00      	cmp	r3, #0
 8006618:	db0b      	blt.n	8006632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	f003 021f 	and.w	r2, r3, #31
 8006620:	4906      	ldr	r1, [pc, #24]	@ (800663c <__NVIC_EnableIRQ+0x34>)
 8006622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2001      	movs	r0, #1
 800662a:	fa00 f202 	lsl.w	r2, r0, r2
 800662e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	e000e100 	.word	0xe000e100

08006640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	6039      	str	r1, [r7, #0]
 800664a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800664c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006650:	2b00      	cmp	r3, #0
 8006652:	db0a      	blt.n	800666a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	490c      	ldr	r1, [pc, #48]	@ (800668c <__NVIC_SetPriority+0x4c>)
 800665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665e:	0112      	lsls	r2, r2, #4
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	440b      	add	r3, r1
 8006664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006668:	e00a      	b.n	8006680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4908      	ldr	r1, [pc, #32]	@ (8006690 <__NVIC_SetPriority+0x50>)
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	3b04      	subs	r3, #4
 8006678:	0112      	lsls	r2, r2, #4
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	440b      	add	r3, r1
 800667e:	761a      	strb	r2, [r3, #24]
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	e000e100 	.word	0xe000e100
 8006690:	e000ed00 	.word	0xe000ed00

08006694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	@ 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f1c3 0307 	rsb	r3, r3, #7
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	bf28      	it	cs
 80066b2:	2304      	movcs	r3, #4
 80066b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	3304      	adds	r3, #4
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	d902      	bls.n	80066c4 <NVIC_EncodePriority+0x30>
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3b03      	subs	r3, #3
 80066c2:	e000      	b.n	80066c6 <NVIC_EncodePriority+0x32>
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066c8:	f04f 32ff 	mov.w	r2, #4294967295
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43da      	mvns	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	401a      	ands	r2, r3
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066dc:	f04f 31ff 	mov.w	r1, #4294967295
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	43d9      	mvns	r1, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066ec:	4313      	orrs	r3, r2
         );
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3724      	adds	r7, #36	@ 0x24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3b01      	subs	r3, #1
 8006704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006708:	d301      	bcc.n	800670e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800670a:	2301      	movs	r3, #1
 800670c:	e00f      	b.n	800672e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800670e:	4a0a      	ldr	r2, [pc, #40]	@ (8006738 <SysTick_Config+0x40>)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3b01      	subs	r3, #1
 8006714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006716:	210f      	movs	r1, #15
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	f7ff ff90 	bl	8006640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006720:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <SysTick_Config+0x40>)
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006726:	4b04      	ldr	r3, [pc, #16]	@ (8006738 <SysTick_Config+0x40>)
 8006728:	2207      	movs	r2, #7
 800672a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	e000e010 	.word	0xe000e010

0800673c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff ff2d 	bl	80065a4 <__NVIC_SetPriorityGrouping>
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	4603      	mov	r3, r0
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006764:	f7ff ff42 	bl	80065ec <__NVIC_GetPriorityGrouping>
 8006768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	6978      	ldr	r0, [r7, #20]
 8006770:	f7ff ff90 	bl	8006694 <NVIC_EncodePriority>
 8006774:	4602      	mov	r2, r0
 8006776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800677a:	4611      	mov	r1, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff ff5f 	bl	8006640 <__NVIC_SetPriority>
}
 8006782:	bf00      	nop
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	4603      	mov	r3, r0
 8006792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff ff35 	bl	8006608 <__NVIC_EnableIRQ>
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff ffa2 	bl	80066f8 <SysTick_Config>
 80067b4:	4603      	mov	r3, r0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b08b      	sub	sp, #44	@ 0x2c
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80067ca:	2300      	movs	r3, #0
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80067ce:	2300      	movs	r3, #0
 80067d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067d2:	e169      	b.n	8006aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80067d4:	2201      	movs	r2, #1
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	4013      	ands	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	f040 8158 	bne.w	8006aa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4a9a      	ldr	r2, [pc, #616]	@ (8006a60 <HAL_GPIO_Init+0x2a0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d05e      	beq.n	80068ba <HAL_GPIO_Init+0xfa>
 80067fc:	4a98      	ldr	r2, [pc, #608]	@ (8006a60 <HAL_GPIO_Init+0x2a0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d875      	bhi.n	80068ee <HAL_GPIO_Init+0x12e>
 8006802:	4a98      	ldr	r2, [pc, #608]	@ (8006a64 <HAL_GPIO_Init+0x2a4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d058      	beq.n	80068ba <HAL_GPIO_Init+0xfa>
 8006808:	4a96      	ldr	r2, [pc, #600]	@ (8006a64 <HAL_GPIO_Init+0x2a4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d86f      	bhi.n	80068ee <HAL_GPIO_Init+0x12e>
 800680e:	4a96      	ldr	r2, [pc, #600]	@ (8006a68 <HAL_GPIO_Init+0x2a8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d052      	beq.n	80068ba <HAL_GPIO_Init+0xfa>
 8006814:	4a94      	ldr	r2, [pc, #592]	@ (8006a68 <HAL_GPIO_Init+0x2a8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d869      	bhi.n	80068ee <HAL_GPIO_Init+0x12e>
 800681a:	4a94      	ldr	r2, [pc, #592]	@ (8006a6c <HAL_GPIO_Init+0x2ac>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d04c      	beq.n	80068ba <HAL_GPIO_Init+0xfa>
 8006820:	4a92      	ldr	r2, [pc, #584]	@ (8006a6c <HAL_GPIO_Init+0x2ac>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d863      	bhi.n	80068ee <HAL_GPIO_Init+0x12e>
 8006826:	4a92      	ldr	r2, [pc, #584]	@ (8006a70 <HAL_GPIO_Init+0x2b0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d046      	beq.n	80068ba <HAL_GPIO_Init+0xfa>
 800682c:	4a90      	ldr	r2, [pc, #576]	@ (8006a70 <HAL_GPIO_Init+0x2b0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d85d      	bhi.n	80068ee <HAL_GPIO_Init+0x12e>
 8006832:	2b12      	cmp	r3, #18
 8006834:	d82a      	bhi.n	800688c <HAL_GPIO_Init+0xcc>
 8006836:	2b12      	cmp	r3, #18
 8006838:	d859      	bhi.n	80068ee <HAL_GPIO_Init+0x12e>
 800683a:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <HAL_GPIO_Init+0x80>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	080068bb 	.word	0x080068bb
 8006844:	08006895 	.word	0x08006895
 8006848:	080068a7 	.word	0x080068a7
 800684c:	080068e9 	.word	0x080068e9
 8006850:	080068ef 	.word	0x080068ef
 8006854:	080068ef 	.word	0x080068ef
 8006858:	080068ef 	.word	0x080068ef
 800685c:	080068ef 	.word	0x080068ef
 8006860:	080068ef 	.word	0x080068ef
 8006864:	080068ef 	.word	0x080068ef
 8006868:	080068ef 	.word	0x080068ef
 800686c:	080068ef 	.word	0x080068ef
 8006870:	080068ef 	.word	0x080068ef
 8006874:	080068ef 	.word	0x080068ef
 8006878:	080068ef 	.word	0x080068ef
 800687c:	080068ef 	.word	0x080068ef
 8006880:	080068ef 	.word	0x080068ef
 8006884:	0800689d 	.word	0x0800689d
 8006888:	080068b1 	.word	0x080068b1
 800688c:	4a79      	ldr	r2, [pc, #484]	@ (8006a74 <HAL_GPIO_Init+0x2b4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006892:	e02c      	b.n	80068ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	623b      	str	r3, [r7, #32]
          break;
 800689a:	e029      	b.n	80068f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	3304      	adds	r3, #4
 80068a2:	623b      	str	r3, [r7, #32]
          break;
 80068a4:	e024      	b.n	80068f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	3308      	adds	r3, #8
 80068ac:	623b      	str	r3, [r7, #32]
          break;
 80068ae:	e01f      	b.n	80068f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	330c      	adds	r3, #12
 80068b6:	623b      	str	r3, [r7, #32]
          break;
 80068b8:	e01a      	b.n	80068f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80068c2:	2304      	movs	r3, #4
 80068c4:	623b      	str	r3, [r7, #32]
          break;
 80068c6:	e013      	b.n	80068f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d105      	bne.n	80068dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80068d0:	2308      	movs	r3, #8
 80068d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	611a      	str	r2, [r3, #16]
          break;
 80068da:	e009      	b.n	80068f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80068dc:	2308      	movs	r3, #8
 80068de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	615a      	str	r2, [r3, #20]
          break;
 80068e6:	e003      	b.n	80068f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80068e8:	2300      	movs	r3, #0
 80068ea:	623b      	str	r3, [r7, #32]
          break;
 80068ec:	e000      	b.n	80068f0 <HAL_GPIO_Init+0x130>
          break;
 80068ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2bff      	cmp	r3, #255	@ 0xff
 80068f4:	d801      	bhi.n	80068fa <HAL_GPIO_Init+0x13a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	e001      	b.n	80068fe <HAL_GPIO_Init+0x13e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2bff      	cmp	r3, #255	@ 0xff
 8006904:	d802      	bhi.n	800690c <HAL_GPIO_Init+0x14c>
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	e002      	b.n	8006912 <HAL_GPIO_Init+0x152>
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	3b08      	subs	r3, #8
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	210f      	movs	r1, #15
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	fa01 f303 	lsl.w	r3, r1, r3
 8006920:	43db      	mvns	r3, r3
 8006922:	401a      	ands	r2, r3
 8006924:	6a39      	ldr	r1, [r7, #32]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	fa01 f303 	lsl.w	r3, r1, r3
 800692c:	431a      	orrs	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80b1 	beq.w	8006aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006940:	4b4d      	ldr	r3, [pc, #308]	@ (8006a78 <HAL_GPIO_Init+0x2b8>)
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	4a4c      	ldr	r2, [pc, #304]	@ (8006a78 <HAL_GPIO_Init+0x2b8>)
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	6193      	str	r3, [r2, #24]
 800694c:	4b4a      	ldr	r3, [pc, #296]	@ (8006a78 <HAL_GPIO_Init+0x2b8>)
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006958:	4a48      	ldr	r2, [pc, #288]	@ (8006a7c <HAL_GPIO_Init+0x2bc>)
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	089b      	lsrs	r3, r3, #2
 800695e:	3302      	adds	r3, #2
 8006960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	f003 0303 	and.w	r3, r3, #3
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	220f      	movs	r2, #15
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	43db      	mvns	r3, r3
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4013      	ands	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a40      	ldr	r2, [pc, #256]	@ (8006a80 <HAL_GPIO_Init+0x2c0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <HAL_GPIO_Init+0x1ec>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a3f      	ldr	r2, [pc, #252]	@ (8006a84 <HAL_GPIO_Init+0x2c4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00d      	beq.n	80069a8 <HAL_GPIO_Init+0x1e8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a3e      	ldr	r2, [pc, #248]	@ (8006a88 <HAL_GPIO_Init+0x2c8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <HAL_GPIO_Init+0x1e4>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3d      	ldr	r2, [pc, #244]	@ (8006a8c <HAL_GPIO_Init+0x2cc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d101      	bne.n	80069a0 <HAL_GPIO_Init+0x1e0>
 800699c:	2303      	movs	r3, #3
 800699e:	e006      	b.n	80069ae <HAL_GPIO_Init+0x1ee>
 80069a0:	2304      	movs	r3, #4
 80069a2:	e004      	b.n	80069ae <HAL_GPIO_Init+0x1ee>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e002      	b.n	80069ae <HAL_GPIO_Init+0x1ee>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_GPIO_Init+0x1ee>
 80069ac:	2300      	movs	r3, #0
 80069ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b0:	f002 0203 	and.w	r2, r2, #3
 80069b4:	0092      	lsls	r2, r2, #2
 80069b6:	4093      	lsls	r3, r2
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80069be:	492f      	ldr	r1, [pc, #188]	@ (8006a7c <HAL_GPIO_Init+0x2bc>)
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	3302      	adds	r3, #2
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80069d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	492c      	ldr	r1, [pc, #176]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	608b      	str	r3, [r1, #8]
 80069e4:	e006      	b.n	80069f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80069e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	4928      	ldr	r1, [pc, #160]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006a00:	4b23      	ldr	r3, [pc, #140]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	4922      	ldr	r1, [pc, #136]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60cb      	str	r3, [r1, #12]
 8006a0c:	e006      	b.n	8006a1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006a0e:	4b20      	ldr	r3, [pc, #128]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	43db      	mvns	r3, r3
 8006a16:	491e      	ldr	r1, [pc, #120]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d006      	beq.n	8006a36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006a28:	4b19      	ldr	r3, [pc, #100]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4918      	ldr	r1, [pc, #96]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	604b      	str	r3, [r1, #4]
 8006a34:	e006      	b.n	8006a44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006a36:	4b16      	ldr	r3, [pc, #88]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	4914      	ldr	r1, [pc, #80]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d021      	beq.n	8006a94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006a50:	4b0f      	ldr	r3, [pc, #60]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	490e      	ldr	r1, [pc, #56]	@ (8006a90 <HAL_GPIO_Init+0x2d0>)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]
 8006a5c:	e021      	b.n	8006aa2 <HAL_GPIO_Init+0x2e2>
 8006a5e:	bf00      	nop
 8006a60:	10320000 	.word	0x10320000
 8006a64:	10310000 	.word	0x10310000
 8006a68:	10220000 	.word	0x10220000
 8006a6c:	10210000 	.word	0x10210000
 8006a70:	10120000 	.word	0x10120000
 8006a74:	10110000 	.word	0x10110000
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010800 	.word	0x40010800
 8006a84:	40010c00 	.word	0x40010c00
 8006a88:	40011000 	.word	0x40011000
 8006a8c:	40011400 	.word	0x40011400
 8006a90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_GPIO_Init+0x304>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	4909      	ldr	r1, [pc, #36]	@ (8006ac4 <HAL_GPIO_Init+0x304>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f47f ae8e 	bne.w	80067d4 <HAL_GPIO_Init+0x14>
  }
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	372c      	adds	r7, #44	@ 0x2c
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	807b      	strh	r3, [r7, #2]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ad8:	787b      	ldrb	r3, [r7, #1]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ade:	887a      	ldrh	r2, [r7, #2]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006ae4:	e003      	b.n	8006aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	041a      	lsls	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	611a      	str	r2, [r3, #16]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b02:	4b08      	ldr	r3, [pc, #32]	@ (8006b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b04:	695a      	ldr	r2, [r3, #20]
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d006      	beq.n	8006b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b0e:	4a05      	ldr	r2, [pc, #20]	@ (8006b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 f806 	bl	8006b28 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40010400 	.word	0x40010400

08006b28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e272      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 8087 	beq.w	8006c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b5c:	4b92      	ldr	r3, [pc, #584]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f003 030c 	and.w	r3, r3, #12
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d00c      	beq.n	8006b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b68:	4b8f      	ldr	r3, [pc, #572]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 030c 	and.w	r3, r3, #12
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d112      	bne.n	8006b9a <HAL_RCC_OscConfig+0x5e>
 8006b74:	4b8c      	ldr	r3, [pc, #560]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b80:	d10b      	bne.n	8006b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b82:	4b89      	ldr	r3, [pc, #548]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d06c      	beq.n	8006c68 <HAL_RCC_OscConfig+0x12c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d168      	bne.n	8006c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e24c      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba2:	d106      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x76>
 8006ba4:	4b80      	ldr	r3, [pc, #512]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a7f      	ldr	r2, [pc, #508]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	e02e      	b.n	8006c10 <HAL_RCC_OscConfig+0xd4>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x98>
 8006bba:	4b7b      	ldr	r3, [pc, #492]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a7a      	ldr	r2, [pc, #488]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	4b78      	ldr	r3, [pc, #480]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a77      	ldr	r2, [pc, #476]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e01d      	b.n	8006c10 <HAL_RCC_OscConfig+0xd4>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0xbc>
 8006bde:	4b72      	ldr	r3, [pc, #456]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a71      	ldr	r2, [pc, #452]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	4b6f      	ldr	r3, [pc, #444]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6e      	ldr	r2, [pc, #440]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e00b      	b.n	8006c10 <HAL_RCC_OscConfig+0xd4>
 8006bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	4b68      	ldr	r3, [pc, #416]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a67      	ldr	r2, [pc, #412]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7ff fc96 	bl	8006548 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c20:	f7ff fc92 	bl	8006548 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	@ 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e200      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	4b5d      	ldr	r3, [pc, #372]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0xe4>
 8006c3e:	e014      	b.n	8006c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c40:	f7ff fc82 	bl	8006548 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c48:	f7ff fc7e 	bl	8006548 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	@ 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e1ec      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c5a:	4b53      	ldr	r3, [pc, #332]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x10c>
 8006c66:	e000      	b.n	8006c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d063      	beq.n	8006d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c76:	4b4c      	ldr	r3, [pc, #304]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c82:	4b49      	ldr	r3, [pc, #292]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f003 030c 	and.w	r3, r3, #12
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d11c      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x18c>
 8006c8e:	4b46      	ldr	r3, [pc, #280]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d116      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9a:	4b43      	ldr	r3, [pc, #268]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x176>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d001      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e1c0      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	4939      	ldr	r1, [pc, #228]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc6:	e03a      	b.n	8006d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cd0:	4b36      	ldr	r3, [pc, #216]	@ (8006dac <HAL_RCC_OscConfig+0x270>)
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd6:	f7ff fc37 	bl	8006548 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cde:	f7ff fc33 	bl	8006548 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e1a1      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f0      	beq.n	8006cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	4927      	ldr	r1, [pc, #156]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	600b      	str	r3, [r1, #0]
 8006d10:	e015      	b.n	8006d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d12:	4b26      	ldr	r3, [pc, #152]	@ (8006dac <HAL_RCC_OscConfig+0x270>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d18:	f7ff fc16 	bl	8006548 <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d20:	f7ff fc12 	bl	8006548 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e180      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d32:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d03a      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d019      	beq.n	8006d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d52:	4b17      	ldr	r3, [pc, #92]	@ (8006db0 <HAL_RCC_OscConfig+0x274>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d58:	f7ff fbf6 	bl	8006548 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d60:	f7ff fbf2 	bl	8006548 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e160      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d72:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <HAL_RCC_OscConfig+0x26c>)
 8006d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d7e:	2001      	movs	r0, #1
 8006d80:	f000 face 	bl	8007320 <RCC_Delay>
 8006d84:	e01c      	b.n	8006dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d86:	4b0a      	ldr	r3, [pc, #40]	@ (8006db0 <HAL_RCC_OscConfig+0x274>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d8c:	f7ff fbdc 	bl	8006548 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d92:	e00f      	b.n	8006db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d94:	f7ff fbd8 	bl	8006548 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d908      	bls.n	8006db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e146      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
 8006da6:	bf00      	nop
 8006da8:	40021000 	.word	0x40021000
 8006dac:	42420000 	.word	0x42420000
 8006db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db4:	4b92      	ldr	r3, [pc, #584]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e9      	bne.n	8006d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80a6 	beq.w	8006f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10d      	bne.n	8006dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dde:	4b88      	ldr	r3, [pc, #544]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	4a87      	ldr	r2, [pc, #540]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de8:	61d3      	str	r3, [r2, #28]
 8006dea:	4b85      	ldr	r3, [pc, #532]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	60bb      	str	r3, [r7, #8]
 8006df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfa:	4b82      	ldr	r3, [pc, #520]	@ (8007004 <HAL_RCC_OscConfig+0x4c8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d118      	bne.n	8006e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e06:	4b7f      	ldr	r3, [pc, #508]	@ (8007004 <HAL_RCC_OscConfig+0x4c8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8007004 <HAL_RCC_OscConfig+0x4c8>)
 8006e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e12:	f7ff fb99 	bl	8006548 <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e18:	e008      	b.n	8006e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1a:	f7ff fb95 	bl	8006548 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b64      	cmp	r3, #100	@ 0x64
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e103      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2c:	4b75      	ldr	r3, [pc, #468]	@ (8007004 <HAL_RCC_OscConfig+0x4c8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0f0      	beq.n	8006e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCC_OscConfig+0x312>
 8006e40:	4b6f      	ldr	r3, [pc, #444]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	4a6e      	ldr	r2, [pc, #440]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6213      	str	r3, [r2, #32]
 8006e4c:	e02d      	b.n	8006eaa <HAL_RCC_OscConfig+0x36e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCC_OscConfig+0x334>
 8006e56:	4b6a      	ldr	r3, [pc, #424]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	4a69      	ldr	r2, [pc, #420]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	6213      	str	r3, [r2, #32]
 8006e62:	4b67      	ldr	r3, [pc, #412]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	4a66      	ldr	r2, [pc, #408]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e68:	f023 0304 	bic.w	r3, r3, #4
 8006e6c:	6213      	str	r3, [r2, #32]
 8006e6e:	e01c      	b.n	8006eaa <HAL_RCC_OscConfig+0x36e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d10c      	bne.n	8006e92 <HAL_RCC_OscConfig+0x356>
 8006e78:	4b61      	ldr	r3, [pc, #388]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	4a60      	ldr	r2, [pc, #384]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e7e:	f043 0304 	orr.w	r3, r3, #4
 8006e82:	6213      	str	r3, [r2, #32]
 8006e84:	4b5e      	ldr	r3, [pc, #376]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	4a5d      	ldr	r2, [pc, #372]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6213      	str	r3, [r2, #32]
 8006e90:	e00b      	b.n	8006eaa <HAL_RCC_OscConfig+0x36e>
 8006e92:	4b5b      	ldr	r3, [pc, #364]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	4a5a      	ldr	r2, [pc, #360]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	6213      	str	r3, [r2, #32]
 8006e9e:	4b58      	ldr	r3, [pc, #352]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	4a57      	ldr	r2, [pc, #348]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006ea4:	f023 0304 	bic.w	r3, r3, #4
 8006ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d015      	beq.n	8006ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eb2:	f7ff fb49 	bl	8006548 <HAL_GetTick>
 8006eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb8:	e00a      	b.n	8006ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eba:	f7ff fb45 	bl	8006548 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e0b1      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0ee      	beq.n	8006eba <HAL_RCC_OscConfig+0x37e>
 8006edc:	e014      	b.n	8006f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ede:	f7ff fb33 	bl	8006548 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee6:	f7ff fb2f 	bl	8006548 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e09b      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006efc:	4b40      	ldr	r3, [pc, #256]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ee      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d105      	bne.n	8006f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	4a3b      	ldr	r2, [pc, #236]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 8087 	beq.w	8007032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f24:	4b36      	ldr	r3, [pc, #216]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f003 030c 	and.w	r3, r3, #12
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d061      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d146      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f38:	4b33      	ldr	r3, [pc, #204]	@ (8007008 <HAL_RCC_OscConfig+0x4cc>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3e:	f7ff fb03 	bl	8006548 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f46:	f7ff faff 	bl	8006548 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e06d      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f58:	4b29      	ldr	r3, [pc, #164]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f0      	bne.n	8006f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6c:	d108      	bne.n	8006f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f6e:	4b24      	ldr	r3, [pc, #144]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	4921      	ldr	r1, [pc, #132]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f80:	4b1f      	ldr	r3, [pc, #124]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a19      	ldr	r1, [r3, #32]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	430b      	orrs	r3, r1
 8006f92:	491b      	ldr	r1, [pc, #108]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f98:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <HAL_RCC_OscConfig+0x4cc>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9e:	f7ff fad3 	bl	8006548 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa6:	f7ff facf 	bl	8006548 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e03d      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fb8:	4b11      	ldr	r3, [pc, #68]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0f0      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x46a>
 8006fc4:	e035      	b.n	8007032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc6:	4b10      	ldr	r3, [pc, #64]	@ (8007008 <HAL_RCC_OscConfig+0x4cc>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fcc:	f7ff fabc 	bl	8006548 <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd4:	f7ff fab8 	bl	8006548 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e026      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe6:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <HAL_RCC_OscConfig+0x4c4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f0      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x498>
 8006ff2:	e01e      	b.n	8007032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e019      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
 8007000:	40021000 	.word	0x40021000
 8007004:	40007000 	.word	0x40007000
 8007008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800700c:	4b0b      	ldr	r3, [pc, #44]	@ (800703c <HAL_RCC_OscConfig+0x500>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	429a      	cmp	r2, r3
 800701e:	d106      	bne.n	800702e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702a:	429a      	cmp	r2, r3
 800702c:	d001      	beq.n	8007032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40021000 	.word	0x40021000

08007040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e0d0      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007054:	4b6a      	ldr	r3, [pc, #424]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d910      	bls.n	8007084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007062:	4b67      	ldr	r3, [pc, #412]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f023 0207 	bic.w	r2, r3, #7
 800706a:	4965      	ldr	r1, [pc, #404]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	4313      	orrs	r3, r2
 8007070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007072:	4b63      	ldr	r3, [pc, #396]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d001      	beq.n	8007084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e0b8      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d020      	beq.n	80070d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800709c:	4b59      	ldr	r3, [pc, #356]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	4a58      	ldr	r2, [pc, #352]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80070a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80070a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070b4:	4b53      	ldr	r3, [pc, #332]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	4a52      	ldr	r2, [pc, #328]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80070ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80070be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070c0:	4b50      	ldr	r3, [pc, #320]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	494d      	ldr	r1, [pc, #308]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d040      	beq.n	8007160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d107      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070e6:	4b47      	ldr	r3, [pc, #284]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d115      	bne.n	800711e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e07f      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d107      	bne.n	800710e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fe:	4b41      	ldr	r3, [pc, #260]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e073      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710e:	4b3d      	ldr	r3, [pc, #244]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e06b      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800711e:	4b39      	ldr	r3, [pc, #228]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f023 0203 	bic.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4936      	ldr	r1, [pc, #216]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 800712c:	4313      	orrs	r3, r2
 800712e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007130:	f7ff fa0a 	bl	8006548 <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	e00a      	b.n	800714e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007138:	f7ff fa06 	bl	8006548 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e053      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	4b2d      	ldr	r3, [pc, #180]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f003 020c 	and.w	r2, r3, #12
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	429a      	cmp	r2, r3
 800715e:	d1eb      	bne.n	8007138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007160:	4b27      	ldr	r3, [pc, #156]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d210      	bcs.n	8007190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b24      	ldr	r3, [pc, #144]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 0207 	bic.w	r2, r3, #7
 8007176:	4922      	ldr	r1, [pc, #136]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b20      	ldr	r3, [pc, #128]	@ (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e032      	b.n	80071f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800719c:	4b19      	ldr	r3, [pc, #100]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	4916      	ldr	r1, [pc, #88]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071ba:	4b12      	ldr	r3, [pc, #72]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	490e      	ldr	r1, [pc, #56]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071ce:	f000 f821 	bl	8007214 <HAL_RCC_GetSysClockFreq>
 80071d2:	4602      	mov	r2, r0
 80071d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	490a      	ldr	r1, [pc, #40]	@ (8007208 <HAL_RCC_ClockConfig+0x1c8>)
 80071e0:	5ccb      	ldrb	r3, [r1, r3]
 80071e2:	fa22 f303 	lsr.w	r3, r2, r3
 80071e6:	4a09      	ldr	r2, [pc, #36]	@ (800720c <HAL_RCC_ClockConfig+0x1cc>)
 80071e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071ea:	4b09      	ldr	r3, [pc, #36]	@ (8007210 <HAL_RCC_ClockConfig+0x1d0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff f968 	bl	80064c4 <HAL_InitTick>

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40022000 	.word	0x40022000
 8007204:	40021000 	.word	0x40021000
 8007208:	08009440 	.word	0x08009440
 800720c:	20000058 	.word	0x20000058
 8007210:	200000a8 	.word	0x200000a8

08007214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800722e:	4b1e      	ldr	r3, [pc, #120]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 030c 	and.w	r3, r3, #12
 800723a:	2b04      	cmp	r3, #4
 800723c:	d002      	beq.n	8007244 <HAL_RCC_GetSysClockFreq+0x30>
 800723e:	2b08      	cmp	r3, #8
 8007240:	d003      	beq.n	800724a <HAL_RCC_GetSysClockFreq+0x36>
 8007242:	e027      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007244:	4b19      	ldr	r3, [pc, #100]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007246:	613b      	str	r3, [r7, #16]
      break;
 8007248:	e027      	b.n	800729a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	0c9b      	lsrs	r3, r3, #18
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007254:	5cd3      	ldrb	r3, [r2, r3]
 8007256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007262:	4b11      	ldr	r3, [pc, #68]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	0c5b      	lsrs	r3, r3, #17
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800726e:	5cd3      	ldrb	r3, [r2, r3]
 8007270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a0d      	ldr	r2, [pc, #52]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007276:	fb03 f202 	mul.w	r2, r3, r2
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	e004      	b.n	800728e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a0c      	ldr	r2, [pc, #48]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	613b      	str	r3, [r7, #16]
      break;
 8007292:	e002      	b.n	800729a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007294:	4b05      	ldr	r3, [pc, #20]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007296:	613b      	str	r3, [r7, #16]
      break;
 8007298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800729a:	693b      	ldr	r3, [r7, #16]
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40021000 	.word	0x40021000
 80072ac:	007a1200 	.word	0x007a1200
 80072b0:	08009458 	.word	0x08009458
 80072b4:	08009468 	.word	0x08009468
 80072b8:	003d0900 	.word	0x003d0900

080072bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c0:	4b02      	ldr	r3, [pc, #8]	@ (80072cc <HAL_RCC_GetHCLKFreq+0x10>)
 80072c2:	681b      	ldr	r3, [r3, #0]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr
 80072cc:	20000058 	.word	0x20000058

080072d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072d4:	f7ff fff2 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4903      	ldr	r1, [pc, #12]	@ (80072f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40021000 	.word	0x40021000
 80072f4:	08009450 	.word	0x08009450

080072f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072fc:	f7ff ffde 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 8007300:	4602      	mov	r2, r0
 8007302:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	0adb      	lsrs	r3, r3, #11
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	4903      	ldr	r1, [pc, #12]	@ (800731c <HAL_RCC_GetPCLK2Freq+0x24>)
 800730e:	5ccb      	ldrb	r3, [r1, r3]
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40021000 	.word	0x40021000
 800731c:	08009450 	.word	0x08009450

08007320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <RCC_Delay+0x34>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a0a      	ldr	r2, [pc, #40]	@ (8007358 <RCC_Delay+0x38>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	0a5b      	lsrs	r3, r3, #9
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800733c:	bf00      	nop
  }
  while (Delay --);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	60fa      	str	r2, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f9      	bne.n	800733c <RCC_Delay+0x1c>
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr
 8007354:	20000058 	.word	0x20000058
 8007358:	10624dd3 	.word	0x10624dd3

0800735c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e076      	b.n	800745c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	d108      	bne.n	8007388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800737e:	d009      	beq.n	8007394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	61da      	str	r2, [r3, #28]
 8007386:	e005      	b.n	8007394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7f9 facc 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007418:	ea42 0103 	orr.w	r1, r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007420:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	0c1a      	lsrs	r2, r3, #16
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f002 0204 	and.w	r2, r2, #4
 800743a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800744a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08c      	sub	sp, #48	@ 0x30
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007472:	2301      	movs	r3, #1
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_SPI_TransmitReceive+0x26>
 8007486:	2302      	movs	r3, #2
 8007488:	e198      	b.n	80077bc <HAL_SPI_TransmitReceive+0x358>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007492:	f7ff f859 	bl	8006548 <HAL_GetTick>
 8007496:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074a8:	887b      	ldrh	r3, [r7, #2]
 80074aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d00f      	beq.n	80074d4 <HAL_SPI_TransmitReceive+0x70>
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074ba:	d107      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x68>
 80074c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d003      	beq.n	80074d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80074d2:	e16d      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_SPI_TransmitReceive+0x82>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_SPI_TransmitReceive+0x82>
 80074e0:	887b      	ldrh	r3, [r7, #2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80074ec:	e160      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d003      	beq.n	8007502 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2205      	movs	r2, #5
 80074fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	887a      	ldrh	r2, [r7, #2]
 8007512:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	887a      	ldrh	r2, [r7, #2]
 8007518:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	887a      	ldrh	r2, [r7, #2]
 800752a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d007      	beq.n	8007556 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800755e:	d17c      	bne.n	800765a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <HAL_SPI_TransmitReceive+0x10a>
 8007568:	8b7b      	ldrh	r3, [r7, #26]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d16a      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007572:	881a      	ldrh	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757e:	1c9a      	adds	r2, r3, #2
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007588:	b29b      	uxth	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007592:	e057      	b.n	8007644 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d11b      	bne.n	80075da <HAL_SPI_TransmitReceive+0x176>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d016      	beq.n	80075da <HAL_SPI_TransmitReceive+0x176>
 80075ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d113      	bne.n	80075da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b6:	881a      	ldrh	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c2:	1c9a      	adds	r2, r3, #2
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d119      	bne.n	800761c <HAL_SPI_TransmitReceive+0x1b8>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d014      	beq.n	800761c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fc:	b292      	uxth	r2, r2
 80075fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007618:	2301      	movs	r3, #1
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800761c:	f7fe ff94 	bl	8006548 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007628:	429a      	cmp	r2, r3
 800762a:	d80b      	bhi.n	8007644 <HAL_SPI_TransmitReceive+0x1e0>
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d007      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007642:	e0b5      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1a2      	bne.n	8007594 <HAL_SPI_TransmitReceive+0x130>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d19d      	bne.n	8007594 <HAL_SPI_TransmitReceive+0x130>
 8007658:	e080      	b.n	800775c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_SPI_TransmitReceive+0x204>
 8007662:	8b7b      	ldrh	r3, [r7, #26]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d16f      	bne.n	8007748 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800768e:	e05b      	b.n	8007748 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d11c      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x274>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d017      	beq.n	80076d8 <HAL_SPI_TransmitReceive+0x274>
 80076a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d114      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	7812      	ldrb	r2, [r2, #0]
 80076ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d119      	bne.n	800771a <HAL_SPI_TransmitReceive+0x2b6>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d014      	beq.n	800771a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007716:	2301      	movs	r3, #1
 8007718:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800771a:	f7fe ff15 	bl	8006548 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007726:	429a      	cmp	r2, r3
 8007728:	d803      	bhi.n	8007732 <HAL_SPI_TransmitReceive+0x2ce>
 800772a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d102      	bne.n	8007738 <HAL_SPI_TransmitReceive+0x2d4>
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	d107      	bne.n	8007748 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007746:	e033      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d19e      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x22c>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007756:	b29b      	uxth	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d199      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800775c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f8b7 	bl	80078d4 <SPI_EndRxTxTransaction>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d006      	beq.n	800777a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007778:	e01a      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a6:	e003      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80077b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3730      	adds	r7, #48	@ 0x30
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077d4:	f7fe feb8 	bl	8006548 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	4413      	add	r3, r2
 80077e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077e4:	f7fe feb0 	bl	8006548 <HAL_GetTick>
 80077e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077ea:	4b39      	ldr	r3, [pc, #228]	@ (80078d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	015b      	lsls	r3, r3, #5
 80077f0:	0d1b      	lsrs	r3, r3, #20
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	fb02 f303 	mul.w	r3, r2, r3
 80077f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077fa:	e054      	b.n	80078a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d050      	beq.n	80078a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007804:	f7fe fea0 	bl	8006548 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	429a      	cmp	r2, r3
 8007812:	d902      	bls.n	800781a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d13d      	bne.n	8007896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007832:	d111      	bne.n	8007858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800783c:	d004      	beq.n	8007848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007846:	d107      	bne.n	8007858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007860:	d10f      	bne.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e017      	b.n	80078c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4013      	ands	r3, r2
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	bf0c      	ite	eq
 80078b6:	2301      	moveq	r3, #1
 80078b8:	2300      	movne	r3, #0
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	461a      	mov	r2, r3
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d19b      	bne.n	80077fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000058 	.word	0x20000058

080078d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2200      	movs	r2, #0
 80078e8:	2180      	movs	r1, #128	@ 0x80
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff ff6a 	bl	80077c4 <SPI_WaitFlagStateUntilTimeout>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fa:	f043 0220 	orr.w	r2, r3, #32
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e000      	b.n	8007908 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e042      	b.n	80079a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7f9 f854 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2224      	movs	r2, #36	@ 0x24
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f91d 	bl	8007b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	@ 0x28
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d16d      	bne.n	8007aac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_UART_Transmit+0x2c>
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e066      	b.n	8007aae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2221      	movs	r2, #33	@ 0x21
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079ee:	f7fe fdab 	bl	8006548 <HAL_GetTick>
 80079f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a08:	d108      	bne.n	8007a1c <HAL_UART_Transmit+0x6c>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	e003      	b.n	8007a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a24:	e02a      	b.n	8007a7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2180      	movs	r1, #128	@ 0x80
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f840 	bl	8007ab6 <UART_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e036      	b.n	8007aae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	3302      	adds	r3, #2
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e007      	b.n	8007a6e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1cf      	bne.n	8007a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2140      	movs	r1, #64	@ 0x40
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f810 	bl	8007ab6 <UART_WaitOnFlagUntilTimeout>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e006      	b.n	8007aae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e000      	b.n	8007aae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007aac:	2302      	movs	r3, #2
  }
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b090      	sub	sp, #64	@ 0x40
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac6:	e050      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d04c      	beq.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ad6:	f7fe fd37 	bl	8006548 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d241      	bcs.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	330c      	adds	r3, #12
 8007b04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007b06:	637a      	str	r2, [r7, #52]	@ 0x34
 8007b08:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e5      	bne.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3314      	adds	r3, #20
 8007b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3314      	adds	r3, #20
 8007b38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b3a:	623a      	str	r2, [r7, #32]
 8007b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	69f9      	ldr	r1, [r7, #28]
 8007b40:	6a3a      	ldr	r2, [r7, #32]
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e5      	bne.n	8007b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e00f      	b.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4013      	ands	r3, r2
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	bf0c      	ite	eq
 8007b7a:	2301      	moveq	r3, #1
 8007b7c:	2300      	movne	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d09f      	beq.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3740      	adds	r7, #64	@ 0x40
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007bce:	f023 030c 	bic.w	r3, r3, #12
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8007ca8 <UART_SetConfig+0x114>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d103      	bne.n	8007c04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007bfc:	f7ff fb7c 	bl	80072f8 <HAL_RCC_GetPCLK2Freq>
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	e002      	b.n	8007c0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c04:	f7ff fb64 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 8007c08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009a      	lsls	r2, r3, #2
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	4a22      	ldr	r2, [pc, #136]	@ (8007cac <UART_SetConfig+0x118>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	0119      	lsls	r1, r3, #4
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009a      	lsls	r2, r3, #2
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c40:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <UART_SetConfig+0x118>)
 8007c42:	fba3 0302 	umull	r0, r3, r3, r2
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	2064      	movs	r0, #100	@ 0x64
 8007c4a:	fb00 f303 	mul.w	r3, r0, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	3332      	adds	r3, #50	@ 0x32
 8007c54:	4a15      	ldr	r2, [pc, #84]	@ (8007cac <UART_SetConfig+0x118>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c60:	4419      	add	r1, r3
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	009a      	lsls	r2, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c78:	4b0c      	ldr	r3, [pc, #48]	@ (8007cac <UART_SetConfig+0x118>)
 8007c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8007c7e:	095b      	lsrs	r3, r3, #5
 8007c80:	2064      	movs	r0, #100	@ 0x64
 8007c82:	fb00 f303 	mul.w	r3, r0, r3
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	3332      	adds	r3, #50	@ 0x32
 8007c8c:	4a07      	ldr	r2, [pc, #28]	@ (8007cac <UART_SetConfig+0x118>)
 8007c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	f003 020f 	and.w	r2, r3, #15
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	40013800 	.word	0x40013800
 8007cac:	51eb851f 	.word	0x51eb851f

08007cb0 <std>:
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cbe:	6083      	str	r3, [r0, #8]
 8007cc0:	8181      	strh	r1, [r0, #12]
 8007cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cc4:	81c2      	strh	r2, [r0, #14]
 8007cc6:	6183      	str	r3, [r0, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2208      	movs	r2, #8
 8007ccc:	305c      	adds	r0, #92	@ 0x5c
 8007cce:	f000 fa19 	bl	8008104 <memset>
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <std+0x58>)
 8007cd4:	6224      	str	r4, [r4, #32]
 8007cd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <std+0x5c>)
 8007cda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d10 <std+0x60>)
 8007cde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d14 <std+0x64>)
 8007ce2:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <std+0x68>)
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	d006      	beq.n	8007cf8 <std+0x48>
 8007cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cee:	4294      	cmp	r4, r2
 8007cf0:	d002      	beq.n	8007cf8 <std+0x48>
 8007cf2:	33d0      	adds	r3, #208	@ 0xd0
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d105      	bne.n	8007d04 <std+0x54>
 8007cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f000 baaa 	b.w	8008258 <__retarget_lock_init_recursive>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	08007f55 	.word	0x08007f55
 8007d0c:	08007f77 	.word	0x08007f77
 8007d10:	08007faf 	.word	0x08007faf
 8007d14:	08007fd3 	.word	0x08007fd3
 8007d18:	2000124c 	.word	0x2000124c

08007d1c <stdio_exit_handler>:
 8007d1c:	4a02      	ldr	r2, [pc, #8]	@ (8007d28 <stdio_exit_handler+0xc>)
 8007d1e:	4903      	ldr	r1, [pc, #12]	@ (8007d2c <stdio_exit_handler+0x10>)
 8007d20:	4803      	ldr	r0, [pc, #12]	@ (8007d30 <stdio_exit_handler+0x14>)
 8007d22:	f000 b869 	b.w	8007df8 <_fwalk_sglue>
 8007d26:	bf00      	nop
 8007d28:	200000b0 	.word	0x200000b0
 8007d2c:	08008dcd 	.word	0x08008dcd
 8007d30:	200000c0 	.word	0x200000c0

08007d34 <cleanup_stdio>:
 8007d34:	6841      	ldr	r1, [r0, #4]
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <cleanup_stdio+0x34>)
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	d001      	beq.n	8007d44 <cleanup_stdio+0x10>
 8007d40:	f001 f844 	bl	8008dcc <_fflush_r>
 8007d44:	68a1      	ldr	r1, [r4, #8]
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <cleanup_stdio+0x38>)
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	d002      	beq.n	8007d52 <cleanup_stdio+0x1e>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f001 f83d 	bl	8008dcc <_fflush_r>
 8007d52:	68e1      	ldr	r1, [r4, #12]
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <cleanup_stdio+0x3c>)
 8007d56:	4299      	cmp	r1, r3
 8007d58:	d004      	beq.n	8007d64 <cleanup_stdio+0x30>
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f001 b834 	b.w	8008dcc <_fflush_r>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	2000124c 	.word	0x2000124c
 8007d6c:	200012b4 	.word	0x200012b4
 8007d70:	2000131c 	.word	0x2000131c

08007d74 <global_stdio_init.part.0>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <global_stdio_init.part.0+0x30>)
 8007d78:	4c0b      	ldr	r4, [pc, #44]	@ (8007da8 <global_stdio_init.part.0+0x34>)
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dac <global_stdio_init.part.0+0x38>)
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	2104      	movs	r1, #4
 8007d82:	2200      	movs	r2, #0
 8007d84:	f7ff ff94 	bl	8007cb0 <std>
 8007d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2109      	movs	r1, #9
 8007d90:	f7ff ff8e 	bl	8007cb0 <std>
 8007d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d98:	2202      	movs	r2, #2
 8007d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9e:	2112      	movs	r1, #18
 8007da0:	f7ff bf86 	b.w	8007cb0 <std>
 8007da4:	20001384 	.word	0x20001384
 8007da8:	2000124c 	.word	0x2000124c
 8007dac:	08007d1d 	.word	0x08007d1d

08007db0 <__sfp_lock_acquire>:
 8007db0:	4801      	ldr	r0, [pc, #4]	@ (8007db8 <__sfp_lock_acquire+0x8>)
 8007db2:	f000 ba52 	b.w	800825a <__retarget_lock_acquire_recursive>
 8007db6:	bf00      	nop
 8007db8:	2000138d 	.word	0x2000138d

08007dbc <__sfp_lock_release>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__sfp_lock_release+0x8>)
 8007dbe:	f000 ba4d 	b.w	800825c <__retarget_lock_release_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	2000138d 	.word	0x2000138d

08007dc8 <__sinit>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	f7ff fff0 	bl	8007db0 <__sfp_lock_acquire>
 8007dd0:	6a23      	ldr	r3, [r4, #32]
 8007dd2:	b11b      	cbz	r3, 8007ddc <__sinit+0x14>
 8007dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd8:	f7ff bff0 	b.w	8007dbc <__sfp_lock_release>
 8007ddc:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <__sinit+0x28>)
 8007dde:	6223      	str	r3, [r4, #32]
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <__sinit+0x2c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f5      	bne.n	8007dd4 <__sinit+0xc>
 8007de8:	f7ff ffc4 	bl	8007d74 <global_stdio_init.part.0>
 8007dec:	e7f2      	b.n	8007dd4 <__sinit+0xc>
 8007dee:	bf00      	nop
 8007df0:	08007d35 	.word	0x08007d35
 8007df4:	20001384 	.word	0x20001384

08007df8 <_fwalk_sglue>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4688      	mov	r8, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	2600      	movs	r6, #0
 8007e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e08:	f1b9 0901 	subs.w	r9, r9, #1
 8007e0c:	d505      	bpl.n	8007e1a <_fwalk_sglue+0x22>
 8007e0e:	6824      	ldr	r4, [r4, #0]
 8007e10:	2c00      	cmp	r4, #0
 8007e12:	d1f7      	bne.n	8007e04 <_fwalk_sglue+0xc>
 8007e14:	4630      	mov	r0, r6
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d907      	bls.n	8007e30 <_fwalk_sglue+0x38>
 8007e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e24:	3301      	adds	r3, #1
 8007e26:	d003      	beq.n	8007e30 <_fwalk_sglue+0x38>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	4306      	orrs	r6, r0
 8007e30:	3568      	adds	r5, #104	@ 0x68
 8007e32:	e7e9      	b.n	8007e08 <_fwalk_sglue+0x10>

08007e34 <iprintf>:
 8007e34:	b40f      	push	{r0, r1, r2, r3}
 8007e36:	b507      	push	{r0, r1, r2, lr}
 8007e38:	4906      	ldr	r1, [pc, #24]	@ (8007e54 <iprintf+0x20>)
 8007e3a:	ab04      	add	r3, sp, #16
 8007e3c:	6808      	ldr	r0, [r1, #0]
 8007e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e42:	6881      	ldr	r1, [r0, #8]
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	f000 fc97 	bl	8008778 <_vfiprintf_r>
 8007e4a:	b003      	add	sp, #12
 8007e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e50:	b004      	add	sp, #16
 8007e52:	4770      	bx	lr
 8007e54:	200000bc 	.word	0x200000bc

08007e58 <_puts_r>:
 8007e58:	6a03      	ldr	r3, [r0, #32]
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460e      	mov	r6, r1
 8007e60:	6884      	ldr	r4, [r0, #8]
 8007e62:	b90b      	cbnz	r3, 8007e68 <_puts_r+0x10>
 8007e64:	f7ff ffb0 	bl	8007dc8 <__sinit>
 8007e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e6a:	07db      	lsls	r3, r3, #31
 8007e6c:	d405      	bmi.n	8007e7a <_puts_r+0x22>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_puts_r+0x22>
 8007e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e76:	f000 f9f0 	bl	800825a <__retarget_lock_acquire_recursive>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	0719      	lsls	r1, r3, #28
 8007e7e:	d502      	bpl.n	8007e86 <_puts_r+0x2e>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d135      	bne.n	8007ef2 <_puts_r+0x9a>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 f8e5 	bl	8008058 <__swsetup_r>
 8007e8e:	b380      	cbz	r0, 8007ef2 <_puts_r+0x9a>
 8007e90:	f04f 35ff 	mov.w	r5, #4294967295
 8007e94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e96:	07da      	lsls	r2, r3, #31
 8007e98:	d405      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea2:	f000 f9db 	bl	800825c <__retarget_lock_release_recursive>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da04      	bge.n	8007eb8 <_puts_r+0x60>
 8007eae:	69a2      	ldr	r2, [r4, #24]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	dc17      	bgt.n	8007ee4 <_puts_r+0x8c>
 8007eb4:	290a      	cmp	r1, #10
 8007eb6:	d015      	beq.n	8007ee4 <_puts_r+0x8c>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	7019      	strb	r1, [r3, #0]
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d1ed      	bne.n	8007eaa <_puts_r+0x52>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da11      	bge.n	8007ef6 <_puts_r+0x9e>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	210a      	movs	r1, #10
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 f87f 	bl	8007fda <__swbuf_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d0d7      	beq.n	8007e90 <_puts_r+0x38>
 8007ee0:	250a      	movs	r5, #10
 8007ee2:	e7d7      	b.n	8007e94 <_puts_r+0x3c>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 f877 	bl	8007fda <__swbuf_r>
 8007eec:	3001      	adds	r0, #1
 8007eee:	d1e7      	bne.n	8007ec0 <_puts_r+0x68>
 8007ef0:	e7ce      	b.n	8007e90 <_puts_r+0x38>
 8007ef2:	3e01      	subs	r6, #1
 8007ef4:	e7e4      	b.n	8007ec0 <_puts_r+0x68>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	220a      	movs	r2, #10
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	e7ee      	b.n	8007ee0 <_puts_r+0x88>
	...

08007f04 <puts>:
 8007f04:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <puts+0xc>)
 8007f06:	4601      	mov	r1, r0
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f7ff bfa5 	b.w	8007e58 <_puts_r>
 8007f0e:	bf00      	nop
 8007f10:	200000bc 	.word	0x200000bc

08007f14 <siprintf>:
 8007f14:	b40e      	push	{r1, r2, r3}
 8007f16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f1a:	b500      	push	{lr}
 8007f1c:	b09c      	sub	sp, #112	@ 0x70
 8007f1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f20:	9002      	str	r0, [sp, #8]
 8007f22:	9006      	str	r0, [sp, #24]
 8007f24:	9107      	str	r1, [sp, #28]
 8007f26:	9104      	str	r1, [sp, #16]
 8007f28:	4808      	ldr	r0, [pc, #32]	@ (8007f4c <siprintf+0x38>)
 8007f2a:	4909      	ldr	r1, [pc, #36]	@ (8007f50 <siprintf+0x3c>)
 8007f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f30:	9105      	str	r1, [sp, #20]
 8007f32:	6800      	ldr	r0, [r0, #0]
 8007f34:	a902      	add	r1, sp, #8
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	f000 fafa 	bl	8008530 <_svfiprintf_r>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	b01c      	add	sp, #112	@ 0x70
 8007f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f48:	b003      	add	sp, #12
 8007f4a:	4770      	bx	lr
 8007f4c:	200000bc 	.word	0x200000bc
 8007f50:	ffff0208 	.word	0xffff0208

08007f54 <__sread>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	460c      	mov	r4, r1
 8007f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5c:	f000 f92e 	bl	80081bc <_read_r>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	bfab      	itete	ge
 8007f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f66:	89a3      	ldrhlt	r3, [r4, #12]
 8007f68:	181b      	addge	r3, r3, r0
 8007f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f6e:	bfac      	ite	ge
 8007f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f72:	81a3      	strhlt	r3, [r4, #12]
 8007f74:	bd10      	pop	{r4, pc}

08007f76 <__swrite>:
 8007f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7a:	461f      	mov	r7, r3
 8007f7c:	898b      	ldrh	r3, [r1, #12]
 8007f7e:	4605      	mov	r5, r0
 8007f80:	05db      	lsls	r3, r3, #23
 8007f82:	460c      	mov	r4, r1
 8007f84:	4616      	mov	r6, r2
 8007f86:	d505      	bpl.n	8007f94 <__swrite+0x1e>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f90:	f000 f902 	bl	8008198 <_lseek_r>
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	4632      	mov	r2, r6
 8007f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	463b      	mov	r3, r7
 8007fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007faa:	f000 b919 	b.w	80081e0 <_write_r>

08007fae <__sseek>:
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb6:	f000 f8ef 	bl	8008198 <_lseek_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	bf15      	itete	ne
 8007fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fca:	81a3      	strheq	r3, [r4, #12]
 8007fcc:	bf18      	it	ne
 8007fce:	81a3      	strhne	r3, [r4, #12]
 8007fd0:	bd10      	pop	{r4, pc}

08007fd2 <__sclose>:
 8007fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd6:	f000 b8cf 	b.w	8008178 <_close_r>

08007fda <__swbuf_r>:
 8007fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fdc:	460e      	mov	r6, r1
 8007fde:	4614      	mov	r4, r2
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	b118      	cbz	r0, 8007fec <__swbuf_r+0x12>
 8007fe4:	6a03      	ldr	r3, [r0, #32]
 8007fe6:	b90b      	cbnz	r3, 8007fec <__swbuf_r+0x12>
 8007fe8:	f7ff feee 	bl	8007dc8 <__sinit>
 8007fec:	69a3      	ldr	r3, [r4, #24]
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	071a      	lsls	r2, r3, #28
 8007ff4:	d501      	bpl.n	8007ffa <__swbuf_r+0x20>
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b943      	cbnz	r3, 800800c <__swbuf_r+0x32>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f82b 	bl	8008058 <__swsetup_r>
 8008002:	b118      	cbz	r0, 800800c <__swbuf_r+0x32>
 8008004:	f04f 37ff 	mov.w	r7, #4294967295
 8008008:	4638      	mov	r0, r7
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	6922      	ldr	r2, [r4, #16]
 8008010:	b2f6      	uxtb	r6, r6
 8008012:	1a98      	subs	r0, r3, r2
 8008014:	6963      	ldr	r3, [r4, #20]
 8008016:	4637      	mov	r7, r6
 8008018:	4283      	cmp	r3, r0
 800801a:	dc05      	bgt.n	8008028 <__swbuf_r+0x4e>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 fed4 	bl	8008dcc <_fflush_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d1ed      	bne.n	8008004 <__swbuf_r+0x2a>
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	3b01      	subs	r3, #1
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	6022      	str	r2, [r4, #0]
 8008034:	701e      	strb	r6, [r3, #0]
 8008036:	6962      	ldr	r2, [r4, #20]
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	429a      	cmp	r2, r3
 800803c:	d004      	beq.n	8008048 <__swbuf_r+0x6e>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	07db      	lsls	r3, r3, #31
 8008042:	d5e1      	bpl.n	8008008 <__swbuf_r+0x2e>
 8008044:	2e0a      	cmp	r6, #10
 8008046:	d1df      	bne.n	8008008 <__swbuf_r+0x2e>
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	f000 febe 	bl	8008dcc <_fflush_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	d0d9      	beq.n	8008008 <__swbuf_r+0x2e>
 8008054:	e7d6      	b.n	8008004 <__swbuf_r+0x2a>
	...

08008058 <__swsetup_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4b29      	ldr	r3, [pc, #164]	@ (8008100 <__swsetup_r+0xa8>)
 800805c:	4605      	mov	r5, r0
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	460c      	mov	r4, r1
 8008062:	b118      	cbz	r0, 800806c <__swsetup_r+0x14>
 8008064:	6a03      	ldr	r3, [r0, #32]
 8008066:	b90b      	cbnz	r3, 800806c <__swsetup_r+0x14>
 8008068:	f7ff feae 	bl	8007dc8 <__sinit>
 800806c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	d422      	bmi.n	80080ba <__swsetup_r+0x62>
 8008074:	06da      	lsls	r2, r3, #27
 8008076:	d407      	bmi.n	8008088 <__swsetup_r+0x30>
 8008078:	2209      	movs	r2, #9
 800807a:	602a      	str	r2, [r5, #0]
 800807c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008080:	f04f 30ff 	mov.w	r0, #4294967295
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	e033      	b.n	80080f0 <__swsetup_r+0x98>
 8008088:	0758      	lsls	r0, r3, #29
 800808a:	d512      	bpl.n	80080b2 <__swsetup_r+0x5a>
 800808c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800808e:	b141      	cbz	r1, 80080a2 <__swsetup_r+0x4a>
 8008090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008094:	4299      	cmp	r1, r3
 8008096:	d002      	beq.n	800809e <__swsetup_r+0x46>
 8008098:	4628      	mov	r0, r5
 800809a:	f000 f8f7 	bl	800828c <_free_r>
 800809e:	2300      	movs	r3, #0
 80080a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	2300      	movs	r3, #0
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	6923      	ldr	r3, [r4, #16]
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	f043 0308 	orr.w	r3, r3, #8
 80080b8:	81a3      	strh	r3, [r4, #12]
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	b94b      	cbnz	r3, 80080d2 <__swsetup_r+0x7a>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c8:	d003      	beq.n	80080d2 <__swsetup_r+0x7a>
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 feca 	bl	8008e66 <__smakebuf_r>
 80080d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d6:	f013 0201 	ands.w	r2, r3, #1
 80080da:	d00a      	beq.n	80080f2 <__swsetup_r+0x9a>
 80080dc:	2200      	movs	r2, #0
 80080de:	60a2      	str	r2, [r4, #8]
 80080e0:	6962      	ldr	r2, [r4, #20]
 80080e2:	4252      	negs	r2, r2
 80080e4:	61a2      	str	r2, [r4, #24]
 80080e6:	6922      	ldr	r2, [r4, #16]
 80080e8:	b942      	cbnz	r2, 80080fc <__swsetup_r+0xa4>
 80080ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080ee:	d1c5      	bne.n	800807c <__swsetup_r+0x24>
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
 80080f2:	0799      	lsls	r1, r3, #30
 80080f4:	bf58      	it	pl
 80080f6:	6962      	ldrpl	r2, [r4, #20]
 80080f8:	60a2      	str	r2, [r4, #8]
 80080fa:	e7f4      	b.n	80080e6 <__swsetup_r+0x8e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7f7      	b.n	80080f0 <__swsetup_r+0x98>
 8008100:	200000bc 	.word	0x200000bc

08008104 <memset>:
 8008104:	4603      	mov	r3, r0
 8008106:	4402      	add	r2, r0
 8008108:	4293      	cmp	r3, r2
 800810a:	d100      	bne.n	800810e <memset+0xa>
 800810c:	4770      	bx	lr
 800810e:	f803 1b01 	strb.w	r1, [r3], #1
 8008112:	e7f9      	b.n	8008108 <memset+0x4>

08008114 <strchr>:
 8008114:	4603      	mov	r3, r0
 8008116:	b2c9      	uxtb	r1, r1
 8008118:	4618      	mov	r0, r3
 800811a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800811e:	b112      	cbz	r2, 8008126 <strchr+0x12>
 8008120:	428a      	cmp	r2, r1
 8008122:	d1f9      	bne.n	8008118 <strchr+0x4>
 8008124:	4770      	bx	lr
 8008126:	2900      	cmp	r1, #0
 8008128:	bf18      	it	ne
 800812a:	2000      	movne	r0, #0
 800812c:	4770      	bx	lr

0800812e <strncmp>:
 800812e:	b510      	push	{r4, lr}
 8008130:	b16a      	cbz	r2, 800814e <strncmp+0x20>
 8008132:	3901      	subs	r1, #1
 8008134:	1884      	adds	r4, r0, r2
 8008136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800813a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800813e:	429a      	cmp	r2, r3
 8008140:	d103      	bne.n	800814a <strncmp+0x1c>
 8008142:	42a0      	cmp	r0, r4
 8008144:	d001      	beq.n	800814a <strncmp+0x1c>
 8008146:	2a00      	cmp	r2, #0
 8008148:	d1f5      	bne.n	8008136 <strncmp+0x8>
 800814a:	1ad0      	subs	r0, r2, r3
 800814c:	bd10      	pop	{r4, pc}
 800814e:	4610      	mov	r0, r2
 8008150:	e7fc      	b.n	800814c <strncmp+0x1e>

08008152 <strncpy>:
 8008152:	4603      	mov	r3, r0
 8008154:	b510      	push	{r4, lr}
 8008156:	3901      	subs	r1, #1
 8008158:	b132      	cbz	r2, 8008168 <strncpy+0x16>
 800815a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800815e:	3a01      	subs	r2, #1
 8008160:	f803 4b01 	strb.w	r4, [r3], #1
 8008164:	2c00      	cmp	r4, #0
 8008166:	d1f7      	bne.n	8008158 <strncpy+0x6>
 8008168:	2100      	movs	r1, #0
 800816a:	441a      	add	r2, r3
 800816c:	4293      	cmp	r3, r2
 800816e:	d100      	bne.n	8008172 <strncpy+0x20>
 8008170:	bd10      	pop	{r4, pc}
 8008172:	f803 1b01 	strb.w	r1, [r3], #1
 8008176:	e7f9      	b.n	800816c <strncpy+0x1a>

08008178 <_close_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	2300      	movs	r3, #0
 800817c:	4d05      	ldr	r5, [pc, #20]	@ (8008194 <_close_r+0x1c>)
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7f8 fcbd 	bl	8000b02 <_close>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_close_r+0x1a>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_close_r+0x1a>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20001388 	.word	0x20001388

08008198 <_lseek_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	2200      	movs	r2, #0
 80081a2:	4d05      	ldr	r5, [pc, #20]	@ (80081b8 <_lseek_r+0x20>)
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f8 fccf 	bl	8000b4a <_lseek>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_lseek_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_lseek_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20001388 	.word	0x20001388

080081bc <_read_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	4611      	mov	r1, r2
 80081c4:	2200      	movs	r2, #0
 80081c6:	4d05      	ldr	r5, [pc, #20]	@ (80081dc <_read_r+0x20>)
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f7f8 fc7c 	bl	8000ac8 <_read>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_read_r+0x1e>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_read_r+0x1e>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20001388 	.word	0x20001388

080081e0 <_write_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	2200      	movs	r2, #0
 80081ea:	4d05      	ldr	r5, [pc, #20]	@ (8008200 <_write_r+0x20>)
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7f8 fcf4 	bl	8000bdc <_write>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_write_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_write_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	20001388 	.word	0x20001388

08008204 <__errno>:
 8008204:	4b01      	ldr	r3, [pc, #4]	@ (800820c <__errno+0x8>)
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	200000bc 	.word	0x200000bc

08008210 <__libc_init_array>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	2600      	movs	r6, #0
 8008214:	4d0c      	ldr	r5, [pc, #48]	@ (8008248 <__libc_init_array+0x38>)
 8008216:	4c0d      	ldr	r4, [pc, #52]	@ (800824c <__libc_init_array+0x3c>)
 8008218:	1b64      	subs	r4, r4, r5
 800821a:	10a4      	asrs	r4, r4, #2
 800821c:	42a6      	cmp	r6, r4
 800821e:	d109      	bne.n	8008234 <__libc_init_array+0x24>
 8008220:	f000 feee 	bl	8009000 <_init>
 8008224:	2600      	movs	r6, #0
 8008226:	4d0a      	ldr	r5, [pc, #40]	@ (8008250 <__libc_init_array+0x40>)
 8008228:	4c0a      	ldr	r4, [pc, #40]	@ (8008254 <__libc_init_array+0x44>)
 800822a:	1b64      	subs	r4, r4, r5
 800822c:	10a4      	asrs	r4, r4, #2
 800822e:	42a6      	cmp	r6, r4
 8008230:	d105      	bne.n	800823e <__libc_init_array+0x2e>
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	f855 3b04 	ldr.w	r3, [r5], #4
 8008238:	4798      	blx	r3
 800823a:	3601      	adds	r6, #1
 800823c:	e7ee      	b.n	800821c <__libc_init_array+0xc>
 800823e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008242:	4798      	blx	r3
 8008244:	3601      	adds	r6, #1
 8008246:	e7f2      	b.n	800822e <__libc_init_array+0x1e>
 8008248:	080094a8 	.word	0x080094a8
 800824c:	080094a8 	.word	0x080094a8
 8008250:	080094a8 	.word	0x080094a8
 8008254:	080094ac 	.word	0x080094ac

08008258 <__retarget_lock_init_recursive>:
 8008258:	4770      	bx	lr

0800825a <__retarget_lock_acquire_recursive>:
 800825a:	4770      	bx	lr

0800825c <__retarget_lock_release_recursive>:
 800825c:	4770      	bx	lr

0800825e <strcpy>:
 800825e:	4603      	mov	r3, r0
 8008260:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008264:	f803 2b01 	strb.w	r2, [r3], #1
 8008268:	2a00      	cmp	r2, #0
 800826a:	d1f9      	bne.n	8008260 <strcpy+0x2>
 800826c:	4770      	bx	lr

0800826e <memcpy>:
 800826e:	440a      	add	r2, r1
 8008270:	4291      	cmp	r1, r2
 8008272:	f100 33ff 	add.w	r3, r0, #4294967295
 8008276:	d100      	bne.n	800827a <memcpy+0xc>
 8008278:	4770      	bx	lr
 800827a:	b510      	push	{r4, lr}
 800827c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008280:	4291      	cmp	r1, r2
 8008282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008286:	d1f9      	bne.n	800827c <memcpy+0xe>
 8008288:	bd10      	pop	{r4, pc}
	...

0800828c <_free_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4605      	mov	r5, r0
 8008290:	2900      	cmp	r1, #0
 8008292:	d040      	beq.n	8008316 <_free_r+0x8a>
 8008294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008298:	1f0c      	subs	r4, r1, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	bfb8      	it	lt
 800829e:	18e4      	addlt	r4, r4, r3
 80082a0:	f000 f8de 	bl	8008460 <__malloc_lock>
 80082a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008318 <_free_r+0x8c>)
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	b933      	cbnz	r3, 80082b8 <_free_r+0x2c>
 80082aa:	6063      	str	r3, [r4, #4]
 80082ac:	6014      	str	r4, [r2, #0]
 80082ae:	4628      	mov	r0, r5
 80082b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082b4:	f000 b8da 	b.w	800846c <__malloc_unlock>
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d908      	bls.n	80082ce <_free_r+0x42>
 80082bc:	6820      	ldr	r0, [r4, #0]
 80082be:	1821      	adds	r1, r4, r0
 80082c0:	428b      	cmp	r3, r1
 80082c2:	bf01      	itttt	eq
 80082c4:	6819      	ldreq	r1, [r3, #0]
 80082c6:	685b      	ldreq	r3, [r3, #4]
 80082c8:	1809      	addeq	r1, r1, r0
 80082ca:	6021      	streq	r1, [r4, #0]
 80082cc:	e7ed      	b.n	80082aa <_free_r+0x1e>
 80082ce:	461a      	mov	r2, r3
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	b10b      	cbz	r3, 80082d8 <_free_r+0x4c>
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	d9fa      	bls.n	80082ce <_free_r+0x42>
 80082d8:	6811      	ldr	r1, [r2, #0]
 80082da:	1850      	adds	r0, r2, r1
 80082dc:	42a0      	cmp	r0, r4
 80082de:	d10b      	bne.n	80082f8 <_free_r+0x6c>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	4401      	add	r1, r0
 80082e4:	1850      	adds	r0, r2, r1
 80082e6:	4283      	cmp	r3, r0
 80082e8:	6011      	str	r1, [r2, #0]
 80082ea:	d1e0      	bne.n	80082ae <_free_r+0x22>
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	4408      	add	r0, r1
 80082f2:	6010      	str	r0, [r2, #0]
 80082f4:	6053      	str	r3, [r2, #4]
 80082f6:	e7da      	b.n	80082ae <_free_r+0x22>
 80082f8:	d902      	bls.n	8008300 <_free_r+0x74>
 80082fa:	230c      	movs	r3, #12
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	e7d6      	b.n	80082ae <_free_r+0x22>
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	1821      	adds	r1, r4, r0
 8008304:	428b      	cmp	r3, r1
 8008306:	bf01      	itttt	eq
 8008308:	6819      	ldreq	r1, [r3, #0]
 800830a:	685b      	ldreq	r3, [r3, #4]
 800830c:	1809      	addeq	r1, r1, r0
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	6063      	str	r3, [r4, #4]
 8008312:	6054      	str	r4, [r2, #4]
 8008314:	e7cb      	b.n	80082ae <_free_r+0x22>
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	20001394 	.word	0x20001394

0800831c <sbrk_aligned>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	4e0f      	ldr	r6, [pc, #60]	@ (800835c <sbrk_aligned+0x40>)
 8008320:	460c      	mov	r4, r1
 8008322:	6831      	ldr	r1, [r6, #0]
 8008324:	4605      	mov	r5, r0
 8008326:	b911      	cbnz	r1, 800832e <sbrk_aligned+0x12>
 8008328:	f000 fe16 	bl	8008f58 <_sbrk_r>
 800832c:	6030      	str	r0, [r6, #0]
 800832e:	4621      	mov	r1, r4
 8008330:	4628      	mov	r0, r5
 8008332:	f000 fe11 	bl	8008f58 <_sbrk_r>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d103      	bne.n	8008342 <sbrk_aligned+0x26>
 800833a:	f04f 34ff 	mov.w	r4, #4294967295
 800833e:	4620      	mov	r0, r4
 8008340:	bd70      	pop	{r4, r5, r6, pc}
 8008342:	1cc4      	adds	r4, r0, #3
 8008344:	f024 0403 	bic.w	r4, r4, #3
 8008348:	42a0      	cmp	r0, r4
 800834a:	d0f8      	beq.n	800833e <sbrk_aligned+0x22>
 800834c:	1a21      	subs	r1, r4, r0
 800834e:	4628      	mov	r0, r5
 8008350:	f000 fe02 	bl	8008f58 <_sbrk_r>
 8008354:	3001      	adds	r0, #1
 8008356:	d1f2      	bne.n	800833e <sbrk_aligned+0x22>
 8008358:	e7ef      	b.n	800833a <sbrk_aligned+0x1e>
 800835a:	bf00      	nop
 800835c:	20001390 	.word	0x20001390

08008360 <_malloc_r>:
 8008360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008364:	1ccd      	adds	r5, r1, #3
 8008366:	f025 0503 	bic.w	r5, r5, #3
 800836a:	3508      	adds	r5, #8
 800836c:	2d0c      	cmp	r5, #12
 800836e:	bf38      	it	cc
 8008370:	250c      	movcc	r5, #12
 8008372:	2d00      	cmp	r5, #0
 8008374:	4606      	mov	r6, r0
 8008376:	db01      	blt.n	800837c <_malloc_r+0x1c>
 8008378:	42a9      	cmp	r1, r5
 800837a:	d904      	bls.n	8008386 <_malloc_r+0x26>
 800837c:	230c      	movs	r3, #12
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	2000      	movs	r0, #0
 8008382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008386:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800845c <_malloc_r+0xfc>
 800838a:	f000 f869 	bl	8008460 <__malloc_lock>
 800838e:	f8d8 3000 	ldr.w	r3, [r8]
 8008392:	461c      	mov	r4, r3
 8008394:	bb44      	cbnz	r4, 80083e8 <_malloc_r+0x88>
 8008396:	4629      	mov	r1, r5
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff ffbf 	bl	800831c <sbrk_aligned>
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	4604      	mov	r4, r0
 80083a2:	d158      	bne.n	8008456 <_malloc_r+0xf6>
 80083a4:	f8d8 4000 	ldr.w	r4, [r8]
 80083a8:	4627      	mov	r7, r4
 80083aa:	2f00      	cmp	r7, #0
 80083ac:	d143      	bne.n	8008436 <_malloc_r+0xd6>
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	d04b      	beq.n	800844a <_malloc_r+0xea>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	4639      	mov	r1, r7
 80083b6:	4630      	mov	r0, r6
 80083b8:	eb04 0903 	add.w	r9, r4, r3
 80083bc:	f000 fdcc 	bl	8008f58 <_sbrk_r>
 80083c0:	4581      	cmp	r9, r0
 80083c2:	d142      	bne.n	800844a <_malloc_r+0xea>
 80083c4:	6821      	ldr	r1, [r4, #0]
 80083c6:	4630      	mov	r0, r6
 80083c8:	1a6d      	subs	r5, r5, r1
 80083ca:	4629      	mov	r1, r5
 80083cc:	f7ff ffa6 	bl	800831c <sbrk_aligned>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d03a      	beq.n	800844a <_malloc_r+0xea>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	442b      	add	r3, r5
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	f8d8 3000 	ldr.w	r3, [r8]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	bb62      	cbnz	r2, 800843c <_malloc_r+0xdc>
 80083e2:	f8c8 7000 	str.w	r7, [r8]
 80083e6:	e00f      	b.n	8008408 <_malloc_r+0xa8>
 80083e8:	6822      	ldr	r2, [r4, #0]
 80083ea:	1b52      	subs	r2, r2, r5
 80083ec:	d420      	bmi.n	8008430 <_malloc_r+0xd0>
 80083ee:	2a0b      	cmp	r2, #11
 80083f0:	d917      	bls.n	8008422 <_malloc_r+0xc2>
 80083f2:	1961      	adds	r1, r4, r5
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	6025      	str	r5, [r4, #0]
 80083f8:	bf18      	it	ne
 80083fa:	6059      	strne	r1, [r3, #4]
 80083fc:	6863      	ldr	r3, [r4, #4]
 80083fe:	bf08      	it	eq
 8008400:	f8c8 1000 	streq.w	r1, [r8]
 8008404:	5162      	str	r2, [r4, r5]
 8008406:	604b      	str	r3, [r1, #4]
 8008408:	4630      	mov	r0, r6
 800840a:	f000 f82f 	bl	800846c <__malloc_unlock>
 800840e:	f104 000b 	add.w	r0, r4, #11
 8008412:	1d23      	adds	r3, r4, #4
 8008414:	f020 0007 	bic.w	r0, r0, #7
 8008418:	1ac2      	subs	r2, r0, r3
 800841a:	bf1c      	itt	ne
 800841c:	1a1b      	subne	r3, r3, r0
 800841e:	50a3      	strne	r3, [r4, r2]
 8008420:	e7af      	b.n	8008382 <_malloc_r+0x22>
 8008422:	6862      	ldr	r2, [r4, #4]
 8008424:	42a3      	cmp	r3, r4
 8008426:	bf0c      	ite	eq
 8008428:	f8c8 2000 	streq.w	r2, [r8]
 800842c:	605a      	strne	r2, [r3, #4]
 800842e:	e7eb      	b.n	8008408 <_malloc_r+0xa8>
 8008430:	4623      	mov	r3, r4
 8008432:	6864      	ldr	r4, [r4, #4]
 8008434:	e7ae      	b.n	8008394 <_malloc_r+0x34>
 8008436:	463c      	mov	r4, r7
 8008438:	687f      	ldr	r7, [r7, #4]
 800843a:	e7b6      	b.n	80083aa <_malloc_r+0x4a>
 800843c:	461a      	mov	r2, r3
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	42a3      	cmp	r3, r4
 8008442:	d1fb      	bne.n	800843c <_malloc_r+0xdc>
 8008444:	2300      	movs	r3, #0
 8008446:	6053      	str	r3, [r2, #4]
 8008448:	e7de      	b.n	8008408 <_malloc_r+0xa8>
 800844a:	230c      	movs	r3, #12
 800844c:	4630      	mov	r0, r6
 800844e:	6033      	str	r3, [r6, #0]
 8008450:	f000 f80c 	bl	800846c <__malloc_unlock>
 8008454:	e794      	b.n	8008380 <_malloc_r+0x20>
 8008456:	6005      	str	r5, [r0, #0]
 8008458:	e7d6      	b.n	8008408 <_malloc_r+0xa8>
 800845a:	bf00      	nop
 800845c:	20001394 	.word	0x20001394

08008460 <__malloc_lock>:
 8008460:	4801      	ldr	r0, [pc, #4]	@ (8008468 <__malloc_lock+0x8>)
 8008462:	f7ff befa 	b.w	800825a <__retarget_lock_acquire_recursive>
 8008466:	bf00      	nop
 8008468:	2000138c 	.word	0x2000138c

0800846c <__malloc_unlock>:
 800846c:	4801      	ldr	r0, [pc, #4]	@ (8008474 <__malloc_unlock+0x8>)
 800846e:	f7ff bef5 	b.w	800825c <__retarget_lock_release_recursive>
 8008472:	bf00      	nop
 8008474:	2000138c 	.word	0x2000138c

08008478 <__ssputs_r>:
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	461f      	mov	r7, r3
 800847e:	688e      	ldr	r6, [r1, #8]
 8008480:	4682      	mov	sl, r0
 8008482:	42be      	cmp	r6, r7
 8008484:	460c      	mov	r4, r1
 8008486:	4690      	mov	r8, r2
 8008488:	680b      	ldr	r3, [r1, #0]
 800848a:	d82d      	bhi.n	80084e8 <__ssputs_r+0x70>
 800848c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008490:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008494:	d026      	beq.n	80084e4 <__ssputs_r+0x6c>
 8008496:	6965      	ldr	r5, [r4, #20]
 8008498:	6909      	ldr	r1, [r1, #16]
 800849a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800849e:	eba3 0901 	sub.w	r9, r3, r1
 80084a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084a6:	1c7b      	adds	r3, r7, #1
 80084a8:	444b      	add	r3, r9
 80084aa:	106d      	asrs	r5, r5, #1
 80084ac:	429d      	cmp	r5, r3
 80084ae:	bf38      	it	cc
 80084b0:	461d      	movcc	r5, r3
 80084b2:	0553      	lsls	r3, r2, #21
 80084b4:	d527      	bpl.n	8008506 <__ssputs_r+0x8e>
 80084b6:	4629      	mov	r1, r5
 80084b8:	f7ff ff52 	bl	8008360 <_malloc_r>
 80084bc:	4606      	mov	r6, r0
 80084be:	b360      	cbz	r0, 800851a <__ssputs_r+0xa2>
 80084c0:	464a      	mov	r2, r9
 80084c2:	6921      	ldr	r1, [r4, #16]
 80084c4:	f7ff fed3 	bl	800826e <memcpy>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d2:	81a3      	strh	r3, [r4, #12]
 80084d4:	6126      	str	r6, [r4, #16]
 80084d6:	444e      	add	r6, r9
 80084d8:	6026      	str	r6, [r4, #0]
 80084da:	463e      	mov	r6, r7
 80084dc:	6165      	str	r5, [r4, #20]
 80084de:	eba5 0509 	sub.w	r5, r5, r9
 80084e2:	60a5      	str	r5, [r4, #8]
 80084e4:	42be      	cmp	r6, r7
 80084e6:	d900      	bls.n	80084ea <__ssputs_r+0x72>
 80084e8:	463e      	mov	r6, r7
 80084ea:	4632      	mov	r2, r6
 80084ec:	4641      	mov	r1, r8
 80084ee:	6820      	ldr	r0, [r4, #0]
 80084f0:	f000 fcf5 	bl	8008ede <memmove>
 80084f4:	2000      	movs	r0, #0
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	1b9b      	subs	r3, r3, r6
 80084fa:	60a3      	str	r3, [r4, #8]
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	4433      	add	r3, r6
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	462a      	mov	r2, r5
 8008508:	f000 fd44 	bl	8008f94 <_realloc_r>
 800850c:	4606      	mov	r6, r0
 800850e:	2800      	cmp	r0, #0
 8008510:	d1e0      	bne.n	80084d4 <__ssputs_r+0x5c>
 8008512:	4650      	mov	r0, sl
 8008514:	6921      	ldr	r1, [r4, #16]
 8008516:	f7ff feb9 	bl	800828c <_free_r>
 800851a:	230c      	movs	r3, #12
 800851c:	f8ca 3000 	str.w	r3, [sl]
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	e7e9      	b.n	8008502 <__ssputs_r+0x8a>
	...

08008530 <_svfiprintf_r>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4698      	mov	r8, r3
 8008536:	898b      	ldrh	r3, [r1, #12]
 8008538:	4607      	mov	r7, r0
 800853a:	061b      	lsls	r3, r3, #24
 800853c:	460d      	mov	r5, r1
 800853e:	4614      	mov	r4, r2
 8008540:	b09d      	sub	sp, #116	@ 0x74
 8008542:	d510      	bpl.n	8008566 <_svfiprintf_r+0x36>
 8008544:	690b      	ldr	r3, [r1, #16]
 8008546:	b973      	cbnz	r3, 8008566 <_svfiprintf_r+0x36>
 8008548:	2140      	movs	r1, #64	@ 0x40
 800854a:	f7ff ff09 	bl	8008360 <_malloc_r>
 800854e:	6028      	str	r0, [r5, #0]
 8008550:	6128      	str	r0, [r5, #16]
 8008552:	b930      	cbnz	r0, 8008562 <_svfiprintf_r+0x32>
 8008554:	230c      	movs	r3, #12
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	b01d      	add	sp, #116	@ 0x74
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	2340      	movs	r3, #64	@ 0x40
 8008564:	616b      	str	r3, [r5, #20]
 8008566:	2300      	movs	r3, #0
 8008568:	9309      	str	r3, [sp, #36]	@ 0x24
 800856a:	2320      	movs	r3, #32
 800856c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008570:	2330      	movs	r3, #48	@ 0x30
 8008572:	f04f 0901 	mov.w	r9, #1
 8008576:	f8cd 800c 	str.w	r8, [sp, #12]
 800857a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008714 <_svfiprintf_r+0x1e4>
 800857e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008582:	4623      	mov	r3, r4
 8008584:	469a      	mov	sl, r3
 8008586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800858a:	b10a      	cbz	r2, 8008590 <_svfiprintf_r+0x60>
 800858c:	2a25      	cmp	r2, #37	@ 0x25
 800858e:	d1f9      	bne.n	8008584 <_svfiprintf_r+0x54>
 8008590:	ebba 0b04 	subs.w	fp, sl, r4
 8008594:	d00b      	beq.n	80085ae <_svfiprintf_r+0x7e>
 8008596:	465b      	mov	r3, fp
 8008598:	4622      	mov	r2, r4
 800859a:	4629      	mov	r1, r5
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff ff6b 	bl	8008478 <__ssputs_r>
 80085a2:	3001      	adds	r0, #1
 80085a4:	f000 80a7 	beq.w	80086f6 <_svfiprintf_r+0x1c6>
 80085a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085aa:	445a      	add	r2, fp
 80085ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ae:	f89a 3000 	ldrb.w	r3, [sl]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 809f 	beq.w	80086f6 <_svfiprintf_r+0x1c6>
 80085b8:	2300      	movs	r3, #0
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c2:	f10a 0a01 	add.w	sl, sl, #1
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	9307      	str	r3, [sp, #28]
 80085ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80085d0:	4654      	mov	r4, sl
 80085d2:	2205      	movs	r2, #5
 80085d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d8:	484e      	ldr	r0, [pc, #312]	@ (8008714 <_svfiprintf_r+0x1e4>)
 80085da:	f000 fccd 	bl	8008f78 <memchr>
 80085de:	9a04      	ldr	r2, [sp, #16]
 80085e0:	b9d8      	cbnz	r0, 800861a <_svfiprintf_r+0xea>
 80085e2:	06d0      	lsls	r0, r2, #27
 80085e4:	bf44      	itt	mi
 80085e6:	2320      	movmi	r3, #32
 80085e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085ec:	0711      	lsls	r1, r2, #28
 80085ee:	bf44      	itt	mi
 80085f0:	232b      	movmi	r3, #43	@ 0x2b
 80085f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085f6:	f89a 3000 	ldrb.w	r3, [sl]
 80085fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80085fc:	d015      	beq.n	800862a <_svfiprintf_r+0xfa>
 80085fe:	4654      	mov	r4, sl
 8008600:	2000      	movs	r0, #0
 8008602:	f04f 0c0a 	mov.w	ip, #10
 8008606:	9a07      	ldr	r2, [sp, #28]
 8008608:	4621      	mov	r1, r4
 800860a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800860e:	3b30      	subs	r3, #48	@ 0x30
 8008610:	2b09      	cmp	r3, #9
 8008612:	d94b      	bls.n	80086ac <_svfiprintf_r+0x17c>
 8008614:	b1b0      	cbz	r0, 8008644 <_svfiprintf_r+0x114>
 8008616:	9207      	str	r2, [sp, #28]
 8008618:	e014      	b.n	8008644 <_svfiprintf_r+0x114>
 800861a:	eba0 0308 	sub.w	r3, r0, r8
 800861e:	fa09 f303 	lsl.w	r3, r9, r3
 8008622:	4313      	orrs	r3, r2
 8008624:	46a2      	mov	sl, r4
 8008626:	9304      	str	r3, [sp, #16]
 8008628:	e7d2      	b.n	80085d0 <_svfiprintf_r+0xa0>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	1d19      	adds	r1, r3, #4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	9103      	str	r1, [sp, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	bfbb      	ittet	lt
 8008636:	425b      	neglt	r3, r3
 8008638:	f042 0202 	orrlt.w	r2, r2, #2
 800863c:	9307      	strge	r3, [sp, #28]
 800863e:	9307      	strlt	r3, [sp, #28]
 8008640:	bfb8      	it	lt
 8008642:	9204      	strlt	r2, [sp, #16]
 8008644:	7823      	ldrb	r3, [r4, #0]
 8008646:	2b2e      	cmp	r3, #46	@ 0x2e
 8008648:	d10a      	bne.n	8008660 <_svfiprintf_r+0x130>
 800864a:	7863      	ldrb	r3, [r4, #1]
 800864c:	2b2a      	cmp	r3, #42	@ 0x2a
 800864e:	d132      	bne.n	80086b6 <_svfiprintf_r+0x186>
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	3402      	adds	r4, #2
 8008654:	1d1a      	adds	r2, r3, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	9203      	str	r2, [sp, #12]
 800865a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800865e:	9305      	str	r3, [sp, #20]
 8008660:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008718 <_svfiprintf_r+0x1e8>
 8008664:	2203      	movs	r2, #3
 8008666:	4650      	mov	r0, sl
 8008668:	7821      	ldrb	r1, [r4, #0]
 800866a:	f000 fc85 	bl	8008f78 <memchr>
 800866e:	b138      	cbz	r0, 8008680 <_svfiprintf_r+0x150>
 8008670:	2240      	movs	r2, #64	@ 0x40
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	eba0 000a 	sub.w	r0, r0, sl
 8008678:	4082      	lsls	r2, r0
 800867a:	4313      	orrs	r3, r2
 800867c:	3401      	adds	r4, #1
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008684:	2206      	movs	r2, #6
 8008686:	4825      	ldr	r0, [pc, #148]	@ (800871c <_svfiprintf_r+0x1ec>)
 8008688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800868c:	f000 fc74 	bl	8008f78 <memchr>
 8008690:	2800      	cmp	r0, #0
 8008692:	d036      	beq.n	8008702 <_svfiprintf_r+0x1d2>
 8008694:	4b22      	ldr	r3, [pc, #136]	@ (8008720 <_svfiprintf_r+0x1f0>)
 8008696:	bb1b      	cbnz	r3, 80086e0 <_svfiprintf_r+0x1b0>
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	3307      	adds	r3, #7
 800869c:	f023 0307 	bic.w	r3, r3, #7
 80086a0:	3308      	adds	r3, #8
 80086a2:	9303      	str	r3, [sp, #12]
 80086a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a6:	4433      	add	r3, r6
 80086a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086aa:	e76a      	b.n	8008582 <_svfiprintf_r+0x52>
 80086ac:	460c      	mov	r4, r1
 80086ae:	2001      	movs	r0, #1
 80086b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b4:	e7a8      	b.n	8008608 <_svfiprintf_r+0xd8>
 80086b6:	2300      	movs	r3, #0
 80086b8:	f04f 0c0a 	mov.w	ip, #10
 80086bc:	4619      	mov	r1, r3
 80086be:	3401      	adds	r4, #1
 80086c0:	9305      	str	r3, [sp, #20]
 80086c2:	4620      	mov	r0, r4
 80086c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086c8:	3a30      	subs	r2, #48	@ 0x30
 80086ca:	2a09      	cmp	r2, #9
 80086cc:	d903      	bls.n	80086d6 <_svfiprintf_r+0x1a6>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0c6      	beq.n	8008660 <_svfiprintf_r+0x130>
 80086d2:	9105      	str	r1, [sp, #20]
 80086d4:	e7c4      	b.n	8008660 <_svfiprintf_r+0x130>
 80086d6:	4604      	mov	r4, r0
 80086d8:	2301      	movs	r3, #1
 80086da:	fb0c 2101 	mla	r1, ip, r1, r2
 80086de:	e7f0      	b.n	80086c2 <_svfiprintf_r+0x192>
 80086e0:	ab03      	add	r3, sp, #12
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	462a      	mov	r2, r5
 80086e6:	4638      	mov	r0, r7
 80086e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008724 <_svfiprintf_r+0x1f4>)
 80086ea:	a904      	add	r1, sp, #16
 80086ec:	f3af 8000 	nop.w
 80086f0:	1c42      	adds	r2, r0, #1
 80086f2:	4606      	mov	r6, r0
 80086f4:	d1d6      	bne.n	80086a4 <_svfiprintf_r+0x174>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	065b      	lsls	r3, r3, #25
 80086fa:	f53f af2d 	bmi.w	8008558 <_svfiprintf_r+0x28>
 80086fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008700:	e72c      	b.n	800855c <_svfiprintf_r+0x2c>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4638      	mov	r0, r7
 800870a:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <_svfiprintf_r+0x1f4>)
 800870c:	a904      	add	r1, sp, #16
 800870e:	f000 f9bd 	bl	8008a8c <_printf_i>
 8008712:	e7ed      	b.n	80086f0 <_svfiprintf_r+0x1c0>
 8008714:	0800946a 	.word	0x0800946a
 8008718:	08009470 	.word	0x08009470
 800871c:	08009474 	.word	0x08009474
 8008720:	00000000 	.word	0x00000000
 8008724:	08008479 	.word	0x08008479

08008728 <__sfputc_r>:
 8008728:	6893      	ldr	r3, [r2, #8]
 800872a:	b410      	push	{r4}
 800872c:	3b01      	subs	r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	6093      	str	r3, [r2, #8]
 8008732:	da07      	bge.n	8008744 <__sfputc_r+0x1c>
 8008734:	6994      	ldr	r4, [r2, #24]
 8008736:	42a3      	cmp	r3, r4
 8008738:	db01      	blt.n	800873e <__sfputc_r+0x16>
 800873a:	290a      	cmp	r1, #10
 800873c:	d102      	bne.n	8008744 <__sfputc_r+0x1c>
 800873e:	bc10      	pop	{r4}
 8008740:	f7ff bc4b 	b.w	8007fda <__swbuf_r>
 8008744:	6813      	ldr	r3, [r2, #0]
 8008746:	1c58      	adds	r0, r3, #1
 8008748:	6010      	str	r0, [r2, #0]
 800874a:	7019      	strb	r1, [r3, #0]
 800874c:	4608      	mov	r0, r1
 800874e:	bc10      	pop	{r4}
 8008750:	4770      	bx	lr

08008752 <__sfputs_r>:
 8008752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008754:	4606      	mov	r6, r0
 8008756:	460f      	mov	r7, r1
 8008758:	4614      	mov	r4, r2
 800875a:	18d5      	adds	r5, r2, r3
 800875c:	42ac      	cmp	r4, r5
 800875e:	d101      	bne.n	8008764 <__sfputs_r+0x12>
 8008760:	2000      	movs	r0, #0
 8008762:	e007      	b.n	8008774 <__sfputs_r+0x22>
 8008764:	463a      	mov	r2, r7
 8008766:	4630      	mov	r0, r6
 8008768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876c:	f7ff ffdc 	bl	8008728 <__sfputc_r>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d1f3      	bne.n	800875c <__sfputs_r+0xa>
 8008774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008778 <_vfiprintf_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	460d      	mov	r5, r1
 800877e:	4614      	mov	r4, r2
 8008780:	4698      	mov	r8, r3
 8008782:	4606      	mov	r6, r0
 8008784:	b09d      	sub	sp, #116	@ 0x74
 8008786:	b118      	cbz	r0, 8008790 <_vfiprintf_r+0x18>
 8008788:	6a03      	ldr	r3, [r0, #32]
 800878a:	b90b      	cbnz	r3, 8008790 <_vfiprintf_r+0x18>
 800878c:	f7ff fb1c 	bl	8007dc8 <__sinit>
 8008790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008792:	07d9      	lsls	r1, r3, #31
 8008794:	d405      	bmi.n	80087a2 <_vfiprintf_r+0x2a>
 8008796:	89ab      	ldrh	r3, [r5, #12]
 8008798:	059a      	lsls	r2, r3, #22
 800879a:	d402      	bmi.n	80087a2 <_vfiprintf_r+0x2a>
 800879c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800879e:	f7ff fd5c 	bl	800825a <__retarget_lock_acquire_recursive>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	071b      	lsls	r3, r3, #28
 80087a6:	d501      	bpl.n	80087ac <_vfiprintf_r+0x34>
 80087a8:	692b      	ldr	r3, [r5, #16]
 80087aa:	b99b      	cbnz	r3, 80087d4 <_vfiprintf_r+0x5c>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff fc52 	bl	8008058 <__swsetup_r>
 80087b4:	b170      	cbz	r0, 80087d4 <_vfiprintf_r+0x5c>
 80087b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087b8:	07dc      	lsls	r4, r3, #31
 80087ba:	d504      	bpl.n	80087c6 <_vfiprintf_r+0x4e>
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	b01d      	add	sp, #116	@ 0x74
 80087c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	0598      	lsls	r0, r3, #22
 80087ca:	d4f7      	bmi.n	80087bc <_vfiprintf_r+0x44>
 80087cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ce:	f7ff fd45 	bl	800825c <__retarget_lock_release_recursive>
 80087d2:	e7f3      	b.n	80087bc <_vfiprintf_r+0x44>
 80087d4:	2300      	movs	r3, #0
 80087d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d8:	2320      	movs	r3, #32
 80087da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087de:	2330      	movs	r3, #48	@ 0x30
 80087e0:	f04f 0901 	mov.w	r9, #1
 80087e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008994 <_vfiprintf_r+0x21c>
 80087ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087f0:	4623      	mov	r3, r4
 80087f2:	469a      	mov	sl, r3
 80087f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f8:	b10a      	cbz	r2, 80087fe <_vfiprintf_r+0x86>
 80087fa:	2a25      	cmp	r2, #37	@ 0x25
 80087fc:	d1f9      	bne.n	80087f2 <_vfiprintf_r+0x7a>
 80087fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008802:	d00b      	beq.n	800881c <_vfiprintf_r+0xa4>
 8008804:	465b      	mov	r3, fp
 8008806:	4622      	mov	r2, r4
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ffa1 	bl	8008752 <__sfputs_r>
 8008810:	3001      	adds	r0, #1
 8008812:	f000 80a7 	beq.w	8008964 <_vfiprintf_r+0x1ec>
 8008816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008818:	445a      	add	r2, fp
 800881a:	9209      	str	r2, [sp, #36]	@ 0x24
 800881c:	f89a 3000 	ldrb.w	r3, [sl]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 809f 	beq.w	8008964 <_vfiprintf_r+0x1ec>
 8008826:	2300      	movs	r3, #0
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008830:	f10a 0a01 	add.w	sl, sl, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800883c:	931a      	str	r3, [sp, #104]	@ 0x68
 800883e:	4654      	mov	r4, sl
 8008840:	2205      	movs	r2, #5
 8008842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008846:	4853      	ldr	r0, [pc, #332]	@ (8008994 <_vfiprintf_r+0x21c>)
 8008848:	f000 fb96 	bl	8008f78 <memchr>
 800884c:	9a04      	ldr	r2, [sp, #16]
 800884e:	b9d8      	cbnz	r0, 8008888 <_vfiprintf_r+0x110>
 8008850:	06d1      	lsls	r1, r2, #27
 8008852:	bf44      	itt	mi
 8008854:	2320      	movmi	r3, #32
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800885a:	0713      	lsls	r3, r2, #28
 800885c:	bf44      	itt	mi
 800885e:	232b      	movmi	r3, #43	@ 0x2b
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b2a      	cmp	r3, #42	@ 0x2a
 800886a:	d015      	beq.n	8008898 <_vfiprintf_r+0x120>
 800886c:	4654      	mov	r4, sl
 800886e:	2000      	movs	r0, #0
 8008870:	f04f 0c0a 	mov.w	ip, #10
 8008874:	9a07      	ldr	r2, [sp, #28]
 8008876:	4621      	mov	r1, r4
 8008878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887c:	3b30      	subs	r3, #48	@ 0x30
 800887e:	2b09      	cmp	r3, #9
 8008880:	d94b      	bls.n	800891a <_vfiprintf_r+0x1a2>
 8008882:	b1b0      	cbz	r0, 80088b2 <_vfiprintf_r+0x13a>
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	e014      	b.n	80088b2 <_vfiprintf_r+0x13a>
 8008888:	eba0 0308 	sub.w	r3, r0, r8
 800888c:	fa09 f303 	lsl.w	r3, r9, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	46a2      	mov	sl, r4
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	e7d2      	b.n	800883e <_vfiprintf_r+0xc6>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	1d19      	adds	r1, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9103      	str	r1, [sp, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfbb      	ittet	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	f042 0202 	orrlt.w	r2, r2, #2
 80088aa:	9307      	strge	r3, [sp, #28]
 80088ac:	9307      	strlt	r3, [sp, #28]
 80088ae:	bfb8      	it	lt
 80088b0:	9204      	strlt	r2, [sp, #16]
 80088b2:	7823      	ldrb	r3, [r4, #0]
 80088b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80088b6:	d10a      	bne.n	80088ce <_vfiprintf_r+0x156>
 80088b8:	7863      	ldrb	r3, [r4, #1]
 80088ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80088bc:	d132      	bne.n	8008924 <_vfiprintf_r+0x1ac>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	3402      	adds	r4, #2
 80088c2:	1d1a      	adds	r2, r3, #4
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	9203      	str	r2, [sp, #12]
 80088c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008998 <_vfiprintf_r+0x220>
 80088d2:	2203      	movs	r2, #3
 80088d4:	4650      	mov	r0, sl
 80088d6:	7821      	ldrb	r1, [r4, #0]
 80088d8:	f000 fb4e 	bl	8008f78 <memchr>
 80088dc:	b138      	cbz	r0, 80088ee <_vfiprintf_r+0x176>
 80088de:	2240      	movs	r2, #64	@ 0x40
 80088e0:	9b04      	ldr	r3, [sp, #16]
 80088e2:	eba0 000a 	sub.w	r0, r0, sl
 80088e6:	4082      	lsls	r2, r0
 80088e8:	4313      	orrs	r3, r2
 80088ea:	3401      	adds	r4, #1
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f2:	2206      	movs	r2, #6
 80088f4:	4829      	ldr	r0, [pc, #164]	@ (800899c <_vfiprintf_r+0x224>)
 80088f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088fa:	f000 fb3d 	bl	8008f78 <memchr>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d03f      	beq.n	8008982 <_vfiprintf_r+0x20a>
 8008902:	4b27      	ldr	r3, [pc, #156]	@ (80089a0 <_vfiprintf_r+0x228>)
 8008904:	bb1b      	cbnz	r3, 800894e <_vfiprintf_r+0x1d6>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	3307      	adds	r3, #7
 800890a:	f023 0307 	bic.w	r3, r3, #7
 800890e:	3308      	adds	r3, #8
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008914:	443b      	add	r3, r7
 8008916:	9309      	str	r3, [sp, #36]	@ 0x24
 8008918:	e76a      	b.n	80087f0 <_vfiprintf_r+0x78>
 800891a:	460c      	mov	r4, r1
 800891c:	2001      	movs	r0, #1
 800891e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008922:	e7a8      	b.n	8008876 <_vfiprintf_r+0xfe>
 8008924:	2300      	movs	r3, #0
 8008926:	f04f 0c0a 	mov.w	ip, #10
 800892a:	4619      	mov	r1, r3
 800892c:	3401      	adds	r4, #1
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	4620      	mov	r0, r4
 8008932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008936:	3a30      	subs	r2, #48	@ 0x30
 8008938:	2a09      	cmp	r2, #9
 800893a:	d903      	bls.n	8008944 <_vfiprintf_r+0x1cc>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0c6      	beq.n	80088ce <_vfiprintf_r+0x156>
 8008940:	9105      	str	r1, [sp, #20]
 8008942:	e7c4      	b.n	80088ce <_vfiprintf_r+0x156>
 8008944:	4604      	mov	r4, r0
 8008946:	2301      	movs	r3, #1
 8008948:	fb0c 2101 	mla	r1, ip, r1, r2
 800894c:	e7f0      	b.n	8008930 <_vfiprintf_r+0x1b8>
 800894e:	ab03      	add	r3, sp, #12
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	462a      	mov	r2, r5
 8008954:	4630      	mov	r0, r6
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <_vfiprintf_r+0x22c>)
 8008958:	a904      	add	r1, sp, #16
 800895a:	f3af 8000 	nop.w
 800895e:	4607      	mov	r7, r0
 8008960:	1c78      	adds	r0, r7, #1
 8008962:	d1d6      	bne.n	8008912 <_vfiprintf_r+0x19a>
 8008964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008966:	07d9      	lsls	r1, r3, #31
 8008968:	d405      	bmi.n	8008976 <_vfiprintf_r+0x1fe>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	059a      	lsls	r2, r3, #22
 800896e:	d402      	bmi.n	8008976 <_vfiprintf_r+0x1fe>
 8008970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008972:	f7ff fc73 	bl	800825c <__retarget_lock_release_recursive>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	065b      	lsls	r3, r3, #25
 800897a:	f53f af1f 	bmi.w	80087bc <_vfiprintf_r+0x44>
 800897e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008980:	e71e      	b.n	80087c0 <_vfiprintf_r+0x48>
 8008982:	ab03      	add	r3, sp, #12
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	462a      	mov	r2, r5
 8008988:	4630      	mov	r0, r6
 800898a:	4b06      	ldr	r3, [pc, #24]	@ (80089a4 <_vfiprintf_r+0x22c>)
 800898c:	a904      	add	r1, sp, #16
 800898e:	f000 f87d 	bl	8008a8c <_printf_i>
 8008992:	e7e4      	b.n	800895e <_vfiprintf_r+0x1e6>
 8008994:	0800946a 	.word	0x0800946a
 8008998:	08009470 	.word	0x08009470
 800899c:	08009474 	.word	0x08009474
 80089a0:	00000000 	.word	0x00000000
 80089a4:	08008753 	.word	0x08008753

080089a8 <_printf_common>:
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	4616      	mov	r6, r2
 80089ae:	4698      	mov	r8, r3
 80089b0:	688a      	ldr	r2, [r1, #8]
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	4607      	mov	r7, r0
 80089b6:	4293      	cmp	r3, r2
 80089b8:	bfb8      	it	lt
 80089ba:	4613      	movlt	r3, r2
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089c2:	460c      	mov	r4, r1
 80089c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089c8:	b10a      	cbz	r2, 80089ce <_printf_common+0x26>
 80089ca:	3301      	adds	r3, #1
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	0699      	lsls	r1, r3, #26
 80089d2:	bf42      	ittt	mi
 80089d4:	6833      	ldrmi	r3, [r6, #0]
 80089d6:	3302      	addmi	r3, #2
 80089d8:	6033      	strmi	r3, [r6, #0]
 80089da:	6825      	ldr	r5, [r4, #0]
 80089dc:	f015 0506 	ands.w	r5, r5, #6
 80089e0:	d106      	bne.n	80089f0 <_printf_common+0x48>
 80089e2:	f104 0a19 	add.w	sl, r4, #25
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	6832      	ldr	r2, [r6, #0]
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	dc2b      	bgt.n	8008a48 <_printf_common+0xa0>
 80089f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	3b00      	subs	r3, #0
 80089f8:	bf18      	it	ne
 80089fa:	2301      	movne	r3, #1
 80089fc:	0692      	lsls	r2, r2, #26
 80089fe:	d430      	bmi.n	8008a62 <_printf_common+0xba>
 8008a00:	4641      	mov	r1, r8
 8008a02:	4638      	mov	r0, r7
 8008a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a08:	47c8      	blx	r9
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d023      	beq.n	8008a56 <_printf_common+0xae>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	f003 0306 	and.w	r3, r3, #6
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	bf14      	ite	ne
 8008a1a:	2500      	movne	r5, #0
 8008a1c:	6833      	ldreq	r3, [r6, #0]
 8008a1e:	f04f 0600 	mov.w	r6, #0
 8008a22:	bf08      	it	eq
 8008a24:	68e5      	ldreq	r5, [r4, #12]
 8008a26:	f104 041a 	add.w	r4, r4, #26
 8008a2a:	bf08      	it	eq
 8008a2c:	1aed      	subeq	r5, r5, r3
 8008a2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a32:	bf08      	it	eq
 8008a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	bfc4      	itt	gt
 8008a3c:	1a9b      	subgt	r3, r3, r2
 8008a3e:	18ed      	addgt	r5, r5, r3
 8008a40:	42b5      	cmp	r5, r6
 8008a42:	d11a      	bne.n	8008a7a <_printf_common+0xd2>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e008      	b.n	8008a5a <_printf_common+0xb2>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	4652      	mov	r2, sl
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	4638      	mov	r0, r7
 8008a50:	47c8      	blx	r9
 8008a52:	3001      	adds	r0, #1
 8008a54:	d103      	bne.n	8008a5e <_printf_common+0xb6>
 8008a56:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5e:	3501      	adds	r5, #1
 8008a60:	e7c1      	b.n	80089e6 <_printf_common+0x3e>
 8008a62:	2030      	movs	r0, #48	@ 0x30
 8008a64:	18e1      	adds	r1, r4, r3
 8008a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a70:	4422      	add	r2, r4
 8008a72:	3302      	adds	r3, #2
 8008a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a78:	e7c2      	b.n	8008a00 <_printf_common+0x58>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4641      	mov	r1, r8
 8008a80:	4638      	mov	r0, r7
 8008a82:	47c8      	blx	r9
 8008a84:	3001      	adds	r0, #1
 8008a86:	d0e6      	beq.n	8008a56 <_printf_common+0xae>
 8008a88:	3601      	adds	r6, #1
 8008a8a:	e7d9      	b.n	8008a40 <_printf_common+0x98>

08008a8c <_printf_i>:
 8008a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	7e0f      	ldrb	r7, [r1, #24]
 8008a92:	4691      	mov	r9, r2
 8008a94:	2f78      	cmp	r7, #120	@ 0x78
 8008a96:	4680      	mov	r8, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	469a      	mov	sl, r3
 8008a9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aa2:	d807      	bhi.n	8008ab4 <_printf_i+0x28>
 8008aa4:	2f62      	cmp	r7, #98	@ 0x62
 8008aa6:	d80a      	bhi.n	8008abe <_printf_i+0x32>
 8008aa8:	2f00      	cmp	r7, #0
 8008aaa:	f000 80d3 	beq.w	8008c54 <_printf_i+0x1c8>
 8008aae:	2f58      	cmp	r7, #88	@ 0x58
 8008ab0:	f000 80ba 	beq.w	8008c28 <_printf_i+0x19c>
 8008ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008abc:	e03a      	b.n	8008b34 <_printf_i+0xa8>
 8008abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ac2:	2b15      	cmp	r3, #21
 8008ac4:	d8f6      	bhi.n	8008ab4 <_printf_i+0x28>
 8008ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8008acc <_printf_i+0x40>)
 8008ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008acc:	08008b25 	.word	0x08008b25
 8008ad0:	08008b39 	.word	0x08008b39
 8008ad4:	08008ab5 	.word	0x08008ab5
 8008ad8:	08008ab5 	.word	0x08008ab5
 8008adc:	08008ab5 	.word	0x08008ab5
 8008ae0:	08008ab5 	.word	0x08008ab5
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008ab5 	.word	0x08008ab5
 8008aec:	08008ab5 	.word	0x08008ab5
 8008af0:	08008ab5 	.word	0x08008ab5
 8008af4:	08008ab5 	.word	0x08008ab5
 8008af8:	08008c3b 	.word	0x08008c3b
 8008afc:	08008b63 	.word	0x08008b63
 8008b00:	08008bf5 	.word	0x08008bf5
 8008b04:	08008ab5 	.word	0x08008ab5
 8008b08:	08008ab5 	.word	0x08008ab5
 8008b0c:	08008c5d 	.word	0x08008c5d
 8008b10:	08008ab5 	.word	0x08008ab5
 8008b14:	08008b63 	.word	0x08008b63
 8008b18:	08008ab5 	.word	0x08008ab5
 8008b1c:	08008ab5 	.word	0x08008ab5
 8008b20:	08008bfd 	.word	0x08008bfd
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6032      	str	r2, [r6, #0]
 8008b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b34:	2301      	movs	r3, #1
 8008b36:	e09e      	b.n	8008c76 <_printf_i+0x1ea>
 8008b38:	6833      	ldr	r3, [r6, #0]
 8008b3a:	6820      	ldr	r0, [r4, #0]
 8008b3c:	1d19      	adds	r1, r3, #4
 8008b3e:	6031      	str	r1, [r6, #0]
 8008b40:	0606      	lsls	r6, r0, #24
 8008b42:	d501      	bpl.n	8008b48 <_printf_i+0xbc>
 8008b44:	681d      	ldr	r5, [r3, #0]
 8008b46:	e003      	b.n	8008b50 <_printf_i+0xc4>
 8008b48:	0645      	lsls	r5, r0, #25
 8008b4a:	d5fb      	bpl.n	8008b44 <_printf_i+0xb8>
 8008b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	da03      	bge.n	8008b5c <_printf_i+0xd0>
 8008b54:	232d      	movs	r3, #45	@ 0x2d
 8008b56:	426d      	negs	r5, r5
 8008b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b5c:	230a      	movs	r3, #10
 8008b5e:	4859      	ldr	r0, [pc, #356]	@ (8008cc4 <_printf_i+0x238>)
 8008b60:	e011      	b.n	8008b86 <_printf_i+0xfa>
 8008b62:	6821      	ldr	r1, [r4, #0]
 8008b64:	6833      	ldr	r3, [r6, #0]
 8008b66:	0608      	lsls	r0, r1, #24
 8008b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b6c:	d402      	bmi.n	8008b74 <_printf_i+0xe8>
 8008b6e:	0649      	lsls	r1, r1, #25
 8008b70:	bf48      	it	mi
 8008b72:	b2ad      	uxthmi	r5, r5
 8008b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	bf14      	ite	ne
 8008b7a:	230a      	movne	r3, #10
 8008b7c:	2308      	moveq	r3, #8
 8008b7e:	4851      	ldr	r0, [pc, #324]	@ (8008cc4 <_printf_i+0x238>)
 8008b80:	2100      	movs	r1, #0
 8008b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b86:	6866      	ldr	r6, [r4, #4]
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	bfa8      	it	ge
 8008b8c:	6821      	ldrge	r1, [r4, #0]
 8008b8e:	60a6      	str	r6, [r4, #8]
 8008b90:	bfa4      	itt	ge
 8008b92:	f021 0104 	bicge.w	r1, r1, #4
 8008b96:	6021      	strge	r1, [r4, #0]
 8008b98:	b90d      	cbnz	r5, 8008b9e <_printf_i+0x112>
 8008b9a:	2e00      	cmp	r6, #0
 8008b9c:	d04b      	beq.n	8008c36 <_printf_i+0x1aa>
 8008b9e:	4616      	mov	r6, r2
 8008ba0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ba4:	fb03 5711 	mls	r7, r3, r1, r5
 8008ba8:	5dc7      	ldrb	r7, [r0, r7]
 8008baa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bae:	462f      	mov	r7, r5
 8008bb0:	42bb      	cmp	r3, r7
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	d9f4      	bls.n	8008ba0 <_printf_i+0x114>
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d10b      	bne.n	8008bd2 <_printf_i+0x146>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	07df      	lsls	r7, r3, #31
 8008bbe:	d508      	bpl.n	8008bd2 <_printf_i+0x146>
 8008bc0:	6923      	ldr	r3, [r4, #16]
 8008bc2:	6861      	ldr	r1, [r4, #4]
 8008bc4:	4299      	cmp	r1, r3
 8008bc6:	bfde      	ittt	le
 8008bc8:	2330      	movle	r3, #48	@ 0x30
 8008bca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bd2:	1b92      	subs	r2, r2, r6
 8008bd4:	6122      	str	r2, [r4, #16]
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f8cd a000 	str.w	sl, [sp]
 8008be0:	aa03      	add	r2, sp, #12
 8008be2:	f7ff fee1 	bl	80089a8 <_printf_common>
 8008be6:	3001      	adds	r0, #1
 8008be8:	d14a      	bne.n	8008c80 <_printf_i+0x1f4>
 8008bea:	f04f 30ff 	mov.w	r0, #4294967295
 8008bee:	b004      	add	sp, #16
 8008bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	f043 0320 	orr.w	r3, r3, #32
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	2778      	movs	r7, #120	@ 0x78
 8008bfe:	4832      	ldr	r0, [pc, #200]	@ (8008cc8 <_printf_i+0x23c>)
 8008c00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	6831      	ldr	r1, [r6, #0]
 8008c08:	061f      	lsls	r7, r3, #24
 8008c0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c0e:	d402      	bmi.n	8008c16 <_printf_i+0x18a>
 8008c10:	065f      	lsls	r7, r3, #25
 8008c12:	bf48      	it	mi
 8008c14:	b2ad      	uxthmi	r5, r5
 8008c16:	6031      	str	r1, [r6, #0]
 8008c18:	07d9      	lsls	r1, r3, #31
 8008c1a:	bf44      	itt	mi
 8008c1c:	f043 0320 	orrmi.w	r3, r3, #32
 8008c20:	6023      	strmi	r3, [r4, #0]
 8008c22:	b11d      	cbz	r5, 8008c2c <_printf_i+0x1a0>
 8008c24:	2310      	movs	r3, #16
 8008c26:	e7ab      	b.n	8008b80 <_printf_i+0xf4>
 8008c28:	4826      	ldr	r0, [pc, #152]	@ (8008cc4 <_printf_i+0x238>)
 8008c2a:	e7e9      	b.n	8008c00 <_printf_i+0x174>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	f023 0320 	bic.w	r3, r3, #32
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	e7f6      	b.n	8008c24 <_printf_i+0x198>
 8008c36:	4616      	mov	r6, r2
 8008c38:	e7bd      	b.n	8008bb6 <_printf_i+0x12a>
 8008c3a:	6833      	ldr	r3, [r6, #0]
 8008c3c:	6825      	ldr	r5, [r4, #0]
 8008c3e:	1d18      	adds	r0, r3, #4
 8008c40:	6961      	ldr	r1, [r4, #20]
 8008c42:	6030      	str	r0, [r6, #0]
 8008c44:	062e      	lsls	r6, r5, #24
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	d501      	bpl.n	8008c4e <_printf_i+0x1c2>
 8008c4a:	6019      	str	r1, [r3, #0]
 8008c4c:	e002      	b.n	8008c54 <_printf_i+0x1c8>
 8008c4e:	0668      	lsls	r0, r5, #25
 8008c50:	d5fb      	bpl.n	8008c4a <_printf_i+0x1be>
 8008c52:	8019      	strh	r1, [r3, #0]
 8008c54:	2300      	movs	r3, #0
 8008c56:	4616      	mov	r6, r2
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	e7bc      	b.n	8008bd6 <_printf_i+0x14a>
 8008c5c:	6833      	ldr	r3, [r6, #0]
 8008c5e:	2100      	movs	r1, #0
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	6032      	str	r2, [r6, #0]
 8008c64:	681e      	ldr	r6, [r3, #0]
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f000 f985 	bl	8008f78 <memchr>
 8008c6e:	b108      	cbz	r0, 8008c74 <_printf_i+0x1e8>
 8008c70:	1b80      	subs	r0, r0, r6
 8008c72:	6060      	str	r0, [r4, #4]
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	6123      	str	r3, [r4, #16]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c7e:	e7aa      	b.n	8008bd6 <_printf_i+0x14a>
 8008c80:	4632      	mov	r2, r6
 8008c82:	4649      	mov	r1, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	47d0      	blx	sl
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d0ad      	beq.n	8008bea <_printf_i+0x15e>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	079b      	lsls	r3, r3, #30
 8008c92:	d413      	bmi.n	8008cbc <_printf_i+0x230>
 8008c94:	68e0      	ldr	r0, [r4, #12]
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	4298      	cmp	r0, r3
 8008c9a:	bfb8      	it	lt
 8008c9c:	4618      	movlt	r0, r3
 8008c9e:	e7a6      	b.n	8008bee <_printf_i+0x162>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4632      	mov	r2, r6
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	47d0      	blx	sl
 8008caa:	3001      	adds	r0, #1
 8008cac:	d09d      	beq.n	8008bea <_printf_i+0x15e>
 8008cae:	3501      	adds	r5, #1
 8008cb0:	68e3      	ldr	r3, [r4, #12]
 8008cb2:	9903      	ldr	r1, [sp, #12]
 8008cb4:	1a5b      	subs	r3, r3, r1
 8008cb6:	42ab      	cmp	r3, r5
 8008cb8:	dcf2      	bgt.n	8008ca0 <_printf_i+0x214>
 8008cba:	e7eb      	b.n	8008c94 <_printf_i+0x208>
 8008cbc:	2500      	movs	r5, #0
 8008cbe:	f104 0619 	add.w	r6, r4, #25
 8008cc2:	e7f5      	b.n	8008cb0 <_printf_i+0x224>
 8008cc4:	0800947b 	.word	0x0800947b
 8008cc8:	0800948c 	.word	0x0800948c

08008ccc <__sflush_r>:
 8008ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	0716      	lsls	r6, r2, #28
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	d454      	bmi.n	8008d84 <__sflush_r+0xb8>
 8008cda:	684b      	ldr	r3, [r1, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dc02      	bgt.n	8008ce6 <__sflush_r+0x1a>
 8008ce0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dd48      	ble.n	8008d78 <__sflush_r+0xac>
 8008ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ce8:	2e00      	cmp	r6, #0
 8008cea:	d045      	beq.n	8008d78 <__sflush_r+0xac>
 8008cec:	2300      	movs	r3, #0
 8008cee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cf2:	682f      	ldr	r7, [r5, #0]
 8008cf4:	6a21      	ldr	r1, [r4, #32]
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	d030      	beq.n	8008d5c <__sflush_r+0x90>
 8008cfa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	0759      	lsls	r1, r3, #29
 8008d00:	d505      	bpl.n	8008d0e <__sflush_r+0x42>
 8008d02:	6863      	ldr	r3, [r4, #4]
 8008d04:	1ad2      	subs	r2, r2, r3
 8008d06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d08:	b10b      	cbz	r3, 8008d0e <__sflush_r+0x42>
 8008d0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d0c:	1ad2      	subs	r2, r2, r3
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4628      	mov	r0, r5
 8008d12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d14:	6a21      	ldr	r1, [r4, #32]
 8008d16:	47b0      	blx	r6
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	d106      	bne.n	8008d2c <__sflush_r+0x60>
 8008d1e:	6829      	ldr	r1, [r5, #0]
 8008d20:	291d      	cmp	r1, #29
 8008d22:	d82b      	bhi.n	8008d7c <__sflush_r+0xb0>
 8008d24:	4a28      	ldr	r2, [pc, #160]	@ (8008dc8 <__sflush_r+0xfc>)
 8008d26:	410a      	asrs	r2, r1
 8008d28:	07d6      	lsls	r6, r2, #31
 8008d2a:	d427      	bmi.n	8008d7c <__sflush_r+0xb0>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	6062      	str	r2, [r4, #4]
 8008d30:	6922      	ldr	r2, [r4, #16]
 8008d32:	04d9      	lsls	r1, r3, #19
 8008d34:	6022      	str	r2, [r4, #0]
 8008d36:	d504      	bpl.n	8008d42 <__sflush_r+0x76>
 8008d38:	1c42      	adds	r2, r0, #1
 8008d3a:	d101      	bne.n	8008d40 <__sflush_r+0x74>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b903      	cbnz	r3, 8008d42 <__sflush_r+0x76>
 8008d40:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d44:	602f      	str	r7, [r5, #0]
 8008d46:	b1b9      	cbz	r1, 8008d78 <__sflush_r+0xac>
 8008d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	d002      	beq.n	8008d56 <__sflush_r+0x8a>
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7ff fa9b 	bl	800828c <_free_r>
 8008d56:	2300      	movs	r3, #0
 8008d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d5a:	e00d      	b.n	8008d78 <__sflush_r+0xac>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b0      	blx	r6
 8008d62:	4602      	mov	r2, r0
 8008d64:	1c50      	adds	r0, r2, #1
 8008d66:	d1c9      	bne.n	8008cfc <__sflush_r+0x30>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0c6      	beq.n	8008cfc <__sflush_r+0x30>
 8008d6e:	2b1d      	cmp	r3, #29
 8008d70:	d001      	beq.n	8008d76 <__sflush_r+0xaa>
 8008d72:	2b16      	cmp	r3, #22
 8008d74:	d11d      	bne.n	8008db2 <__sflush_r+0xe6>
 8008d76:	602f      	str	r7, [r5, #0]
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e021      	b.n	8008dc0 <__sflush_r+0xf4>
 8008d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d80:	b21b      	sxth	r3, r3
 8008d82:	e01a      	b.n	8008dba <__sflush_r+0xee>
 8008d84:	690f      	ldr	r7, [r1, #16]
 8008d86:	2f00      	cmp	r7, #0
 8008d88:	d0f6      	beq.n	8008d78 <__sflush_r+0xac>
 8008d8a:	0793      	lsls	r3, r2, #30
 8008d8c:	bf18      	it	ne
 8008d8e:	2300      	movne	r3, #0
 8008d90:	680e      	ldr	r6, [r1, #0]
 8008d92:	bf08      	it	eq
 8008d94:	694b      	ldreq	r3, [r1, #20]
 8008d96:	1bf6      	subs	r6, r6, r7
 8008d98:	600f      	str	r7, [r1, #0]
 8008d9a:	608b      	str	r3, [r1, #8]
 8008d9c:	2e00      	cmp	r6, #0
 8008d9e:	ddeb      	ble.n	8008d78 <__sflush_r+0xac>
 8008da0:	4633      	mov	r3, r6
 8008da2:	463a      	mov	r2, r7
 8008da4:	4628      	mov	r0, r5
 8008da6:	6a21      	ldr	r1, [r4, #32]
 8008da8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008dac:	47e0      	blx	ip
 8008dae:	2800      	cmp	r0, #0
 8008db0:	dc07      	bgt.n	8008dc2 <__sflush_r+0xf6>
 8008db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbe:	81a3      	strh	r3, [r4, #12]
 8008dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc2:	4407      	add	r7, r0
 8008dc4:	1a36      	subs	r6, r6, r0
 8008dc6:	e7e9      	b.n	8008d9c <__sflush_r+0xd0>
 8008dc8:	dfbffffe 	.word	0xdfbffffe

08008dcc <_fflush_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	690b      	ldr	r3, [r1, #16]
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b913      	cbnz	r3, 8008ddc <_fflush_r+0x10>
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	4628      	mov	r0, r5
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	b118      	cbz	r0, 8008de6 <_fflush_r+0x1a>
 8008dde:	6a03      	ldr	r3, [r0, #32]
 8008de0:	b90b      	cbnz	r3, 8008de6 <_fflush_r+0x1a>
 8008de2:	f7fe fff1 	bl	8007dc8 <__sinit>
 8008de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f3      	beq.n	8008dd6 <_fflush_r+0xa>
 8008dee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008df0:	07d0      	lsls	r0, r2, #31
 8008df2:	d404      	bmi.n	8008dfe <_fflush_r+0x32>
 8008df4:	0599      	lsls	r1, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_fflush_r+0x32>
 8008df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dfa:	f7ff fa2e 	bl	800825a <__retarget_lock_acquire_recursive>
 8008dfe:	4628      	mov	r0, r5
 8008e00:	4621      	mov	r1, r4
 8008e02:	f7ff ff63 	bl	8008ccc <__sflush_r>
 8008e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e08:	4605      	mov	r5, r0
 8008e0a:	07da      	lsls	r2, r3, #31
 8008e0c:	d4e4      	bmi.n	8008dd8 <_fflush_r+0xc>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	059b      	lsls	r3, r3, #22
 8008e12:	d4e1      	bmi.n	8008dd8 <_fflush_r+0xc>
 8008e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e16:	f7ff fa21 	bl	800825c <__retarget_lock_release_recursive>
 8008e1a:	e7dd      	b.n	8008dd8 <_fflush_r+0xc>

08008e1c <__swhatbuf_r>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	460c      	mov	r4, r1
 8008e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e24:	4615      	mov	r5, r2
 8008e26:	2900      	cmp	r1, #0
 8008e28:	461e      	mov	r6, r3
 8008e2a:	b096      	sub	sp, #88	@ 0x58
 8008e2c:	da0c      	bge.n	8008e48 <__swhatbuf_r+0x2c>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	2100      	movs	r1, #0
 8008e32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e36:	bf14      	ite	ne
 8008e38:	2340      	movne	r3, #64	@ 0x40
 8008e3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e3e:	2000      	movs	r0, #0
 8008e40:	6031      	str	r1, [r6, #0]
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	b016      	add	sp, #88	@ 0x58
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
 8008e48:	466a      	mov	r2, sp
 8008e4a:	f000 f863 	bl	8008f14 <_fstat_r>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	dbed      	blt.n	8008e2e <__swhatbuf_r+0x12>
 8008e52:	9901      	ldr	r1, [sp, #4]
 8008e54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e5c:	4259      	negs	r1, r3
 8008e5e:	4159      	adcs	r1, r3
 8008e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e64:	e7eb      	b.n	8008e3e <__swhatbuf_r+0x22>

08008e66 <__smakebuf_r>:
 8008e66:	898b      	ldrh	r3, [r1, #12]
 8008e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e6a:	079d      	lsls	r5, r3, #30
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	d507      	bpl.n	8008e82 <__smakebuf_r+0x1c>
 8008e72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	6123      	str	r3, [r4, #16]
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	6163      	str	r3, [r4, #20]
 8008e7e:	b003      	add	sp, #12
 8008e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e82:	466a      	mov	r2, sp
 8008e84:	ab01      	add	r3, sp, #4
 8008e86:	f7ff ffc9 	bl	8008e1c <__swhatbuf_r>
 8008e8a:	9f00      	ldr	r7, [sp, #0]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	4639      	mov	r1, r7
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7ff fa65 	bl	8008360 <_malloc_r>
 8008e96:	b948      	cbnz	r0, 8008eac <__smakebuf_r+0x46>
 8008e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9c:	059a      	lsls	r2, r3, #22
 8008e9e:	d4ee      	bmi.n	8008e7e <__smakebuf_r+0x18>
 8008ea0:	f023 0303 	bic.w	r3, r3, #3
 8008ea4:	f043 0302 	orr.w	r3, r3, #2
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	e7e2      	b.n	8008e72 <__smakebuf_r+0xc>
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	9b01      	ldr	r3, [sp, #4]
 8008eba:	6020      	str	r0, [r4, #0]
 8008ebc:	b15b      	cbz	r3, 8008ed6 <__smakebuf_r+0x70>
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec4:	f000 f838 	bl	8008f38 <_isatty_r>
 8008ec8:	b128      	cbz	r0, 8008ed6 <__smakebuf_r+0x70>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	f043 0301 	orr.w	r3, r3, #1
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	431d      	orrs	r5, r3
 8008eda:	81a5      	strh	r5, [r4, #12]
 8008edc:	e7cf      	b.n	8008e7e <__smakebuf_r+0x18>

08008ede <memmove>:
 8008ede:	4288      	cmp	r0, r1
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	eb01 0402 	add.w	r4, r1, r2
 8008ee6:	d902      	bls.n	8008eee <memmove+0x10>
 8008ee8:	4284      	cmp	r4, r0
 8008eea:	4623      	mov	r3, r4
 8008eec:	d807      	bhi.n	8008efe <memmove+0x20>
 8008eee:	1e43      	subs	r3, r0, #1
 8008ef0:	42a1      	cmp	r1, r4
 8008ef2:	d008      	beq.n	8008f06 <memmove+0x28>
 8008ef4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008efc:	e7f8      	b.n	8008ef0 <memmove+0x12>
 8008efe:	4601      	mov	r1, r0
 8008f00:	4402      	add	r2, r0
 8008f02:	428a      	cmp	r2, r1
 8008f04:	d100      	bne.n	8008f08 <memmove+0x2a>
 8008f06:	bd10      	pop	{r4, pc}
 8008f08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f10:	e7f7      	b.n	8008f02 <memmove+0x24>
	...

08008f14 <_fstat_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	2300      	movs	r3, #0
 8008f18:	4d06      	ldr	r5, [pc, #24]	@ (8008f34 <_fstat_r+0x20>)
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	4611      	mov	r1, r2
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	f7f7 fdf9 	bl	8000b18 <_fstat>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d102      	bne.n	8008f30 <_fstat_r+0x1c>
 8008f2a:	682b      	ldr	r3, [r5, #0]
 8008f2c:	b103      	cbz	r3, 8008f30 <_fstat_r+0x1c>
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	bd38      	pop	{r3, r4, r5, pc}
 8008f32:	bf00      	nop
 8008f34:	20001388 	.word	0x20001388

08008f38 <_isatty_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4d05      	ldr	r5, [pc, #20]	@ (8008f54 <_isatty_r+0x1c>)
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7f7 fdf7 	bl	8000b36 <_isatty>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_isatty_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_isatty_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20001388 	.word	0x20001388

08008f58 <_sbrk_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4d05      	ldr	r5, [pc, #20]	@ (8008f74 <_sbrk_r+0x1c>)
 8008f5e:	4604      	mov	r4, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	f7f7 fdfe 	bl	8000b64 <_sbrk>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_sbrk_r+0x1a>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_sbrk_r+0x1a>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20001388 	.word	0x20001388

08008f78 <memchr>:
 8008f78:	4603      	mov	r3, r0
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	b2c9      	uxtb	r1, r1
 8008f7e:	4402      	add	r2, r0
 8008f80:	4293      	cmp	r3, r2
 8008f82:	4618      	mov	r0, r3
 8008f84:	d101      	bne.n	8008f8a <memchr+0x12>
 8008f86:	2000      	movs	r0, #0
 8008f88:	e003      	b.n	8008f92 <memchr+0x1a>
 8008f8a:	7804      	ldrb	r4, [r0, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	428c      	cmp	r4, r1
 8008f90:	d1f6      	bne.n	8008f80 <memchr+0x8>
 8008f92:	bd10      	pop	{r4, pc}

08008f94 <_realloc_r>:
 8008f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f98:	4680      	mov	r8, r0
 8008f9a:	4615      	mov	r5, r2
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	b921      	cbnz	r1, 8008faa <_realloc_r+0x16>
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa6:	f7ff b9db 	b.w	8008360 <_malloc_r>
 8008faa:	b92a      	cbnz	r2, 8008fb8 <_realloc_r+0x24>
 8008fac:	f7ff f96e 	bl	800828c <_free_r>
 8008fb0:	2400      	movs	r4, #0
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb8:	f000 f81a 	bl	8008ff0 <_malloc_usable_size_r>
 8008fbc:	4285      	cmp	r5, r0
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	d802      	bhi.n	8008fc8 <_realloc_r+0x34>
 8008fc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fc6:	d8f4      	bhi.n	8008fb2 <_realloc_r+0x1e>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4640      	mov	r0, r8
 8008fcc:	f7ff f9c8 	bl	8008360 <_malloc_r>
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d0ec      	beq.n	8008fb0 <_realloc_r+0x1c>
 8008fd6:	42b5      	cmp	r5, r6
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4621      	mov	r1, r4
 8008fdc:	bf28      	it	cs
 8008fde:	4632      	movcs	r2, r6
 8008fe0:	f7ff f945 	bl	800826e <memcpy>
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	f7ff f950 	bl	800828c <_free_r>
 8008fec:	463c      	mov	r4, r7
 8008fee:	e7e0      	b.n	8008fb2 <_realloc_r+0x1e>

08008ff0 <_malloc_usable_size_r>:
 8008ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ff4:	1f18      	subs	r0, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfbc      	itt	lt
 8008ffa:	580b      	ldrlt	r3, [r1, r0]
 8008ffc:	18c0      	addlt	r0, r0, r3
 8008ffe:	4770      	bx	lr

08009000 <_init>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr

0800900c <_fini>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr
